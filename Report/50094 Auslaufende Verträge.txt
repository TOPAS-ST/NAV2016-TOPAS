OBJECT Report 50094 Auslaufende Vertr„ge
{
  OBJECT-PROPERTIES
  {
    Date=09.08.18;
    Time=14:06:26;
    Modified=Yes;
    Version List=FORNAV3.1.0.1460/1460;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav := ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  //Startdatum eigentlich nicht ben”tigt
                  //EVALUATE(filter_startdatum,Wartungsvertrag.GETFILTER(Startdatum));
                  //EVALUATE(filter_ablaufdatum,Wartungsvertrag.GETFILTER(Vertragsablaufdatum));

                  IF Auswahl = Auswahl::ausgelaufene THEN BEGIN
                    EVALUATE(ablaufdatum_ab,FORMAT(CALCDATE('-3M' + '-' + FORMAT(DATE2DMY(WORKDATE, 1)-1) + 'T',WORKDATE)));
                    ablaufdatum_bis := WORKDATE;
                    vertraege_abgelaufen := TRUE;
                  END ELSE BEGIN
                    //letzten 3 Monate
                    EVALUATE(ablaufdatum_ab,FORMAT(CALCDATE('2M' + '-' + FORMAT(DATE2DMY(WORKDATE, 1)-1) + 'T',WORKDATE)));
                    EVALUATE(ablaufdatum_bis,FORMAT(CALCDATE('4M' + '-' + FORMAT(DATE2DMY(WORKDATE, 1)) + 'T',WORKDATE)));
                    vertraege_abgelaufen := FALSE;
                  END;

                  {
                  EVALUATE(monat_ablaufdatum_ab,COPYSTR(filter_ablaufdatum,4,2));
                  EVALUATE(vertragsablaufdatum_ab,COPYSTR(filter_ablaufdatum,1,8));
                  jahr_ablaufdatum_ab := DATE2DMY(vertragsablaufdatum_ab,3);
                  IF vertragsablaufdatum_ab < WORKDATE THEN
                    vertraege_abgelaufen := TRUE
                  ELSE
                    vertraege_abgelaufen := FALSE;
                  }

                  filter := Wartungsvertrag.GETFILTERS;
                  //IF PrintToExcel THEN
                    ExcelKopf;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   IF vertraege_abgelaufen = TRUE THEN
                     Sheet.Range('A2').Value := 'Gesamt ausgelaufene Vertr„ge:'
                   ELSE
                     Sheet.Range('A2').Value := 'Gesamt auslaufende Vertr„ge:';
                   Sheet.Range('C2').Value := FORMAT(Wartungsvertrag.COUNT);
                   Sheet.Range('C2').Font.Color := 255;
                   Book.Save;
                   Book.Close;

                   IF vertraege_abgelaufen = TRUE THEN BEGIN
                     mail_subject := 'Monatsjob Navision - ausgelaufene Wartungsvertraege';
                     mail_body := 'Automatisch von Navision generiert - anbei eine Uebersicht der ausgelaufenen Wartungsvertraege." & chr(10) & "Zeitraum: ' + Wartungsvertrag.GETFILTER(Vertragsablaufdatum);
                   END ELSE BEGIN
                     mail_subject := 'Monatsjob Navision - demnaechst auslaufende Wartungsvertraege';
                     mail_body := 'Automatisch von Navision generiert - anbei eine Uebersicht der demnaechst auslaufenden Wartungsvertraege." & chr(10) & "Zeitraum: ' + Wartungsvertrag.GETFILTER(Vertragsablaufdatum);
                   END;

                   IF TOPAS_API.SendMailWithFile('Administrativ','','Administrativ@topas.de','ml@topas.de;tk@topas.de;rl@topas.de',mail_subject,mail_body,FilePath + FileName) = TRUE THEN
                   //Fr Testzwecke
                   //IF TOPAS_API.SendMailWithFile('Administrativ','','Administrativ@topas.de','ml@topas.de',mail_subject,mail_body,FilePath + FileName) = TRUE THEN
                     MESSAGE('50094 Versand abgeschlossen');

                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table50011;
               DataItemTableView=SORTING(Debitornr.,Vertragsablaufdatum,Wartungsvertragsnr.)
                                 WHERE(Status=FILTER(Auftrag|ACTS|ACHAT|Champs Partner));
               OnPreDataItem=BEGIN
                               Wartungsvertrag.SETFILTER(Vertragsablaufdatum,'%1..%2',ablaufdatum_ab,ablaufdatum_bis);
                               //Manuellen Filter zum Testen hier setzen
                               //Wartungsvertrag.SETFILTER(Vertragsablaufdatum,'%1..%2',010716D,WORKDATE);
                             END;

               OnAfterGetRecord=BEGIN
                                  Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(Wartungsvertrag.TABLENAME,1,50015,
                                                              Wartungsvertrag."Wartungsvertragsnr.");
                                  Sheet.Range('B'+j).Value := Wartungsvertrag."Auftragsnr. Service";
                                  Sheet.Range('C'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(Debitor.TABLENAME,1,21,Wartungsvertrag."Debitornr.");
                                  Sheet.Range('D'+j).Value := Wartungsvertrag.Debitorname;
                                  Sheet.Range('E'+j).Value := FORMAT(Wartungsvertrag.Startdatum);
                                  Sheet.Range('F'+j).Value := FORMAT(Wartungsvertrag.Vertragsablaufdatum);
                                  Sheet.Range('F'+j).Font.Color := 255;
                                  Sheet.Range('G'+j).Value := Wartungsvertrag.Endkunde;
                                  SystemPos.RESET;
                                  SystemPos.SETRANGE(Art,SystemPos.Art::System);
                                  SystemPos.SETRANGE(Inaktiv,FALSE);
                                  SystemPos.SETRANGE("Wartungsvertragsnr.","Wartungsvertragsnr.");
                                  SystemPos.SETRANGE("Artikelnr.",Basisger„t);
                                  SystemPos.SETRANGE(Basisger„t,TRUE);
                                  IF SystemPos.FINDLAST THEN BEGIN
                                    Sheet.Range('H'+j).Value := SystemPos."Artikelnr. 2";
                                    Sheet.Range('I'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(SystemPos.TABLENAME,1,50096,SystemPos."Seriennr.");
                                    Sheet.Range('J'+j).Value := SystemPos."Board ini";
                                    Sheet.Range('K'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(Lieferschein.TABLENAME,1,130,SystemPos."Nr.");
                                  END;
                                  IF Debitor.GET( Wartungsvertrag."Debitornr.") THEN
                                    Sheet.Range('L'+j).Value := Debitor."Betreuer Innendienst";
                                  AN_liegt_vor := FALSE;
                                  v_datum := 0D;
                                  v_belegnr := '';
                                  ServicePos.RESET;
                                  ServicePos.ASCENDING(FALSE);
                                  ServicePos.SETRANGE("Wartungsvertragsnr.",Wartungsvertrag."Wartungsvertragsnr.");
                                  ServicePos.SETRANGE(Art,ServicePos.Art :: Service);
                                  ServicePos.SETRANGE(Basisger„t,TRUE);
                                  //ServicePos.SETRANGE(Inaktiv,FALSE);
                                  IF ServicePos.FINDFIRST THEN BEGIN
                                    ServiceZuordnung.RESET;
                                    ServiceZuordnung.SETRANGE("Belegnr.",ServicePos."Urspr. Lieferscheinnr.");
                                    ServiceZuordnung.SETRANGE("Belegzeilennr.",ServicePos."Urspr. Lieferscheinzeilennr.");
                                    IF ServiceZuordnung.FINDFIRST THEN
                                      REPEAT
                                        SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type" :: Quote);
                                        SalesHeader.SETRANGE("No.",ServiceZuordnung."Nr.");
                                        IF SalesHeader.FINDFIRST THEN
                                          IF CALCDATE('-3M',WORKDATE) < SalesHeader."Document Date" THEN BEGIN
                                            AN_liegt_vor := TRUE;
                                            v_datum := SalesHeader."Document Date";
                                            v_belegnr := SalesHeader."No.";
                                          END;
                                        ArchSalesHeader.SETRANGE("Document Type",ArchSalesHeader."Document Type"::Quote);
                                        ArchSalesHeader.SETRANGE("No.",ServiceZuordnung."Nr.");
                                        IF ArchSalesHeader.FINDLAST THEN
                                          IF CALCDATE('-3M',WORKDATE) < ArchSalesHeader."Document Date" THEN BEGIN
                                            AN_liegt_vor := TRUE;
                                            v_datum := ArchSalesHeader."Document Date";
                                            v_belegnr := ArchSalesHeader."No.";
                                          END;
                                      UNTIL (ServiceZuordnung.NEXT = 0) OR (AN_liegt_vor);
                                  END;
                                  IF AN_liegt_vor THEN BEGIN
                                    Sheet.Range('M'+j).Value := 'Ja';
                                    Sheet.Range('N'+j).Value := v_belegnr + ' (' + FORMAT(v_datum) + ')';
                                  END ELSE
                                    Sheet.Range('M'+j).Value := 'Nein';
                                  Sheet.Range('O'+j).Value := Wartungsvertrag.Inaktiv;
                                  j := INCSTR(j);
                                END;

               ReqFilterFields=Vertragsablaufdatum,Inaktiv,Debitornr. }

    { 2   ;1   ;Column  ;WartungsvertragFIELDCAPTION_Auftragsnr;
               SourceExpr=Wartungsvertrag.FIELDCAPTION("Auftragsnr.") }

    { 3   ;1   ;Column  ;WartungsvertragFIELDCAPTION_Wartungsvertragsnr;
               SourceExpr=Wartungsvertrag.FIELDCAPTION("Wartungsvertragsnr.") }

    { 4   ;1   ;Column  ;Debitornr_Wartungsvertrag;
               SourceExpr="Debitornr." }

    { 5   ;1   ;Column  ;Debitorname_Wartungsvertrag;
               SourceExpr=Debitorname;
               AutoCalcField=Yes }

    { 6   ;1   ;Column  ;Vertragsablaufdatum_Wartungsvertrag;
               SourceExpr=Vertragsablaufdatum }

    { 7   ;1   ;Column  ;Startdatum_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Startdatum) }

    { 8   ;1   ;Column  ;Startdatum_Wartungsvertrag;
               SourceExpr=Startdatum }

    { 9   ;1   ;Column  ;Status_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Status) }

    { 10  ;1   ;Column  ;Status_Wartungsvertrag;
               SourceExpr=Status }

    { 11  ;1   ;Column  ;Endkunde_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Endkunde) }

    { 12  ;1   ;Column  ;Endkunde_Wartungsvertrag;
               SourceExpr=Endkunde }

    { 13  ;1   ;Column  ;Auftragsnr_Wartungsvertrag;
               SourceExpr="Auftragsnr." }

    { 14  ;1   ;Column  ;Wartungsvertragsnr_Wartungsvertrag;
               SourceExpr="Wartungsvertragsnr." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1000000000;2;Field  ;
                  Name=Auswahl;
                  CaptionML=DEU=Art des Berichts;
                  SourceExpr=Auswahl }

      { 1140001;2;Field     ;
                  Name=PrintToExcel;
                  CaptionML=DEU=Export nach Excel;
                  SourceExpr=PrintToExcel }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TOPAS_API@1140019 : Codeunit 50001;
      Excel@1140017 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      Book@1140016 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      Range@1140015 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      Sheet@1140014 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      j@1140013 : Text[30];
      PrintToExcel@1140012 : Boolean;
      TempWartungsvertrag@1140003 : Record 50011;
      lieferscheinzeile@1140000 : Record 111;
      Debitor@1140024 : Record 18;
      ServiceZuordnung@1140027 : Record 50027;
      SalesHeader@1140028 : Record 36;
      ArchSalesHeader@1140029 : Record 5107;
      artikel2@1140001 : Code[60];
      endkundezeile@1140002 : Text[80];
      filter_startdatum@1140004 : Text[30];
      filter_ablaufdatum@1140005 : Date;
      filter@1140006 : Text[180];
      Lieferschein@1140007 : Record 110;
      "ext-referenz"@1140008 : Text[80];
      "show_ext-referenz"@1140009 : Boolean;
      FileName@1140018 : Text[250];
      FilePath@1000000001 : Text[250];
      SystemPos@1140010 : Record 50024;
      ServicePos@1140026 : Record 50024;
      board_ini@1140011 : Code[20];
      monat_ablaufdatum_ab@1140020 : Integer;
      jahr_ablaufdatum_ab@1140022 : Integer;
      vertragsablaufdatum_ab@1140023 : Date;
      ablaufdatum_ab@1000000003 : Date;
      ablaufdatum_bis@1000000004 : Date;
      vertraege_abgelaufen@1140021 : Boolean;
      mail_subject@1000000005 : Text;
      mail_body@1000000006 : Text;
      Auswahl@1000000002 : 'auslaufende,ausgelaufene';
      AN_liegt_vor@1140025 : Boolean;
      v_datum@1140030 : Date;
      v_belegnr@1140031 : Code[20];
      FileMgt@1000000000 : Codeunit 419;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    PROCEDURE ExcelKopf@1140002();
    BEGIN
      IF vertraege_abgelaufen = TRUE THEN
        FileName := 'Ausgelaufene Wartungsvertraege - Uebersicht.xlsx'
      ELSE
        FileName := 'Auslaufende Wartungsvertraege - Uebersicht.xlsx';
      FilePath := 'F:\Daten NEU\Gemeinsame Ordner\Navision\EMailVersand\';
      //********************************************************************************************
      //                               Definiert die Protokolldatei
      //********************************************************************************************
      IF ISCLEAR(Excel) THEN
        IF CREATE (Excel,FALSE,TRUE) THEN BEGIN END ELSE ERROR('Cannot start Excel Application.');
      Excel.Visible(FALSE);
      Book := Excel.Workbooks.Add(-4167);                // legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                        // definiert aktives worksheet
      Sheet.StandardWidth := 16;
      Sheet.Range('D:D').ColumnWidth := 30;
      // definiert die beschriftung der berschriftszeile
      j := '5';                                                    // <- Export in excel ab Zeile 2
      IF vertraege_abgelaufen = TRUE THEN
        Sheet.Range('A1').Value := 'Ausgelaufene Vertr„ge im Zeitraum:'
      ELSE
        Sheet.Range('A1').Value := 'Auslaufende Vertr„ge im Zeitraum:';
      Sheet.Range('C1').Value := FORMAT(ablaufdatum_ab) + '..' + FORMAT(ablaufdatum_bis);
      Sheet.Range('C1').Font.Color := 255;
      Sheet.Range('A1:C2').Font.Bold := TRUE;
      Sheet.Range('A4').Value := 'Vertragsnr.';
      Sheet.Range('B4').Value := 'Auftragsnr.';
      Sheet.Range('C4').Value := 'Debitornr.';
      Sheet.Range('D4').Value := 'Debitorname';
      Sheet.Range('E4').Value := 'Startdatum';
      Sheet.Range('F4').Value := 'Ablaufdatum';
      Sheet.Range('G4').Value := 'Endkunde';
      Sheet.Range('H4').Value := 'Artikelnr';
      Sheet.Range('I4').Value := 'SN Chassis';
      Sheet.Range('J4').Value := 'Board ini';
      Sheet.Range('K4').Value := 'Lieferscheinnr. Chassis';
      Sheet.Range('L4').Value := 'Betreuer Innendienst';
      Sheet.Range('M4').Value := 'Angebot letzte 3 Monate';
      Sheet.Range('N4').Value := 'Angebotsnr.';
      Sheet.Range('O4').Value := 'Inaktiv';
      Sheet.Range('A4:O4').Font.Bold := TRUE;
      IF FileMgt.ClientFileExists(FilePath + FileName) THEN FileMgt.DeleteClientFile(FilePath + FileName);
      IF FileMgt.ClientDirectoryExists(FilePath) = FALSE THEN FileMgt.CreateClientDirectory(FilePath);
      Book.SaveAs(FilePath + FileName,51,'','',FALSE,FALSE);
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT Sheet@1140014::SelectionChange@1543(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Sheet@1140014::BeforeDoubleClick@1537(Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1140014::BeforeRightClick@1534(Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1140014::Activate@304();
    BEGIN
    END;

    EVENT Sheet@1140014::Deactivate@1530();
    BEGIN
    END;

    EVENT Sheet@1140014::Calculate@279();
    BEGIN
    END;

    EVENT Sheet@1140014::Change@1545(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Sheet@1140014::FollowHyperlink@1470(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Hyperlink");
    BEGIN
    END;

    EVENT Book@1140016::Open@1923();
    BEGIN
    END;

    EVENT Book@1140016::Activate@304();
    BEGIN
    END;

    EVENT Book@1140016::Deactivate@1530();
    BEGIN
    END;

    EVENT Book@1140016::BeforeClose@1546(VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140016::BeforeSave@1547(SaveAsUI@1140001 : Boolean;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140016::BeforePrint@1549(VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140016::NewSheet@1550(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1140016::AddinInstall@1552();
    BEGIN
    END;

    EVENT Book@1140016::AddinUninstall@1553();
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

