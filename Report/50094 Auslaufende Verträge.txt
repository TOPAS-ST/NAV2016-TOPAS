OBJECT Report 50094 Auslaufende Vertr„ge
{
  OBJECT-PROPERTIES
  {
    Date=22.12.21;
    Time=16:48:02;
    Modified=Yes;
    Version List=- mtl. Job,FORNAV6.1.0.2168/2168;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  IF Auswahl = Auswahl::ausgelaufene THEN BEGIN
                    EVALUATE(ablaufdatum_ab,FORMAT(CALCDATE('-3M' + '-' + FORMAT(DATE2DMY(WORKDATE, 1)-1) + 'T',WORKDATE)));
                    ablaufdatum_bis := WORKDATE;
                    vertraege_abgelaufen := TRUE;
                  END ELSE BEGIN
                    //letzten 3 Monate
                    EVALUATE(ablaufdatum_ab,FORMAT(CALCDATE('2M' + '-' + FORMAT(DATE2DMY(WORKDATE, 1)-1) + 'T',WORKDATE)));
                    EVALUATE(ablaufdatum_bis,FORMAT(CALCDATE('4M' + '-' + FORMAT(DATE2DMY(WORKDATE, 1)) + 'T',WORKDATE)));
                    vertraege_abgelaufen := FALSE;
                  END;

                  ExcelHeader;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   IF vertraege_abgelaufen = TRUE THEN
                     EnterCell(2,1,'Gesamt ausgelaufene Vertr„ge:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text)
                   ELSE
                     EnterCell(2,1,'Gesamt auslaufende Vertr„ge:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                   EnterCell(2,3,FORMAT(Wartungsvertrag.COUNT),'',TRUE,FALSE,FALSE,'[red]',TempExcelBuffer."Cell Type"::Number);

                   IF vertraege_abgelaufen = TRUE THEN BEGIN
                     mail_subject := 'Monatsjob Navision - ausgelaufene Wartungsvertraege';
                     mail_body := 'Automatisch von Navision generiert - anbei eine Uebersicht der ausgelaufenen Wartungsvertraege." & chr(10) & "Zeitraum: ' + Wartungsvertrag.GETFILTER(Vertragsablaufdatum);
                   END ELSE BEGIN
                     mail_subject := 'Monatsjob Navision - demnaechst auslaufende Wartungsvertraege';
                     mail_body := 'Automatisch von Navision generiert - anbei eine Uebersicht der demnaechst auslaufenden Wartungsvertraege." & chr(10) & "Zeitraum: ' + Wartungsvertrag.GETFILTER(Vertragsablaufdatum);
                   END;

                   FinishExcel;

                   IF TOPAS_API.SendMailWithFile('Administrativ','','Administrativ@topas.de','ml@topas.de;rl@topas.de;ng@topas.de;if@topas.de',mail_subject,mail_body,FilePath + FileName + ExcelFileExtensionTok) = TRUE THEN

                   //Fr Testzwecke
                   //IF TOPAS_API.SendMailWithFile('Administrativ','','Administrativ@topas.de','Administrativ@topas.de',mail_subject,mail_body,FilePath + FileName + ExcelFileExtensionTok) = TRUE THEN
                     MESSAGE('50094 Versand abgeschlossen');

                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table50011;
               DataItemTableView=SORTING(Debitornr.,Vertragsablaufdatum,Wartungsvertragsnr.)
                                 WHERE(Status=FILTER(Auftrag|ACTS|ACHAT|Champs Partner));
               OnPreDataItem=BEGIN
                               Wartungsvertrag.SETFILTER(Vertragsablaufdatum,'%1..%2',ablaufdatum_ab,ablaufdatum_bis);
                               //Manuellen Filter zum Testen hier setzen
                               //Wartungsvertrag.SETFILTER(Vertragsablaufdatum,'%1..%2',011218D,280219D);
                               TotalRecNo := Wartungsvertrag.COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  ColumnNo := 1;
                                  EnterCell(RowNo,ColumnNo,Wartungsvertrag."Wartungsvertragsnr.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Wartungsvertrag.TABLENAME,1,50015,
                                                           Wartungsvertrag."Wartungsvertragsnr."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,Wartungsvertrag."Auftragsnr. Service",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,Wartungsvertrag."Debitornr.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Debitor.TABLENAME,1,21,Wartungsvertrag."Debitornr."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,Wartungsvertrag.Debitorname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,FORMAT(Wartungsvertrag.Startdatum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,FORMAT(Wartungsvertrag.Vertragsablaufdatum),'',FALSE,FALSE,FALSE,'DD.MM.YYYY[red]',TempExcelBuffer."Cell Type"::Date);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,Wartungsvertrag.Endkunde,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

                                  SystemPos.RESET;
                                  SystemPos.SETRANGE(Art,SystemPos.Art::System);
                                  SystemPos.SETRANGE(Inaktiv,FALSE);
                                  SystemPos.SETRANGE("Wartungsvertragsnr.","Wartungsvertragsnr.");
                                  SystemPos.SETRANGE("Artikelnr.",Basisger„t);
                                  SystemPos.SETRANGE(Basisger„t,TRUE);
                                  IF SystemPos.FINDLAST THEN BEGIN
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,SystemPos."Artikelnr. 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,SystemPos."Seriennr.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(SystemPos.TABLENAME,1,50096,SystemPos."Seriennr."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT(SystemPos."Board ini"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,SystemPos."Nr.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Lieferschein.TABLENAME,1,130,SystemPos."Nr."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                  END ELSE
                                    ColumnNo := ColumnNo + 4;

                                  ColumnNo := ColumnNo + 1;
                                  IF Debitor.GET( Wartungsvertrag."Debitornr.") THEN
                                    EnterCell(RowNo,ColumnNo,Debitor."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

                                  AN_liegt_vor := FALSE;
                                  v_datum := 0D;
                                  v_belegnr := '';
                                  ServicePos.RESET;
                                  ServicePos.ASCENDING(FALSE);
                                  ServicePos.SETRANGE("Wartungsvertragsnr.",Wartungsvertrag."Wartungsvertragsnr.");
                                  ServicePos.SETRANGE(Art,ServicePos.Art :: Service);
                                  ServicePos.SETRANGE(Basisger„t,TRUE);
                                  //ServicePos.SETRANGE(Inaktiv,FALSE);
                                  IF ServicePos.FINDFIRST THEN BEGIN
                                    ServiceZuordnung.RESET;
                                    ServiceZuordnung.SETRANGE("Belegnr.",ServicePos."Urspr. Lieferscheinnr.");
                                    ServiceZuordnung.SETRANGE("Belegzeilennr.",ServicePos."Urspr. Lieferscheinzeilennr.");
                                    IF NOT ServiceZuordnung.FINDFIRST THEN BEGIN
                                      CLEAR(ServiceZuordnung);
                                      ServiceZuordnung.SETRANGE("Belegnr.",ServicePos."Urspr. Auftragsnr.");
                                      ServiceZuordnung.SETRANGE("Belegzeilennr.",ServicePos."Urspr. Auftragszeilennr.");
                                      IF ServiceZuordnung.FINDFIRST THEN ;
                                    END;
                                    REPEAT
                                      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type" :: Quote);
                                      SalesHeader.SETRANGE("No.",ServiceZuordnung."Nr.");
                                      IF SalesHeader.FINDFIRST THEN
                                        IF v_datum < SalesHeader."Document Date" THEN BEGIN
                                          AN_liegt_vor := TRUE;
                                          v_datum := SalesHeader."Document Date";
                                          v_belegnr := SalesHeader."No.";
                                        END;
                                      ArchSalesHeader.SETRANGE("Document Type",ArchSalesHeader."Document Type"::Quote);
                                      ArchSalesHeader.SETRANGE("No.",ServiceZuordnung."Nr.");
                                      IF ArchSalesHeader.FINDLAST THEN
                                        IF v_datum < ArchSalesHeader."Document Date" THEN BEGIN
                                          AN_liegt_vor := TRUE;
                                          v_datum := ArchSalesHeader."Document Date";
                                          v_belegnr := ArchSalesHeader."No.";
                                        END;
                                    UNTIL ServiceZuordnung.NEXT = 0;
                                  END;
                                  ColumnNo := ColumnNo + 1;
                                  IF AN_liegt_vor THEN BEGIN
                                    EnterCell(RowNo,ColumnNo,'Ja','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,v_belegnr + ' (' + FORMAT(v_datum) + ')','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                  END ELSE BEGIN
                                    EnterCell(RowNo,ColumnNo,'Nein','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                  END;
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,FORMAT(Wartungsvertrag.Inaktiv),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

                                  RowNo := RowNo + 1;
                                  RecNo := RecNo + 1;
                                  Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                END;

               ReqFilterFields=Vertragsablaufdatum,Inaktiv,Debitornr. }

    { 2   ;1   ;Column  ;WartungsvertragFIELDCAPTION_Auftragsnr;
               SourceExpr=Wartungsvertrag.FIELDCAPTION("Auftragsnr.") }

    { 3   ;1   ;Column  ;WartungsvertragFIELDCAPTION_Wartungsvertragsnr;
               SourceExpr=Wartungsvertrag.FIELDCAPTION("Wartungsvertragsnr.") }

    { 4   ;1   ;Column  ;Debitornr_Wartungsvertrag;
               SourceExpr="Debitornr." }

    { 5   ;1   ;Column  ;Debitorname_Wartungsvertrag;
               SourceExpr=Debitorname;
               AutoCalcField=Yes }

    { 6   ;1   ;Column  ;Vertragsablaufdatum_Wartungsvertrag;
               SourceExpr=Vertragsablaufdatum }

    { 7   ;1   ;Column  ;Startdatum_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Startdatum) }

    { 8   ;1   ;Column  ;Startdatum_Wartungsvertrag;
               SourceExpr=Startdatum }

    { 9   ;1   ;Column  ;Status_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Status) }

    { 10  ;1   ;Column  ;Status_Wartungsvertrag;
               SourceExpr=Status }

    { 11  ;1   ;Column  ;Endkunde_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Endkunde) }

    { 12  ;1   ;Column  ;Endkunde_Wartungsvertrag;
               SourceExpr=Endkunde }

    { 13  ;1   ;Column  ;Auftragsnr_Wartungsvertrag;
               SourceExpr="Auftragsnr." }

    { 14  ;1   ;Column  ;Wartungsvertragsnr_Wartungsvertrag;
               SourceExpr="Wartungsvertragsnr." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1000000000;2;Field  ;
                  Name=Auswahl;
                  CaptionML=DEU=Art des Berichts;
                  SourceExpr=Auswahl }

      { 1140001;2;Field     ;
                  Name=PrintToExcel;
                  CaptionML=DEU=Export nach Excel;
                  SourceExpr=PrintToExcel }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      SystemPos@1000000009 : Record 50024;
      ServicePos@1000000008 : Record 50024;
      Lieferschein@1000000010 : Record 110;
      TempWartungsvertrag@1000000016 : Record 50011;
      lieferscheinzeile@1000000015 : Record 111;
      Debitor@1000000014 : Record 18;
      ServiceZuordnung@1000000013 : Record 50027;
      SalesHeader@1000000012 : Record 36;
      ArchSalesHeader@1000000011 : Record 5107;
      TempExcelBuffer@1000000007 : TEMPORARY Record 370;
      TOPAS_API@1140019 : Codeunit 50001;
      FileMgt@1000000000 : Codeunit 419;
      ServerFileName@1000000025 : Text;
      SheetName@1000000024 : Text[250];
      DoUpdateExistingWorksheet@1000000023 : Boolean;
      Testmode@1000000022 : Boolean;
      Window@1000000021 : Dialog;
      RecNo@1000000020 : Integer;
      TotalRecNo@1000000019 : Integer;
      RowNo@1000000018 : Integer;
      ColumnNo@1000000017 : Integer;
      PrintToExcel@1140012 : Boolean;
      artikel2@1140001 : Code[60];
      endkundezeile@1140002 : Text[80];
      FileName@1140018 : Text[250];
      FilePath@1000000001 : Text[250];
      board_ini@1140011 : Code[20];
      monat_ablaufdatum_ab@1140020 : Integer;
      jahr_ablaufdatum_ab@1140022 : Integer;
      vertragsablaufdatum_ab@1140023 : Date;
      ablaufdatum_ab@1000000003 : Date;
      ablaufdatum_bis@1000000004 : Date;
      vertraege_abgelaufen@1140021 : Boolean;
      mail_subject@1000000005 : Text;
      mail_body@1000000006 : Text;
      Auswahl@1000000002 : 'auslaufende,ausgelaufene';
      AN_liegt_vor@1140025 : Boolean;
      v_datum@1140030 : Date;
      v_belegnr@1140031 : Code[20];
      Text000@1000000029 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000028 : TextConst 'DEU=Servicevertr„ge';
      Text002@1000000027 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text020@1000000030 : TextConst 'DEU=Vertragsnr.;ENU=Contract No.';
      Text021@1000000031 : TextConst 'DEU=Auftragsnr.;ENU=Order No.';
      Text022@1000000032 : TextConst 'DEU=Debitornr.;ENU=Customer No.';
      Text023@1000000033 : TextConst 'DEU=Debitorname;ENU=Customer Name';
      Text024@1000000034 : TextConst 'DEU=Startdatum;ENU=Start Date';
      Text025@1000000035 : TextConst 'DEU=Ablaufdatum;ENU=End Date';
      Text026@1000000036 : TextConst 'DEU=Endkunde;ENU=End Customer';
      Text027@1000000037 : TextConst 'DEU=Artikelnr.;ENU=Item No.';
      Text028@1000000038 : TextConst 'DEU=SN Chassis;ENU=SN Chassis';
      Text029@1000000039 : TextConst 'DEU=Board ini;ENU=Board ini';
      Text030@1000000040 : TextConst 'DEU=Lieferscheinnr. Chassis;ENU=Shipment No. Chassis';
      Text031@1000000041 : TextConst 'DEU=Betreuer Innendienst;ENU=Salesperson';
      Text032@1000000042 : TextConst 'DEU=Letztes Angebot;ENU=Quotes last 3 Months';
      Text033@1000000043 : TextConst 'DEU=Angebotsnr.;ENU=Quote No.';
      Text034@1000000044 : TextConst 'DEU=Inaktiv;ENU=Inactive';
      ExcelFileExtensionTok@1000000026 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2168, Version=6.1.0.2168, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2168, Version=6.1.0.2168, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2168\ForNav.Reports.6.1.0.2168.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2168\ForNav.Reports.6.1.0.2168.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2168 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    PROCEDURE ExcelHeader@1140002();
    BEGIN
      IF vertraege_abgelaufen = TRUE THEN
        FileName := 'Ausgelaufene Wartungsvertraege - Uebersicht'
      ELSE
        FileName := 'Auslaufende Wartungsvertraege - Uebersicht';
      FilePath := 'F:\Daten NEU\Gemeinsame Ordner\Navision\EMailVersand\';
      //********************************************************************************************
      //                               Definiert die Protokolldatei
      //********************************************************************************************
      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;
      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');
      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);
      //Header
      IF vertraege_abgelaufen = TRUE THEN
        EnterCell(1,1,'Ausgelaufene Vertr„ge im Zeitraum:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text)
      ELSE
        EnterCell(1,1,'Auslaufende Vertr„ge im Zeitraum:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,3,FORMAT(ablaufdatum_ab) + '..' + FORMAT(ablaufdatum_bis),'',TRUE,FALSE,FALSE,'[red]',TempExcelBuffer."Cell Type"::Text);
      RecNo := 0;
      RowNo := 4;
      ColumnNo := 1;
      EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text025,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text026,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text027,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text028,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text029,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text030,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text031,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text032,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text033,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text034,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE FinishExcel@1000000000();
    BEGIN
      Window.CLOSE;
      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN
          TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,Text001);
        TempExcelBuffer.WriteSheet(
          PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
          TempExcelBuffer.SetWidth(1,'A',16);
          TempExcelBuffer.SetWidth(1,'B',16);
          TempExcelBuffer.SetWidth(1,'C',16);
          TempExcelBuffer.SetWidth(1,'D',35);
          TempExcelBuffer.SetWidth(1,'E',16);
          TempExcelBuffer.SetWidth(1,'F',16);
          TempExcelBuffer.SetWidth(1,'G',40);
          TempExcelBuffer.SetWidth(1,'H',30);
          TempExcelBuffer.SetWidth(1,'I',16);
          TempExcelBuffer.SetWidth(1,'K',30);
          TempExcelBuffer.SetWidth(1,'M',30);
          TempExcelBuffer.SetWidth(1,'N',30);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          //TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
          TempExcelBuffer.OpenExcelWithoutAutoFit(Text001,FileName + ExcelFileExtensionTok,FilePath,FALSE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

