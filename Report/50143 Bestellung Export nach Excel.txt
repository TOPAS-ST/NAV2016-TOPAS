OBJECT Report 50143 Bestellung Export nach Excel
{
  OBJECT-PROPERTIES
  {
    Date=26.04.18;
    Time=12:16:55;
    Modified=Yes;
    Version List=Topas Bericht ohne FORNAV;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    UseRequestPage=No;
  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table38;
               OnPreDataItem=BEGIN
                               Firmendaten.GET;
                             END;

               OnAfterGetRecord=VAR
                                  Window@1000 : Dialog;
                                  RecNo@1001 : Integer;
                                  TotalRecNo@1002 : Integer;
                                  RowNo@1003 : Integer;
                                  ColumnNo@1004 : Integer;
                                BEGIN
                                  IF "Purchase Header".GETFILTER("No.") = '' THEN EXIT;

                                  IF DoUpdateExistingWorksheet THEN BEGIN
                                    IF ServerFileName = '' THEN
                                      ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
                                    IF ServerFileName = '' THEN
                                      EXIT;
                                    SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
                                    IF SheetName = '' THEN
                                      EXIT;
                                  END;

                                  Window.OPEN(
                                    Text000 +
                                    '@1@@@@@@@@@@@@@@@@@@@@@\');

                                  TempExcelBuffer.DELETEALL;
                                  CLEAR(TempExcelBuffer);

                                  RecNo := 0;
                                  TotalRecNo := TotalRecNo + 1;
                                  PurchaseOrderNo := "Purchase Header".GETFILTER("No.");

                                  PurchaseHeader.RESET;
                                  PurchaseHeader.SETRANGE("No.",PurchaseOrderNo);
                                  IF PurchaseHeader.FINDFIRST THEN BEGIN
                                    IF Vendor.GET(PurchaseHeader."Buy-from Vendor No.") THEN
                                      CurrReport.LANGUAGE := Language.GetLanguageID(Vendor."Language Code");
                                    TOPAS_Funktionen.GetCompanyInformation(CompanyInfo,Firmendaten);
                                    //Header
                                    RowNo := 1;
                                    EnterCell(RowNo,1,Text001,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                    EnterCell(RowNo,2,PurchaseOrderNo,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                    RowNo := RowNo + 1;
                                    EnterCell(RowNo,1,Text020,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    EnterCell(RowNo,2,PurchaseHeader."Buy-from Vendor Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    RowNo := RowNo + 1;
                                    EnterCell(RowNo,1,Text021,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    EnterCell(RowNo,2,FORMAT(PurchaseHeader."Order Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                    RowNo := RowNo + 2;
                                    PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
                                    IF PurchaseLine.FINDFIRST THEN BEGIN

                                      ColumnNo := 1;
                                      EnterCell(RowNo,ColumnNo,Text030,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text031,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text032,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text033,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text034,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text035,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text036,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text037,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text038,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text039,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

                                      RecNo := RecNo + 1;
                                      Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                      RowNo := RowNo + 1;
                                      ColumnNo := 1;
                                      Total := 0;

                                      REPEAT
                                        //Body
                                        EnterCell(RowNo,ColumnNo,PurchaseLine."Document No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                        ColumnNo += 1;
                                        EnterCell(RowNo,ColumnNo,FORMAT(PurchaseLine."Line No."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                        ColumnNo += 1;
                                        EnterCell(RowNo,ColumnNo,PurchaseLine."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                        ColumnNo += 1;
                                        EnterCell(RowNo,ColumnNo,PurchaseLine.Description,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                        ColumnNo += 1;
                                        EnterCell(RowNo,ColumnNo,PurchaseLine."Description 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                        ColumnNo += 1;
                                        EnterCell(RowNo,ColumnNo,FORMAT(PurchaseLine.Quantity),'',FALSE,FALSE,FALSE,'#,##',TempExcelBuffer."Cell Type"::Number);
                                        ColumnNo += 1;
                                        EnterCell(RowNo,ColumnNo,FORMAT(PurchaseLine."Direct Unit Cost"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                        ColumnNo += 1;
                                        EnterCell(RowNo,ColumnNo,FORMAT(PurchaseLine."Requested Receipt Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                        ColumnNo += 1;
                                        EnterCell(RowNo,ColumnNo,PurchaseLine."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                        ColumnNo += 1;
                                        EnterCell(RowNo,ColumnNo,FORMAT(PurchaseLine.Amount),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                        TotalColumnNo := ColumnNo;
                                        Total += PurchaseLine.Amount;
                                        ColumnNo := 1;
                                        RowNo := RowNo + 1;
                                      UNTIL PurchaseLine.NEXT = 0;

                                      //"Footer"
                                      EnterCell(RowNo,TotalColumnNo-1,Text040,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                      EnterCell(RowNo,TotalColumnNo,FORMAT(Total),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                      RowNo := RowNo + 2;
                                      FormatAddr.PurchHeaderShipTo(ShipToAddr,PurchaseHeader);
                                      IF (ShipToAddr[1] <> '') AND (ShipToAddr[3] = '') THEN BEGIN
                                        ShipToAddr[1] := CompanyInfo[1];
                                        ShipToAddr[2] := CompanyInfo[2];
                                        ShipToAddr[3] := CompanyInfo[4] + ' ' + CompanyInfo[5];
                                        ShipToAddr[4] := 'Germany';
                                        ShipToAddr[5] := '';
                                        ShipToAddr[6] := '';
                                        ShipToAddr[7] := '';
                                        ShipToAddr[8] := '';
                                      END;
                                      EnterCell(RowNo,1,Text050,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      IF PurchaseHeader."Payment Terms Code" <> '' THEN BEGIN
                                        PaymentTerms.GET(PurchaseHeader."Payment Terms Code");
                                        EnterCell(RowNo,2,PaymentTerms.Description,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      END;
                                      RowNo := RowNo + 2;
                                      EnterCell(RowNo,1,Text051,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      RowNo := RowNo + 1;
                                      EnterCell(RowNo,1,Text052,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      RowNo := RowNo + 1;
                                      EnterCell(RowNo,1,Text053,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      RowNo := RowNo + 2;
                                      EnterCell(RowNo,1,Text054,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      EnterCell(RowNo,4,Text055,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      RowNo := RowNo + 1;
                                      EnterCell(RowNo,1,CompanyInfo[1],'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      EnterCell(RowNo,4,ShipToAddr[1],'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      RowNo := RowNo + 1;
                                      EnterCell(RowNo,1,CompanyInfo[2],'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      EnterCell(RowNo,4,ShipToAddr[2],'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      RowNo := RowNo + 1;
                                      EnterCell(RowNo,1,CompanyInfo[4] + ' ' + CompanyInfo[5],'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      EnterCell(RowNo,4,ShipToAddr[3],'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      RowNo := RowNo + 1;
                                      EnterCell(RowNo,1,'Germany','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      EnterCell(RowNo,4,ShipToAddr[4],'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      RowNo := RowNo + 1;
                                      EnterCell(RowNo,4,ShipToAddr[5],'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      RowNo := RowNo + 1;
                                      EnterCell(RowNo,4,ShipToAddr[6],'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      RowNo := RowNo + 1;
                                      EnterCell(RowNo,4,ShipToAddr[7],'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      RowNo := RowNo + 1;
                                      EnterCell(RowNo,4,ShipToAddr[8],'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

                                      RowNo := RowNo + 2;
                                      EnterCell(RowNo,1,Text056,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      IF PurchaseHeader."Shipment Method Code" <> '' THEN BEGIN
                                        ShipmentMethod.GET(PurchaseHeader."Shipment Method Code");
                                        EnterCell(RowNo,4,ShipmentMethod.Description,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      END;

                                    END;
                                  END;
                                  Window.CLOSE;

                                  IF DoUpdateExistingWorksheet THEN BEGIN
                                    TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
                                    TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
                                    TempExcelBuffer.CloseBook;
                                    IF NOT TestMode THEN
                                      TempExcelBuffer.DownloadAndOpenExcel;
                                  END ELSE BEGIN
                                    TempExcelBuffer.CreateBook(ServerFileName,Text001);
                                    TempExcelBuffer.WriteSheet(
                                      PADSTR(STRSUBSTNO('%1 %2',PurchaseOrderNo,Text001),30),COMPANYNAME,USERID);
                                    TempExcelBuffer.SetWidth(1,'A',20);
                                    TempExcelBuffer.SetWidth(1,'C',30);
                                    TempExcelBuffer.SetWidth(1,'D',30);
                                    TempExcelBuffer.SetWidth(1,'E',20);
                                    TempExcelBuffer.SetWidth(1,'H',25);
                                    TempExcelBuffer.SetWidth(1,'I',15);
                                    TempExcelBuffer.CloseBook;
                                    IF NOT TestMode THEN BEGIN
                                      //TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
                                      TempExcelBuffer.OpenExcelWithoutAutoFit(Text001,"Purchase Header"."No." + ExcelFileExtensionTok,NewFileDirectory,TRUE);
                                    END;
                                  END;
                                  IF NOT TestMode THEN
                                    TempExcelBuffer.GiveUserControl;
                                END;

               ReqFilterFields=No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1001 : TextConst 'DEU=Bestellung;ENU=Purchase Order';
      Text002@1002 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      TempExcelBuffer@1006 : TEMPORARY Record 370;
      PurchaseHeader@1000000001 : Record 38;
      PurchaseLine@1000000011 : Record 39;
      PaymentTerms@1000000023 : Record 3;
      ShipmentMethod@1000000024 : Record 10;
      Vendor@1000000014 : Record 23;
      Firmendaten@1000000036 : Record 79;
      Language@1000000015 : Record 8;
      FileMgt@1000000032 : Codeunit 419;
      FormatAddr@1000000026 : Codeunit 365;
      TOPAS_Funktionen@1000000035 : Codeunit 50006;
      CompanyInfo@1000000033 : ARRAY [15] OF Text;
      DateFilter@1036 : Text[30];
      ServerFileName@1050 : Text;
      SheetName@1010 : Text[250];
      Text003@1004 : TextConst 'DEU=Tabellendaten;ENU=Table Data';
      Text004@1044 : TextConst 'DEU=Zeilenansicht;ENU=Show as Lines';
      Text005@1045 : TextConst 'DEU=Spaltenansicht;ENU=Show as Columns';
      Text010@1005 : TextConst 'DEU=%1 darf nicht leer sein.;ENU=%1 must not be blank.';
      Text011@1008 : TextConst 'DEU=Wert anzeigen als;ENU=Show Value as';
      DoUpdateExistingWorksheet@1052 : Boolean;
      Text020@1000000018 : TextConst 'DEU=Eink. von Name;ENU=Buy-from Vendor Name';
      Text021@1000000019 : TextConst 'DEU=Bestelldatum;ENU=Order Date';
      Text030@1000000002 : TextConst 'DEU=Belegnr.;ENU=Order No.';
      Text031@1000000003 : TextConst 'DEU=Pos.;ENU=Pos.';
      Text032@1000000004 : TextConst 'DEU=Artikelnr.;ENU=Item No.';
      Text033@1000000005 : TextConst 'DEU=Beschreibung;ENU=Description';
      Text034@1000000006 : TextConst 'DEU=Beschreibung 2;ENU=Description 2';
      Text035@1000000008 : TextConst 'DEU=Menge;ENU=Quantity';
      Text036@1000000009 : TextConst 'DEU=EK-Preis;ENU=Unit Cost';
      Text037@1000000007 : TextConst 'DEU=Gewnschtes Wareneingangsdatum;ENU=Requested Receipt Date';
      Text038@1000000010 : TextConst 'DEU=W„hrungscode;ENU=Currency Code';
      Text039@1000000012 : TextConst 'DEU=Betrag;ENU=Amount';
      Text040@1000000017 : TextConst 'DEU=Gesamt;ENU=Total';
      Text050@1000000022 : TextConst 'DEU=Zahlungsbedingung;ENU=Terms of Payment';
      Text051@1000000028 : TextConst 'DEU=Please do not ship parts older than 6 months for stock and parts older';
      Text052@1000000029 : TextConst 'DEU=than 12 months for customer orders without written approval from TOPAS!';
      Text053@1000000030 : TextConst 'DEU=Please advise delivery schedule if you don''t ship on time!';
      Text054@1000000021 : TextConst 'DEU=Rechnung an:;ENU=Billt to';
      Text055@1000000020 : TextConst 'DEU=Lieferung an:;ENU=Ship to:';
      Text056@1000000031 : TextConst 'DEU=Please do not put transport insurance on our shipments and use our';
      ExcelFileExtensionTok@1011 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      TestMode@1051 : Boolean;
      PurchaseOrderNo@1000000000 : Code[20];
      Total@1000000013 : Decimal;
      TotalColumnNo@1000000016 : Integer;
      ShipToAddr@1000000025 : ARRAY [8] OF Text[50];
      HintText@1000000027 : ARRAY [4] OF Text;
      NewFileDirectory@1000000034 : TextConst 'DEU=F:\Daten NEU\Gemeinsame Ordner\Customer Service\EMailVersand\';

    LOCAL PROCEDURE EnterFilterInCell@5(RowNo@1000 : Integer;Filter@1001 : Text[250];FieldName@1002 : Text[100]);
    BEGIN
      EnterCell(RowNo,1,FieldName,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,Filter,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    PROCEDURE SetUpdateExistingWorksheet@7(UpdateExistingWorksheet@1000 : Boolean);
    BEGIN
      DoUpdateExistingWorksheet := UpdateExistingWorksheet;
    END;

    BEGIN
    {
      Excel Vorlage aus Report 7132 Export Item Budget to Excel
    }
    END.
  }
  RDLDATA
  {
  }
}

