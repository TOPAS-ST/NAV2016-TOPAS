OBJECT Report 50093 Build to Order
{
  OBJECT-PROPERTIES
  {
    Date=23.11.18;
    Time=14:27:50;
    Modified=Yes;
    Version List=Autom. Job;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  //Statistik Mail fr Administrativ
                  //TOPAS_API.SearchMailsAndCount('Marketing','','unsubscribe','(ueber Navision Report 50093 versendet)');

                  //Die eigentliche Build to Order Search
                  //Test:
                  debug_modus := FALSE;
                  IF debug_modus THEN
                    SearchFolderBuildtoOrder('\\W2K8R2-FILESRV\Doku\DOKU\Audiocodes\Build to Order\Test\')
                  //Produktiv:
                  ELSE
                    SearchFolderBuildtoOrder('\\W2K8R2-FILESRV\Doku\DOKU\Audiocodes\Build to Order\');
                END;

    OnPostReport=BEGIN
                   IF debug_modus = FALSE THEN MESSAGE('50093 Ordner Scan abgeschlossen');
                 END;

    UseRequestPage=No;
  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TOPAS_API@1000000000 : Codeunit 50001;
      debug_modus@1000000001 : Boolean;

    PROCEDURE SearchFolderBuildtoOrder@1140003(Path@1140001 : Text[250]);
    VAR
      Artikel@1140015 : Record 27;
      File@1140000 : Record 2000000022;
      SystemPos@1140016 : Record 50024;
      Lieferschein@1140040 : Record 110;
      SeriennrVerfolgung@1140041 : Record 32;
      FileMgt@1000000000 : Codeunit 419;
      WSH@1140049 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
      Quelle_Excel@1140037 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      Quelle_Book@1140036 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      Quelle_Sheet@1140035 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      Quelle_j@1140034 : Text[7];
      Protokoll_Excel@1140033 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      Protokoll_Book@1140032 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      Protokoll_Sheet@1140031 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      Protokoll_j@1140030 : Text[7];
      Protokoll_j_neu@1000000003 : Text[7];
      Anzahl@1140025 : Decimal;
      Anzahl_text@1140024 : Text[50];
      Board_ini@1140022 : Code[20];
      temp_seriennr@1140017 : Text[50];
      temp_artikelnr@1140021 : Text[50];
      temp_fehler@1140026 : Text[80];
      temp_Spalte_D@1140042 : Text[80];
      Spalte_BoardIni@1140019 : Text[30];
      Spalte_BoardIni_inhalt@1140020 : Text[30];
      Spalte_Artikelnr@1140012 : Text[30];
      Spalte_Seriennr@1140013 : Text[30];
      Spalte@1140011 : ARRAY [10] OF Text[30];
      k@1140009 : Integer;
      t@1140054 : Integer;
      i@1140008 : Integer;
      selection@1140007 : Integer;
      leere_zeilen@1140006 : Integer;
      max_leere_zeilen@1140002 : Integer;
      arbeitsblatt@1140005 : Integer;
      Protokollpfaddatei@1140003 : Text[250];
      excel_datens„tze@1140004 : Integer;
      Max_Datens„tze@1140018 : TextConst 'DEU=3000';
      fehler_in_syntax@1140010 : Boolean;
      Protokoll_Ordner@1140014 : TextConst 'DEU=NAV Protokoll';
      Protokolldateiname@1140023 : TextConst 'DEU=\Protokoll_Import_Boardini_';
      Inhalt_Spalte_F@1140027 : Text[250];
      Letzte_Datei@1140029 : Text[250];
      temp_Protokoll_j@1140038 : Text[7];
      eintrag_fehlt@1140039 : Boolean;
      suchstring@1140043 : Text[80];
      nur_module@1140044 : Boolean;
      schaeffler@1140053 : Boolean;
      keine_board_ini@1000000004 : Boolean;
      set@1140055 : Boolean;
      system_in_excel_gefunden@1140045 : Boolean;
      system_eingetragen@1140052 : Boolean;
      excel_test_seriennr@1140046 : Code[20];
      is_slave@1140047 : Boolean;
      Jahrgang@1140048 : Integer;
      anzahl_systeme_prot@1140050 : Integer;
      anzahl_systeme_quelle@1140051 : Integer;
      anzahl_systeme_set@1140056 : Integer;
      Spalte_Artikelnr_Prot@1000000002 : TextConst 'DEU=A';
      Spalte_Fehler_Prot@1000000001 : TextConst 'DEU=D';
      anzahl_durchlauf_protokoll_zeile@1000000006 : Integer;
      artikelnr_korrektur@1000000005 : Code[20];
      decstr@1000000007 : Integer;
      Spalte_Druchlauf@1000000008 : TextConst 'DEU=H';
    BEGIN
      CLEAR(Quelle_Excel);
      CLEAR(Quelle_Sheet);
      CLEAR(Quelle_Book);
      CLEAR(Protokoll_Excel);

      excel_datens„tze := 0;
      //Jahrgang := 2017;
      Jahrgang := DATE2DMY(TODAY,3);

      Protokollpfaddatei := Path + Protokoll_Ordner + Protokolldateiname + FORMAT(Jahrgang)  + '.xlsx';

      //********************************************************************************************
      //                               Definiert die Protokolldatei
      //********************************************************************************************

      IF ISCLEAR(Protokoll_Excel) THEN
        IF CREATE(Protokoll_Excel,FALSE, TRUE) THEN BEGIN END
          ELSE ERROR('Cannot start Excel Application.');

      IF NOT FileMgt.ClientFileExists(Protokollpfaddatei) THEN BEGIN
        Protokoll_Book := Protokoll_Excel.Workbooks.Add(-4167);                // legt neue datei in excel an
        Protokoll_Sheet := Protokoll_Excel.ActiveSheet;                        // definiert aktives worksheet
        //Performance Test Excel
        Protokoll_Excel.ScreenUpdating := FALSE;
        Protokoll_Excel.DisplayStatusBar := FALSE;
        Protokoll_Excel.EnableEvents := FALSE;
        Protokoll_j := '2';

        Protokoll_Sheet.Range('A1').Value:= 'Artikelnr';                       // šberschriften der 2. Datei
        Protokoll_Sheet.Range('A:A').ColumnWidth := 20;
        Protokoll_Sheet.Range('B1').Value:= 'Seriennr.';
        Protokoll_Sheet.Range('C1').Value:= 'Board ini';
        Protokoll_Sheet.Range('D1').Value:= 'Fehler';
        Protokoll_Sheet.Range('D:D').ColumnWidth := 25;
        Protokoll_Sheet.Range('E1').Value:= 'Status';
        Protokoll_Sheet.Range('F1').Value:= 'Dateiname';
        Protokoll_Sheet.Range('F:F').ColumnWidth := 40;
        Protokoll_Sheet.Range('G1').Value:= 'Bemerkung';
        Protokoll_Book._SaveAs(Protokollpfaddatei,51);
      END ELSE BEGIN
        Protokoll_Book := Protokoll_Excel.Workbooks._Open(Protokollpfaddatei,0,FALSE);
        Protokoll_Sheet := Protokoll_Book.Worksheets.Item(1);
        //excel_datens„tze := Protokoll_Sheet.UsedRange.Rows.Count;
        Protokoll_j := '1';

        //Syntax wird berprft
        Inhalt_Spalte_F := Protokoll_Sheet.Range('F1').Value;
        IF STRPOS(Inhalt_Spalte_F,'Dateiname') = 0 THEN BEGIN
          Protokoll_Book.Close;
          CLEAR(Protokoll_Excel);
          ERROR('Der Export in Zieltabelle %1 wurde abgebrochen aufgrund fehlerhafter Syntax (Spalte F1 = %2 / '+
                'Richtig: Dateiname).',Protokollpfaddatei,Inhalt_Spalte_F);
        END;

        //Bestimmt die Einfge-Zeilennr., damit vorhandene Datens„tze nicht berschrieben werden
        Protokoll_j := FORMAT(Protokoll_Sheet.UsedRange.Rows.Count + 1);

      END;

      //Erstellt einen neuen Ordner fr den Build to Order Jahrgang, ansonsten kommt es zu einem Fehler ff.
      IF ISCLEAR(WSH) THEN
        CREATE(WSH, FALSE, TRUE);
      IF NOT WSH.FolderExists(Path + FORMAT(Jahrgang)) THEN
        WSH.CreateFolder(Path + FORMAT(Jahrgang));

      File.SETRANGE(Path, Path + FORMAT(Jahrgang));
      //File.SETRANGE(Name,'2017_06_23_Telekom_AU237220.xlsx');
      File.SETRANGE("Is a file", TRUE);
      //File.SETRANGE(Name,'*.xls');
      IF File.FINDSET THEN BEGIN

        //********************************************************************************************
        //                               Excel Datei Definitionen
        // *******************************************************************************************

        // Definiert die zu importierende Datei
        IF ISCLEAR(Quelle_Excel) THEN
          IF CREATE (Quelle_Excel,FALSE, TRUE) THEN BEGIN END ELSE ERROR('Cannot start Excel Application.');

        //Performance Test Excel
        IF debug_modus THEN BEGIN
          Quelle_Excel.Visible(TRUE);
        END ELSE BEGIN
          Quelle_Excel.ScreenUpdating := FALSE;
          Quelle_Excel.DisplayStatusBar := FALSE;
          Quelle_Excel.EnableEvents := FALSE;
        END;

        REPEAT

          //neu
          eintrag_fehlt := TRUE;
          IF (FindRow(Protokoll_Sheet,File.Name,'F:F') <> '') OR (File.Name = '')
          OR (STRPOS(File.Name,'~') <> 0) OR (STRPOS(File.Name,'.tmp') <> 0) OR (STRPOS(File.Name,'.zip') <> 0) THEN BEGIN
            eintrag_fehlt := FALSE;
          END;

          //neu
          IF eintrag_fehlt = TRUE THEN BEGIN

            //Fr Tests, wenn Ordner direkt angeben wird
            //Quelle_Book := Quelle_Excel.Workbooks._Open(Path + File.Name,0,TRUE);
            Quelle_Book := Quelle_Excel.Workbooks._Open(Path + FORMAT(Jahrgang) + '\' + File.Name,0,TRUE);

            Quelle_j:='1';

            //********************************************************************************************
            //                                Import der Tabellenbl„tter
            //********************************************************************************************

            arbeitsblatt := 1;
            Quelle_Sheet := Quelle_Book.Worksheets.Item(arbeitsblatt);

            Spalte[1] := 'A';
            Spalte[2] := 'B';
            Spalte[3] := 'C';
            Spalte[4] := 'D';
            Spalte[5] := 'E';
            Spalte[6] := 'F';
            Spalte[7] := 'G';
            Spalte[8] := 'H';
            Spalte[9] := 'I';
            Spalte[10] := 'J';

            Spalte_Artikelnr := '';
            Spalte_BoardIni := '';
            Spalte_Seriennr := '';
            Spalte_BoardIni_inhalt := '';
            Quelle_j := '1';
            leere_zeilen := 0;
            max_leere_zeilen := 30;
            fehler_in_syntax := FALSE;
            keine_board_ini := FALSE;
            nur_module := FALSE;
            schaeffler := FALSE;
            is_slave := FALSE;
            set := FALSE;
            anzahl_systeme_set := 0;

            temp_artikelnr := '';
            temp_seriennr := '';
            temp_fehler := '';
            artikelnr_korrektur := '';
            Board_ini := '';

            REPEAT

              //*********************************************************************************************
              //                                    Spalten bestimmen
              //*********************************************************************************************

              IF Spalte_Artikelnr = '' THEN BEGIN
                FOR k := 1 TO 6 DO BEGIN
                  IF STRLEN(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)) <= 40 THEN BEGIN
                    temp_artikelnr := FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value);
                    //Ausnahme, wenn nur Module in der Excelliste stehen, dann wird der Status auf OK gesetzt
                    IF (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'nur_module') <> 0)
                    OR (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'nur module') <> 0) THEN
                      nur_module := TRUE;
                    //Ausnahme, wenn "schaeffler" in der Excelliste steht, dann wird der Status auf OK gesetzt
                    IF (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'schaeffler') <> 0)
                    OR (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'schaeffler') <> 0) THEN
                      schaeffler := TRUE;
                    IF STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'slave') <> 0 THEN
                      is_slave := TRUE;
                    IF STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'set') <> 0 THEN
                      set := TRUE;
                    //Ausnahme, wenn "keine Board.ini" in der Excelliste steht, dann wird der Status auf OK gesetzt
                    IF (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'keine board.ini') <> 0)
                    OR (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'keine board ini') <> 0)
                    OR (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'keine boardini') <> 0)
                    OR (temp_artikelnr = 'MS-CCE') THEN
                      keine_board_ini := TRUE;

                    //Sonderfall Mediant 2600
                    Artikel.SETFILTER("No. 2",'%1',temp_artikelnr);
                    //Sonderfall Schaeffler
                    IF (NOT Artikel.FINDFIRST) AND (STRLEN(temp_artikelnr) <= 20) THEN BEGIN
                      Artikel.RESET;
                      Artikel.SETFILTER("No.",'%1',temp_artikelnr);
                    END;
                    IF (Artikel.FINDFIRST) AND (Artikel."No." <> '') THEN BEGIN
                      //Damit die Spalte_Artikelnr nicht durch benachbarte Artikelnr. berschrieben wird
                      IF Spalte_Artikelnr = '' THEN
                        Spalte_Artikelnr := Spalte[k];
                      //Kann sein, dass die Seriennr. nicht benachbart steht
                      FOR i:= 1 TO 4 DO BEGIN
                        IF (FORMAT(Quelle_Sheet.Range(Spalte[k + i] + Quelle_j).Value) <> '') AND
                        (STRLEN(FORMAT(Quelle_Sheet.Range(Spalte[k + i] + Quelle_j).Value)) <= 20) THEN BEGIN
                          excel_test_seriennr := FORMAT(Quelle_Sheet.Range(
                          Spalte[k + i] + Quelle_j).Value);   //temp Hilfe
                          SystemPos.RESET;
                          SystemPos.SETFILTER(Art,'%1',SystemPos.Art::System);
                          SystemPos.SETFILTER("Seriennr.",'%1',excel_test_seriennr);
                          IF SystemPos.FINDFIRST THEN
                            Spalte_Seriennr := Spalte[k + i];
                        END;
                      END;
                      //Ansonsten nimm die benachbarte Spalte, damit die Spalte gefllt ist, Fehlermeldung wird dann sp„ter gesetzt
                      IF Spalte_Seriennr = '' THEN
                        IF (STRPOS(FORMAT(Quelle_Sheet.Range(Spalte[k + 1] + Quelle_j).Value),'GTPM') = 0) AND
                           (STRPOS(FORMAT(Quelle_Sheet.Range(Spalte[k + 1] + Quelle_j).Value),'GGWU') = 0) AND
                           (STRPOS(FORMAT(Quelle_Sheet.Range(Spalte[k + 1] + Quelle_j).Value),':') = 0) THEN
                          Spalte_Seriennr := Spalte[k + 1]
                        ELSE
                          Spalte_Seriennr := Spalte[k + 2];
                    END ELSE BEGIN
                      IF Spalte_Seriennr = '' THEN BEGIN
                        //Kann sein, dass die Seriennr. nicht benachbart steht
                        FOR i := 1 TO 4 DO BEGIN
                          IF (FORMAT(Quelle_Sheet.Range(Spalte[k + i] + Quelle_j).Value) <> '') AND
                          (STRLEN(FORMAT(Quelle_Sheet.Range(Spalte[k + i] + Quelle_j).Value)) <= 20) THEN BEGIN
                            excel_test_seriennr := FORMAT(Quelle_Sheet.Range(Spalte[k + i] + Quelle_j).Value);   //temp Hilfe
                            SystemPos.RESET;
                            SystemPos.SETFILTER(Art,'%1',SystemPos.Art::System);
                            SystemPos.SETFILTER("Seriennr.",'%1',excel_test_seriennr);
                            IF SystemPos.FINDFIRST THEN BEGIN
                              Spalte_Seriennr := Spalte[k + i];
                              Spalte_Artikelnr := Spalte[k];
                              artikelnr_korrektur := SystemPos."Artikelnr.";
                            END;
                          END;
                        END;
                      END;
                    END;
                  END;
                END;
              END;

              IF Spalte_BoardIni = '' THEN BEGIN
                FOR k := 1 TO 10 DO BEGIN
                  IF (STRPOS((UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value))),'BOARD') <> 0) OR
                  (STRPOS((UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value))),'BOARD:')  <> 0) THEN BEGIN
                    Spalte_BoardIni := Spalte[k];
                    Spalte_BoardIni_inhalt := Spalte[k+1];
                  END;
                END;
              END;

              IF (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range('A'+Quelle_j).Value)),'set') <> 0) THEN
                anzahl_systeme_set := 0;

              //*********************************************************************************************
              //                                    Inhalt auslesen
              //*********************************************************************************************

              IF (Spalte_Artikelnr <> '') AND (Spalte_Seriennr <> '') THEN BEGIN

                IF STRLEN(FORMAT(Quelle_Sheet.Range(Spalte_Artikelnr+Quelle_j).Value)) <= 40 THEN BEGIN
                  Artikel.RESET;
                  Artikel.SETFILTER("No. 2",'%1',FORMAT(Quelle_Sheet.Range(Spalte_Artikelnr+Quelle_j).Value));
                  //Sonderfall Schaeffler
                  IF (NOT Artikel.FINDFIRST) AND (STRLEN(FORMAT(Quelle_Sheet.Range(Spalte_Artikelnr+Quelle_j).Value)) <= 20) THEN BEGIN
                    Artikel.RESET;
                    Artikel.SETFILTER("No.",'%1',FORMAT(Quelle_Sheet.Range(Spalte_Artikelnr+Quelle_j).Value));
                  END;
                  IF (NOT Artikel.FINDFIRST) AND (STRLEN(artikelnr_korrektur) <= 20) AND (artikelnr_korrektur <> '') THEN BEGIN
                    Artikel.RESET;
                    Artikel.SETFILTER("No.",'%1',artikelnr_korrektur);
                    IF Artikel.FINDFIRST THEN
                      Protokoll_Sheet.Range('J'+Protokoll_j).Value := 'Andere Artikelnr.: ' + artikelnr_korrektur;
                      artikelnr_korrektur := '';
                  END;
                  IF (Artikel.FINDFIRST) AND (Artikel."No." <> '') AND ((Artikel.Serviceklassifizierung = 'SYSTEM CHAMPS')
                  OR (Artikel.Serviceklassifizierung = 'SYSTEM FLAT')) THEN BEGIN
                    IF set THEN
                      anzahl_systeme_set += 1;
                    temp_artikelnr := FORMAT(Quelle_Sheet.Range(Spalte_Artikelnr+Quelle_j).Value);
                    temp_seriennr := FORMAT(Quelle_Sheet.Range(Spalte_Seriennr+Quelle_j).Value);
                    IF (set) AND (anzahl_systeme_set = 1) THEN BEGIN
                      Protokoll_Sheet.Range(Spalte_Artikelnr_Prot+Protokoll_j).Value := temp_artikelnr;
                      Protokoll_Sheet.Range('B'+Protokoll_j).Value := temp_seriennr;
                      Protokoll_Sheet.Range('E'+Protokoll_j).Value := 'Offen';
                      Protokoll_Sheet.Range('F'+Protokoll_j).Value := File.Name;
                      Protokoll_j := INCSTR(Protokoll_j);
                    END;

                    excel_test_seriennr := FORMAT(Quelle_Sheet.Range(Spalte_Seriennr + Quelle_j).Value);
                    SystemPos.RESET;
                    SystemPos.SETFILTER(Art,'%1',SystemPos.Art::System);
                    SystemPos.SETFILTER("Seriennr.",'%1',excel_test_seriennr);
                    IF NOT SystemPos.FINDFIRST THEN BEGIN
                      //Schaut nach, ob dies ein SOR Beleg ist und setzt die Position auf OK, da SOR Auftr„ge keine
                      //Systemvertr„ge werden
                      SeriennrVerfolgung.SETRANGE("Entry Type",SeriennrVerfolgung."Entry Type"::Sale);
                      //Sonderfall Mediant 2600
                      //IF FORMAT(Protokoll_Sheet.Range('A'+Protokoll_j).Value) = 'M2600-11/100/Red/AC' THEN
                      //  SeriennrVerfolgung.SETRANGE("Item No.",'M26-11/100/R/AC')
                      //ELSE
                      //  SeriennrVerfolgung.SETRANGE("Item No.",FORMAT(Protokoll_Sheet.Range('A'+Protokoll_j).Value));
                      SeriennrVerfolgung.SETRANGE("Serial No.",FORMAT(Protokoll_Sheet.Range('B'+Protokoll_j).Value));
                      SeriennrVerfolgung.SETRANGE("Item Tracking",SeriennrVerfolgung."Item Tracking"::"Serial No.");
                      IF SeriennrVerfolgung.FINDLAST THEN BEGIN
                        Lieferschein.SETRANGE("No.",SeriennrVerfolgung."Document No.");
                        IF (Lieferschein.FINDFIRST) AND (STRPOS(Lieferschein."Payment Terms Code",'SOR') <> 0) THEN BEGIN
                          Protokoll_Sheet.Range('E'+Protokoll_j).Value := 'OK';
                          Protokoll_Sheet.Range('G'+Protokoll_j).Value := 'SOR';
                        END ELSE
                          temp_fehler := 'Systempos. noch nicht vorhanden';
                      END ELSE
                        temp_fehler := 'Systempos. noch nicht vorhanden'
                    END;
                  END;
                END;
              END;

              IF (Spalte_BoardIni <> '') AND (temp_artikelnr <> '') THEN BEGIN
                IF (STRPOS((UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte_BoardIni+Quelle_j).Value))),'BOARD') <> 0) OR
                (STRPOS((UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte_BoardIni+Quelle_j).Value))),'BOARD:') <> 0) THEN BEGIN
                  IF (Spalte_Artikelnr = '') OR (Spalte_Seriennr = '') THEN
                    fehler_in_syntax := TRUE;

                  Protokoll_Sheet.Range('A'+Protokoll_j).Value := temp_artikelnr;
                  Protokoll_Sheet.Range('B'+Protokoll_j).Value := temp_seriennr;
                  Protokoll_Sheet.Range('F'+Protokoll_j).Value := File.Name;
                  EVALUATE(Board_ini,DELCHR(FORMAT(Quelle_Sheet.Range(Spalte_BoardIni_inhalt+Quelle_j).Value),'<','D'));
                  Board_ini := DELCHR(Board_ini,'=','.');

                  IF fehler_in_syntax = FALSE THEN BEGIN
                    IF (set) AND (anzahl_systeme_set = 2) THEN BEGIN
                      EVALUATE(decstr,Protokoll_j);
                      Protokoll_j := FORMAT(decstr -1);
                      Protokoll_Sheet.Range('C'+Protokoll_j).Value := FORMAT(Board_ini);
                      temp_seriennr := FORMAT(Protokoll_Sheet.Range('B'+Protokoll_j).Value); //wird so getan als w„re es die SN des Hauptsystems
                      Protokoll_j := INCSTR(Protokoll_j);
                    END;
                    SystemPos.RESET;
                    SystemPos.SETFILTER(Art,'%1',SystemPos.Art::System);
                    SystemPos.SETFILTER(Inaktiv,'%1',FALSE);
                    //Sonderfall Mediant 2600
                    IF temp_artikelnr = 'M2600-11/100/Red/AC' THEN temp_artikelnr := 'M26-11/100/R/AC';
                    //SystemPos.SETFILTER(SystemPos."Artikelnr. 2",'%1',temp_artikelnr);
                    SystemPos.SETFILTER("Seriennr.",'%1',temp_seriennr);
                    IF (SystemPos.FINDLAST) AND (temp_seriennr <> '') THEN BEGIN
                      IF (STRPOS(Board_ini,'X') = 0) THEN BEGIN
                        IF SystemPos."Board ini" <> '' THEN
                          Protokoll_Sheet.Range('G'+Protokoll_j).Value := 'Board ini bereits vorhanden';
                        SystemPos."Board ini" := Board_ini;
                        SystemPos.MODIFY;
                        Protokoll_Sheet.Range('E'+Protokoll_j).Value := 'OK';
                        IF SystemPos.COUNT > 1 THEN
                          Protokoll_Sheet.Range('J'+Protokoll_j).Value := 'SN mehrmals vorhanden ' + FORMAT(SystemPos.COUNT);
                      END ELSE BEGIN
                        Protokoll_Sheet.Range(Spalte_Fehler_Prot+Protokoll_j).Value := 'Board ini unvollst„ndig';
                        Protokoll_Sheet.Range('E'+Protokoll_j).Value := 'Offen';
                      END;
                    END ELSE BEGIN
                      //IF temp_fehler = '' THEN
                      //  Protokoll_Sheet.Range(Spalte_Fehler_Prot+Protokoll_j).Value := 'Artikel lautet anders oder inaktiv';
                      Protokoll_Sheet.Range('E'+Protokoll_j).Value := 'Offen';
                    END;

                    IF Board_ini <> '' THEN
                      Protokoll_Sheet.Range('C'+Protokoll_j).Value := FORMAT(Board_ini)
                    ELSE BEGIN
                      temp_fehler := 'Board ini leer ' + temp_fehler;
                      Protokoll_Sheet.Range(Spalte_Fehler_Prot+Protokoll_j).Value := temp_fehler;
                    END;
                    Protokoll_Sheet.Range(Spalte_Fehler_Prot+Protokoll_j).Value := temp_fehler;
                    IF is_slave THEN BEGIN
                      Protokoll_Sheet.Range('E'+Protokoll_j).Value := 'OK';
                      Protokoll_Sheet.Range('G'+Protokoll_j).Value := 'slave';
                      is_slave := FALSE;
                    END;
                  END ELSE BEGIN
                    Protokoll_Sheet.Range(Spalte_Fehler_Prot+Protokoll_j).Value := 'Syntaxfehler in Datei';
                    Protokoll_Sheet.Range('E'+Protokoll_j).Value := 'Offen';
                  END;

                  IF (anzahl_systeme_set > 1) AND (set) THEN BEGIN
                    Protokoll_Sheet.Range(Spalte_Fehler_Prot+Protokoll_j).Value := 'Set';
                    Protokoll_Sheet.Range('E'+Protokoll_j).Value := 'OK';
                  END;

                  Protokoll_j := INCSTR(Protokoll_j);
                  temp_artikelnr := '';
                  temp_seriennr := '';
                  temp_fehler := '';
                  //MESSAGE('Seriennr.: %1, Board ini: %2',temp_seriennr,Board_ini);
                END ELSE BEGIN
                  IF fehler_in_syntax = FALSE THEN BEGIN
                    IF STRLEN(FORMAT(Quelle_Sheet.Range(Spalte_Artikelnr+Quelle_j).Value)) <= 40 THEN BEGIN
                      Artikel.SETFILTER("No. 2",'%1',FORMAT(Quelle_Sheet.Range(Spalte_Artikelnr+Quelle_j).Value));
                      //Sonderfall Schaeffler
                      IF (NOT Artikel.FINDFIRST) AND
                      (STRLEN(FORMAT(Quelle_Sheet.Range(Spalte_Artikelnr+Quelle_j).Value)) <= 20) THEN BEGIN
                        Artikel.RESET;
                        Artikel.SETFILTER("No.",'%1',FORMAT(Quelle_Sheet.Range(Spalte_Artikelnr+Quelle_j).Value));
                      END;
                      IF (Artikel.FINDFIRST) AND (Artikel."No." <> '') AND (Artikel.Serviceklassifizierung = 'SYSTEM CHAMPS') THEN
                        Board_ini := '';
                    END;
                  END;
                END;
              END;

              //*********************************************************************************************
              //                                       Abbruchbedingung
              //*********************************************************************************************

              // Wenn in der Quelldatei 30 Leere Zeilen hintereinander kommen, ist das Dateiende erreicht
              IF (FORMAT(Quelle_Sheet.Range('A'+Quelle_j).Value) = '') AND
              (FORMAT(Quelle_Sheet.Range('B'+Quelle_j).Value) = '') THEN       // erkennt das Ende   der Excel Datei
                leere_zeilen += 1
              ELSE
                leere_zeilen := 0;

              Quelle_j := INCSTR(Quelle_j);                                    // n„chste Zeile Importdatei

              IF (leere_zeilen + 1 = max_leere_zeilen) AND ((Spalte_BoardIni = '')
              OR ((temp_seriennr <> '') AND (temp_artikelnr <> '') AND (Board_ini = ''))) THEN BEGIN
                IF STRLEN(temp_artikelnr) <= 40 THEN BEGIN
                  Artikel.RESET;
                  Artikel.SETFILTER("No. 2",'%1',temp_artikelnr);
                  //Sonderfall Schaeffler
                  IF (NOT Artikel.FINDFIRST) AND (STRLEN(temp_artikelnr) <= 20) THEN BEGIN
                    Artikel.RESET;
                    Artikel.SETFILTER("No.",'%1',temp_artikelnr);
                  END;
                  IF (Artikel.FINDFIRST) AND (Artikel."No." <> '') AND ((Artikel.Serviceklassifizierung = 'SYSTEM CHAMPS')
                  OR (Artikel.Serviceklassifizierung = 'SYSTEM FLAT')) THEN BEGIN
                    Protokoll_Sheet.Range('A'+Protokoll_j).Value := temp_artikelnr;
                    Protokoll_Sheet.Range('B'+Protokoll_j).Value := temp_seriennr;
                  END;
                END;
                IF (nur_module) OR (schaeffler) OR (keine_board_ini) THEN BEGIN
                  IF nur_module THEN
                    Protokoll_Sheet.Range(Spalte_Fehler_Prot+Protokoll_j).Value := 'Nur Module';
                  IF schaeffler THEN
                    Protokoll_Sheet.Range(Spalte_Fehler_Prot+Protokoll_j).Value := 'Schaeffler';
                  IF keine_board_ini THEN
                    Protokoll_Sheet.Range(Spalte_Fehler_Prot+Protokoll_j).Value := 'Keine Board ini n”tig';
                  Protokoll_Sheet.Range('E'+Protokoll_j).Value := 'OK';
                END ELSE BEGIN
                  IF FORMAT(Protokoll_Sheet.Range('A'+Protokoll_j).Value) <> '' THEN
                    Protokoll_Sheet.Range(Spalte_Fehler_Prot+Protokoll_j).Value := 'Board ini nicht gefunden'
                  ELSE
                    Protokoll_Sheet.Range(Spalte_Fehler_Prot+Protokoll_j).Value := 'Kein System gefunden';
                  IF (Spalte_BoardIni = '') AND (Artikel.Serviceklassifizierung = 'SYSTEM FLAT') THEN BEGIN
                    Protokoll_Sheet.Range('E'+Protokoll_j).Value := 'OK';
                    Protokoll_Sheet.Range('G'+Protokoll_j).Value := 'ohne Board ini';
                  END ELSE
                    Protokoll_Sheet.Range('E'+Protokoll_j).Value := 'Offen';
                END;
                Protokoll_Sheet.Range('F'+Protokoll_j).Value := File.Name;
                Protokoll_j := INCSTR(Protokoll_j);
              END;

            UNTIL (Max_Datens„tze = Quelle_j) OR (leere_zeilen = max_leere_zeilen);  // Nach 30 Zeilen ohne Daten ist Schluss

          //Quelle_Excel.Visible(TRUE);
          Quelle_Book.Close;

          //*********************************************************************************************
          //                Automation Server clearen, Laufzeitfehler unterbinden
          //*********************************************************************************************

          END;
        UNTIL File.NEXT = 0;

        IF NOT ISCLEAR(Quelle_Excel) THEN
          CLEAR(Quelle_Excel);

        //*********************************************************************************************
        //                Durchlauf Protokoll Datei, um Status offen zu korrigieren
        //                  Z.B. wenn Seriennr. erst viel sp„ter ausgebucht werden
        //*********************************************************************************************

        temp_artikelnr := '';
        temp_Protokoll_j := '1';
        EVALUATE(i,Protokoll_j);

        IF ISCLEAR(Quelle_Excel) THEN
          IF CREATE (Quelle_Excel,FALSE, TRUE) THEN BEGIN END ELSE ERROR('Cannot start Excel Application.');

        FOR t := 1 TO i DO BEGIN

          IF FORMAT(Protokoll_Sheet.Range('F'+temp_Protokoll_j).Value) = Letzte_Datei THEN
            anzahl_systeme_prot += 1
          ELSE
            anzahl_systeme_prot := 1;
          Letzte_Datei := FORMAT(Protokoll_Sheet.Range('F'+temp_Protokoll_j).Value);

          IF FORMAT(Protokoll_Sheet.Range('E'+temp_Protokoll_j).Value) = 'Offen' THEN BEGIN
            temp_artikelnr := FORMAT(Protokoll_Sheet.Range('A'+temp_Protokoll_j).Value);
            temp_seriennr  := FORMAT(Protokoll_Sheet.Range('B'+temp_Protokoll_j).Value);
            EVALUATE(Board_ini,DELCHR(FORMAT(Protokoll_Sheet.Range('C'+temp_Protokoll_j).Value),'<','D'));
            Board_ini := DELCHR(Board_ini,'=','.');

            //Schaut nach, ob dies ein SOR Beleg ist und setzt die Position auf OK, da SOR Auftr„ge keine Systemvertr„ge werden
            SeriennrVerfolgung.SETRANGE("Entry Type",SeriennrVerfolgung."Entry Type"::Sale);
            //SeriennrVerfolgung.SETRANGE("Item No.",FORMAT(Protokoll_Sheet.Range('A'+temp_Protokoll_j).Value));
            SeriennrVerfolgung.SETRANGE("Serial No.",FORMAT(Protokoll_Sheet.Range('B'+temp_Protokoll_j).Value));
            SeriennrVerfolgung.SETRANGE("Item Tracking",SeriennrVerfolgung."Item Tracking"::"Serial No.");
            IF SeriennrVerfolgung.FINDLAST THEN BEGIN
              Lieferschein.SETRANGE("No.",SeriennrVerfolgung."Document No.");
              IF (Lieferschein.FINDFIRST) AND (STRPOS(Lieferschein."Payment Terms Code",'SOR') <> 0) THEN BEGIN
                Protokoll_Sheet.Range('E'+temp_Protokoll_j).Value := 'OK';
                Protokoll_Sheet.Range('G'+temp_Protokoll_j).Value := 'SOR';
              END;
            END;

            //Sonderfall Mediant 2600
            IF temp_artikelnr = 'M2600-11/100/Red/AC' THEN temp_artikelnr := 'M26-11/100/R/AC';
            SystemPos.RESET;
            SystemPos.SETFILTER(Art,'%1',SystemPos.Art::System);
            SystemPos.SETFILTER(Inaktiv,'%1',FALSE);
            //SystemPos.SETFILTER("Artikelnr. 2",'%1',temp_artikelnr);
            SystemPos.SETFILTER("Seriennr.",'%1', temp_seriennr);
            IF (SystemPos.FINDLAST) AND (SystemPos."Seriennr." <> '') AND (STRLEN(temp_seriennr) > 3)
            AND (Board_ini <> '') AND (STRPOS(Board_ini,'X') = 0) THEN BEGIN
              //Tr„gt die bereits in der Protokoll-Datei vermerkte Board ini im System nach
              IF SystemPos."Board ini" <> '' THEN
                Protokoll_Sheet.Range('G'+temp_Protokoll_j).Value := 'Board ini bereits vorhanden';
              SystemPos."Board ini" := Board_ini;
              SystemPos.MODIFY;
              Protokoll_Sheet.Range('E'+temp_Protokoll_j).Value := 'OK';
              suchstring := 'Systempos. noch nicht vorhanden';
              IF STRPOS(FORMAT(Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value),suchstring) <> 0 THEN
                Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := TOPAS_API.trim_text(FORMAT(Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value),suchstring);
            END ELSE BEGIN

              IF (FORMAT(Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value) = '') AND (Board_ini <> '') AND (temp_seriennr <> '') THEN
                Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := 'Systempos. noch nicht vorhanden'; //k”nnte bei SET Build to Order mal leer bleiben

              //Sucht die Build ini in der Quelldatei neu!!!!!!!!!!!!!!!!!!
              //****************** In Entwicklung**************************

              IF FileMgt.ClientFileExists(Path + FORMAT(Jahrgang) + '\' + FORMAT(Protokoll_Sheet.Range('F'+temp_Protokoll_j).Value)) THEN BEGIN

                Quelle_Book := Quelle_Excel.Workbooks._Open(Path + FORMAT(Jahrgang) + '\' + FORMAT(Protokoll_Sheet.Range('F'+temp_Protokoll_j).Value),0,TRUE);
                Quelle_j := '1';

                //********************************************************************************************
                //                                Import der Tabellenbl„tter
                //********************************************************************************************


                arbeitsblatt := 1;
                Quelle_Sheet := Quelle_Book.Worksheets.Item(arbeitsblatt);

                Spalte[1] := 'A';
                Spalte[2] := 'B';
                Spalte[3] := 'C';
                Spalte[4] := 'D';
                Spalte[5] := 'E';
                Spalte[6] := 'F';
                Spalte[7] := 'G';
                Spalte[8] := 'H';
                Spalte[9] := 'I';
                Spalte[10] := 'J';

                Spalte_Artikelnr := '';
                Spalte_BoardIni := '';
                Spalte_Seriennr := '';
                Spalte_BoardIni_inhalt := '';
                Quelle_j := '1';
                max_leere_zeilen := 30;
                leere_zeilen := 0;
                nur_module := FALSE;
                schaeffler := FALSE;
                set := FALSE;
                is_slave := FALSE;
                system_in_excel_gefunden := FALSE;
                system_eingetragen := FALSE;
                Board_ini := '';
                anzahl_systeme_set := 0;
                keine_board_ini := FALSE;

                temp_artikelnr := '';
                temp_seriennr := '';
                temp_fehler := '';
                artikelnr_korrektur := '';

                REPEAT

                  IF Spalte_Artikelnr = '' THEN BEGIN
                    FOR k := 1 TO 6 DO BEGIN
                      IF STRLEN(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)) <= 40 THEN BEGIN
                        temp_artikelnr := FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value);
                        //Ausnahme, wenn "nur Module" in der Excelliste stehen, dann wird der Status auf OK gesetzt
                        IF (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'nur_module') <> 0)
                        OR (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'nur module') <> 0) THEN
                          nur_module := TRUE;
                        //Ausnahme, wenn "schaeffler" in der Excelliste steht, dann wird der Status auf OK gesetzt
                        IF (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'schaeffler') <> 0)
                        OR (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'schaeffler') <> 0) THEN
                          schaeffler := TRUE;
                        IF (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'set') <> 0) THEN
                          set := TRUE;
                        //Ausnahme, wenn "keine Board.ini" in der Excelliste steht, dann wird der Status auf OK gesetzt
                        IF (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'keine board.ini') <> 0)
                        OR (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'keine board ini') <> 0)
                        OR (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value)),'keine boardini') <> 0)
                        OR (temp_artikelnr = 'MS-CCE') THEN
                          keine_board_ini := TRUE;

                        //Sonderfall Mediant 2600
                        Artikel.SETFILTER("No. 2",'%1',temp_artikelnr);
                        //Sonderfall Schaeffler
                        IF (NOT Artikel.FINDFIRST) AND (STRLEN(temp_artikelnr) <= 20) THEN BEGIN
                          Artikel.RESET;
                          Artikel.SETFILTER("No.",'%1',temp_artikelnr);
                        END;
                        IF (Artikel.FINDFIRST) AND (Artikel."No." <> '') THEN BEGIN
                          //Damit die Spalte_Artikelnr nicht durch benachbarte Artikelnr. berschrieben wird
                          IF Spalte_Artikelnr = '' THEN
                            Spalte_Artikelnr := Spalte[k];
                          //Kann sein, dass die Seriennr. nicht benachbart steht
                          FOR i := 1 TO 4 DO BEGIN
                            IF (FORMAT(Quelle_Sheet.Range(Spalte[k + i] + Quelle_j).Value) <> '') AND
                            (STRLEN(FORMAT(Quelle_Sheet.Range(Spalte[k + i] + Quelle_j).Value)) <= 20) THEN BEGIN
                              excel_test_seriennr := FORMAT(Quelle_Sheet.Range(Spalte[k + i] + Quelle_j).Value);   //temp Hilfe
                              SystemPos.RESET;
                              SystemPos.SETFILTER(Art,'%1',SystemPos.Art::System);
                              SystemPos.SETFILTER("Seriennr.",'%1',excel_test_seriennr);
                              IF SystemPos.FINDFIRST THEN
                                Spalte_Seriennr := Spalte[k + i];
                            END;
                          END;
                          //Ansonsten nimm die benachbarte Spalte, damit die Spalte gefllt ist,
                          //Fehlermeldung wird dann sp„ter gesetzt
                          IF Spalte_Seriennr = '' THEN
                            IF (STRPOS(FORMAT(Quelle_Sheet.Range(Spalte[k + 1] + Quelle_j).Value),'GTPM') = 0) AND
                               (STRPOS(FORMAT(Quelle_Sheet.Range(Spalte[k + 1] + Quelle_j).Value),'GGWU') = 0) AND
                               (STRPOS(FORMAT(Quelle_Sheet.Range(Spalte[k + 1] + Quelle_j).Value),':') = 0) THEN
                              Spalte_Seriennr := Spalte[k + 1]
                            ELSE
                              Spalte_Seriennr := Spalte[k + 2];
                        END ELSE BEGIN
                          IF Spalte_Seriennr = '' THEN BEGIN
                            //Kann sein, dass die Seriennr. nicht benachbart steht
                            FOR i := 1 TO 4 DO BEGIN
                              IF (FORMAT(Quelle_Sheet.Range(Spalte[k + i] + Quelle_j).Value) <> '') AND
                              (STRLEN(FORMAT(Quelle_Sheet.Range(Spalte[k + i] + Quelle_j).Value)) <= 20) THEN BEGIN
                                excel_test_seriennr := FORMAT(Quelle_Sheet.Range(Spalte[k + i] + Quelle_j).Value);   //temp Hilfe
                                SystemPos.RESET;
                                SystemPos.SETFILTER(Art,'%1',SystemPos.Art::System);
                                SystemPos.SETFILTER("Seriennr.",'%1',excel_test_seriennr);
                                IF SystemPos.FINDFIRST THEN BEGIN
                                  Spalte_Seriennr := Spalte[k + i];
                                  Spalte_Artikelnr := Spalte[k];
                                  artikelnr_korrektur := SystemPos."Artikelnr.";
                                END;
                              END;
                            END;
                          END;
                        END;
                      END;
                    END;
                  END;

                  IF Spalte_BoardIni = '' THEN BEGIN
                    FOR k := 1 TO 10 DO BEGIN
                      IF (STRPOS((UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value))),'BOARD') <> 0) OR
                      (STRPOS((UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte[k]+Quelle_j).Value))),'BOARD:')  <> 0) THEN BEGIN
                        Spalte_BoardIni := Spalte[k];
                        Spalte_BoardIni_inhalt := Spalte[k + 1];
                      END;
                    END;
                  END;

                  IF (STRPOS(LOWERCASE(FORMAT(Quelle_Sheet.Range('A'+Quelle_j).Value)),'set') <> 0) THEN
                    anzahl_systeme_set := 0;

                  //*********************************************************************************************
                  //                                    Inhalt auslesen
                  //*********************************************************************************************

                  //Wenn die Spalten Artikelnr und Seriennr bestimmt wurden, kann mit dem Auslesen begonnen werden
                  IF (Spalte_Artikelnr <> '') AND (Spalte_Seriennr <> '') AND (Quelle_Book.Name = FORMAT(Protokoll_Sheet.Range('F'+temp_Protokoll_j).Value)) THEN BEGIN
                    IF STRLEN(FORMAT(Quelle_Sheet.Range(Spalte_Artikelnr+Quelle_j).Value)) <= 40 THEN BEGIN
                      Artikel.SETFILTER("No. 2",'%1',FORMAT(Quelle_Sheet.Range(Spalte_Artikelnr+Quelle_j).Value));
                      //Sonderfall Schaeffler
                      IF (NOT Artikel.FINDFIRST) AND (STRLEN(FORMAT(Quelle_Sheet.Range(Spalte_Artikelnr+Quelle_j).Value)) <= 20) THEN BEGIN
                        Artikel.RESET;
                        Artikel.SETFILTER("No.",'%1',FORMAT(Quelle_Sheet.Range(Spalte_Artikelnr+Quelle_j).Value));
                      END;
                      IF (NOT Artikel.FINDFIRST) AND (STRLEN(artikelnr_korrektur) <= 20) AND (artikelnr_korrektur <> '') THEN BEGIN
                        Artikel.RESET;
                        Artikel.SETFILTER("No.",'%1',artikelnr_korrektur);
                        IF Artikel.FINDFIRST THEN
                          Protokoll_Sheet.Range('G'+temp_Protokoll_j).Value := 'Andere Artikelnr.: ' + artikelnr_korrektur;
                          artikelnr_korrektur := '';
                      END;
                      IF (Artikel.FINDFIRST) AND (Artikel."No." <> '') AND ((Artikel.Serviceklassifizierung = 'SYSTEM CHAMPS')
                      OR (Artikel.Serviceklassifizierung = 'SYSTEM FLAT')) THEN BEGIN
                        anzahl_systeme_quelle += 1;
                        IF set THEN
                          anzahl_systeme_set += 1;
                        temp_artikelnr := FORMAT(Quelle_Sheet.Range(Spalte_Artikelnr+Quelle_j).Value);
                        temp_seriennr  := FORMAT(Quelle_Sheet.Range(Spalte_Seriennr+Quelle_j).Value);
                        //IF (set = FALSE) OR ((set) AND (anzahl_systeme_set = anzahl_systeme_prot)) THEN
                        //  temp_seriennr := FORMAT(Quelle_Sheet.Range(Spalte_Seriennr+Quelle_j).Value);
                        IF (anzahl_systeme_quelle = anzahl_systeme_prot) THEN BEGIN
                          Protokoll_Sheet.Range('A'+temp_Protokoll_j).Value := temp_artikelnr;
                          Protokoll_Sheet.Range('B'+temp_Protokoll_j).Value := temp_seriennr;
                        END;
                      END;
                    END;

                    IF (Spalte_BoardIni <> '') AND (temp_artikelnr <> '') THEN BEGIN
                      IF ((STRPOS((UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte_BoardIni+Quelle_j).Value))),'BOARD') <> 0)
                      OR (STRPOS((UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte_BoardIni+Quelle_j).Value))),'BOARD:') <> 0))
                      AND ((anzahl_systeme_quelle = anzahl_systeme_prot)
                      OR  ((set = TRUE) AND (anzahl_systeme_set = 2))) THEN BEGIN

                        EVALUATE(Board_ini,DELCHR(FORMAT(Quelle_Sheet.Range(Spalte_BoardIni_inhalt+Quelle_j).Value),'<','D'));
                        Board_ini := DELCHR(Board_ini,'=','.');

                        IF (set) AND (anzahl_systeme_set = 2) AND (anzahl_systeme_quelle = anzahl_systeme_prot) THEN BEGIN
                          EVALUATE(decstr,temp_Protokoll_j);
                          temp_Protokoll_j := FORMAT(decstr -1);
                          //nachtr„gliche Korrektur fr ein Set System, wenn die Board ini aktualisiert werden kann fr das Hauptsystem
                          IF FORMAT(Protokoll_Sheet.Range('E'+temp_Protokoll_j).Value) = 'Offen' THEN BEGIN
                            Protokoll_Sheet.Range('C'+temp_Protokoll_j).Value := FORMAT(Board_ini);
                            Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := 'Systempos. noch nicht vorhanden';
                            temp_seriennr := FORMAT(Protokoll_Sheet.Range('B'+temp_Protokoll_j).Value); //wird so getan als w„re es die SN des Hauptsystems
                          END;
                          temp_Protokoll_j := INCSTR(temp_Protokoll_j);
                        END;

                        IF (Board_ini <> '') AND (STRPOS(Board_ini,'X') = 0) THEN BEGIN
                          SystemPos.RESET;
                          SystemPos.SETFILTER(Art,'%1',SystemPos.Art::System);
                          SystemPos.SETFILTER(Inaktiv,'%1',FALSE);
                          //Sonderfall M2600
                          //IF temp_artikelnr <> 'M2600' THEN
                          //  SystemPos.SETFILTER(SystemPos."Artikelnr. 2",'%1',temp_artikelnr);
                          SystemPos.SETFILTER("Seriennr.",'%1',temp_seriennr);
                          IF (SystemPos.FINDLAST) AND (temp_seriennr <> '') THEN BEGIN
                            IF SystemPos."Board ini" <> '' THEN
                              Protokoll_Sheet.Range('G'+temp_Protokoll_j).Value := 'Board ini bereits vorhanden';
                            SystemPos."Board ini" := Board_ini;
                            SystemPos.MODIFY(TRUE);
                            IF (set) AND (anzahl_systeme_set = 2)  AND (anzahl_systeme_quelle = anzahl_systeme_prot) THEN BEGIN
                              EVALUATE(decstr,temp_Protokoll_j);
                              temp_Protokoll_j := FORMAT(decstr -1);
                              Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := ''; //setzt Fehler zurck
                              Protokoll_Sheet.Range('E'+temp_Protokoll_j).Value := 'OK';
                              temp_Protokoll_j := INCSTR(temp_Protokoll_j);
                            END ELSE BEGIN
                              Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := ''; //setzt Fehler zurck
                              Protokoll_Sheet.Range('E'+temp_Protokoll_j).Value := 'OK';
                            END;
                            system_eingetragen := TRUE;
                            IF SystemPos.COUNT > 1 THEN
                              Protokoll_Sheet.Range('J'+temp_Protokoll_j).Value := 'SN mehrmals vorhanden ' +
                              FORMAT(SystemPos.COUNT);
                          END ELSE BEGIN
                            IF (set = FALSE) OR  ((set) AND (anzahl_systeme_set = 1) AND (anzahl_systeme_prot = anzahl_systeme_quelle)) THEN
                              Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := 'Systempos. noch nicht vorhanden';
                          END;
                          IF Board_ini <> '' THEN BEGIN
                            IF (set = FALSE) OR ((set) AND (anzahl_systeme_prot = anzahl_systeme_quelle)) THEN BEGIN
                              Protokoll_Sheet.Range('C'+temp_Protokoll_j).Value := Board_ini;
                              suchstring := 'Board ini leer';
                              IF STRPOS(FORMAT(Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value),suchstring) <> 0 THEN BEGIN
                                Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := TOPAS_API.trim_text(
                                FORMAT(Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value),suchstring);
                              END;
                            END;
                            temp_artikelnr := '';
                            Board_ini := '';
                          END;
                        END ELSE BEGIN
                          IF (set = FALSE) OR ((set) AND (anzahl_systeme_prot = anzahl_systeme_quelle) AND (anzahl_systeme_set = 1)) THEN
                              Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := 'Board ini unvollst„ndig';
                        END;
                      END;

                      IF (anzahl_systeme_set > 1) AND (anzahl_systeme_quelle = anzahl_systeme_prot) AND (set) THEN BEGIN
                        Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := 'Set';
                        Protokoll_Sheet.Range('E'+temp_Protokoll_j).Value := 'OK';
                      END;
                    END ELSE BEGIN
                      IF (set = FALSE) OR  ((set) AND (anzahl_systeme_set > 1) AND (anzahl_systeme_prot = anzahl_systeme_quelle)) THEN
                        IF (FORMAT(Protokoll_Sheet.Range('A'+temp_Protokoll_j).Value) <> '') AND (FORMAT(Protokoll_Sheet.Range('B'+temp_Protokoll_j).Value) <> '') THEN
                          Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := 'Board ini nicht gefunden';
                    END;

                    IF nur_module THEN BEGIN
                      Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := 'Nur Module';
                      Protokoll_Sheet.Range('E'+temp_Protokoll_j).Value := 'OK';
                    END;

                    IF schaeffler THEN BEGIN
                      Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := 'Schaeffler';
                      Protokoll_Sheet.Range('E'+temp_Protokoll_j).Value := 'OK';
                    END;

                    IF keine_board_ini THEN BEGIN
                      Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := 'Keine Board ini n”tig';
                      Protokoll_Sheet.Range('E'+temp_Protokoll_j).Value := 'OK';
                    END;

                    IF (anzahl_systeme_set > 1) AND (anzahl_systeme_quelle = anzahl_systeme_prot) AND (set) THEN BEGIN
                      Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := 'Set';
                      Protokoll_Sheet.Range('E'+temp_Protokoll_j).Value := 'OK';
                    END;

                    Protokoll_Sheet.Range('G'+temp_Protokoll_j).Font.Color := 0;

                  END;

                  //temp_artikelnr := '';

                  //*********************************************************************************************
                  //                                       Abbruchbedingung
                  //*********************************************************************************************

                  // Wenn in der Quelldatei 6 Leere Zeilen hintereinander kommen, ist das Dateiende erreicht
                  IF (FORMAT(Quelle_Sheet.Range('A'+Quelle_j).Value) = '') AND
                  (FORMAT(Quelle_Sheet.Range('B'+Quelle_j).Value) = '') THEN            // erkennt das Ende der Excel Datei
                    leere_zeilen += 1
                  ELSE
                    leere_zeilen := 0;

                  Quelle_j := INCSTR(Quelle_j);                                         // n„chste Zeile Importdatei

                UNTIL (Max_Datens„tze = Quelle_j) OR (leere_zeilen = max_leere_zeilen)  // Nach 30 Zeilen ohne Daten ist Schluss
                      OR (system_eingetragen);

                Quelle_Book.Close;

                IF FORMAT(Protokoll_Sheet.Range(Spalte_Druchlauf+temp_Protokoll_j).Value) = '' THEN
                  Protokoll_Sheet.Range(Spalte_Druchlauf+temp_Protokoll_j).Value := 1
                ELSE BEGIN
                  EVALUATE(anzahl_durchlauf_protokoll_zeile,FORMAT(Protokoll_Sheet.Range(Spalte_Druchlauf+temp_Protokoll_j).Value));
                  Protokoll_Sheet.Range(Spalte_Druchlauf+temp_Protokoll_j).Value := anzahl_durchlauf_protokoll_zeile +1;
                END;

                IF anzahl_systeme_quelle = 0 THEN BEGIN
                  Protokoll_Sheet.Range(Spalte_Fehler_Prot+temp_Protokoll_j).Value := 'Kein System gefunden';
                  //Nach 5 erfolglosen Durchl„ufen bei Build to Orders ohne System wird der Status automatisch auf OK gesetzt
                  IF FORMAT(Protokoll_Sheet.Range(Spalte_Druchlauf+temp_Protokoll_j).Value) = '5' THEN
                    Protokoll_Sheet.Range('E'+temp_Protokoll_j).Value := 'OK';
                END;

                IF Spalte_Artikelnr <> '' THEN BEGIN
                  Artikel.SETFILTER("No. 2",'%1',FORMAT(Protokoll_Sheet.Range(Spalte_Artikelnr_Prot+temp_Protokoll_j).Value));
                  //Sonderfall Schaeffler
                  IF (NOT Artikel.FINDFIRST) AND (STRLEN(FORMAT(Protokoll_Sheet.Range(Spalte_Artikelnr_Prot+temp_Protokoll_j).Value)) <= 20) THEN BEGIN
                    Artikel.RESET;
                    Artikel.SETFILTER("No.",'%1',FORMAT(Protokoll_Sheet.Range(Spalte_Artikelnr_Prot+temp_Protokoll_j).Value));
                  END;
                  IF (Artikel.FINDFIRST) AND (Artikel."No." <> '') AND (Artikel.Serviceklassifizierung = 'SYSTEM FLAT') THEN BEGIN
                    Protokoll_Sheet.Range('E'+temp_Protokoll_j).Value := 'OK';
                    IF (Spalte_BoardIni = '') THEN
                      Protokoll_Sheet.Range('G'+temp_Protokoll_j).Value := 'ohne Board ini';
                    IF FORMAT(Protokoll_Sheet.Range('G'+temp_Protokoll_j).Value) = '' THEN
                      Protokoll_Sheet.Range('G'+temp_Protokoll_j).Value := 'Systemtelefon';
                  END;
                END;
              END ELSE BEGIN
                Protokoll_Sheet.Range('G'+temp_Protokoll_j).Value := 'Datei nicht gefunden';
                Protokoll_Sheet.Range('G'+temp_Protokoll_j).Font.Color := 255;
              END;
            END;
          END;
          anzahl_systeme_quelle := 0;
          temp_Protokoll_j := INCSTR(temp_Protokoll_j);
        END;

        Protokoll_Book.Save;
        IF debug_modus THEN
          Protokoll_Excel.Visible(TRUE)
        ELSE
          Protokoll_Book.Close;

        IF debug_modus = FALSE THEN
          Quelle_Excel.Quit;

      END;
    END;

    PROCEDURE FindRow@1000000005(PL_Sheet@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";What@1140000 : Text;Spalte@1140001 : Code[10]) : Text[30];
    VAR
      Range1@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      Cell@1140003 : Code[40];
      vorherige_zeile@1140004 : Integer;
      naechste_zeile@1140005 : Integer;
      i@1140007 : Integer;
    BEGIN
      CLEAR(Range1);
      WITH PL_Sheet.Range(Spalte + ':' + Spalte) DO BEGIN
        i := 1;
        Range1 :=
        (PL_Sheet.Columns.Find(
          What));
        // Wird der Artikel nicht gefunden, steigt er sofort aus den Schleifen aus
        IF ISCLEAR(Range1) THEN EXIT('');
        Cell := Range1.Address;
        EXIT(Cell);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

