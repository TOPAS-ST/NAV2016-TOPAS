OBJECT Report 50031 Abgrenz Bewert Stichtag Excel
{
  OBJECT-PROPERTIES
  {
    Date=13.09.22;
    Time=16:06:05;
    Modified=Yes;
    Version List=Topas Daten fr Ulf;
  }
  PROPERTIES
  {
    ShowPrintStatus=Yes;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   //TestDateTime := CURRENTDATETIME;
                   //MESSAGE(FORMAT(TestDateTime));
                 END;

    OnPreReport=BEGIN

                  // ANFANG šberprfung ob mehrere H„kchen gesetzt sind
                  var_anzahl_h„kchen := 0;
                  IF Abgrenzung = TRUE THEN var_anzahl_h„kchen += 1;
                  IF Rech_tagessatz = TRUE THEN var_anzahl_h„kchen += 1;
                  IF frei_lager = TRUE THEN var_anzahl_h„kchen += 1;
                  IF champsauswert = TRUE THEN var_anzahl_h„kchen += 1;
                  IF champsstat = TRUE THEN var_anzahl_h„kchen += 1;
                  IF champstest = TRUE THEN var_anzahl_h„kchen += 1;
                  IF v_rohbilanz = TRUE THEN var_anzahl_h„kchen += 1;
                  IF v_vorl_GuV = TRUE THEN var_anzahl_h„kchen += 1;
                  IF v_AE_per_Periode = TRUE THEN var_anzahl_h„kchen += 1;
                  IF v_prov = TRUE THEN var_anzahl_h„kchen += 1;
                  IF v_wartber = TRUE THEN var_anzahl_h„kchen += 1;
                  IF v_abschluss = TRUE THEN var_anzahl_h„kchen += 1;
                  IF v_AE = TRUE THEN var_anzahl_h„kchen += 1;
                  IF v_Hersteller = TRUE THEN var_anzahl_h„kchen += 1;
                  IF v_WV_Ende = TRUE THEN var_anzahl_h„kchen += 1;
                  IF v_WV_Ende_21 = TRUE THEN var_anzahl_h„kchen += 1;
                  IF v_cashflow_data THEN var_anzahl_h„kchen += 1;


                  IF var_anzahl_h„kchen > 1 THEN
                  ERROR('Es wurden mehrere H„kchen gesetzt. Report abgebrochen!');
                  // ENDE šberprfung ob mehrere H„kchen gesetzt sind

                  // ANFANG Aufruf der Funktionen
                  //IF Abgrenzung = TRUE THEN Stichtagsabgrenzung;
                  IF Abgrenzung = TRUE THEN Champsabgrenzungszeilen;
                  IF Rech_tagessatz = TRUE THEN Tagessatzrechnungen_listen;
                  IF frei_lager = TRUE THEN Freies_Lager;
                  IF champsauswert = TRUE THEN Champsauswertung;
                  IF champsstat = TRUE THEN Champsstatistik;
                  IF champstest = TRUE THEN Champstest_ohne_ACTS;
                  IF v_rohbilanz = TRUE THEN Rohbilanz;
                  IF v_vorl_GuV = TRUE THEN Vorl_GuV;
                  IF v_AE_per_Periode = TRUE THEN AE_per_Periode;
                  //IF v_prov = TRUE THEN Prov;
                  IF v_prov = TRUE THEN mtl_Provisionsauswertung;
                  IF v_wartber = TRUE THEN Wartungsvertragsbersicht;
                  IF v_abschluss = TRUE THEN Daten_fr_Jahresabschluss;
                  //IF v_abschluss = TRUE THEN "Abschluá";
                  IF v_AE = TRUE THEN AE_nach_Excel;
                  IF v_Hersteller = TRUE THEN Daten_Nav_Hersteller;
                  IF v_WV_Ende = TRUE THEN Wartungsvertragsende_2HJ_2020;
                  IF v_WV_Ende_21 = TRUE THEN Wartungsvertragsende_2HJ_2021;
                  IF v_cashflow_data = TRUE THEN Cashflow_Daten_bereitstellen;
                  //  ENDE Aufruf der Funktionen
                END;

    UseRequestPage=Yes;
  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1000000000;;Container;
                  CaptionML=DEU=Caption;
                  ContainerType=ContentArea }

      { 1000000001;1;Group  ;
                  CaptionML=DEU=Champsabgrenzungszeilen;
                  GroupType=Group }

      { 1000000002;2;Field  ;
                  CaptionML=DEU=Abgrenzungsdatum (z.B.: 30.06.2017);
                  SourceExpr=Abgrenz_Datum }

      { 1000000003;2;Field  ;
                  CaptionML=DEU=Abgrenzung ausfhren;
                  SourceExpr=Abgrenzung }

      { 1000000004;1;Group  ;
                  CaptionML=DEU=mtl. Provisionsauswertung;
                  GroupType=Group }

      { 1000000007;2;Field  ;
                  CaptionML=DEU=Provisionsauswertung ausfhren;
                  SourceExpr=v_prov }

      { 1000000005;2;Field  ;
                  CaptionML=DEU=Datum ab (z.B. 01.07.2017);
                  SourceExpr=v_datum_von }

      { 1000000006;2;Field  ;
                  CaptionML=DEU=Datum bis (z.B.31.07.2017);
                  SourceExpr=v_datum_bis }

      { 1000000008;1;Group  ;
                  CaptionML=DEU=Daten fr Jahresabschluá;
                  GroupType=Group }

      { 1000000009;2;Field  ;
                  CaptionML=DEU=Daten fr Jahresabschluá bereitstellen;
                  SourceExpr=v_abschluss }

      { 1000000011;2;Field  ;
                  CaptionML=DEU=Datum ab (z.B. 01.07.2017);
                  SourceExpr=v_datum_von }

      { 1000000010;2;Field  ;
                  CaptionML=DEU=Datum bis (z.B.31.07.2017);
                  SourceExpr=v_datum_bis }

      { 1000000012;1;Group  ;
                  CaptionML=DEU=AE im Quartal;
                  GroupType=Group }

      { 1000000013;2;Field  ;
                  CaptionML=DEU=AE im Quartal ausfhren;
                  SourceExpr=v_AE }

      { 1000000014;2;Field  ;
                  CaptionML=DEU=Datum ab (z.B. 01.07.2017);
                  SourceExpr=v_datum_von }

      { 1000000015;2;Field  ;
                  CaptionML=DEU=Datum bis (z.B.30.09.2017);
                  SourceExpr=v_datum_bis }

      { 1000000016;1;Group  ;
                  CaptionML=DEU=Herstellerbersicht;
                  GroupType=Group }

      { 1000000017;2;Field  ;
                  CaptionML=DEU=Herstllerbersicht ausfhren;
                  SourceExpr=v_Hersteller }

      { 1000000018;1;Group  ;
                  CaptionML=DEU=Wartungsvertragsende 2HJ 2020;
                  GroupType=Group }

      { 1000000019;2;Field  ;
                  CaptionML=DEU=Programm ausfhren;
                  SourceExpr=v_WV_Ende }

      { 1000000020;2;Field  ;
                  CaptionML=DEU=Abgrenzungsdatum (zB 30.06.2020);
                  SourceExpr=Abgrenz_Datum }

      { 1000000021;1;Group  ;
                  CaptionML=DEU=Wartungsvertragsende 2HJ 2021;
                  GroupType=Group }

      { 1000000022;2;Field  ;
                  CaptionML=DEU=Programm ausfhren;
                  SourceExpr=v_WV_Ende_21 }

      { 1000000023;2;Field  ;
                  CaptionML=DEU=Abgrenzungsdatum (zB 30.06.2021);
                  SourceExpr=Abgrenz_Datum }

      { 1000000024;1;Group  ;
                  CaptionML=DEU=Cashflow;
                  GroupType=Group }

      { 1000000025;2;Field  ;
                  Name=v_cashflow_data;
                  CaptionML=DEU=Cashflow Daten bereitstellen (180 Tage);
                  SourceExpr=v_cashflow_data }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Excel@1000000151 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      Book@1000000150 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      Range@1000000149 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      Sheet@1000000148 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      wshFile@1000000153 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
      j@1000000147 : Text[30];
      i@1000000146 : Integer;
      Abgrenzung@1000000145 : Boolean;
      Abgrenz_Datum@1000000144 : Date;
      Book1@1000000143 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      Sheet1@1000000142 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      var_anzahl_h„kchen@1000000141 : Integer;
      Service@1000000140 : Record 50024;
      Service1@1000000139 : Record 50024;
      Lief@1000000138 : Record 111;
      artikel@1000000137 : Record 27;
      wertposten@1000000136 : Record 5802;
      ekz@1000000135 : Record 39;
      vkz@1000000134 : Record 37;
      vkk@1000000133 : Record 36;
      artikelposten@1000000132 : Record 32;
      vkcode@1000000131 : Record 13;
      AU_PER@1000000130 : Record 50019;
      AU_PER1@1000000129 : Record 50019;
      VKRK@1000000128 : Record 112;
      VKRZ@1000000127 : Record 113;
      v_vkz1@1000000126 : Record 113;
      VKGK@1000000125 : Record 114;
      VKGZ@1000000124 : Record 115;
      avkk@1000000123 : Record 5107;
      avkz@1000000122 : Record 5108;
      W„hrungWechKurs@1000000121 : Record 330;
      liefnr@1000000120 : Code[10];
      liefzeilennr@1000000119 : Integer;
      anzahllief@1000000118 : Integer;
      stich_monat@1000000117 : Integer;
      stich_jahr@1000000116 : Integer;
      ablauf_monat@1000000115 : Integer;
      ablauf_jahr@1000000114 : Integer;
      start_monat@1000000113 : Integer;
      start_jahr@1000000112 : Integer;
      LZ_jahr@1000000111 : Integer;
      LZ_monat@1000000110 : Integer;
      LZ_jahr_datum@1000000109 : Integer;
      LZ_monat_datum@1000000108 : Integer;
      LZ_rest@1000000107 : Integer;
      LZ_rest_datum@1000000106 : Integer;
      LZ@1000000105 : Integer;
      Rech_tagessatz@1000000104 : Boolean;
      rech@1000000103 : Record 50010;
      deb@1000000102 : Record 18;
      Sum_ek@1000000101 : Decimal;
      Sum_vk@1000000100 : Decimal;
      Sum_vk1@1000000099 : Decimal;
      LZ_tage@1000000098 : Integer;
      LZ_tage_stich@1000000097 : Integer;
      LZ_tage_abgrenz@1000000096 : Decimal;
      LZ_tage_bewert@1000000095 : Integer;
      frei_lager@1000000094 : Boolean;
      champsauswert@1000000093 : Boolean;
      wartkopf@1000000092 : Record 50011;
      GJ10_11_Neu@1000000091 : Decimal;
      GJ11_12_Neu@1000000090 : Decimal;
      GJ12_13_Neu@1000000089 : Decimal;
      GJ13_14_Neu@1000000088 : Decimal;
      GJ14_15_Neu@1000000087 : Decimal;
      GJ15_16_Neu@1000000086 : Decimal;
      GJ16_17_Neu@1000000085 : Decimal;
      GJ17_18_Neu@1000000084 : Decimal;
      GJ18_19_Neu@1000000083 : Decimal;
      GJ19_20_Neu@1000000082 : Decimal;
      GJ10_11_Verl@1000000081 : Decimal;
      GJ11_12_Verl@1000000080 : Decimal;
      GJ12_13_Verl@1000000079 : Decimal;
      GJ13_14_Verl@1000000078 : Decimal;
      GJ14_15_Verl@1000000077 : Decimal;
      GJ15_16_Verl@1000000076 : Decimal;
      GJ16_17_Verl@1000000075 : Decimal;
      GJ17_18_Verl@1000000074 : Decimal;
      GJ18_19_Verl@1000000073 : Decimal;
      GJ19_20_Verl@1000000072 : Decimal;
      GJ10_11Abgel@1000000071 : Decimal;
      GJ11_12Abgel@1000000070 : Decimal;
      GJ12_13Abgel@1000000069 : Decimal;
      GJ13_14Abgel@1000000068 : Decimal;
      GJ14_15Abgel@1000000067 : Decimal;
      GJ15_16Abgel@1000000066 : Decimal;
      GJ16_17Abgel@1000000065 : Decimal;
      GJ17_18Abgel@1000000064 : Decimal;
      GJ18_19Abgel@1000000063 : Decimal;
      GJ19_20Abgel@1000000062 : Decimal;
      var_jahr@1000000061 : ARRAY [30] OF Date;
      var_startjahr@1000000060 : Date;
      champsstat@1000000059 : Boolean;
      champstest@1000000058 : Boolean;
      var_sj_eingabe@1000000057 : Date;
      var_jahr_wert@1000000056 : ARRAY [30] OF Decimal;
      LZ_tage_jahr@1000000055 : ARRAY [30] OF Integer;
      var_jahr_gesamt@1000000054 : ARRAY [30] OF Decimal;
      var_jahr_neu@1000000053 : ARRAY [30] OF Decimal;
      var_jahr_verl„ng@1000000052 : ARRAY [30] OF Decimal;
      var_jahr_abgelauf@1000000051 : ARRAY [30] OF Decimal;
      v_rohbilanz@1000000050 : Boolean;
      v_vorl_GuV@1000000049 : Boolean;
      v_AE_per_Periode@1000000048 : Boolean;
      sachposten@1000000047 : Record 17;
      sachkonten@1000000046 : Record 15;
      sachkonten1@1000000045 : Record 15;
      v_bil_saldo@1000000044 : Decimal;
      var_balance@1000000043 : ARRAY [13] OF Decimal;
      var_bal@1000000042 : ARRAY [13] OF Decimal;
      var_bal_total@1000000041 : ARRAY [13] OF Decimal;
      var_balance_total@1000000040 : ARRAY [13] OF Decimal;
      var_balance_total_summe@1000000039 : Decimal;
      var_balance_gesamt_konto@1000000038 : Decimal;
      PeriodStartDate@1000000037 : ARRAY [14] OF Date;
      PeriodLength@1000000036 : DateFormula;
      v_summe@1000000035 : Decimal;
      v_summe_total@1000000034 : Decimal;
      v_summe_aur@1000000033 : Decimal;
      v_summe_aur1@1000000032 : Decimal;
      v_sum_au@1000000031 : Decimal;
      v_aubest@1000000030 : ARRAY [13] OF Decimal;
      v_aubest1@1000000029 : ARRAY [13] OF Decimal;
      v_aubest1_total@1000000028 : ARRAY [13] OF Decimal;
      v_sum_aubest@1000000027 : Decimal;
      v_aubest_total@1000000026 : ARRAY [13] OF Decimal;
      v_au_wert@1000000025 : Decimal;
      v_aur_wert@1000000024 : Decimal;
      v_sum_au_rahmen@1000000023 : Decimal;
      sum_gj_12@1000000022 : Decimal;
      sum_gj_36@1000000021 : Decimal;
      sum_gj_sonst@1000000020 : Decimal;
      sum_gj_gesamt@1000000019 : Decimal;
      v_datum_von@1000000018 : Date;
      v_datum_bis@1000000017 : Date;
      v_ek@1000000016 : Decimal;
      v_vk@1000000015 : Decimal;
      v_marge@1000000014 : Decimal;
      v_marge1@1000000013 : Decimal;
      v_re_marge@1000000012 : Decimal;
      v_w„_ek_kurs@1000000011 : Decimal;
      v_w„_fact@1000000010 : Decimal;
      v_wert_eu@1000000009 : Decimal;
      v_zoll@1000000008 : Decimal;
      v_prov@1000000007 : Boolean;
      v_wartber@1000000006 : Boolean;
      v_wartnr@1000000005 : Code[20];
      v_hauptwart@1000000004 : Boolean;
      v_abschluss@1000000003 : Boolean;
      deb_posten@1000000002 : Record 21;
      kred_posten@1000000001 : Record 25;
      kred@1000000000 : Record 23;
      TestDateTime@1000000152 : DateTime;
      beleghis@1000000154 : Record 50008;
      beleghis_ek@1000000155 : Decimal;
      TempExcelBuffer@1000000166 : TEMPORARY Record 370;
      FileMgt@1000000165 : Codeunit 419;
      ServerFileName@1000000164 : Text;
      SheetName@1000000163 : Text[250];
      DoUpdateExistingWorksheet@1000000162 : Boolean;
      Testmode@1000000161 : Boolean;
      Window@1000000160 : Dialog;
      RecNo@1000000159 : Integer;
      TotalRecNo@1000000158 : Integer;
      RowNo@1000000157 : Integer;
      ColumnNo@1000000156 : Integer;
      Text000@1000000172 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000171 : TextConst 'DEU=Hersteller;ENU=Manufacturer';
      Text002@1000000170 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      ExcelFileExtensionTok@1000000169 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      NewFileDirectory@1000000168 : TextConst 'DEU=F:\Daten Neu\User\Joachim\email_versand\POS Linien lfd\NAV2016\';
      Text003@1000000167 : TextConst 'DEU=Excel Export erfolgreich abgeschlossen.';
      r_AE@1000000173 : Record 50017;
      v_AE@1000000174 : Boolean;
      v_Hersteller@1000000175 : Boolean;
      Herstell@1000000176 : Record 5720;
      Text004@1000000177 : TextConst 'DEU=Excel Export erfolgreich. ------------  Bitte Excel schlieáen --------------';
      v_WV_Ende@1000000178 : Boolean;
      v_WV_Ende_21@1000000179 : Boolean;
      v_cashflow_data@1000000180 : Boolean;

    PROCEDURE Stichtagsabgrenzung@1140048();
    BEGIN
      IF Abgrenz_Datum = 0D THEN ERROR('Es wurde kein Datum eingegeben. Report abgebrochen!');

      //Variablenbelegung
      liefnr:='LS00';
      liefzeilennr:=10;

      CREATE(Excel,FALSE,TRUE);
      //CREATE (wshFile,FALSE,TRUE);
      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.Range('M:O').NumberFormat:='0,00';
      Sheet.Range('AB:AC').NumberFormat:='0,00';
      //Sheet.Range('O:O').NumberFormat:='###.###,####';

      Sheet.Range('A3').Value := 'Abgrenzung der stichtagsbergreifenden Champsvereinbarungen zum  '; // šberschriftszeile
      Sheet.Range('F3').Value := Abgrenz_Datum;

      Sheet.Range('A4').Value := 'Lfd.Nr.';
      Sheet.Range('B4').Value := 'Ablauf-Datum';
      Sheet.Range('C4').Value := 'Art';
      Sheet.Range('D4').Value := 'Nr.';
      Sheet.Range('E4').Value := 'ZeilenNr.';
      Sheet.Range('F4').Value := 'Belegdatum';
      Sheet.Range('G4').Value := 'Artikelnr';
      Sheet.Range('H4').Value := 'Seriennr';
      Sheet.Range('I4').Value := 'Debitorennr';
      Sheet.Range('J4').Value := 'Debitorname';
      Sheet.Range('K4').Value := 'ChampsNr';
      Sheet.Range('L4').Value := 'WartVertragNr';
      //Sheet.Range('M4').Value := 'Champ DC';
      //Sheet.Range('N4').Value := 'Champ MSRP';
      Sheet.Range('M4').Value := 'Menge';
      Sheet.Range('N4').Value := 'Einstandspreis';
      Sheet.Range('O4').Value := 'VK';
      Sheet.Range('P4').Value := 'Lizenzdatum';
      Sheet.Range('Q4').Value := 'Ablaufdatum';
      Sheet.Range('R4').Value := 'LZ in Tagen';
      Sheet.Range('S4').Value := 'Abgr in Tagen';
      Sheet.Range('T4').Value := 'Abgr EK';
      Sheet.Range('U4').Value := 'Abgr VK';

      Sheet.Range('W4').Value := 'WartVertragNr2';
      Sheet.Range('X4').Value := 'BET-Nr.';
      Sheet.Range('Y4').Value := 'ACO-Nr.';

      j := '5';                                   // <- Import in excel ab Zeile 3



      Service.RESET;
      Service.SETCURRENTKEY("Wartungsvertragsnr.","Nr.","Belegzeilennr.");
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      Service.SETFILTER(Service."Ablaufdatum Serviceleistung",'>%1',Abgrenz_Datum);
      Service.SETFILTER(Service.Belegdatum,'<=%1',Abgrenz_Datum);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);

      //Eingrezungen auf bestimmte Artikel
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
        REPEAT
          artikel.RESET;
          artikel.SETFILTER(artikel."No.",'%1',Service."SUP Artikelnr.");
          artikel.SETFILTER(artikel."Manufacturer Code",'<>%1&<>%2&<>%3','5710','5720','5730');
          //   artikel.SETFILTER(artikel.Artikelgruppe,'<>%1','CHAMPS_FEE');
          IF artikel.FINDFIRST THEN BEGIN
            LZ_rest:=0;
            Lief.RESET;
            Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
            Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
            Lief.SETFILTER(Lief."Manufacturer Code",'<>%1&<>%2&<>%3','5710','5720','5730');
            IF Lief.FINDFIRST THEN BEGIN
              Sheet.Range('A'+j).Value := Service."Lfd. Nr.";
              Sheet.Range('B'+j).Value := Service."Ablaufdatum Serviceleistung";
              Sheet.Range('C'+j).Value := FORMAT(Service.Art);
              Sheet.Range('D'+j).Value := Service."Nr.";
              Sheet.Range('E'+j).Value := Service."Belegzeilennr.";
              Sheet.Range('F'+j).Value := Service.Belegdatum;
              Sheet.Range('G'+j).Value := Service."Artikelnr.";
              Sheet.Range('H'+j).Value := Service."Seriennr.";
              Sheet.Range('I'+j).Value := Service."Debitornr.";
              Sheet.Range('J'+j).Value := Service.Debitorname;
              Sheet.Range('K'+j).Value := Service."SUP Artikelnr.";
              Sheet.Range('L'+j).Value := Service."Hauptwartungsvertragsnr.";
              //        Sheet.Range('M'+j).Value := Service."Service DC";
              //        Sheet.Range('N'+j).Value := Service."Service MSRP";
              IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
              END ELSE BEGIN
                Sheet.Range('M'+j).Value := Lief.Quantity;
                Sheet.Range('N'+j).Value := Lief."Unit Cost (LCY)";
                Sheet.Range('O'+j).Value := Lief."Unit Price";
                LZ_tage:= (Service."Ablaufdatum Serviceleistung"- Service.Lizenzdatum-1);
                LZ_tage_stich:=(Service."Ablaufdatum Serviceleistung"-Abgrenz_Datum-1);
                LZ_tage_bewert:=0;
                Sheet.Range('P'+j).Value := Service.Lizenzdatum;
                Sheet.Range('Q'+j).Value := Service."Ablaufdatum Serviceleistung";
                Sheet.Range('R'+j).Value := LZ_tage;
                IF LZ_tage_stich>LZ_tage THEN BEGIN
                  LZ_tage_bewert := LZ_tage;
                END ELSE BEGIN
                  LZ_tage_bewert := LZ_tage_stich;
                END;
                Sheet.Range('S'+j).Value := LZ_tage_bewert;
                Sheet.Range('T'+j).Value := ROUND((Lief."Unit Cost (LCY)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity),0.01);
                Sheet.Range('U'+j).Value := ROUND((Lief."VK-Preis (MW)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity),0.01);
                Sum_ek:=(Sum_ek+ (ROUND(Lief."Unit Cost (LCY)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
                Sum_vk:=(Sum_vk+ (ROUND(Lief."VK-Preis (MW)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
                liefnr:=Lief."Document No.";
                liefzeilennr:=Lief."Line No.";
                Sheet.Range('W'+j).Value := Service."Wartungsvertragsnr.";
                Sheet.Range('X'+j).Value := Service."BET-Nr.";
                Sheet.Range('Y'+j).Value := Service."ACO Nr.";
              END;
              j:=INCSTR(j);
            END ELSE BEGIN
      // Anfang Lieferscheine aus Beleghistorie
              LZ_rest:=0;
              beleghis_ek:=0;
              beleghis.RESET;
              beleghis.SETFILTER(beleghis."Belegnr.",'%1',Service."Nr.");
              beleghis.SETFILTER(beleghis."Zeilennr.",'%1',Service."Belegzeilennr.");
              beleghis.SETFILTER(beleghis.Herstellercode,'<>%1&<>%2&<>%3','5710','5720','5730');
              IF beleghis.FINDFIRST THEN BEGIN
                Sheet.Range('A'+j).Value := Service."Lfd. Nr.";
                Sheet.Range('B'+j).Value := Service."Ablaufdatum Serviceleistung";
                Sheet.Range('C'+j).Value := FORMAT(Service.Art);
                Sheet.Range('D'+j).Value := Service."Nr.";
                Sheet.Range('E'+j).Value := Service."Belegzeilennr.";
                Sheet.Range('F'+j).Value := Service.Belegdatum;
                Sheet.Range('G'+j).Value := Service."Artikelnr.";
                Sheet.Range('H'+j).Value := Service."Seriennr.";
                Sheet.Range('I'+j).Value := Service."Debitornr.";
                Sheet.Range('J'+j).Value := Service.Debitorname;
                Sheet.Range('K'+j).Value := Service."SUP Artikelnr.";
                Sheet.Range('L'+j).Value := Service."Hauptwartungsvertragsnr.";
                //        Sheet.Range('M'+j).Value := Service."Service DC";
                //        Sheet.Range('N'+j).Value := Service."Service MSRP";
                IF (liefnr=beleghis."Belegnr.") AND (liefzeilennr=beleghis."Zeilennr.") THEN BEGIN
                END ELSE BEGIN
                  Sheet.Range('M'+j).Value := beleghis.Menge;
                  beleghis_ek:= ROUND((beleghis."Einstandspreis MW"/((100+artikel."Handlingskosten %"+artikel."Zollsatz %")/100)),0.01);
                  Sheet.Range('N'+j).Value := beleghis_ek;
                  Sheet.Range('O'+j).Value := beleghis."VK-Preis";
                  LZ_tage:= (Service."Ablaufdatum Serviceleistung"- Service.Lizenzdatum-1);
                  LZ_tage_stich:=(Service."Ablaufdatum Serviceleistung"-Abgrenz_Datum-1);
                  LZ_tage_bewert:=0;
                  Sheet.Range('P'+j).Value := Service.Lizenzdatum;
                  Sheet.Range('Q'+j).Value := Service."Ablaufdatum Serviceleistung";
                  Sheet.Range('R'+j).Value := LZ_tage;
                  IF LZ_tage_stich>LZ_tage THEN BEGIN
                    LZ_tage_bewert := LZ_tage;
                  END ELSE BEGIN
                    LZ_tage_bewert := LZ_tage_stich;
                  END;
                  Sheet.Range('S'+j).Value := LZ_tage_bewert;
                  Sheet.Range('T'+j).Value := ROUND((beleghis_ek / LZ_tage * LZ_tage_bewert * beleghis.Menge),0.01);
                  Sheet.Range('U'+j).Value := ROUND((beleghis."VK-Preis" / LZ_tage*LZ_tage_bewert*beleghis.Menge),0.01);
                  Sum_ek:=(Sum_ek+ (ROUND(beleghis_ek / LZ_tage * LZ_tage_bewert * beleghis.Menge)));
                  Sum_vk:=(Sum_vk+ (ROUND(beleghis."VK-Preis"/ LZ_tage*LZ_tage_bewert*beleghis.Menge)));
                  liefnr:=beleghis."Belegnr.";
                  liefzeilennr:=beleghis."Zeilennr.";
                  Sheet.Range('W'+j).Value := Service."Wartungsvertragsnr.";
                  Sheet.Range('X'+j).Value := Service."BET-Nr.";
                  Sheet.Range('Y'+j).Value := Service."ACO Nr.";
                END;
                j:=INCSTR(j);
              END;
      //  Ende Lieferscheine holen aus Beleghistorie
            END;
          END;
        UNTIL Service.NEXT=0;
      END;
      Sheet.Range('A1').Value :='Abgrenz_Ek';
      Sheet.Range('B1').Value :=Sum_ek;
      Sheet.Range('D1').Value :='Abgrenz_Vk';
      Sheet.Range('E1').Value :=Sum_vk;

      Excel.Visible(TRUE);
    END;

    PROCEDURE Tagessatzrechnungen_listen@1140001();
    BEGIN
      {
      CLEAR(Excel);
      REPEAT
      UNTIL ISCLEAR(Excel);
      CREATE(Excel);

      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.Range('K:K').NumberFormat:='###.###,00';
      Sheet.Range('M:M').NumberFormat:='###.###,00';

      Sheet.Range('A1').Value := 'Rechnungen von Tagess„tzen  '; // šberschriftszeile
      Sheet.Range('N1').Value := 'Abgrenzungen  ';

      Sheet.Range('A2').Value := 'AU-Nr';
      Sheet.Range('B2').Value := 'Belegnr';
      Sheet.Range('C2').Value := 'Zeilennr';
      Sheet.Range('D2').Value := 'Belegdatum';
      Sheet.Range('E2').Value := 'Debitornr';
      Sheet.Range('F2').Value := 'Name';
      Sheet.Range('G2').Value := 'Land';
      Sheet.Range('H2').Value := 'Ort';
      Sheet.Range('I2').Value := 'Artikelnr';
      Sheet.Range('J2').Value := 'Menge';
      Sheet.Range('K2').Value := 'VK';
      Sheet.Range('L2').Value := 'W„hrung';
      Sheet.Range('M2').Value := 'Betrag ohne MWSt';
      Sheet.Range('N2').Value := 'Offene Stunden';
      Sheet.Range('O2').Value := 'Stundensatz';
      Sheet.Range('P2').Value := 'Abgrenzungsbetrag ohne MWSt';
      j := '3';                                   // <- Import in excel ab Zeile 3



      rech.RESET;
      rech.SETFILTER(rech.Belegart,'%1',rech.Belegart::Invoice);
      rech.SETFILTER(rech.Menge,'>%1',0);
      rech.SETFILTER(rech."Artikelnr.",'%1|%2|%3|%4|%5|%6|%7','TAGESSATZ - AUDIOCODES','TAGESSATZ','STD-SUPP-PROG/YR','REISEKOSTEN',
      'STUNDENSATZ - II','STUNDENSATZ','šBERNACHTUNGSPAUSCHALE');
      //rech.SETFILTER(rech.Herstellercode,'%1','96');
      IF rech.FINDFIRST THEN BEGIN
      REPEAT
        Sheet.Range('A'+j).Value := rech."Auftragsnr.";
        Sheet.Range('B'+j).Value := rech."Belegnr.";
        Sheet.Range('C'+j).Value := rech."Zeilennr.";
        Sheet.Range('D'+j).Value := rech.Belegdatum;
        Sheet.Range('E'+j).Value := rech."Debitornr.";
      deb.RESET;
      deb.SETFILTER(deb."No.",'%1',rech."Debitornr.");
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('F'+j).Value := deb.Name;
        Sheet.Range('G'+j).Value := deb."Country/Region Code";
        Sheet.Range('H'+j).Value := deb.City;
      END;
        Sheet.Range('I'+j).Value := rech."Artikelnr.";
        Sheet.Range('J'+j).Value := FORMAT(rech.Menge);
        Sheet.Range('K'+j).Value := rech."VK-Preis";
      IF  rech."VK-W„hrung" = '' THEN BEGIN
        Sheet.Range('L'+j).Value := 'EUR';
      END ELSE BEGIN
        Sheet.Range('L'+j).Value := rech."VK-W„hrung";
      END;
        Sheet.Range('M'+j).Value := rech."Betrag MW ohne Mwst.";

      j:=INCSTR(j);

      UNTIL rech.NEXT=0;
      END;

      Excel.Visible(TRUE);
      }
    END;

    PROCEDURE Freies_Lager@1140000();
    BEGIN
      {
      CLEAR(Excel);
      REPEAT
      UNTIL ISCLEAR(Excel);
      CREATE(Excel);

      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.Range('K:K').NumberFormat:='###.###,00';
      Sheet.Range('M:M').NumberFormat:='###.###,00';

      Sheet.Range('A1').Value := 'Freies Lager  '; // šberschriftszeile
      Sheet.Range('B1').Value := WORKDATE;

      Sheet.Range('A2').Value := 'Artikel';
      Sheet.Range('B2').Value := 'Art';
      Sheet.Range('C2').Value := 'Restmenge';
      Sheet.Range('D2').Value := 'Wert';
      Sheet.Range('E2').Value := 'Spalte H =Summe(B2+D2)';
      Sheet.Range('F2').Value := 'Spalte I =WENN(H2>0;G2/D2*H2;0)';

      j:='3';
      //Lager holen
        artikelposten.RESET;
        artikelposten.SETFILTER(artikelposten."Remaining Quantity",'>%1',0);
        artikelposten.SETFILTER(artikelposten."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
        IF artikelposten.FINDFIRST THEN BEGIN
        REPEAT
         artikelposten.CALCFIELDS(artikelposten."Cost Amount (Actual)");
          Sheet.Range('A'+j).Value := artikelposten."Item No.";
          Sheet.Range('B'+j).Value := 'Lager';
          Sheet.Range('C'+j).Value := FORMAT(artikelposten."Remaining Quantity");
          Sheet.Range('D'+j).Value := artikelposten."Cost Amount (Actual)"/artikelposten.Quantity*artikelposten."Remaining Quantity";
          j:=INCSTR(j);
        UNTIL artikelposten.NEXT=0;
        END;
      //AU_Bestand holen
        vkz.RESET;
        vkz.SETFILTER(vkz."Outstanding Quantity",'>%1',0);
        vkz.SETFILTER(vkz."Document Type",'%1',vkz."Document Type"::Order);
        vkz.SETFILTER(vkz.Type,'%1',vkz.Type::Item);
        vkz.SETFILTER(vkz."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
        IF vkz.FINDFIRST THEN BEGIN
        REPEAT
          Sheet.Range('A'+j).Value :=vkz."No.";
          Sheet.Range('B'+j).Value := 'Auftrag';
          Sheet.Range('C'+j).Value := FORMAT(vkz."Outstanding Quantity"*(-1));
          Sheet.Range('D'+j).Value := vkz."Unit Cost (LCY)"*vkz."Outstanding Quantity"*(-1);
          j:=INCSTR(j);
        UNTIL vkz.NEXT=0;
        END;
      // Bestellbestand holen
        ekz.RESET;
        ekz.SETFILTER(ekz."Outstanding Quantity",'>%1',0);
        ekz.SETFILTER(ekz."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
        IF ekz.FINDFIRST THEN BEGIN
        REPEAT
          Sheet.Range('A'+j).Value := ekz."No.";
          Sheet.Range('B'+j).Value := 'Bestell';
          Sheet.Range('C'+j).Value := FORMAT(ekz."Outstanding Quantity");
          Sheet.Range('D'+j).Value := ekz."Outstanding Quantity"*ekz."Unit Cost (LCY)";
          j:=INCSTR(j);
        UNTIL ekz.NEXT=0;
        END;


      j:=INCSTR(j);


      Excel.Visible(TRUE);
      }
    END;

    PROCEDURE Champsauswertung@1140002();
    BEGIN
      // Teil 1  Verl„ngerungen (Im ersten Teil enthalten)  *************************************************************
      {
      CLEAR(Excel);
      REPEAT
      UNTIL ISCLEAR(Excel);
      CREATE(Excel);

      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.Range('C:L').NumberFormat:='0,00';

      Sheet.Range('A1').Value := 'šbersicht der Champsvertr„ge per '; // šberschriftszeile
      Sheet.Range('A2').Value := WORKDATE;

      Sheet.Range('C3').Value := 'GJ10/11';
      Sheet.Range('D3').Value := 'GJ11/12';
      Sheet.Range('E3').Value := 'GJ12/13';
      Sheet.Range('F3').Value := 'GJ13/14';
      Sheet.Range('G3').Value := 'GJ14/15';
      Sheet.Range('H3').Value := 'GJ15/16';
      Sheet.Range('I3').Value := 'GJ16/17';
      Sheet.Range('J3').Value := 'GJ17/18';
      Sheet.Range('K3').Value := 'GJ18/19';
      Sheet.Range('L3').Value := 'GJ19/20';


      j := '5';                                   // <- Import in excel ab Zeile 3

      Service.RESET;
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
      REPEAT
      IF ((Service."SUP Artikelnr."='ACTS-ADV-HWREPLAC#01') OR (Service."SUP Artikelnr."='ACTS-ADV-HWREPLAC#02')) THEN BEGIN
      END ELSE BEGIN
      IF ((Service."SUP Artikelnr."='ACTS-SUPP-24X7/SO#01') OR (Service."SUP Artikelnr."='ACTS-SUPP-24X7/SO#02')) THEN BEGIN
      END ELSE BEGIN
      IF ((Service."SUP Artikelnr."='ACTS-SUPP-9X5/SOF#01') OR (Service."SUP Artikelnr."='ACTS-SUPP-9X5/SOF#02')) THEN BEGIN
      END ELSE BEGIN

        LZ_rest:=0;

        Lief.RESET;
        Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
        Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
        Lief.SETFILTER(Lief.Quantity,'<>%1',0);
         IF Lief.FINDFIRST THEN BEGIN
              IF ((Lief."No."='ACTS-ADV-HWREPLAC#01') OR (Lief."No."='ACTS-ADV-HWREPLAC#02')) THEN BEGIN
              END ELSE BEGIN
              IF ((Lief."No."='ACTS-SUPP-24X7/SO#01') OR (Lief."No."='ACTS-SUPP-24X7/SO#02')) THEN BEGIN
              END ELSE BEGIN
              IF ((Lief."No."='ACTS-SUPP-9X5/SOF#01') OR (Lief."No."='ACTS-SUPP-9X5/SOF#02')) THEN BEGIN
              END ELSE BEGIN

            IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
            END ELSE BEGIN
               liefnr:=Lief."Document No.";
               liefzeilennr:=Lief."Line No.";
            IF (Service.Lizenzdatum>300610D) AND (Service.Lizenzdatum<010711D) THEN
              GJ10_11_Neu:=GJ10_11_Neu+Lief."VK-Preis (MW)";
            IF (Service.Lizenzdatum>300611D) AND (Service.Lizenzdatum<010712D) THEN
              GJ11_12_Neu:=GJ11_12_Neu+Lief."VK-Preis (MW)";
            IF (Service.Lizenzdatum>300612D) AND (Service.Lizenzdatum<010713D) THEN
              GJ12_13_Neu:=GJ12_13_Neu+Lief."VK-Preis (MW)";
            IF (Service.Lizenzdatum>300613D) AND (Service.Lizenzdatum<010714D) THEN
              GJ13_14_Neu:=GJ13_14_Neu+Lief."VK-Preis (MW)";
            IF (Service.Lizenzdatum>300614D) AND (Service.Lizenzdatum<010715D) THEN
              GJ14_15_Neu:=GJ14_15_Neu+Lief."VK-Preis (MW)";
            IF (Service.Lizenzdatum>300615D) AND (Service.Lizenzdatum<010716D) THEN
              GJ15_16_Neu:=GJ15_16_Neu+Lief."VK-Preis (MW)";

            IF (Service."Ablaufdatum Serviceleistung">300610D) AND (Service."Ablaufdatum Serviceleistung"<010711D) THEN
              GJ10_11Abgel:=GJ10_11Abgel+Lief."VK-Preis (MW)";
            IF (Service."Ablaufdatum Serviceleistung">300611D) AND (Service."Ablaufdatum Serviceleistung"<010712D) THEN
              GJ11_12Abgel:=GJ11_12Abgel+Lief."VK-Preis (MW)";
            IF (Service."Ablaufdatum Serviceleistung">300612D) AND (Service."Ablaufdatum Serviceleistung"<010713D) THEN
              GJ12_13Abgel:=GJ12_13Abgel+Lief."VK-Preis (MW)";
            IF (Service."Ablaufdatum Serviceleistung">300613D) AND (Service."Ablaufdatum Serviceleistung"<010714D) THEN
              GJ13_14Abgel:=GJ13_14Abgel+Lief."VK-Preis (MW)";
            IF (Service."Ablaufdatum Serviceleistung">300614D) AND (Service."Ablaufdatum Serviceleistung"<010715D) THEN
              GJ14_15Abgel:=GJ14_15Abgel+Lief."VK-Preis (MW)";
            IF (Service."Ablaufdatum Serviceleistung">300615D) AND (Service."Ablaufdatum Serviceleistung"<010716D) THEN
              GJ15_16Abgel:=GJ15_16Abgel+Lief."VK-Preis (MW)";
            IF (Service."Ablaufdatum Serviceleistung">300616D) AND (Service."Ablaufdatum Serviceleistung"<010717D) THEN
              GJ16_17Abgel:=GJ16_17Abgel+Lief."VK-Preis (MW)";
            IF (Service."Ablaufdatum Serviceleistung">300617D) AND (Service."Ablaufdatum Serviceleistung"<010718D) THEN
              GJ17_18Abgel:=GJ17_18Abgel+Lief."VK-Preis (MW)";
            IF (Service."Ablaufdatum Serviceleistung">300618D) AND (Service."Ablaufdatum Serviceleistung"<010719D) THEN
              GJ18_19Abgel:=GJ18_19Abgel+Lief."VK-Preis (MW)";
            IF (Service."Ablaufdatum Serviceleistung">300619D) AND (Service."Ablaufdatum Serviceleistung"<010720D) THEN
              GJ19_20Abgel:=GJ19_20Abgel+Lief."VK-Preis (MW)";
        END;
        END;
        END;
        END;
      END;
      END;
      END;
      END;
      UNTIL Service.NEXT=0;
      END;
      Sheet.Range('A6').Value :='Abgeschlosse Gesamt:';
      Sheet.Range('C6').Value :=GJ10_11_Neu;
      Sheet.Range('D6').Value :=GJ11_12_Neu;
      Sheet.Range('E6').Value :=GJ12_13_Neu;
      Sheet.Range('F6').Value :=GJ13_14_Neu;
      Sheet.Range('G6').Value :=GJ14_15_Neu;
      Sheet.Range('H6').Value :=GJ15_16_Neu;
      Sheet.Range('I6').Value :=GJ16_17_Neu;
      Sheet.Range('J6').Value :=GJ17_18_Neu;
      Sheet.Range('K6').Value :=GJ18_19_Neu;
      Sheet.Range('L6').Value :=GJ19_20_Neu;

      Sheet.Range('A10').Value :='Abgelaufene:';
      Sheet.Range('C10').Value :=GJ10_11Abgel;
      Sheet.Range('D10').Value :=GJ11_12Abgel;
      Sheet.Range('E10').Value :=GJ12_13Abgel;
      Sheet.Range('F10').Value :=GJ13_14Abgel;
      Sheet.Range('G10').Value :=GJ14_15Abgel;
      Sheet.Range('H10').Value :=GJ15_16Abgel;
      Sheet.Range('I10').Value :=GJ16_17Abgel;
      Sheet.Range('J10').Value :=GJ17_18Abgel;
      Sheet.Range('K10').Value :=GJ18_19Abgel;
      Sheet.Range('L10').Value :=GJ19_20Abgel;

      // Teil 2  Verl„ngerungen (Im ersten Teil enthalten)  *************************************************************
      Service.RESET;
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);
      Service.SETFILTER(Service.Verl„ngerung,'%1',TRUE);
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
      REPEAT
      IF ((Service."SUP Artikelnr."='ACTS-ADV-HWREPLAC#01') OR (Service."SUP Artikelnr."='ACTS-ADV-HWREPLAC#02')) THEN BEGIN
      END ELSE BEGIN
      IF ((Service."SUP Artikelnr."='ACTS-SUPP-24X7/SO#01') OR (Service."SUP Artikelnr."='ACTS-SUPP-24X7/SO#02')) THEN BEGIN
      END ELSE BEGIN
      IF ((Service."SUP Artikelnr."='ACTS-SUPP-9X5/SOF#01') OR (Service."SUP Artikelnr."='ACTS-SUPP-9X5/SOF#02')) THEN BEGIN
      END ELSE BEGIN

       wartkopf.RESET;
       wartkopf.SETFILTER(wartkopf."Hauptwartungsvertragsnr.",'%1',Service."Hauptwartungsvertragsnr.");
       wartkopf.SETFILTER(wartkopf.Verl„ngerungen,'<>%1',0);
       wartkopf.SETFILTER(wartkopf.Inaktiv,'%1',FALSE);
       IF wartkopf.FINDFIRST THEN BEGIN

        LZ_rest:=0;

        Lief.RESET;
        Lief.SETFILTER(Lief."Document No.",'%1',wartkopf."Lieferscheinnr.");
        Lief.SETFILTER(Lief."Line No.",'%1',wartkopf."Lieferscheinzeilennr.");
        Lief.SETFILTER(Lief.Quantity,'<>%1',0);
         IF Lief.FINDFIRST THEN BEGIN
              IF ((Lief."No."='ACTS-ADV-HWREPLAC#01') OR (Lief."No."='ACTS-ADV-HWREPLAC#02')) THEN BEGIN
              END ELSE BEGIN
              IF ((Lief."No."='ACTS-SUPP-24X7/SO#01') OR (Lief."No."='ACTS-SUPP-24X7/SO#02')) THEN BEGIN
              END ELSE BEGIN
              IF ((Lief."No."='ACTS-SUPP-9X5/SOF#01') OR (Lief."No."='ACTS-SUPP-9X5/SOF#02')) THEN BEGIN
              END ELSE BEGIN

            IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
            END ELSE BEGIN
               liefnr:=Lief."Document No.";
               liefzeilennr:=Lief."Line No.";
            IF (Service.Lizenzdatum>300610D) AND (Service.Lizenzdatum<010711D) THEN
             GJ10_11_Verl:=GJ10_11_Verl+Lief."VK-Preis (MW)";
            IF (Service.Lizenzdatum>300611D) AND (Service.Lizenzdatum<010712D) THEN
             GJ11_12_Verl:=GJ11_12_Verl+Lief."VK-Preis (MW)";
            IF (Service.Lizenzdatum>300612D) AND (Service.Lizenzdatum<010713D) THEN
             GJ12_13_Verl:=GJ12_13_Verl+Lief."VK-Preis (MW)";
            IF (Service.Lizenzdatum>300613D) AND (Service.Lizenzdatum<010714D) THEN
             GJ13_14_Verl:=GJ13_14_Verl+Lief."VK-Preis (MW)";
            IF (Service.Lizenzdatum>300614D) AND (Service.Lizenzdatum<010715D) THEN
             GJ14_15_Verl:=GJ14_15_Verl+Lief."VK-Preis (MW)";
            IF (Service.Lizenzdatum>300615D) AND (Service.Lizenzdatum<010716D) THEN
             GJ15_16_Verl:=GJ15_16_Verl+Lief."VK-Preis (MW)";
            IF (Service.Lizenzdatum>300616D) AND (Service.Lizenzdatum<010717D) THEN
             GJ16_17_Verl:=GJ16_17_Verl+Lief."VK-Preis (MW)";
            IF (Service.Lizenzdatum>300617D) AND (Service.Lizenzdatum<010718D) THEN
             GJ17_18_Verl:=GJ17_18_Verl+Lief."VK-Preis (MW)";
            IF (Service.Lizenzdatum>300618D) AND (Service.Lizenzdatum<010719D) THEN
             GJ18_19_Verl:=GJ18_19_Verl+Lief."VK-Preis (MW)";
            IF (Service.Lizenzdatum>300619D) AND (Service.Lizenzdatum<010720D) THEN
             GJ19_20_Verl:=GJ19_20_Verl+Lief."VK-Preis (MW)";
          END;
          END;
          END;
          END;
        END;
      END;
      END;
      END;
      END;
      UNTIL Service.NEXT=0;
      END;

      Sheet.Range('A7').Value :='Neu abgeschlossen:';
      Sheet.Range('C7').Value :=GJ10_11_Neu-GJ10_11_Verl;
      Sheet.Range('D7').Value :=GJ11_12_Neu-GJ11_12_Verl;
      Sheet.Range('E7').Value :=GJ12_13_Neu-GJ12_13_Verl;
      Sheet.Range('F7').Value :=GJ13_14_Neu-GJ13_14_Verl;
      Sheet.Range('G7').Value :=GJ14_15_Neu-GJ14_15_Verl;
      Sheet.Range('H7').Value :=GJ15_16_Neu-GJ15_16_Verl;
      Sheet.Range('I7').Value :=GJ16_17_Neu-GJ16_17_Verl;
      Sheet.Range('J7').Value :=GJ17_18_Neu-GJ17_18_Verl;
      Sheet.Range('K7').Value :=GJ18_19_Neu-GJ18_19_Verl;
      Sheet.Range('L7').Value :=GJ19_20_Neu-GJ19_20_Verl;


      Sheet.Range('A8').Value :='Verl„ngert:';
      Sheet.Range('C8').Value :=GJ10_11_Verl;
      Sheet.Range('D8').Value :=GJ11_12_Verl;
      Sheet.Range('E8').Value :=GJ12_13_Verl;
      Sheet.Range('F8').Value :=GJ13_14_Verl;
      Sheet.Range('G8').Value :=GJ14_15_Verl;
      Sheet.Range('H8').Value :=GJ15_16_Verl;
      Sheet.Range('I8').Value :=GJ16_17_Verl;
      Sheet.Range('J8').Value :=GJ17_18_Verl;
      Sheet.Range('K8').Value :=GJ18_19_Verl;
      Sheet.Range('L8').Value :=GJ19_20_Verl;


      Sheet.Range('A12').Value :='Verl„ngert in % abgelaufen:';
      IF GJ10_11Abgel<> 0 THEN
      Sheet.Range('C12').Value :=GJ10_11_Verl/GJ10_11Abgel*100;
      IF GJ11_12Abgel<> 0 THEN
      Sheet.Range('D12').Value :=GJ11_12_Verl/GJ11_12Abgel*100;
      IF GJ12_13Abgel<> 0 THEN
      Sheet.Range('E12').Value :=GJ12_13_Verl/GJ12_13Abgel*100;
      IF GJ13_14Abgel<> 0 THEN
      Sheet.Range('F12').Value :=GJ13_14_Verl/GJ13_14Abgel*100;
      IF GJ14_15Abgel<> 0 THEN
      Sheet.Range('G12').Value :=GJ14_15_Verl/GJ14_15Abgel*100;
      IF GJ15_16Abgel<> 0 THEN
      Sheet.Range('H12').Value :=GJ15_16_Verl/GJ15_16Abgel*100;
      IF GJ16_17Abgel<> 0 THEN
      Sheet.Range('I12').Value :=GJ16_17_Verl/GJ16_17Abgel*100;
      IF GJ17_18Abgel<> 0 THEN
      Sheet.Range('J12').Value :=GJ17_18_Verl/GJ17_18Abgel*100;
      IF GJ18_19Abgel<> 0 THEN
      Sheet.Range('K12').Value :=GJ18_19_Verl/GJ18_19Abgel*100;
      IF GJ19_20Abgel<> 0 THEN
      Sheet.Range('L12').Value :=GJ19_20_Verl/GJ19_20Abgel*100;


      Sheet.Range('A14').Value :='Verl„ngert in % neue:';
      IF (GJ10_11_Neu-GJ10_11_Verl)<> 0 THEN
      Sheet.Range('C14').Value :=GJ10_11_Verl/(GJ10_11_Neu-GJ10_11_Verl)*100;
      IF (GJ11_12_Neu-GJ11_12_Verl)<> 0 THEN
      Sheet.Range('D14').Value :=GJ11_12_Verl/(GJ11_12_Neu-GJ11_12_Verl)*100;
      IF (GJ12_13_Neu-GJ12_13_Verl)<> 0 THEN
      Sheet.Range('E14').Value :=GJ12_13_Verl/(GJ12_13_Neu-GJ12_13_Verl)*100;
      IF (GJ13_14_Neu-GJ13_14_Verl)<> 0 THEN
      Sheet.Range('F14').Value :=GJ13_14_Verl/(GJ13_14_Neu-GJ13_14_Verl)*100;
      IF (GJ14_15_Neu-GJ14_15_Verl)<> 0 THEN
      Sheet.Range('G14').Value :=GJ14_15_Verl/(GJ14_15_Neu-GJ14_15_Verl)*100;
      IF (GJ15_16_Neu-GJ15_16_Verl)<> 0 THEN
      Sheet.Range('H14').Value :=GJ15_16_Verl/(GJ15_16_Neu-GJ15_16_Verl)*100;
      IF (GJ16_17_Neu-GJ16_17_Verl)<> 0 THEN
      Sheet.Range('I14').Value :=GJ16_17_Verl/(GJ16_17_Neu-GJ16_17_Verl)*100;
      IF (GJ17_18_Neu-GJ17_18_Verl)<> 0 THEN
      Sheet.Range('J14').Value :=GJ17_18_Verl/(GJ17_18_Neu-GJ17_18_Verl)*100;
      IF (GJ18_19_Neu-GJ18_19_Verl)<> 0 THEN
      Sheet.Range('K14').Value :=GJ18_19_Verl/(GJ18_19_Neu-GJ18_19_Verl)*100;
      IF (GJ19_20_Neu-GJ19_20_Verl)<> 0 THEN
      Sheet.Range('L14').Value :=GJ19_20_Verl/(GJ19_20_Neu-GJ19_20_Verl)*100;

      // Teil 3 Abgrenzugen per Datum  *************************************************************


      IF Abgrenz_Datum = 0D THEN
      ERROR('Es wurde kein Datum eingegeben. Report abgebrochen!');

      //Variablenbelegung
      liefnr:='LS00';
      liefzeilennr:=10;


      Service.RESET;
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      Service.SETFILTER(Service."Ablaufdatum Serviceleistung",'>%1',Abgrenz_Datum);
      Service.SETFILTER(Service.Belegdatum,'<=%1',Abgrenz_Datum);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
      REPEAT
      IF ((Service."SUP Artikelnr."='ACTS-ADV-HWREPLAC#01') OR (Service."SUP Artikelnr."='ACTS-ADV-HWREPLAC#02')) THEN BEGIN
      END ELSE BEGIN
      IF ((Service."SUP Artikelnr."='ACTS-SUPP-24X7/SO#01') OR (Service."SUP Artikelnr."='ACTS-SUPP-24X7/SO#02')) THEN BEGIN
      END ELSE BEGIN
      IF ((Service."SUP Artikelnr."='ACTS-SUPP-9X5/SOF#01') OR (Service."SUP Artikelnr."='ACTS-SUPP-9X5/SOF#02')) THEN BEGIN
      END ELSE BEGIN

        LZ_rest:=0;

        Lief.RESET;
        Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
        Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
         IF Lief.FINDFIRST THEN BEGIN
              IF ((Lief."No."='ACTS-ADV-HWREPLAC#01') OR (Lief."No."='ACTS-ADV-HWREPLAC#02')) THEN BEGIN
              END ELSE BEGIN
              IF ((Lief."No."='ACTS-SUPP-24X7/SO#01') OR (Lief."No."='ACTS-SUPP-24X7/SO#02')) THEN BEGIN
              END ELSE BEGIN
              IF ((Lief."No."='ACTS-SUPP-9X5/SOF#01') OR (Lief."No."='ACTS-SUPP-9X5/SOF#02')) THEN BEGIN
              END ELSE BEGIN

            IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
            END ELSE BEGIN

              LZ_tage:= (Service."Ablaufdatum Serviceleistung"- Service.Lizenzdatum-1);
              LZ_tage_stich:=(Service."Ablaufdatum Serviceleistung"-Abgrenz_Datum-1);
              LZ_tage_bewert:=0;

              IF LZ_tage_stich>LZ_tage THEN BEGIN
              LZ_tage_bewert := LZ_tage;
              END ELSE BEGIN
              LZ_tage_bewert := LZ_tage_stich;
              END;


              Sum_ek:=(Sum_ek+ (ROUND(Lief."Unit Cost (LCY)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
              Sum_vk:=(Sum_vk+ (ROUND(Lief."VK-Preis (MW)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));

               liefnr:=Lief."Document No.";
               liefzeilennr:=Lief."Line No.";
          END;
          END;
          END;
          END;
        END;
      END;
      END;
      END;
      UNTIL Service.NEXT=0;
      END;

      Sheet.Range('A16').Value :='Abgrenzung per: ';
      Sheet.Range('A17').Value :=Abgrenz_Datum;
      Sheet.Range('A19').Value :='Abgrenz_Ek';
      Sheet.Range('B19').Value :=FORMAT(Sum_ek);
      Sheet.Range('A20').Value :='Abgrenz_Vk';
      Sheet.Range('B20').Value :=FORMAT(Sum_vk);
      Excel.Visible(TRUE);
      }
    END;

    PROCEDURE Champsstatistik@1140003();
    BEGIN
      {
      CLEAR(Excel);
      REPEAT
      UNTIL ISCLEAR(Excel);
      CREATE(Excel);

      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.Range('C:O').NumberFormat:='0,00';

      Sheet.Range('A1').Value := 'šbersicht der Champsvertr„ge per '; // šberschriftszeile
      Sheet.Range('A2').Value := WORKDATE;

      //  PeriodStartDate[i + 1] := CALCDATE('1M',PeriodStartDate[i]);

      FOR i:=1 TO 12 DO
      BEGIN
        var_jahr[i+1] := CALCDATE('1J',var_jahr[i]);


      Sheet.Range('C4').Value :='GJ '+FORMAT(var_jahr[1]);
      Sheet.Range('D4').Value :='GJ '+FORMAT(var_jahr[2]);
      Sheet.Range('E4').Value :='GJ '+FORMAT(var_jahr[3]);
      Sheet.Range('F4').Value :='GJ '+FORMAT(var_jahr[4]);
      Sheet.Range('G4').Value :='GJ '+FORMAT(var_jahr[5]);
      Sheet.Range('H4').Value :='GJ '+FORMAT(var_jahr[6]);
      Sheet.Range('I4').Value :='GJ '+FORMAT(var_jahr[7]);
      Sheet.Range('J4').Value :='GJ '+FORMAT(var_jahr[8]);
      Sheet.Range('K4').Value :='GJ '+FORMAT(var_jahr[9]);
      Sheet.Range('L4').Value :='GJ '+FORMAT(var_jahr[10]);
      Sheet.Range('M4').Value :='GJ '+FORMAT(var_jahr[11]);
      Sheet.Range('N4').Value :='GJ '+FORMAT(var_jahr[12]);
      END;



      j := '5';                                   // <- Import in excel ab Zeile 3


      Service.RESET;
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      //Service.SETFILTER(Service."Hauptwartungsvertragsnr.",'%1|%2','SV101035','SV101119');
      //Service.SETFILTER(Service."Hauptwartungsvertragsnr.",'%1','SV101119');
      //Service.SETFILTER(Service."Hauptwartungsvertragsnr.",'%1','SV101035');
      IF Service.FINDFIRST THEN BEGIN
      REPEAT
        LZ_rest:=0;


        Lief.RESET;
        Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
        Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
        Lief.SETFILTER(Lief.Quantity,'<>%1',0);
        Lief.SETFILTER(Lief."No.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');

         IF Lief.FINDFIRST THEN BEGIN
            IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
            END ELSE BEGIN
               liefnr:=Lief."Document No.";
               liefzeilennr:=Lief."Line No.";

           FOR i:=1 TO 12 DO
           BEGIN
           LZ_tage:= (Service."Ablaufdatum Serviceleistung"- Service.Lizenzdatum);
             var_jahr[i+1] := CALCDATE('1J',var_jahr[i]);
      //  Gesamt im Jahr abgeschlossen
            IF (Service.Lizenzdatum>(var_jahr[i])) AND (Service.Lizenzdatum<(var_jahr[i]+365)) THEN
             var_jahr_gesamt[i]:=var_jahr_gesamt[i]+Lief."Unit Price";
      //  Ende Gesamt im Jahr abgeschlossen
      //  Gesamt im Jahr neu abgeschlossen
          IF Service.Verl„ngerung=FALSE THEN BEGIN
            IF (Service.Lizenzdatum>(var_jahr[i])) AND (Service.Lizenzdatum<(var_jahr[i]+365)) THEN
             var_jahr_neu[i]:=var_jahr_neu[i]+Lief."Unit Price";
          END;
      //  Ende Gesamt im Jahr neu abgeschlossen
      //  Gesamt im Jahr verl„ngert
          IF Service.Verl„ngerung = TRUE THEN BEGIN
            IF (Service.Lizenzdatum>(var_jahr[i])) AND (Service.Lizenzdatum<(var_jahr[i]+365)) THEN
             var_jahr_verl„ng[i]:=var_jahr_verl„ng[i]+Lief."Unit Price";
          END;
      //  Ende Gesamt im Jahr verl„ngert
      //  Gesamt im Jahr abgelaufen
           IF (Service."Ablaufdatum Serviceleistung">(var_jahr[i])) AND (Service."Ablaufdatum Serviceleistung"<(var_jahr[i]+365)) THEN
             var_jahr_abgelauf[i]:=var_jahr_abgelauf[i]+Lief."Unit Price";
      //  Ende Gesamt im Jahr abgelaufen


       //   Laufzeitenberechnung  ******************************************************************

             IF ((Service.Lizenzdatum>(var_jahr[i])) AND (Service.Lizenzdatum<(var_jahr[i]+365))) THEN
             BEGIN
              LZ_tage_jahr[i]:=var_jahr[i]+365-Service.Lizenzdatum;
              var_jahr_wert[i]:=var_jahr_wert[i]+(Lief."Unit Price"/LZ_tage*LZ_tage_jahr[i]);
             END;

             IF (Service."Ablaufdatum Serviceleistung">(var_jahr[i]+365)) AND ((var_jahr[i])>Service.Lizenzdatum) THEN
             BEGIN
              LZ_tage_jahr[i]:=var_jahr[i]+365-var_jahr[i];
              var_jahr_wert[i]:=var_jahr_wert[i]+(Lief."Unit Price"/LZ_tage*LZ_tage_jahr[i]);
             END;


             IF ((Service."Ablaufdatum Serviceleistung"-1>(var_jahr[i])) AND
             (Service."Ablaufdatum Serviceleistung"-1<(var_jahr[i]+365))) THEN
             BEGIN
              LZ_tage_jahr[i]:=Service."Ablaufdatum Serviceleistung"-1-var_jahr[i];
              var_jahr_wert[i]:=var_jahr_wert[i]+(Lief."VK-Preis (MW)"/LZ_tage*LZ_tage_jahr[i]);
             END;
      //  ENDE Laufzeitenberechnung ******************************************************************

          END;
       END;

       END;
      UNTIL Service.NEXT=0;
      END;
      Sheet.Range('A6').Value :='Gesamt Jahr';
      Sheet.Range('C6').Value :=var_jahr_gesamt[1];
      Sheet.Range('D6').Value :=var_jahr_gesamt[2];
      Sheet.Range('E6').Value :=var_jahr_gesamt[3];
      Sheet.Range('F6').Value :=var_jahr_gesamt[4];
      Sheet.Range('G6').Value :=var_jahr_gesamt[5];
      Sheet.Range('H6').Value :=var_jahr_gesamt[6];
      Sheet.Range('I6').Value :=var_jahr_gesamt[7];
      Sheet.Range('J6').Value :=var_jahr_gesamt[8];
      Sheet.Range('K6').Value :=var_jahr_gesamt[9];
      Sheet.Range('L6').Value :=var_jahr_gesamt[10];
      Sheet.Range('M6').Value :=var_jahr_gesamt[11];
      Sheet.Range('N6').Value :=var_jahr_gesamt[12];

      Sheet.Range('A7').Value :='Gesamt Jahr neu';
      Sheet.Range('C7').Value :=var_jahr_neu[1];
      Sheet.Range('D7').Value :=var_jahr_neu[2];
      Sheet.Range('E7').Value :=var_jahr_neu[3];
      Sheet.Range('F7').Value :=var_jahr_neu[4];
      Sheet.Range('G7').Value :=var_jahr_neu[5];
      Sheet.Range('H7').Value :=var_jahr_neu[6];
      Sheet.Range('I7').Value :=var_jahr_neu[7];
      Sheet.Range('J7').Value :=var_jahr_neu[8];
      Sheet.Range('K7').Value :=var_jahr_neu[9];
      Sheet.Range('L7').Value :=var_jahr_neu[10];
      Sheet.Range('M7').Value :=var_jahr_neu[11];
      Sheet.Range('N7').Value :=var_jahr_neu[12];

      Sheet.Range('A8').Value :='Gesamt Jahr verl„ngert';
      Sheet.Range('C8').Value :=var_jahr_verl„ng[1];
      Sheet.Range('D8').Value :=var_jahr_verl„ng[2];
      Sheet.Range('E8').Value :=var_jahr_verl„ng[3];
      Sheet.Range('F8').Value :=var_jahr_verl„ng[4];
      Sheet.Range('G8').Value :=var_jahr_verl„ng[5];
      Sheet.Range('H8').Value :=var_jahr_verl„ng[6];
      Sheet.Range('I8').Value :=var_jahr_verl„ng[7];
      Sheet.Range('J8').Value :=var_jahr_verl„ng[8];
      Sheet.Range('K8').Value :=var_jahr_verl„ng[9];
      Sheet.Range('L8').Value :=var_jahr_verl„ng[10];
      Sheet.Range('M8').Value :=var_jahr_verl„ng[11];
      Sheet.Range('N8').Value :=var_jahr_verl„ng[12];

      Sheet.Range('A10').Value :='im Jahr ablaufend';
      Sheet.Range('C10').Value :=var_jahr_abgelauf[1];
      Sheet.Range('D10').Value :=var_jahr_abgelauf[2];
      Sheet.Range('E10').Value :=var_jahr_abgelauf[3];
      Sheet.Range('F10').Value :=var_jahr_abgelauf[4];
      Sheet.Range('G10').Value :=var_jahr_abgelauf[5];
      Sheet.Range('H10').Value :=var_jahr_abgelauf[6];
      Sheet.Range('I10').Value :=var_jahr_abgelauf[7];
      Sheet.Range('J10').Value :=var_jahr_abgelauf[8];
      Sheet.Range('K10').Value :=var_jahr_abgelauf[9];
      Sheet.Range('L10').Value :=var_jahr_abgelauf[10];
      Sheet.Range('M10').Value :=var_jahr_abgelauf[11];
      Sheet.Range('N10').Value :=var_jahr_abgelauf[12];
       {
      Sheet.Range('A12').Value :='Verl„ngert in % von Neuvertr„gen';
      IF ((var_jahr_verl„ng[1]<>0) AND (var_jahr_neu[1]<>0)) THEN
      Sheet.Range('C12').Value :=(var_jahr_verl„ng[1]/var_jahr_neu[1]*100);
      IF ((var_jahr_verl„ng[2]<>0) AND (var_jahr_neu[2]<>0)) THEN
      Sheet.Range('D12').Value :=(var_jahr_verl„ng[2]/var_jahr_neu[2]*100);
      IF ((var_jahr_verl„ng[3]<>0) AND (var_jahr_neu[3]<>0)) THEN
      Sheet.Range('E12').Value :=(var_jahr_verl„ng[3]/var_jahr_neu[3]*100);
      IF ((var_jahr_verl„ng[4]<>0) AND (var_jahr_neu[4]<>0)) THEN
      Sheet.Range('F12').Value :=(var_jahr_verl„ng[4]/var_jahr_neu[4]*100);
      IF ((var_jahr_verl„ng[5]<>0) AND (var_jahr_neu[5]<>0)) THEN
      Sheet.Range('G12').Value :=(var_jahr_verl„ng[5]/var_jahr_neu[5]*100);
      IF ((var_jahr_verl„ng[6]<>0) AND (var_jahr_neu[6]<>0)) THEN
      Sheet.Range('H12').Value :=(var_jahr_verl„ng[6]/var_jahr_neu[6]*100);
      IF ((var_jahr_verl„ng[7]<>0) AND (var_jahr_neu[7]<>0)) THEN
      Sheet.Range('I12').Value :=(var_jahr_verl„ng[7]/var_jahr_neu[7]*100);
      IF ((var_jahr_verl„ng[8]<>0) AND (var_jahr_neu[8]<>0)) THEN
      Sheet.Range('J12').Value :=(var_jahr_verl„ng[8]/var_jahr_neu[8]*100);
      IF ((var_jahr_verl„ng[9]<>0) AND (var_jahr_neu[9]<>0)) THEN
      Sheet.Range('K12').Value :=(var_jahr_verl„ng[9]/var_jahr_neu[9]*100);
      IF ((var_jahr_verl„ng[10]<>0) AND (var_jahr_neu[10]<>0)) THEN
      Sheet.Range('L12').Value :=(var_jahr_verl„ng[10]/var_jahr_neu[10]*100);
      IF ((var_jahr_verl„ng[11]<>0) AND (var_jahr_neu[11]<>0)) THEN
      Sheet.Range('M12').Value :=(var_jahr_verl„ng[11]/var_jahr_neu[11]*100);
      IF ((var_jahr_verl„ng[12]<>0) AND (var_jahr_neu[12]<>0)) THEN
      Sheet.Range('N12').Value :=(var_jahr_verl„ng[12]/var_jahr_neu[12]*100);
       }
      Sheet.Range('A13').Value :='Verl„ngert in % von Ablaufend';
      IF ((var_jahr_verl„ng[1]<>0) AND (var_jahr_abgelauf[1]<>0)) THEN
      Sheet.Range('C13').Value :=(var_jahr_verl„ng[1]/var_jahr_abgelauf[1]*100);
      IF ((var_jahr_verl„ng[2]<>0) AND (var_jahr_abgelauf[2]<>0)) THEN
      Sheet.Range('D13').Value :=(var_jahr_verl„ng[2]/var_jahr_abgelauf[2]*100);
      IF ((var_jahr_verl„ng[3]<>0) AND (var_jahr_abgelauf[3]<>0)) THEN
      Sheet.Range('E13').Value :=(var_jahr_verl„ng[3]/var_jahr_abgelauf[3]*100);
      IF ((var_jahr_verl„ng[4]<>0) AND (var_jahr_abgelauf[4]<>0)) THEN
      Sheet.Range('F13').Value :=(var_jahr_verl„ng[4]/var_jahr_abgelauf[4]*100);
      IF ((var_jahr_verl„ng[5]<>0) AND (var_jahr_abgelauf[5]<>0)) THEN
      Sheet.Range('G13').Value :=(var_jahr_verl„ng[5]/var_jahr_abgelauf[5]*100);
      IF ((var_jahr_verl„ng[6]<>0) AND (var_jahr_abgelauf[6]<>0)) THEN
      Sheet.Range('H13').Value :=(var_jahr_verl„ng[6]/var_jahr_abgelauf[6]*100);
      IF ((var_jahr_verl„ng[7]<>0) AND (var_jahr_abgelauf[7]<>0)) THEN
      Sheet.Range('I13').Value :=(var_jahr_verl„ng[7]/var_jahr_abgelauf[7]*100);
      IF ((var_jahr_verl„ng[8]<>0) AND (var_jahr_abgelauf[8]<>0)) THEN
      Sheet.Range('J13').Value :=(var_jahr_verl„ng[8]/var_jahr_abgelauf[8]*100);
      IF ((var_jahr_verl„ng[9]<>0) AND (var_jahr_abgelauf[9]<>0)) THEN
      Sheet.Range('K13').Value :=(var_jahr_verl„ng[9]/var_jahr_abgelauf[9]*100);
      IF ((var_jahr_verl„ng[10]<>0) AND (var_jahr_abgelauf[10]<>0)) THEN
      Sheet.Range('L13').Value :=(var_jahr_verl„ng[10]/var_jahr_abgelauf[10]*100);
      IF ((var_jahr_verl„ng[11]<>0) AND (var_jahr_abgelauf[11]<>0)) THEN
      Sheet.Range('M13').Value :=(var_jahr_verl„ng[11]/var_jahr_abgelauf[11]*100);
      IF ((var_jahr_verl„ng[12]<>0) AND (var_jahr_abgelauf[12]<>0)) THEN
      Sheet.Range('N13').Value :=(var_jahr_verl„ng[12]/var_jahr_abgelauf[12]*100);

      Sheet.Range('A14').Value :='Verl„ngert in % von Jahreseingang';
      IF ((var_jahr_verl„ng[1]<>0) AND (var_jahr_gesamt[1]<>0)) THEN
      Sheet.Range('C14').Value :=(var_jahr_verl„ng[1]/var_jahr_gesamt[1]*100);
      IF ((var_jahr_verl„ng[2]<>0) AND (var_jahr_gesamt[2]<>0)) THEN
      Sheet.Range('D14').Value :=(var_jahr_verl„ng[2]/var_jahr_gesamt[2]*100);
      IF ((var_jahr_verl„ng[3]<>0) AND (var_jahr_gesamt[3]<>0)) THEN
      Sheet.Range('E14').Value :=(var_jahr_verl„ng[3]/var_jahr_gesamt[3]*100);
      IF ((var_jahr_verl„ng[4]<>0) AND (var_jahr_gesamt[4]<>0)) THEN
      Sheet.Range('F14').Value :=(var_jahr_verl„ng[4]/var_jahr_gesamt[4]*100);
      IF ((var_jahr_verl„ng[5]<>0) AND (var_jahr_gesamt[5]<>0)) THEN
      Sheet.Range('G14').Value :=(var_jahr_verl„ng[5]/var_jahr_gesamt[5]*100);
      IF ((var_jahr_verl„ng[6]<>0) AND (var_jahr_gesamt[6]<>0)) THEN
      Sheet.Range('H14').Value :=(var_jahr_verl„ng[6]/var_jahr_gesamt[6]*100);
      IF ((var_jahr_verl„ng[7]<>0) AND (var_jahr_gesamt[7]<>0)) THEN
      Sheet.Range('I14').Value :=(var_jahr_verl„ng[7]/var_jahr_gesamt[7]*100);
      IF ((var_jahr_verl„ng[8]<>0) AND (var_jahr_gesamt[8]<>0)) THEN
      Sheet.Range('J14').Value :=(var_jahr_verl„ng[8]/var_jahr_gesamt[8]*100);
      IF ((var_jahr_verl„ng[9]<>0) AND (var_jahr_gesamt[9]<>0)) THEN
      Sheet.Range('K14').Value :=(var_jahr_verl„ng[9]/var_jahr_gesamt[9]*100);
      IF ((var_jahr_verl„ng[10]<>0) AND (var_jahr_gesamt[10]<>0)) THEN
      Sheet.Range('L14').Value :=(var_jahr_verl„ng[10]/var_jahr_gesamt[10]*100);
      IF ((var_jahr_verl„ng[11]<>0) AND (var_jahr_gesamt[11]<>0)) THEN
      Sheet.Range('M14').Value :=(var_jahr_verl„ng[11]/var_jahr_gesamt[11]*100);
      IF ((var_jahr_verl„ng[12]<>0) AND (var_jahr_gesamt[12]<>0)) THEN
      Sheet.Range('N14').Value :=(var_jahr_verl„ng[12]/var_jahr_gesamt[12]*100);




      Sheet.Range('A16').Value :='Auf Laufzeit verteilt';
      Sheet.Range('C16').Value :=var_jahr_wert[1];
      Sheet.Range('D16').Value :=var_jahr_wert[2];
      Sheet.Range('E16').Value :=var_jahr_wert[3];
      Sheet.Range('F16').Value :=var_jahr_wert[4];
      Sheet.Range('G16').Value :=var_jahr_wert[5];
      Sheet.Range('H16').Value :=var_jahr_wert[6];
      Sheet.Range('I16').Value :=var_jahr_wert[7];
      Sheet.Range('J16').Value :=var_jahr_wert[8];
      Sheet.Range('K16').Value :=var_jahr_wert[9];
      Sheet.Range('L16').Value :=var_jahr_wert[10];
      Sheet.Range('M16').Value :=var_jahr_wert[11];
      Sheet.Range('N16').Value :=var_jahr_wert[12];


      Service.RESET;
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      Service.SETFILTER(Service."Ablaufdatum Serviceleistung",'>%1',Abgrenz_Datum);
      Service.SETFILTER(Service.Belegdatum,'<=%1',Abgrenz_Datum);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
      REPEAT
        LZ_rest:=0;

        Lief.RESET;
        Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
        Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
         IF Lief.FINDFIRST THEN BEGIN

            IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
            END ELSE BEGIN

              LZ_tage:= (Service."Ablaufdatum Serviceleistung"- Service.Lizenzdatum-1);
              LZ_tage_stich:=(Service."Ablaufdatum Serviceleistung"-Abgrenz_Datum-1);
              LZ_tage_bewert:=0;

              IF LZ_tage_stich>LZ_tage THEN BEGIN
              LZ_tage_bewert := LZ_tage;
              END ELSE BEGIN
              LZ_tage_bewert := LZ_tage_stich;
              END;




              Sum_ek:=(Sum_ek+ (ROUND(Lief."Unit Cost (LCY)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
              Sum_vk:=(Sum_vk+ (ROUND(Lief."VK-Preis (MW)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
      //        Sum_vk:=(Sum_vk+ (ROUND(Lief."Unit Price"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));

               liefnr:=Lief."Document No.";
               liefzeilennr:=Lief."Line No.";
          END;
        END;

      UNTIL Service.NEXT=0;
      END;

      Sheet.Range('A20').Value :='Abgrenzung per: ';
      Sheet.Range('A21').Value :=Abgrenz_Datum;
      Sheet.Range('A22').Value :='Abgrenz_Ek';
      Sheet.Range('B22').Value :=FORMAT(Sum_ek);
      Sheet.Range('A23').Value :='Abgrenz_Vk';
      Sheet.Range('B23').Value :=FORMAT(Sum_vk);
      Excel.Visible(TRUE);


      //IF ERASE('F:\Tausch\Nav\Daten\Daten_Nav_Champs.xlsx')THEN;
      //Book.SaveAs('F:\Tausch\Nav\Daten\Daten_Nav_Champs.xlsx');
      //Book.Close;



      //Excel.Visible(TRUE);
      }
    END;

    PROCEDURE Rohbilanz@1140004();
    BEGIN
      {
      CLEAR(Excel);
      REPEAT
      UNTIL ISCLEAR(Excel);
      CREATE(Excel);

      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.Range('C:O').NumberFormat:='0,00';

      Sheet.Range('A1').Value :='Nr.';
      Sheet.Range('B1').Value :='Name';
      Sheet.Range('C1').Value :='Saldo';
      j := '2';
      sachkonten.RESET;
      sachkonten.CALCFIELDS(Balance);
      sachkonten.SETFILTER(sachkonten."Balance at Date",'<>%1',0);
      sachkonten.SETFILTER(sachkonten."Income/Balance",'%1',sachkonten."Income/Balance"::"Balance Sheet");
      IF sachkonten.FINDFIRST THEN BEGIN
      sachkonten.CALCFIELDS(Balance);

      REPEAT
      sachkonten.CALCFIELDS(Balance);
      IF  sachkonten."No."='9999'THEN BEGIN
      END ELSE BEGIN
            Sheet.Range('A'+j).Value := sachkonten."No.";
            Sheet.Range('B'+j).Value := sachkonten.Name;
            Sheet.Range('C'+j).Value := sachkonten.Balance;
      END;
          j:=INCSTR(j);


      UNTIL sachkonten.NEXT=0;
       END;

      IF ERASE('F:\Tausch\Nav\Daten\Daten_Nav_Bil.xlsx')THEN;
      Book.SaveAs('F:\Tausch\Nav\Daten\Daten_Nav_Bil.xlsx');
      Book.Close;



      //Excel.Visible(TRUE);
      }
    END;

    PROCEDURE Vorl_GuV@1140005();
    BEGIN
      {
      FOR i := 1 TO 13 DO
        PeriodStartDate[i + 1] := CALCDATE('1M',PeriodStartDate[i]);
      PeriodStartDate[14] := 31129999D;


      CREATE (Excel);                                              //erzeugt excel
      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet

      Sheet.StandardWidth := 16;
      Sheet.Range('A:A').ColumnWidth := 10;
      Sheet.Range('B:B').ColumnWidth := 30;

      Sheet.Range('A1').Value := 'Konto-Nr.';                          // definiert die beschriftung der berschriftszeile
      Sheet.Range('B1').Value := 'Kontoname';
      Sheet.Range('C1').Value := 'Gesamt';
      Sheet.Range('D1').Value := FORMAT(PeriodStartDate[1]) + '..' +  FORMAT(PeriodStartDate[2]-1);
      Sheet.Range('E1').Value := FORMAT(PeriodStartDate[2]) + '..' +  FORMAT(PeriodStartDate[3]-1);
      Sheet.Range('F1').Value := FORMAT(PeriodStartDate[3]) + '..' +  FORMAT(PeriodStartDate[4]-1);
      Sheet.Range('G1').Value := FORMAT(PeriodStartDate[4]) + '..' +  FORMAT(PeriodStartDate[5]-1);
      Sheet.Range('H1').Value := FORMAT(PeriodStartDate[5]) + '..' +  FORMAT(PeriodStartDate[6]-1);
      Sheet.Range('I1').Value := FORMAT(PeriodStartDate[6]) + '..' +  FORMAT(PeriodStartDate[7]-1);
      Sheet.Range('J1').Value := FORMAT(PeriodStartDate[7]) + '..' +  FORMAT(PeriodStartDate[8]-1);
      Sheet.Range('K1').Value := FORMAT(PeriodStartDate[8]) + '..' +  FORMAT(PeriodStartDate[9]-1);
      Sheet.Range('L1').Value := FORMAT(PeriodStartDate[9]) + '..' +  FORMAT(PeriodStartDate[10]-1);
      Sheet.Range('M1').Value := FORMAT(PeriodStartDate[10]) + '..' + FORMAT( PeriodStartDate[11]-1);
      Sheet.Range('N1').Value := FORMAT(PeriodStartDate[11]) + '..' + FORMAT(PeriodStartDate[12]-1);
      Sheet.Range('O1').Value := FORMAT(PeriodStartDate[12]) + '..' + FORMAT(PeriodStartDate[13]-1);

      j := '2';                                                    // <- Import in excel ab Zeile 2


      sachkonten.RESET;
      sachkonten.SETFILTER(sachkonten."No.",'%1..%2','4000','7999');
      IF sachkonten.FINDFIRST THEN BEGIN

      REPEAT
      FOR i:=1 TO 12 DO
      BEGIN
        var_balance[i]:=0;
      END;
      var_balance_gesamt_konto := 0;
       sachposten.RESET;
       sachposten.SETFILTER(sachposten."G/L Account No.",'%1',sachkonten."No.");
        IF sachposten.FINDFIRST THEN BEGIN
            FOR i:=1 TO 12 DO
                BEGIN

              sachposten.SETFILTER(sachposten."Posting Date",'%1..%2',PeriodStartDate[i],(PeriodStartDate[i+1] - 1));
              IF sachposten.FINDFIRST THEN BEGIN
              REPEAT
                  var_balance[i] := var_balance[i] + sachposten.Amount;
                  var_balance_total[i] := var_balance_total[i] + sachposten.Amount;
                  var_balance_total_summe := var_balance_total_summe + sachposten.Amount;
              UNTIL sachposten.NEXT=0;
              END;
       var_balance_gesamt_konto := var_balance_gesamt_konto + var_balance[i];
      //     var_balance_total_summe := var_balance_total_summe + var_balance_total[i];

      //     var_balance_total_summe := var_balance_total_summe + var_balance_gesamt_konto;
       END;
          IF var_balance_gesamt_konto<>0 THEN BEGIN
              Sheet.Range('A'+j).Value := sachkonten."No.";
              Sheet.Range('B'+j).Value := sachkonten.Name;
              Sheet.Range('C'+j).Value := var_balance_gesamt_konto;
              Sheet.Range('D'+j).Value := var_balance[1];
              Sheet.Range('E'+j).Value := var_balance[2];
              Sheet.Range('F'+j).Value := var_balance[3];
              Sheet.Range('G'+j).Value := var_balance[4];
              Sheet.Range('H'+j).Value := var_balance[5];
              Sheet.Range('I'+j).Value := var_balance[6];
              Sheet.Range('J'+j).Value := var_balance[7];
              Sheet.Range('K'+j).Value := var_balance[8];
              Sheet.Range('L'+j).Value := var_balance[9];
              Sheet.Range('M'+j).Value := var_balance[10];
              Sheet.Range('N'+j).Value := var_balance[11];
              Sheet.Range('O'+j).Value := var_balance[12];
        j := INCSTR (j);
        END;
        END;
      UNTIL sachkonten.NEXT=0;
      END;



      {        IF var_balance_gesamt_konto > 0 THEN
                Sheet.Range('C'+j).Font.Color := 255;

              IF var_balance[1] > 0 THEN
                Sheet.Range('D'+j).Font.Color := 255;
              IF var_balance[2] > 0 THEN
                Sheet.Range('E'+j).Font.Color := 255;
              IF var_balance[3] > 0 THEN
                Sheet.Range('F'+j).Font.Color := 255;
              IF var_balance[4] > 0 THEN
                Sheet.Range('G'+j).Font.Color := 255;
              IF var_balance[5] > 0 THEN
                Sheet.Range('H'+j).Font.Color := 255;
              IF var_balance[6] > 0 THEN
                Sheet.Range('I'+j).Font.Color := 255;
              IF var_balance[7] > 0 THEN
                Sheet.Range('J'+j).Font.Color := 255;
              IF var_balance[8] > 0 THEN
                Sheet.Range('K'+j).Font.Color := 255;
              IF var_balance[9] > 0 THEN
                Sheet.Range('L'+j).Font.Color := 255;
              IF var_balance[10] > 0 THEN
                Sheet.Range('M'+j).Font.Color := 255;
              IF var_balance[11] > 0 THEN
                Sheet.Range('N'+j).Font.Color := 255;
              IF var_balance[12] > 0 THEN
                Sheet.Range('O'+j).Font.Color := 255;
      }

      //    END;



      j := INCSTR(j) ;

      Sheet.Range('B'+j).Value := 'Summe:';
      Sheet.Range('C'+j).Value := var_balance_total_summe;
      Sheet.Range('D'+j).Value := var_balance_total[1];
      Sheet.Range('E'+j).Value := var_balance_total[2];
      Sheet.Range('F'+j).Value := var_balance_total[3];
      Sheet.Range('G'+j).Value := var_balance_total[4];
      Sheet.Range('H'+j).Value := var_balance_total[5];
      Sheet.Range('I'+j).Value := var_balance_total[6];
      Sheet.Range('J'+j).Value := var_balance_total[7];
      Sheet.Range('K'+j).Value := var_balance_total[8];
      Sheet.Range('L'+j).Value := var_balance_total[9];
      Sheet.Range('M'+j).Value := var_balance_total[10];
      Sheet.Range('N'+j).Value := var_balance_total[11];
      Sheet.Range('O'+j).Value := var_balance_total[12];
      {
      Sheet.Range('B'+j).Font.Bold := TRUE;
      Sheet.Range('C'+j).Font.Bold := TRUE;
      Sheet.Range('D'+j).Font.Bold := TRUE;
      Sheet.Range('E'+j).Font.Bold := TRUE;
      Sheet.Range('F'+j).Font.Bold := TRUE;
      Sheet.Range('G'+j).Font.Bold := TRUE;
      Sheet.Range('H'+j).Font.Bold := TRUE;
      Sheet.Range('I'+j).Font.Bold := TRUE;
      Sheet.Range('J'+j).Font.Bold := TRUE;
      Sheet.Range('K'+j).Font.Bold := TRUE;
      Sheet.Range('L'+j).Font.Bold := TRUE;
      Sheet.Range('M'+j).Font.Bold := TRUE;
      Sheet.Range('N'+j).Font.Bold := TRUE;
      Sheet.Range('O'+j).Font.Bold := TRUE;

      IF var_balance_total_summe > 0 THEN
        Sheet.Range('C'+j).Font.Color := 255;
      IF var_balance_total[1] > 0 THEN
        Sheet.Range('D'+j).Font.Color := 255;
      IF var_balance_total[2] > 0 THEN
        Sheet.Range('E'+j).Font.Color := 255;
      IF var_balance_total[3] > 0 THEN
        Sheet.Range('F'+j).Font.Color := 255;
      IF var_balance_total[4] > 0 THEN
        Sheet.Range('G'+j).Font.Color := 255;
      IF var_balance_total[5] > 0 THEN
        Sheet.Range('H'+j).Font.Color := 255;
      IF var_balance_total[6] > 0 THEN
        Sheet.Range('I'+j).Font.Color := 255;
      IF var_balance_total[7] > 0 THEN
        Sheet.Range('J'+j).Font.Color := 255;
      IF var_balance_total[8] > 0 THEN
        Sheet.Range('K'+j).Font.Color := 255;
      IF var_balance_total[9] > 0 THEN
        Sheet.Range('L'+j).Font.Color := 255;
      IF var_balance_total[10] > 0 THEN
        Sheet.Range('M'+j).Font.Color := 255;
      IF var_balance_total[11] > 0 THEN
        Sheet.Range('N'+j).Font.Color := 255;
      IF var_balance_total[12] > 0 THEN
        Sheet.Range('O'+j).Font.Color := 255;



      }

      IF var_balance_total_summe > 0 THEN
        Sheet.Range('C150').Font.Color := 255;
      IF var_balance_total[1] > 0 THEN
        Sheet.Range('D150').Font.Color := 255;
      IF var_balance_total[2] > 0 THEN
        Sheet.Range('E150').Font.Color := 255;
      IF var_balance_total[3] > 0 THEN
        Sheet.Range('F150').Font.Color := 255;
      IF var_balance_total[4] > 0 THEN
        Sheet.Range('G150').Font.Color := 255;
      IF var_balance_total[5] > 0 THEN
        Sheet.Range('H150').Font.Color := 255;
      IF var_balance_total[6] > 0 THEN
        Sheet.Range('I150').Font.Color := 255;
      IF var_balance_total[7] > 0 THEN
        Sheet.Range('J150').Font.Color := 255;
      IF var_balance_total[8] > 0 THEN
        Sheet.Range('K150').Font.Color := 255;
      IF var_balance_total[9] > 0 THEN
        Sheet.Range('L150').Font.Color := 255;
      IF var_balance_total[10] > 0 THEN
        Sheet.Range('M150').Font.Color := 255;
      IF var_balance_total[11] > 0 THEN
        Sheet.Range('N150').Font.Color := 255;
      IF var_balance_total[12] > 0 THEN
        Sheet.Range('O150').Font.Color := 255;
        Sheet.Range('C150').Font.Color := 255;

      //Excel.Visible(TRUE);

      IF ERASE('F:\Tausch\Nav\Daten\Daten_Nav_GuV.xlsx')THEN;
      Book.SaveAs('F:\Tausch\Nav\Daten\Daten_Nav_GuV.xlsx');
      Book.Close;
      }
    END;

    PROCEDURE AE_per_Periode@1140006();
    BEGIN
      {
      FOR i := 1 TO 13 DO
      PeriodStartDate[i + 1] := CALCDATE('1M',PeriodStartDate[i]);
      PeriodStartDate[14] := 31129999D;


      CREATE (Excel);                                              //erzeugt excel
      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet


      Sheet.Range('A1').Value := 'Auftragseingang nach Perioden'; // definiert die Beschriftung der berschriftszeile

      Sheet.Range('A2').Value := 'VK-Code';
      Sheet.Range('B2').Value := 'Name';
      Sheet.Range('C2').Value := 'Gesamt';
      Sheet.Range('D2').Value := FORMAT(PeriodStartDate[1]);
      Sheet.Range('E2').Value := FORMAT(PeriodStartDate[2]);
      Sheet.Range('F2').Value := FORMAT(PeriodStartDate[3]);
      Sheet.Range('G2').Value := FORMAT(PeriodStartDate[4]);
      Sheet.Range('H2').Value := FORMAT(PeriodStartDate[5]);
      Sheet.Range('I2').Value := FORMAT(PeriodStartDate[6]);
      Sheet.Range('J2').Value := FORMAT(PeriodStartDate[7]);
      Sheet.Range('K2').Value := FORMAT(PeriodStartDate[8]);
      Sheet.Range('L2').Value := FORMAT(PeriodStartDate[9]);
      Sheet.Range('M2').Value := FORMAT(PeriodStartDate[10]);
      Sheet.Range('N2').Value := FORMAT(PeriodStartDate[11]);
      Sheet.Range('O2').Value := FORMAT(PeriodStartDate[12]);

      j := '3';                                                    // <- Import in excel ab Zeile 2

      ///salesperson  1 Teil
      //////********************************************************************************************


      vkcode.RESET;
      vkcode.SETFILTER(vkcode.Code,'<>%1','MULTI');
      IF vkcode.FINDFIRST THEN BEGIN
      REPEAT

      v_summe:=0;
      var_balance[1]:=0;
      var_balance[2]:=0;
      var_balance[3]:=0;
      var_balance[4]:=0;
      var_balance[5]:=0;
      var_balance[6]:=0;
      var_balance[7]:=0;
      var_balance[8]:=0;
      var_balance[9]:=0;
      var_balance[10]:=0;
      var_balance[11]:=0;
      var_balance[12]:=0;

      FOR i := 1 TO 12 DO
       BEGIN
        AU_PER.RESET;
        AU_PER.SETFILTER(AU_PER.Verk„ufercode,'%1',vkcode.Code);
        AU_PER.SETFILTER(Periodendatum,'%1..%2',PeriodStartDate[i],PeriodStartDate[i+1] - 1);
        AU_PER.SETFILTER(AU_PER.Art,'%1|%2','AU','GU');
        AU_PER.SETFILTER(AU_PER.Deaktiv,'%1',FALSE);
        IF AU_PER.FINDFIRST THEN BEGIN
            REPEAT
              var_balance[i] := var_balance[i] + AU_PER.Wert_MW;
              v_summe:=v_summe + AU_PER.Wert_MW;
              v_summe_total:= v_summe_total + AU_PER.Wert_MW;
           UNTIL AU_PER.NEXT = 0;
        END ELSE BEGIN
          var_balance[i] := 0;
        END;
       END;

      FOR i := 1 TO 12 DO
      BEGIN
        var_balance_total[i] := var_balance_total[i] + var_balance[i];
      END;

      // Anzeigen wenn AE vorliegt
      IF v_summe <> 0 THEN BEGIN
        Sheet.Range('A'+j).Value := vkcode.Code;
        Sheet.Range('B'+j).Value := vkcode."first name";
        Sheet.Range('C'+j).Value := v_summe;
        Sheet.Range('D'+j).Value := var_balance[1];
        Sheet.Range('E'+j).Value := var_balance[2];
        Sheet.Range('F'+j).Value := var_balance[3];
        Sheet.Range('G'+j).Value := var_balance[4];
        Sheet.Range('H'+j).Value := var_balance[5];
        Sheet.Range('I'+j).Value := var_balance[6];
        Sheet.Range('J'+j).Value := var_balance[7];
        Sheet.Range('K'+j).Value := var_balance[8];
        Sheet.Range('L'+j).Value := var_balance[9];
        Sheet.Range('M'+j).Value := var_balance[10];
        Sheet.Range('N'+j).Value := var_balance[11];
        Sheet.Range('O'+j).Value := var_balance[12];
      END;


      IF v_summe <> 0 THEN BEGIN
        j:=INCSTR(j);
      END;


      UNTIL vkcode.NEXT=0;
      END;

      //Salesperson/Purchaser - OnPostDataItem()
      j:=INCSTR(j);
      Sheet.Range('A'+j).Value := 'AU Gesamt Monat';
      Sheet.Range('C'+j).Value := v_summe_total;
      Sheet.Range('D'+j).Value := var_balance_total[1];
      Sheet.Range('E'+j).Value := var_balance_total[2];
      Sheet.Range('F'+j).Value := var_balance_total[3];
      Sheet.Range('G'+j).Value := var_balance_total[4];
      Sheet.Range('H'+j).Value := var_balance_total[5];
      Sheet.Range('I'+j).Value := var_balance_total[6];
      Sheet.Range('J'+j).Value := var_balance_total[7];
      Sheet.Range('K'+j).Value := var_balance_total[8];
      Sheet.Range('L'+j).Value := var_balance_total[9];
      Sheet.Range('M'+j).Value := var_balance_total[10];
      Sheet.Range('N'+j).Value := var_balance_total[11];
      Sheet.Range('O'+j).Value := var_balance_total[12];
        j:=INCSTR(j);
        j:=INCSTR(j);
      Sheet.Range('A100').Value := 'AU Gesamt Monat';
      Sheet.Range('C100').Value := v_summe_total;
      Sheet.Range('D100').Value := var_balance_total[1];
      Sheet.Range('E100').Value := var_balance_total[2];
      Sheet.Range('F100').Value := var_balance_total[3];
      Sheet.Range('G100').Value := var_balance_total[4];
      Sheet.Range('H100').Value := var_balance_total[5];
      Sheet.Range('I100').Value := var_balance_total[6];
      Sheet.Range('J100').Value := var_balance_total[7];
      Sheet.Range('K100').Value := var_balance_total[8];
      Sheet.Range('L100').Value := var_balance_total[9];
      Sheet.Range('M100').Value := var_balance_total[10];
      Sheet.Range('N100').Value := var_balance_total[11];
      Sheet.Range('O100').Value := var_balance_total[12];


      ////**********************************************************************************************
      ///////SP 2 Teil
      ///  On Pre
        j:=INCSTR(j);
       Sheet.Range('A'+j).Value := 'Rahmenauftragseingang:';
        j:=INCSTR(j);

      //// On after get Record SP


      vkcode.RESET;
      vkcode.SETFILTER(vkcode.Code,'<>%1','MULTI');
      IF vkcode.FINDFIRST THEN BEGIN
      REPEAT


      v_summe:=0;
      var_bal[1]:=0;
      var_bal[2]:=0;
      var_bal[3]:=0;
      var_bal[4]:=0;
      var_bal[5]:=0;
      var_bal[6]:=0;
      var_bal[7]:=0;
      var_bal[8]:=0;
      var_bal[9]:=0;
      var_bal[10]:=0;
      var_bal[11]:=0;
      var_bal[12]:=0;


      FOR i := 1 TO 12 DO
       BEGIN
        AU_PER.RESET;
        AU_PER.SETFILTER(AU_PER.Verk„ufercode,'%1',vkcode.Code);
        AU_PER.SETFILTER(Periodendatum,'%1..%2',PeriodStartDate[i],PeriodStartDate[i+1] - 1);
        AU_PER.SETFILTER(AU_PER.Art,'%1','AUR');
        IF AU_PER.FINDFIRST THEN BEGIN
            REPEAT
              var_bal[i] := var_bal[i] + AU_PER.Wert_MW;
              v_summe:=v_summe + AU_PER.Wert_MW;
              v_summe_aur:=v_summe_aur + AU_PER.Wert_MW;
              v_summe_total:= v_summe_total + AU_PER.Wert_MW;
           UNTIL AU_PER.NEXT = 0;
        END ELSE BEGIN
          var_bal[i] := 0;
        END;
       END;


      FOR i := 1 TO 12 DO
      BEGIN
        var_balance_total[i] := var_balance_total[i] + var_bal[i];
        var_bal_total[i] := var_bal_total[i] + var_bal[i];
      END;
      // Anzeigen wenn AE vorliegt
      IF v_summe <> 0 THEN BEGIN
        Sheet.Range('A'+j).Value := vkcode.Code;
        Sheet.Range('B'+j).Value := vkcode."first name";
        Sheet.Range('C'+j).Value := v_summe;
        Sheet.Range('D'+j).Value := var_bal[1];
        Sheet.Range('E'+j).Value := var_bal[2];
        Sheet.Range('F'+j).Value := var_bal[3];
        Sheet.Range('G'+j).Value := var_bal[4];
        Sheet.Range('H'+j).Value := var_bal[5];
        Sheet.Range('I'+j).Value := var_bal[6];
        Sheet.Range('J'+j).Value := var_bal[7];
        Sheet.Range('K'+j).Value := var_bal[8];
        Sheet.Range('L'+j).Value := var_bal[9];
        Sheet.Range('M'+j).Value := var_bal[10];
        Sheet.Range('N'+j).Value := var_bal[11];
        Sheet.Range('O'+j).Value := var_bal[12];
      END;


      IF v_summe <> 0 THEN BEGIN
        j:=INCSTR(j);
      END;

      UNTIL vkcode.NEXT=0;
      END;


      ////  On Post data Item SP
      j:=INCSTR(j);
      Sheet.Range('A'+j).Value := 'AUR Gesamt Monat';
      Sheet.Range('C'+j).Value := v_summe_aur;
      Sheet.Range('D'+j).Value := var_bal_total[1];
      Sheet.Range('E'+j).Value := var_bal_total[2];
      Sheet.Range('F'+j).Value := var_bal_total[3];
      Sheet.Range('G'+j).Value := var_bal_total[4];
      Sheet.Range('H'+j).Value := var_bal_total[5];
      Sheet.Range('I'+j).Value := var_bal_total[6];
      Sheet.Range('J'+j).Value := var_bal_total[7];
      Sheet.Range('K'+j).Value := var_bal_total[8];
      Sheet.Range('L'+j).Value := var_bal_total[9];
      Sheet.Range('M'+j).Value := var_bal_total[10];
      Sheet.Range('N'+j).Value := var_bal_total[11];
      Sheet.Range('O'+j).Value := var_bal_total[12];
        j:=INCSTR(j);
        j:=INCSTR(j);
      Sheet.Range('A101').Value := 'AUR Gesamt Monat';
      Sheet.Range('C101').Value := v_summe_aur;
      Sheet.Range('D101').Value := var_bal_total[1];
      Sheet.Range('E101').Value := var_bal_total[2];
      Sheet.Range('F101').Value := var_bal_total[3];
      Sheet.Range('G101').Value := var_bal_total[4];
      Sheet.Range('H101').Value := var_bal_total[5];
      Sheet.Range('I101').Value := var_bal_total[6];
      Sheet.Range('J101').Value := var_bal_total[7];
      Sheet.Range('K101').Value := var_bal_total[8];
      Sheet.Range('L101').Value := var_bal_total[9];
      Sheet.Range('M101').Value := var_bal_total[10];
      Sheet.Range('N101').Value := var_bal_total[11];
      Sheet.Range('O101').Value := var_bal_total[12];


      /////// SP AUBEST on pre  3. TEIL  *****************************************************************************************
        j:=INCSTR(j);
       Sheet.Range('A'+j).Value := 'Auftr„ge aus Rahmen';
        j:=INCSTR(j);

      ////// SP Aubest on after get record
      vkcode.RESET;
      vkcode.SETFILTER(vkcode.Code,'<>%1','MULTI');
      IF vkcode.FINDFIRST THEN BEGIN
      REPEAT



      v_sum_au:=0;
      v_aubest[1]:=0;
      v_aubest[2]:=0;
      v_aubest[3]:=0;
      v_aubest[4]:=0;
      v_aubest[5]:=0;
      v_aubest[6]:=0;
      v_aubest[7]:=0;
      v_aubest[8]:=0;
      v_aubest[9]:=0;
      v_aubest[10]:=0;
      v_aubest[11]:=0;
      v_aubest[12]:=0;


      FOR i := 1 TO 12 DO
       BEGIN
        AU_PER.RESET;
        AU_PER.SETFILTER(AU_PER.Verk„ufercode,'%1',vkcode.Code);
        AU_PER.SETFILTER(Periodendatum,'%1..%2',PeriodStartDate[i],PeriodStartDate[i+1] - 1);
        AU_PER.SETFILTER(AU_PER.Art,'%1','AU');
        AU_PER.SETFILTER(AU_PER."AU aus Rahmen",'%1',TRUE);
        IF AU_PER.FINDFIRST THEN BEGIN
            REPEAT
              v_aubest[i] := v_aubest[i] + AU_PER.Wert_MW;
              v_sum_au:= v_sum_au + AU_PER.Wert_MW;
              v_sum_aubest:= v_sum_aubest + AU_PER.Wert_MW;
              v_summe_total:= v_summe_total - AU_PER.Wert_MW;
           UNTIL AU_PER.NEXT = 0;
        END ELSE BEGIN
          v_aubest[i] := 0;
        END;
       END;


      FOR i := 1 TO 12 DO
      BEGIN
        var_balance_total[i] := var_balance_total[i] - v_aubest[i];
        v_aubest_total[i] := v_aubest_total[i] + v_aubest[i];
      END;
      // Anzeigen wenn AE vorliegt
      IF v_sum_au <> 0 THEN BEGIN
        Sheet.Range('A'+j).Value := vkcode.Code;
        Sheet.Range('B'+j).Value := vkcode."first name";
        Sheet.Range('C'+j).Value := v_sum_au;
        Sheet.Range('D'+j).Value := v_aubest[1];
        Sheet.Range('E'+j).Value := v_aubest[2];
        Sheet.Range('F'+j).Value := v_aubest[3];
        Sheet.Range('G'+j).Value := v_aubest[4];
        Sheet.Range('H'+j).Value := v_aubest[5];
        Sheet.Range('I'+j).Value := v_aubest[6];
        Sheet.Range('J'+j).Value := v_aubest[7];
        Sheet.Range('K'+j).Value := v_aubest[8];
        Sheet.Range('L'+j).Value := v_aubest[9];
        Sheet.Range('M'+j).Value := v_aubest[10];
        Sheet.Range('N'+j).Value := v_aubest[11];
        Sheet.Range('O'+j).Value := v_aubest[12];
      END;


      IF v_sum_au <> 0 THEN BEGIN
        j:=INCSTR(j);
      END;


      UNTIL vkcode.NEXT=0;
      END;


      //// Sp AUBest on Post
      j:=INCSTR(j);
      Sheet.Range('A'+j).Value := 'AU aus Rahmen Gesamt Monat';
      Sheet.Range('C'+j).Value := v_sum_aubest;
      Sheet.Range('D'+j).Value := v_aubest_total[1];
      Sheet.Range('E'+j).Value := v_aubest_total[2];
      Sheet.Range('F'+j).Value := v_aubest_total[3];
      Sheet.Range('G'+j).Value := v_aubest_total[4];
      Sheet.Range('H'+j).Value := v_aubest_total[5];
      Sheet.Range('I'+j).Value := v_aubest_total[6];
      Sheet.Range('J'+j).Value := v_aubest_total[7];
      Sheet.Range('K'+j).Value := v_aubest_total[8];
      Sheet.Range('L'+j).Value := v_aubest_total[9];
      Sheet.Range('M'+j).Value := v_aubest_total[10];
      Sheet.Range('N'+j).Value := v_aubest_total[11];
      Sheet.Range('O'+j).Value := v_aubest_total[12];
        j:=INCSTR(j);
        j:=INCSTR(j);
      Sheet.Range('A102').Value := 'AU aus Rahmen Gesamt Monat';
      Sheet.Range('C102').Value := v_sum_aubest;
      Sheet.Range('D102').Value := v_aubest_total[1];
      Sheet.Range('E102').Value := v_aubest_total[2];
      Sheet.Range('F102').Value := v_aubest_total[3];
      Sheet.Range('G102').Value := v_aubest_total[4];
      Sheet.Range('H102').Value := v_aubest_total[5];
      Sheet.Range('I102').Value := v_aubest_total[6];
      Sheet.Range('J102').Value := v_aubest_total[7];
      Sheet.Range('K102').Value := v_aubest_total[8];
      Sheet.Range('L102').Value := v_aubest_total[9];
      Sheet.Range('M102').Value := v_aubest_total[10];
      Sheet.Range('N102').Value := v_aubest_total[11];
      Sheet.Range('O102').Value := v_aubest_total[12];

      ///// AUAUR   4. TEIL
      ////  on pre
        j:=INCSTR(j);
        Sheet.Range('A'+j).Value := 'Netto RAE';
        j:=INCSTR(j);

      /////AUAUR - OnAfterGetRecord()
      vkcode.RESET;
      vkcode.SETFILTER(vkcode.Code,'<>%1','MULTI');
      IF vkcode.FINDFIRST THEN BEGIN
      REPEAT


      //v_summe_aur:=0;
      v_summe:=0;
      v_aubest1[1]:=0;
      v_aubest1[2]:=0;
      v_aubest1[3]:=0;
      v_aubest1[4]:=0;
      v_aubest1[5]:=0;
      v_aubest1[6]:=0;
      v_aubest1[7]:=0;
      v_aubest1[8]:=0;
      v_aubest1[9]:=0;
      v_aubest1[10]:=0;
      v_aubest1[11]:=0;
      v_aubest1[12]:=0;


      FOR i := 1 TO 12 DO
       BEGIN
        AU_PER.RESET;
        AU_PER.SETFILTER(AU_PER.Verk„ufercode,'%1',vkcode.Code);
        AU_PER.SETFILTER(Periodendatum,'%1..%2',PeriodStartDate[i],PeriodStartDate[i+1] - 1);
        AU_PER.SETFILTER(AU_PER.Art,'%1','AUR');
        IF AU_PER.FINDFIRST THEN BEGIN
            REPEAT
              v_aubest1[i] :=v_aubest1[i] + AU_PER.Wert_MW;
              v_summe:=v_summe + AU_PER.Wert_MW;
              v_summe_aur1:=v_summe_aur1 + AU_PER.Wert_MW;
      //        V_Summe_Total:= V_Summe_Total + AU_PER.Wert_MW;
           UNTIL AU_PER.NEXT = 0;
      //  END ELSE BEGIN
      //    var_bal[i] := 0;
        END;
       AU_PER1.RESET;
       AU_PER1.SETFILTER(AU_PER1.Verk„ufercode,'%1',vkcode.Code);
       AU_PER1.SETFILTER(Periodendatum,'%1..%2',PeriodStartDate[i],PeriodStartDate[i+1] - 1);
       AU_PER1.SETFILTER(AU_PER1.Art,'%1','AU');
       AU_PER1.SETFILTER(AU_PER1."AU aus Rahmen",'%1',TRUE);
        IF AU_PER1.FINDFIRST THEN BEGIN
            REPEAT
              v_aubest1[i] := v_aubest1[i] - AU_PER1.Wert_MW;
              v_summe:= v_summe - AU_PER1.Wert_MW;
              v_summe_aur1:= v_summe_aur1 - AU_PER1.Wert_MW;
      //        v_summe_aur:=v_summe_aur - v_sum_aubest;
      //        V_Summe_Total:= V_Summe_Total - AU_PER1.Wert_MW;
           UNTIL AU_PER1.NEXT = 0;
         END;

      //v_aubest[i]:=0;

       END;


      FOR i := 1 TO 12 DO
      BEGIN
        var_balance_total[i] := var_balance_total[i] + v_aubest1[i];
        v_aubest1_total[i] := v_aubest1_total[i] + v_aubest1[i];
      END;
      // Anzeigen wenn AE vorliegt
      IF v_summe <> 0 THEN BEGIN
        Sheet.Range('A'+j).Value := vkcode.Code;
        Sheet.Range('B'+j).Value := vkcode."first name";
        Sheet.Range('C'+j).Value := v_summe;
        Sheet.Range('D'+j).Value := v_aubest1[1];
        Sheet.Range('E'+j).Value := v_aubest1[2];
        Sheet.Range('F'+j).Value := v_aubest1[3];
        Sheet.Range('G'+j).Value := v_aubest1[4];
        Sheet.Range('H'+j).Value := v_aubest1[5];
        Sheet.Range('I'+j).Value := v_aubest1[6];
        Sheet.Range('J'+j).Value := v_aubest1[7];
        Sheet.Range('K'+j).Value := v_aubest1[8];
        Sheet.Range('L'+j).Value := v_aubest1[9];
        Sheet.Range('M'+j).Value := v_aubest1[10];
        Sheet.Range('N'+j).Value := v_aubest1[11];
        Sheet.Range('O'+j).Value := v_aubest1[12];
      END;


      IF v_summe <> 0 THEN BEGIN
        j:=INCSTR(j);
      END;

      UNTIL vkcode.NEXT=0;
      END;


      /////AUAUR - OnPostDataItem()
      j:=INCSTR(j);
      Sheet.Range('A'+j).Value := 'Netto RAE Gesamt Monat';
      Sheet.Range('C'+j).Value := v_summe_aur1;
      Sheet.Range('D'+j).Value := v_aubest1_total[1];
      Sheet.Range('E'+j).Value := v_aubest1_total[2];
      Sheet.Range('F'+j).Value := v_aubest1_total[3];
      Sheet.Range('G'+j).Value := v_aubest1_total[4];
      Sheet.Range('H'+j).Value := v_aubest1_total[5];
      Sheet.Range('I'+j).Value := v_aubest1_total[6];
      Sheet.Range('J'+j).Value := v_aubest1_total[7];
      Sheet.Range('K'+j).Value := v_aubest1_total[8];
      Sheet.Range('L'+j).Value := v_aubest1_total[9];
      Sheet.Range('M'+j).Value := v_aubest1_total[10];
      Sheet.Range('N'+j).Value := v_aubest1_total[11];
      Sheet.Range('O'+j).Value := v_aubest1_total[12];
        j:=INCSTR(j);
        j:=INCSTR(j);
      Sheet.Range('A103').Value := 'Netto RAE Gesamt Monat';
      Sheet.Range('C103').Value := v_summe_aur1;
      Sheet.Range('D103').Value := v_aubest1_total[1];
      Sheet.Range('E103').Value := v_aubest1_total[2];
      Sheet.Range('F103').Value := v_aubest1_total[3];
      Sheet.Range('G103').Value := v_aubest1_total[4];
      Sheet.Range('H103').Value := v_aubest1_total[5];
      Sheet.Range('I103').Value := v_aubest1_total[6];
      Sheet.Range('J103').Value := v_aubest1_total[7];
      Sheet.Range('K103').Value := v_aubest1_total[8];
      Sheet.Range('L103').Value := v_aubest1_total[9];
      Sheet.Range('M103').Value := v_aubest1_total[10];
      Sheet.Range('N103').Value := v_aubest1_total[11];
      Sheet.Range('O103').Value := v_aubest1_total[12];



      //////  ********************************************************************************************************************



      //Post Report
       j:=INCSTR(j);
      Sheet.Range('A'+j).Value := 'Gesamt Monat';
      Sheet.Range('C'+j).Value := v_summe_total;
      Sheet.Range('D'+j).Value := var_balance_total[1]-v_aubest1_total[1];
      Sheet.Range('E'+j).Value := var_balance_total[2]-v_aubest1_total[2];
      Sheet.Range('F'+j).Value := var_balance_total[3]-v_aubest1_total[3];
      Sheet.Range('G'+j).Value := var_balance_total[4]-v_aubest1_total[4];
      Sheet.Range('H'+j).Value := var_balance_total[5]-v_aubest1_total[5];
      Sheet.Range('I'+j).Value := var_balance_total[6]-v_aubest1_total[6];
      Sheet.Range('J'+j).Value := var_balance_total[7]-v_aubest1_total[7];
      Sheet.Range('K'+j).Value := var_balance_total[8]-v_aubest1_total[8];
      Sheet.Range('L'+j).Value := var_balance_total[9]-v_aubest1_total[9];
      Sheet.Range('M'+j).Value := var_balance_total[10]-v_aubest1_total[10];
      Sheet.Range('N'+j).Value := var_balance_total[11]-v_aubest1_total[11];
      Sheet.Range('O'+j).Value := var_balance_total[12]-v_aubest1_total[12];

       j:=INCSTR(j);
       j:=INCSTR(j);
       j:=INCSTR(j);

       vkz.RESET;


       vkz.SETFILTER(vkz."Document Type",'%1',vkz."Document Type"::Order);
       vkz.SETFILTER(vkz.Type,'%1',vkz.Type::Item);
       vkz.SETFILTER(vkz."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
       vkz.SETFILTER(vkz."Outstanding Quantity",'>%1',0);
        IF vkz.FINDFIRST THEN BEGIN
            REPEAT
              v_au_wert := v_au_wert + (vkz."Outstanding Quantity" * vkz."VK-Preis (MW)");
           UNTIL vkz.NEXT = 0;
         END;


       vkz.RESET;
       vkz.SETFILTER(vkz."Document Type",'%1',vkz."Document Type"::Order);
       vkz.SETFILTER(vkz.Type,'%1',vkz.Type::Item);
       vkz.SETFILTER(vkz."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
       vkz.SETFILTER(vkz."Outstanding Quantity",'>%1',0);
       vkz.SETFILTER(vkz."Blanket Order No.",'<>%1','');
        IF vkz.FINDFIRST THEN BEGIN
            REPEAT
              v_sum_au_rahmen := v_sum_au_rahmen + (vkz."Outstanding Quantity" * vkz."VK-Preis (MW)");
           UNTIL vkz.NEXT = 0;
         END;



       vkz.RESET;
       vkz.CALCFIELDS("offene Menge aus Rahmen im AU");
       vkz.SETFILTER(vkz."Document Type",'%1',vkz."Document Type"::"Blanket Order");
       vkz.SETFILTER(vkz.Type,'%1',vkz.Type::Item);
       vkz.SETFILTER(vkz."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
       vkz.SETFILTER(vkz."Outstanding Quantity",'>%1',0);
        IF vkz.FINDFIRST THEN BEGIN
            REPEAT
      //      v_au_menge:=0;
      //           vkz1.RESET;
      //           vkz1.SETFILTER(vkz1."Blanket Order No.",'%1',vkz."Document No.");
      //           vkz1.SETFILTER(vkz1."Blanket Order Line No.",'%1',vkz."Line No.");
      //           vkz1.SETFILTER(vkz1."Outstanding Quantity",'<>%1',0);
      //               IF vkz1.FINDFIRST THEN BEGIN
      //               REPEAT
      //                 v_au_menge:=0;
      //                 v_au_menge:=v_au_menge+(vkz1."Outstanding Quantity");
      //               UNTIL vkz1.NEXT = 0;
      //               END;
      //            var_vkk.RESET;
      //            var_vkk.SETFILTER(var_vkk."No.",'%1',vkz."Document No.");
      //            IF var_vkk.FINDFIRST THEN BEGIN
      //              IF var_vkk."Currency Code"='' THEN BEGIN
      //                 v_aur_wert:=(v_aur_wert+ ROUND((vkz."Outstanding Quantity")-(vkz."offene Menge aus Rahmen im AU"))
      //                  *vkz."Line Amount"/vkz.Quantity);
      //                END ELSE BEGIN
      //                 v_aur_wert:=(v_aur_wert+ ROUND((vkz."Outstanding Quantity")-(vkz."offene Menge aus Rahmen im AU"))
      //                 *vkz."Line Amount"/vkz.Quantity/var_vkk."Currency Factor");
      //                END;
      //             END;

             v_aur_wert:= v_aur_wert+(vkz."Outstanding Quantity"* vkz."VK-Preis (MW)")

           UNTIL vkz.NEXT = 0;
       END;




      Sheet.Range('A'+j).Value := 'Gesamt Auftragsbestand:';
      Sheet.Range('C'+j).Value := v_au_wert;

       j:=INCSTR(j);
       j:=INCSTR(j);
      Sheet.Range('A'+j).Value := 'Gesamt Rahmenbestand:';
      Sheet.Range('C'+j).Value := v_aur_wert;
      Sheet.Range('C'+j).Value := v_aur_wert-v_sum_au_rahmen;



      Sheet.Range('A104').Value := 'Gesamt Monat';
      Sheet.Range('C104').Value := v_summe_total;
      Sheet.Range('D104').Value := var_balance_total[1]-v_aubest1_total[1];
      Sheet.Range('E104').Value := var_balance_total[2]-v_aubest1_total[2];
      Sheet.Range('F104').Value := var_balance_total[3]-v_aubest1_total[3];
      Sheet.Range('G104').Value := var_balance_total[4]-v_aubest1_total[4];
      Sheet.Range('H104').Value := var_balance_total[5]-v_aubest1_total[5];
      Sheet.Range('I104').Value := var_balance_total[6]-v_aubest1_total[6];
      Sheet.Range('J104').Value := var_balance_total[7]-v_aubest1_total[7];
      Sheet.Range('K104').Value := var_balance_total[8]-v_aubest1_total[8];
      Sheet.Range('L104').Value := var_balance_total[9]-v_aubest1_total[9];
      Sheet.Range('M104').Value := var_balance_total[10]-v_aubest1_total[10];
      Sheet.Range('N104').Value := var_balance_total[11]-v_aubest1_total[11];
      Sheet.Range('O104').Value := var_balance_total[12]-v_aubest1_total[12];

      Sheet.Range('A106').Value := 'Gesamt Auftragsbestand:';
      Sheet.Range('C106').Value := v_au_wert;

      Sheet.Range('A107').Value := 'Gesamt Rahmenbestand:';
      Sheet.Range('C107').Value := v_aur_wert;
      Sheet.Range('C107').Value := v_aur_wert-v_sum_au_rahmen;


      IF ERASE('F:\Tausch\Nav\Daten\Daten_Nav_AE.xlsx')THEN;
      Book.SaveAs('F:\Tausch\Nav\Daten\Daten_Nav_AE.xlsx');
      Book.Close;

      //Excel.Visible(TRUE);
      }
    END;

    PROCEDURE Champstest_ohne_ACTS@1140008();
    BEGIN
      {

      CREATE(Excel);
      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.Range('B:O').NumberFormat:='0,00';

      Sheet.Range('A1').Value := 'šbersicht der Champsvertr„ge ohne Herstellercode 5710 und 5720 per '; // šberschriftszeile
      Sheet.Range('A2').Value := WORKDATE;

      //  PeriodStartDate[i + 1] := CALCDATE('1M',PeriodStartDate[i]);

      FOR i:=1 TO 12 DO
      BEGIN
        var_jahr[i+1] := CALCDATE('1J',var_jahr[i]);


      Sheet.Range('C4').Value :='GJ '+FORMAT(var_jahr[1]);
      Sheet.Range('D4').Value :='GJ '+FORMAT(var_jahr[2]);
      Sheet.Range('E4').Value :='GJ '+FORMAT(var_jahr[3]);
      Sheet.Range('F4').Value :='GJ '+FORMAT(var_jahr[4]);
      Sheet.Range('G4').Value :='GJ '+FORMAT(var_jahr[5]);
      Sheet.Range('H4').Value :='GJ '+FORMAT(var_jahr[6]);
      Sheet.Range('I4').Value :='GJ '+FORMAT(var_jahr[7]);
      Sheet.Range('J4').Value :='GJ '+FORMAT(var_jahr[8]);
      Sheet.Range('K4').Value :='GJ '+FORMAT(var_jahr[9]);
      Sheet.Range('L4').Value :='GJ '+FORMAT(var_jahr[10]);
      Sheet.Range('M4').Value :='GJ '+FORMAT(var_jahr[11]);
      Sheet.Range('N4').Value :='GJ '+FORMAT(var_jahr[12]);
      END;

      j := '5';                                   // <- Import in excel ab Zeile 3

      Service.RESET;
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
      REPEAT
         artikel.RESET;
         artikel.SETFILTER(artikel."No.",'%1',Service."SUP Artikelnr.");
         artikel.SETFILTER(artikel."Manufacturer Code",'<>%1&<>%2','5710','5720');
         IF artikel.FINDFIRST THEN BEGIN



        LZ_rest:=0;
        Lief.RESET;
        Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
        Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
        Lief.SETFILTER(Lief.Quantity,'<>%1',0);
        Lief.SETFILTER(Lief."Manufacturer Code",'<>%1&<>%2','5710','5720');
        Lief.SETFILTER(Lief."No.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');

         IF Lief.FINDFIRST THEN BEGIN
            IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN

            END
            ELSE BEGIN
               liefnr:=Lief."Document No.";
               liefzeilennr:=Lief."Line No.";

           FOR i:=1 TO 12 DO
           BEGIN
           LZ_tage:= (Service."Ablaufdatum Serviceleistung"- Service.Lizenzdatum);
             var_jahr[i+1] := CALCDATE('1J',var_jahr[i]);
      //  Gesamt im Jahr abgeschlossen
      //  Hier wird das Buchungsdatum benutzt
            IF (Service.Belegdatum>(var_jahr[i])) AND (Service.Belegdatum<(var_jahr[i]+365)) THEN
             var_jahr_gesamt[i]:=var_jahr_gesamt[i]+(Lief.Quantity*Lief."VK-Preis (MW)");
      //  Ende Gesamt im Jahr abgeschlossen
      //  Gesamt im Jahr neu abgeschlossen
          IF Service.Verl„ngerung=FALSE THEN BEGIN
            IF (Service.Belegdatum>(var_jahr[i])) AND (Service.Belegdatum<(var_jahr[i]+365)) THEN
             var_jahr_neu[i]:=var_jahr_neu[i]+(Lief.Quantity*Lief."VK-Preis (MW)");
          END;
      //  Ende Gesamt im Jahr neu abgeschlossen
      //  Gesamt im Jahr verl„ngert
          IF Service.Verl„ngerung = TRUE THEN BEGIN
            IF (Service.Belegdatum>(var_jahr[i])) AND (Service.Belegdatum<(var_jahr[i]+365)) THEN
             var_jahr_verl„ng[i]:=var_jahr_verl„ng[i]+(Lief.Quantity*Lief."VK-Preis (MW)");
          END;
      //  Ende Gesamt im Jahr verl„ngert
      //  Gesamt im Jahr abgelaufen
           IF (Service."Ablaufdatum Serviceleistung">(var_jahr[i])) AND (Service."Ablaufdatum Serviceleistung"<(var_jahr[i]+365)) THEN
             var_jahr_abgelauf[i]:=var_jahr_abgelauf[i]+(Lief.Quantity*Lief."VK-Preis (MW)");
      //  Ende Gesamt im Jahr abgelaufen


       //   Laufzeitenberechnung  ******************************************************************

                  IF ((Service.Lizenzdatum>=(var_jahr[i])) AND (Service.Lizenzdatum<=(var_jahr[i]+365))) THEN
                  BEGIN
                   LZ_tage_jahr[i]:=var_jahr[i]+365-Service.Lizenzdatum;
                   var_jahr_wert[i]:=var_jahr_wert[i]+((Lief.Quantity*Lief."VK-Preis (MW)")/LZ_tage*LZ_tage_jahr[i]);
                  END;

                  IF (Service."Ablaufdatum Serviceleistung">(var_jahr[i]+365)) AND ((var_jahr[i])>Service.Lizenzdatum) THEN
                  BEGIN
                   LZ_tage_jahr[i]:=var_jahr[i]+365-var_jahr[i];
                   var_jahr_wert[i]:=var_jahr_wert[i]+((Lief.Quantity*Lief."VK-Preis (MW)")/LZ_tage*LZ_tage_jahr[i]);
                  END;


                  IF ((Service."Ablaufdatum Serviceleistung"-1>(var_jahr[i])) AND
                  (Service."Ablaufdatum Serviceleistung"-1<(var_jahr[i]+365))) THEN
                  BEGIN
                   LZ_tage_jahr[i]:=Service."Ablaufdatum Serviceleistung"-1-var_jahr[i];
                   var_jahr_wert[i]:=var_jahr_wert[i]+((Lief.Quantity*Lief."VK-Preis (MW)")/LZ_tage*LZ_tage_jahr[i]);
                  END;

      //  ENDE Laufzeitenberechnung ******************************************************************
             END;
             END;
             END;
             END;
      UNTIL Service.NEXT=0;
      END;
      Sheet.Range('A6').Value :='Gesamt Jahr';
      Sheet.Range('C6').Value :=var_jahr_gesamt[1];
      Sheet.Range('D6').Value :=var_jahr_gesamt[2];
      Sheet.Range('E6').Value :=var_jahr_gesamt[3];
      Sheet.Range('F6').Value :=var_jahr_gesamt[4];
      Sheet.Range('G6').Value :=var_jahr_gesamt[5];
      Sheet.Range('H6').Value :=var_jahr_gesamt[6];
      Sheet.Range('I6').Value :=var_jahr_gesamt[7];
      Sheet.Range('J6').Value :=var_jahr_gesamt[8];
      Sheet.Range('K6').Value :=var_jahr_gesamt[9];
      Sheet.Range('L6').Value :=var_jahr_gesamt[10];
      Sheet.Range('M6').Value :=var_jahr_gesamt[11];
      Sheet.Range('N6').Value :=var_jahr_gesamt[12];

      Sheet.Range('A7').Value :='Gesamt Jahr neu';
      Sheet.Range('C7').Value :=var_jahr_neu[1];
      Sheet.Range('D7').Value :=var_jahr_neu[2];
      Sheet.Range('E7').Value :=var_jahr_neu[3];
      Sheet.Range('F7').Value :=var_jahr_neu[4];
      Sheet.Range('G7').Value :=var_jahr_neu[5];
      Sheet.Range('H7').Value :=var_jahr_neu[6];
      Sheet.Range('I7').Value :=var_jahr_neu[7];
      Sheet.Range('J7').Value :=var_jahr_neu[8];
      Sheet.Range('K7').Value :=var_jahr_neu[9];
      Sheet.Range('L7').Value :=var_jahr_neu[10];
      Sheet.Range('M7').Value :=var_jahr_neu[11];
      Sheet.Range('N7').Value :=var_jahr_neu[12];

      Sheet.Range('A8').Value :='Gesamt Jahr verl„ngert';
      Sheet.Range('C8').Value :=var_jahr_verl„ng[1];
      Sheet.Range('D8').Value :=var_jahr_verl„ng[2];
      Sheet.Range('E8').Value :=var_jahr_verl„ng[3];
      Sheet.Range('F8').Value :=var_jahr_verl„ng[4];
      Sheet.Range('G8').Value :=var_jahr_verl„ng[5];
      Sheet.Range('H8').Value :=var_jahr_verl„ng[6];
      Sheet.Range('I8').Value :=var_jahr_verl„ng[7];
      Sheet.Range('J8').Value :=var_jahr_verl„ng[8];
      Sheet.Range('K8').Value :=var_jahr_verl„ng[9];
      Sheet.Range('L8').Value :=var_jahr_verl„ng[10];
      Sheet.Range('M8').Value :=var_jahr_verl„ng[11];
      Sheet.Range('N8').Value :=var_jahr_verl„ng[12];

      Sheet.Range('A10').Value :='im Jahr ablaufend';
      Sheet.Range('C10').Value :=var_jahr_abgelauf[1];
      Sheet.Range('D10').Value :=var_jahr_abgelauf[2];
      Sheet.Range('E10').Value :=var_jahr_abgelauf[3];
      Sheet.Range('F10').Value :=var_jahr_abgelauf[4];
      Sheet.Range('G10').Value :=var_jahr_abgelauf[5];
      Sheet.Range('H10').Value :=var_jahr_abgelauf[6];
      Sheet.Range('I10').Value :=var_jahr_abgelauf[7];
      Sheet.Range('J10').Value :=var_jahr_abgelauf[8];
      Sheet.Range('K10').Value :=var_jahr_abgelauf[9];
      Sheet.Range('L10').Value :=var_jahr_abgelauf[10];
      Sheet.Range('M10').Value :=var_jahr_abgelauf[11];
      Sheet.Range('N10').Value :=var_jahr_abgelauf[12];
      Sheet.Range('A13').Value :='Verl„ngert in % von Ablaufend';
      IF ((var_jahr_verl„ng[1]<>0) AND (var_jahr_abgelauf[1]<>0)) THEN
      Sheet.Range('C13').Value :=(var_jahr_verl„ng[1]/var_jahr_abgelauf[1]*100);
      IF ((var_jahr_verl„ng[2]<>0) AND (var_jahr_abgelauf[2]<>0)) THEN
      Sheet.Range('D13').Value :=(var_jahr_verl„ng[2]/var_jahr_abgelauf[2]*100);
      IF ((var_jahr_verl„ng[3]<>0) AND (var_jahr_abgelauf[3]<>0)) THEN
      Sheet.Range('E13').Value :=(var_jahr_verl„ng[3]/var_jahr_abgelauf[3]*100);
      IF ((var_jahr_verl„ng[4]<>0) AND (var_jahr_abgelauf[4]<>0)) THEN
      Sheet.Range('F13').Value :=(var_jahr_verl„ng[4]/var_jahr_abgelauf[4]*100);
      IF ((var_jahr_verl„ng[5]<>0) AND (var_jahr_abgelauf[5]<>0)) THEN
      Sheet.Range('G13').Value :=(var_jahr_verl„ng[5]/var_jahr_abgelauf[5]*100);
      IF ((var_jahr_verl„ng[6]<>0) AND (var_jahr_abgelauf[6]<>0)) THEN
      Sheet.Range('H13').Value :=(var_jahr_verl„ng[6]/var_jahr_abgelauf[6]*100);
      IF ((var_jahr_verl„ng[7]<>0) AND (var_jahr_abgelauf[7]<>0)) THEN
      Sheet.Range('I13').Value :=(var_jahr_verl„ng[7]/var_jahr_abgelauf[7]*100);
      IF ((var_jahr_verl„ng[8]<>0) AND (var_jahr_abgelauf[8]<>0)) THEN
      Sheet.Range('J13').Value :=(var_jahr_verl„ng[8]/var_jahr_abgelauf[8]*100);
      IF ((var_jahr_verl„ng[9]<>0) AND (var_jahr_abgelauf[9]<>0)) THEN
      Sheet.Range('K13').Value :=(var_jahr_verl„ng[9]/var_jahr_abgelauf[9]*100);
      IF ((var_jahr_verl„ng[10]<>0) AND (var_jahr_abgelauf[10]<>0)) THEN
      Sheet.Range('L13').Value :=(var_jahr_verl„ng[10]/var_jahr_abgelauf[10]*100);
      IF ((var_jahr_verl„ng[11]<>0) AND (var_jahr_abgelauf[11]<>0)) THEN
      Sheet.Range('M13').Value :=(var_jahr_verl„ng[11]/var_jahr_abgelauf[11]*100);
      IF ((var_jahr_verl„ng[12]<>0) AND (var_jahr_abgelauf[12]<>0)) THEN
      Sheet.Range('N13').Value :=(var_jahr_verl„ng[12]/var_jahr_abgelauf[12]*100);

      Sheet.Range('A14').Value :='Verl„ngert in % von Jahreseingang';
      IF ((var_jahr_verl„ng[1]<>0) AND (var_jahr_gesamt[1]<>0)) THEN
      Sheet.Range('C14').Value :=(var_jahr_verl„ng[1]/var_jahr_gesamt[1]*100);
      IF ((var_jahr_verl„ng[2]<>0) AND (var_jahr_gesamt[2]<>0)) THEN
      Sheet.Range('D14').Value :=(var_jahr_verl„ng[2]/var_jahr_gesamt[2]*100);
      IF ((var_jahr_verl„ng[3]<>0) AND (var_jahr_gesamt[3]<>0)) THEN
      Sheet.Range('E14').Value :=(var_jahr_verl„ng[3]/var_jahr_gesamt[3]*100);
      IF ((var_jahr_verl„ng[4]<>0) AND (var_jahr_gesamt[4]<>0)) THEN
      Sheet.Range('F14').Value :=(var_jahr_verl„ng[4]/var_jahr_gesamt[4]*100);
      IF ((var_jahr_verl„ng[5]<>0) AND (var_jahr_gesamt[5]<>0)) THEN
      Sheet.Range('G14').Value :=(var_jahr_verl„ng[5]/var_jahr_gesamt[5]*100);
      IF ((var_jahr_verl„ng[6]<>0) AND (var_jahr_gesamt[6]<>0)) THEN
      Sheet.Range('H14').Value :=(var_jahr_verl„ng[6]/var_jahr_gesamt[6]*100);
      IF ((var_jahr_verl„ng[7]<>0) AND (var_jahr_gesamt[7]<>0)) THEN
      Sheet.Range('I14').Value :=(var_jahr_verl„ng[7]/var_jahr_gesamt[7]*100);
      IF ((var_jahr_verl„ng[8]<>0) AND (var_jahr_gesamt[8]<>0)) THEN
      Sheet.Range('J14').Value :=(var_jahr_verl„ng[8]/var_jahr_gesamt[8]*100);
      IF ((var_jahr_verl„ng[9]<>0) AND (var_jahr_gesamt[9]<>0)) THEN
      Sheet.Range('K14').Value :=(var_jahr_verl„ng[9]/var_jahr_gesamt[9]*100);
      IF ((var_jahr_verl„ng[10]<>0) AND (var_jahr_gesamt[10]<>0)) THEN
      Sheet.Range('L14').Value :=(var_jahr_verl„ng[10]/var_jahr_gesamt[10]*100);
      IF ((var_jahr_verl„ng[11]<>0) AND (var_jahr_gesamt[11]<>0)) THEN
      Sheet.Range('M14').Value :=(var_jahr_verl„ng[11]/var_jahr_gesamt[11]*100);
      IF ((var_jahr_verl„ng[12]<>0) AND (var_jahr_gesamt[12]<>0)) THEN
      Sheet.Range('N14').Value :=(var_jahr_verl„ng[12]/var_jahr_gesamt[12]*100);




      Sheet.Range('A16').Value :='Auf Laufzeit verteilt';
      Sheet.Range('C16').Value :=var_jahr_wert[1];
      Sheet.Range('D16').Value :=var_jahr_wert[2];
      Sheet.Range('E16').Value :=var_jahr_wert[3];
      Sheet.Range('F16').Value :=var_jahr_wert[4];
      Sheet.Range('G16').Value :=var_jahr_wert[5];
      Sheet.Range('H16').Value :=var_jahr_wert[6];
      Sheet.Range('I16').Value :=var_jahr_wert[7];
      Sheet.Range('J16').Value :=var_jahr_wert[8];
      Sheet.Range('K16').Value :=var_jahr_wert[9];
      Sheet.Range('L16').Value :=var_jahr_wert[10];
      Sheet.Range('M16').Value :=var_jahr_wert[11];
      Sheet.Range('N16').Value :=var_jahr_wert[12];


      Service.RESET;
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      Service.SETFILTER(Service."Ablaufdatum Serviceleistung",'>%1',Abgrenz_Datum);
      Service.SETFILTER(Service.Belegdatum,'<=%1',Abgrenz_Datum);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
      REPEAT
         artikel.RESET;
         artikel.SETFILTER(artikel."No.",'%1',Service."SUP Artikelnr.");
         artikel.SETFILTER(artikel."Manufacturer Code",'<>%1&<>%2','5710','5720');
         IF artikel.FINDFIRST THEN BEGIN

        LZ_rest:=0;
        Lief.RESET;
        Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
        Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
        Lief.SETFILTER(Lief.Quantity,'<>%1',0);
        Lief.SETFILTER(Lief."Manufacturer Code",'<>%1&<>%2','5710','5720');
        Lief.SETFILTER(Lief."No.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
        IF Lief.FINDFIRST THEN BEGIN
            IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
            END ELSE BEGIN
              LZ_tage:= (Service."Ablaufdatum Serviceleistung"- Service.Lizenzdatum-1);
              LZ_tage_stich:=(Service."Ablaufdatum Serviceleistung"-Abgrenz_Datum-1);
              LZ_tage_bewert:=0;
              IF LZ_tage_stich>LZ_tage THEN BEGIN
              LZ_tage_bewert := LZ_tage;
              END ELSE BEGIN
              LZ_tage_bewert := LZ_tage_stich;
              END;
              Sum_ek:=(Sum_ek+ (ROUND(Lief."Unit Cost (LCY)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
              Sum_vk:=(Sum_vk+ (ROUND(Lief."VK-Preis (MW)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
               liefnr:=Lief."Document No.";
               liefzeilennr:=Lief."Line No.";
          END;
          END;
          END;
      UNTIL Service.NEXT=0;
      END;

      Sheet.Range('A20').Value :='Abgrenzung per: ';
      Sheet.Range('A21').Value :=Abgrenz_Datum;
      Sheet.Range('A22').Value :='Abgrenz_Ek';
      Sheet.Range('B22').Value :=FORMAT(Sum_ek);
      Sheet.Range('A23').Value :='Abgrenz_Vk';
      Sheet.Range('B23').Value :=FORMAT(Sum_vk);



      Service.RESET;
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      Service.SETFILTER(Service."Dauer Serviceleistung",'%1','12M');
      Service.SETFILTER(Service.Belegdatum,'%1..%2',PeriodStartDate[1],Abgrenz_Datum);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
      REPEAT
         artikel.RESET;
         artikel.SETFILTER(artikel."No.",'%1',Service."SUP Artikelnr.");
         artikel.SETFILTER(artikel."Manufacturer Code",'<>%1&<>%2','5710','5720');
         IF artikel.FINDFIRST THEN BEGIN

        Lief.RESET;
        Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
        Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
        Lief.SETFILTER(Lief.Quantity,'<>%1',0);
        Lief.SETFILTER(Lief."Manufacturer Code",'<>%1&<>%2','5710','5720');
        Lief.SETFILTER(Lief."No.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
         IF Lief.FINDFIRST THEN BEGIN
            IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
            END ELSE BEGIN
               liefnr:=Lief."Document No.";
               liefzeilennr:=Lief."Line No.";
               sum_gj_12:=sum_gj_12 + (Lief.Quantity* Lief."VK-Preis (MW)");
            END;
            END;
            END;
      UNTIL Service.NEXT=0;
      END;
      Sheet.Range('A25').Value :='GJ_12M:';
      Sheet.Range('B25').Value :=(sum_gj_12);

      Service.RESET;
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      Service.SETFILTER(Service."Dauer Serviceleistung",'>%1&<%2','12M','36M');
      Service.SETFILTER(Service.Belegdatum,'%1..%2',PeriodStartDate[1],Abgrenz_Datum);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
      REPEAT
         artikel.RESET;
         artikel.SETFILTER(artikel."No.",'%1',Service."SUP Artikelnr.");
         artikel.SETFILTER(artikel."Manufacturer Code",'<>%1&<>%2','5710','5720');
         IF artikel.FINDFIRST THEN BEGIN

        Lief.RESET;
        Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
        Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
        Lief.SETFILTER(Lief.Quantity,'<>%1',0);
        Lief.SETFILTER(Lief."Manufacturer Code",'<>%1&<>%2','5710','5720');
        Lief.SETFILTER(Lief."No.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
         IF Lief.FINDFIRST THEN BEGIN
            IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
            END ELSE BEGIN
               liefnr:=Lief."Document No.";
               liefzeilennr:=Lief."Line No.";
               sum_gj_36:=sum_gj_36 + (Lief.Quantity* Lief."VK-Preis (MW)");
         END;
         END;
         END;
      UNTIL Service.NEXT=0;
      END;
      Sheet.Range('A26').Value :='GJ_13-35M:';
      Sheet.Range('B26').Value :=(sum_gj_36);

      Service.RESET;
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      Service.SETFILTER(Service."Dauer Serviceleistung",'>=%1','36M');
      Service.SETFILTER(Service.Belegdatum,'%1..%2',PeriodStartDate[1],Abgrenz_Datum);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
      REPEAT
         artikel.RESET;
         artikel.SETFILTER(artikel."No.",'%1',Service."SUP Artikelnr.");
         artikel.SETFILTER(artikel."Manufacturer Code",'<>%1&<>%2','5710','5720');
         IF artikel.FINDFIRST THEN BEGIN

        Lief.RESET;
        Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
        Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
        Lief.SETFILTER(Lief.Quantity,'<>%1',0);
        Lief.SETFILTER(Lief."Manufacturer Code",'<>%1&<>%2','5710','5720');
        Lief.SETFILTER(Lief."No.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
         IF Lief.FINDFIRST THEN BEGIN
            IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
            END ELSE BEGIN
               liefnr:=Lief."Document No.";
               liefzeilennr:=Lief."Line No.";
             sum_gj_sonst:=sum_gj_sonst + (Lief.Quantity* Lief."VK-Preis (MW)");
          END;
          END;
          END;
      UNTIL Service.NEXT=0;
      END;
      Sheet.Range('A27').Value :='GJ_36M +:';
      Sheet.Range('B27').Value :=(sum_gj_sonst);

      Service.RESET;
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      //service.SETFILTER(service.Lizenzdatum,'>=%1&<=%2',PeriodStartDate[1],Abgrenz_Datum);
      Service.SETFILTER(Service.Belegdatum,'>=%1&<=%2',PeriodStartDate[1],Abgrenz_Datum);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
      REPEAT
         artikel.RESET;
         artikel.SETFILTER(artikel."No.",'%1',Service."SUP Artikelnr.");
         artikel.SETFILTER(artikel."Manufacturer Code",'<>%1&<>%2','5710','5720');
         IF artikel.FINDFIRST THEN BEGIN

        Lief.RESET;
        Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
        Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
        Lief.SETFILTER(Lief.Quantity,'<>%1',0);
        Lief.SETFILTER(Lief."Manufacturer Code",'<>%1&<>%2','5710','5720');
        Lief.SETFILTER(Lief."No.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
         IF Lief.FINDFIRST THEN BEGIN
            IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
            END ELSE BEGIN
               liefnr:=Lief."Document No.";
               liefzeilennr:=Lief."Line No.";
               sum_gj_gesamt:=sum_gj_gesamt + (Lief.Quantity* Lief."VK-Preis (MW)");
            END;
            END;
            END;
      UNTIL Service.NEXT=0;
      END;
      Sheet.Range('A28').Value :='GJ_Gesamt:';
      Sheet.Range('B28').Value :=(sum_gj_gesamt);
      Excel.Visible(TRUE);
      }
    END;

    PROCEDURE Prov@1140007();
    BEGIN
      CREATE(Excel,FALSE,TRUE);         //erzeugt excel
      CREATE(wshFile,FALSE,TRUE);


      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet

      Sheet.Range('A1').Value := 'Re_Nummer';                          // definiert die Beschriftung der berschriftszeile
      Sheet.Range('B1').Value := 'Re_Datum';
      Sheet.Range('C1').Value := 'Artikelnr';
      Sheet.Range('D1').Value := 'Menge';
      Sheet.Range('E1').Value := 'VK_W„hrung';
      Sheet.Range('F1').Value := 'W„hrung';
      Sheet.Range('G1').Value := 'VK_EUR';
      Sheet.Range('H1').Value := 'Einstandspreis_EUR';
      Sheet.Range('I1').Value := 'Kunde';
      Sheet.Range('J1').Value := 'Kunden_Nr';
      Sheet.Range('K1').Value := 'PLZ';
      Sheet.Range('L1').Value := 'Verk„ufercode';
      Sheet.Range('M1').Value := 'Betreuer Innen';
      Sheet.Range('N1').Value := 'Team';
      Sheet.Range('O1').Value := 'Gebiet';
      Sheet.Range('P1').Value := 'Betrag';
      Sheet.Range('Q1').Value := 'Marge';
      Sheet.Range('R1').Value := 'Marge %';
      Sheet.Range('S1').Value := 'Linie';
      Sheet.Range('T1').Value := 'Herstellercode';
      Sheet.Range('U1').Value := 'AU-Nr.';
      Sheet.Range('V1').Value := 'Rahmen';
      Sheet.Range('W1').Value := 'Datum';
      Sheet.Range('X1').Value := 'W„hrung';
      Sheet.Range('Y1').Value := 'Kurs';
      Sheet.Range('Z1').Value := 'EK';
      Sheet.Range('AA1').Value := 'VK';
      Sheet.Range('AB1').Value := 'Marge';
      Sheet.Range('AC1').Value := 'Marge %';
      Sheet.Range('AD1').Value := 'Abweich 1%';
      Sheet.Range('AE1').Value := 'Kenner';
      Sheet.Range('AF1').Value := 'EK';
      Sheet.Range('AG1').Value := 'EK';
      Sheet.Range('AH1').Value := 'x';
      Sheet.Range('AI1').Value := 'Zollsatz %';

      j := '2';                                                    // <- Import in excel ab Zeile 2



      VKRK.RESET;
      VKRK.SETFILTER(VKRK."Posting Date",'%1..%2',v_datum_von,v_datum_bis);
      IF VKRK.FINDFIRST THEN BEGIN
        REPEAT
          v_wert_eu := 0;
          v_w„_fact := 0;
          v_ek := 1;
          v_vk := 1;
          v_re_marge := 0;
          v_marge1 := 0;
          v_zoll :=0;
          VKRZ.RESET;
          VKRZ.SETFILTER(VKRZ."Document No.",'%1',VKRK."No.");
          VKRZ.SETFILTER(VKRZ.Quantity,'<>%1',0);
          VKRZ.SETFILTER(VKRZ.Type,'%1',VKRZ.Type::Item);
          VKRZ.SETFILTER(VKRZ."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF VKRZ.FINDFIRST THEN BEGIN
            REPEAT
              artikel.SETFILTER(artikel."No. 2",'%1',VKRZ."Artikelnr. 2");
              IF artikel.FINDFIRST THEN BEGIN
                v_zoll := artikel."Zollsatz %";
              END;
              Sheet.Range('A'+j).Value := VKRK."No.";
              Sheet.Range('B'+j).Value := VKRK."Posting Date";
              Sheet.Range('C'+j).Value := VKRZ."No.";
              Sheet.Range('D'+j).Value := VKRZ.Quantity;
              Sheet.Range('D'+j).NumberFormat:='########';
              Sheet.Range('E'+j).Value := VKRZ."Unit Price";
              Sheet.Range('E'+j).NumberFormat:='########,##';
              Sheet.Range('F'+j).Value := VKRK."Currency Code";
              Sheet.Range('G'+j).Value := VKRZ."VK-Preis (MW)";
              Sheet.Range('G'+j).NumberFormat:='########,##';
              Sheet.Range('H'+j).Value := VKRZ."Unit Cost (LCY)";
              Sheet.Range('H'+j).NumberFormat:='#####.###,####';
              Sheet.Range('I'+j).Value := VKRK."Bill-to Name";
              Sheet.Range('J'+j).Value := VKRK."Bill-to Customer No.";
              Sheet.Range('K'+j).Value := VKRK."Bill-to Post Code";
              Sheet.Range('L'+j).Value := VKRK."Salesperson Code";
              Sheet.Range('M'+j).Value := VKRK."Betreuer Innendienst";
              Sheet.Range('N'+j).Value := VKRK.Teams;
              Sheet.Range('O'+j).Value := VKRK."Territory Code";
              IF  VKRK."Currency Factor" > 1 THEN BEGIN
                Sheet.Range('P'+j).Value := VKRZ."Unit Price"/VKRK."Currency Factor" * VKRZ.Quantity;
                Sheet.Range('P'+j).NumberFormat := '#####.###,####';
                Sheet.Range('Q'+j).Value := (((VKRZ."Unit Price"/VKRK."Currency Factor")-VKRZ."Unit Cost (LCY)")*VKRZ.Quantity);
                Sheet.Range('Q'+j).NumberFormat := '#####.###,####';
                v_wert_eu :=((VKRZ."Unit Price")*(VKRZ.Quantity)/(VKRK."Currency Factor"));
                //12.04.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                IF v_wert_eu <> 0 THEN BEGIN
                  v_re_marge := ((v_wert_eu -(VKRZ."Unit Cost (LCY)")*(VKRZ.Quantity))/v_wert_eu*100);
                  Sheet.Range('R'+j).Value:=((v_wert_eu -(VKRZ."Unit Cost (LCY)")*(VKRZ.Quantity))/v_wert_eu*100);
                END ELSE BEGIN
                  v_re_marge := 0;
                  Sheet.Range('R'+j).Value:= 0;
                END;
                //Zusatz Ende
                Sheet.Range('R'+j).NumberFormat:='#####.###,####';
              END ELSE BEGIN
              Sheet.Range('P'+j).Value := VKRZ.Amount;
              Sheet.Range('P'+j).NumberFormat:='#####.###,####';
              Sheet.Range('Q'+j).Value:=(VKRZ.Amount-(VKRZ."Unit Cost (LCY)"*VKRZ.Quantity));
              Sheet.Range('Q'+j).NumberFormat:='#####.###,####';

              //15.03.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
              IF VKRZ.Amount <> 0 THEN BEGIN
                v_re_marge:= ((VKRZ.Amount-(VKRZ."Unit Cost (LCY)"*VKRZ.Quantity))/VKRZ.Amount*100);
                Sheet.Range('R'+j).Value:=((VKRZ.Amount - (VKRZ."Unit Cost (LCY)"*VKRZ.Quantity)) / VKRZ.Amount*100);
              END ELSE BEGIN
                v_re_marge := 0;
                Sheet.Range('R'+j).Value := 0;
              END;
              //Zusatz Ende
              Sheet.Range('R'+j).NumberFormat:='#####.###,####';
            END;
            Sheet.Range('S'+j).Value := VKRZ."Shortcut Dimension 1 Code";
            Sheet.Range('T'+j).Value := VKRZ."Manufacturer Code";
            Sheet.Range('U'+j).Value := VKRZ."Order No.";
            Sheet.Range('V'+j).Value := VKRZ."Blanket Order No.";
            IF VKRZ."Blanket Order No." ='' THEN BEGIN
              // Auftrag benutzen
              vkk.SETFILTER(vkk."No.",'%1',VKRK."Order No.");
              IF vkk.FINDFIRST THEN BEGIN
                Sheet.Range('W'+j).Value := vkk."Order Date";
                Sheet.Range('X'+j).Value := vkk."Currency Code";
                IF vkk."Currency Factor" = 0 THEN BEGIN
                  vkz.SETFILTER(vkz."Document No.",'%1',vkk."No.");
                  vkz.SETFILTER(vkz."Line No.",'%1',VKRZ."Order Line No.");
                  IF vkz.FINDFIRST THEN BEGIN
                    Sheet.Range('Z'+j).Value := vkz."Unit Cost (LCY)";
                    v_ek:=vkz."Unit Cost (LCY)";
                    Sheet.Range('AA'+j).Value := vkz."Unit Price";
                    v_vk:=vkz."Unit Price";
                  END;
                  Sheet.Range('AB'+j).Value := (v_vk - v_ek);
                  Sheet.Range('AB'+j).NumberFormat:='########,##';
                  //15.03.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                  IF v_vk <> 0 THEN BEGIN
                    Sheet.Range('AC'+j).Value := ((v_vk - v_ek)/v_vk*100);
                    v_marge1:= ((v_vk - v_ek)/v_vk*100);
                  END ELSE BEGIN
                    Sheet.Range('AC'+j).Value := 0;
                    v_marge1 := 0;
                  END;
                  //Zusatz Ende
                  Sheet.Range('AC'+j).NumberFormat:='########,##';
                  IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                    Sheet.Range('AD'+j).Value :='X';
                  END;
                  IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                    Sheet.Range('AD'+j).Value :='X';
                  END;
                  Sheet.Range('AE'+j).Value :='AU1';
                END ELSE BEGIN
                  W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Starting Date",'%1',vkk."Order Date");
                  W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Currency Code",'%1',vkk."Currency Code");
                  IF W„hrungWechKurs.FINDFIRST THEN BEGIN
                    Sheet.Range('Y'+j).Value := W„hrungWechKurs."Exchange Rate Amount"*100;
                    v_w„_fact:=W„hrungWechKurs."Exchange Rate Amount";
                    vkz.SETFILTER(vkz."Document No.",'%1',vkk."No.");
                    vkz.SETFILTER(vkz."Line No.",'%1',VKRZ."Order Line No.");
                    IF vkz.FINDFIRST THEN BEGIN
                      v_vk:=vkz."Unit Price"/v_w„_fact;
                      W„hrungWechKurs.RESET;
                      W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Starting Date",'%1',vkk."Order Date");
                      W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Currency Code",'%1',vkz.Einkaufsw„hrungscode);
                      IF W„hrungWechKurs.FINDFIRST THEN BEGIN
                        v_w„_ek_kurs:=W„hrungWechKurs."Exchange Rate Amount";
                        v_ek:=(vkz."DC-Preis (EKW)"*((100+vkz."Handlingskosten %")/100)*((100+v_zoll)/100));
                        Sheet.Range('AF'+j).Value :=v_ek;
                        v_ek:=((v_ek) / (v_w„_ek_kurs));
                        Sheet.Range('AG'+j).Value :=v_ek;
                      END;
                      Sheet.Range('Z'+j).Value := v_ek;
                      Sheet.Range('AA'+j).Value := v_vk;
                      Sheet.Range('AB'+j).Value := (v_vk - v_ek);
                      Sheet.Range('AB'+j).NumberFormat:='########,##';
                      //15.03.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                      IF v_vk <> 0 THEN BEGIN
                        Sheet.Range('AC'+j).Value := ((v_vk - v_ek)/v_vk*100);
                        v_marge1:= ((v_vk - v_ek)/v_vk*100);
                      END ELSE BEGIN
                        Sheet.Range('AC'+j).Value := 0;
                        v_marge1 := 0;
                      END;
                      //Zusatz Ende
                      Sheet.Range('AC'+j).NumberFormat:='########,##';
                      IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                        Sheet.Range('AD'+j).Value :='X';
                      END;
                      IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                        Sheet.Range('AD'+j).Value :='X';
                      END;
                      Sheet.Range('AE'+j).Value :='AU2';
                    END;
                  END;
                END;
              END ELSE BEGIN
                // archivierten Auftrag benutzen
                avkk.SETFILTER(avkk."No.",'%1',VKRK."Order No.");
                IF avkk.FINDLAST THEN BEGIN
                  Sheet.Range('W'+j).Value := avkk."Order Date";
                  Sheet.Range('X'+j).Value := avkk."Currency Code";
                  IF avkk."Currency Factor" = 0 THEN BEGIN
                    avkz.SETFILTER(avkz."Document No.",'%1',avkk."No.");
                    avkz.SETFILTER(avkz."Line No.",'%1',VKRZ."Order Line No.");
                    IF avkz.FINDLAST THEN BEGIN
                      Sheet.Range('Z'+j).Value := avkz."Unit Cost (LCY)";
                      v_ek:=avkz."Unit Cost (LCY)";
                      Sheet.Range('AA'+j).Value := avkz."Unit Price";
                      v_vk:=avkz."Unit Price";
                    END;
                      Sheet.Range('AB'+j).Value := (v_vk - v_ek);
                      Sheet.Range('AB'+j).NumberFormat:='########,##';
                      //15.03.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                      IF v_vk <> 0 THEN BEGIN
                        Sheet.Range('AC'+j).Value := ((v_vk - v_ek)/v_vk*100);
                        v_marge1 := ((v_vk - v_ek)/v_vk*100);
                      END ELSE BEGIN
                        Sheet.Range('AC'+j).Value := 0;
                        v_marge1 := 0;
                      END;
                      //Zusatz Ende
                      Sheet.Range('AC'+j).NumberFormat:='########,##';
                      IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                        Sheet.Range('AD'+j).Value :='X';
                      END;
                      IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                        Sheet.Range('AD'+j).Value :='X';
                      END;
                      Sheet.Range('AE'+j).Value :='Archiv1';
                    END ELSE BEGIN
                      W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Starting Date",'%1',avkk."Order Date");
                      W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Currency Code",'%1',avkk."Currency Code");
                      IF W„hrungWechKurs.FINDFIRST THEN BEGIN
                        Sheet.Range('Y'+j).Value := W„hrungWechKurs."Exchange Rate Amount"*100;
                        v_w„_fact:=W„hrungWechKurs."Exchange Rate Amount";
                        avkz.SETFILTER(avkz."Document No.",'%1',avkk."No.");
                        avkz.SETFILTER(avkz."Line No.",'%1',VKRZ."Order Line No.");
                        IF avkz.FINDFIRST THEN BEGIN
                          v_vk:=avkz."Unit Price"/v_w„_fact;
                          Sheet.Range('AE'+j).Value :=v_w„_fact;
                          W„hrungWechKurs.RESET;
                          W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Starting Date",'%1',avkk."Order Date");
                          W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Currency Code",'%1',avkz.Einkaufsw„hrungscode);
                          IF W„hrungWechKurs.FINDFIRST THEN BEGIN
                            v_w„_ek_kurs:=W„hrungWechKurs."Exchange Rate Amount";
                            v_ek:=(avkz."DC-Preis (EKW)"*((100+avkz."Handlingskosten %")/100)*((100+v_zoll)/100));
                            Sheet.Range('AF'+j).Value :=v_ek;
                            v_ek:=((v_ek) / (v_w„_ek_kurs));
                            Sheet.Range('AG'+j).Value :=v_ek;
                          END;
                          Sheet.Range('Z'+j).Value := v_ek;
                          Sheet.Range('AA'+j).Value := v_vk;
                        END;
                      END;
                      Sheet.Range('AB'+j).Value := (v_vk - v_ek);
                      Sheet.Range('AB'+j).NumberFormat:='########,##';
                      //15.03.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                      IF v_vk <> 0 THEN BEGIN
                        Sheet.Range('AC'+j).Value := ((v_vk - v_ek)/v_vk*100);
                        v_marge1 := ((v_vk - v_ek)/v_vk*100);
                      END ELSE BEGIN
                        Sheet.Range('AC'+j).Value := 0;
                        v_marge1 := 0;
                      END;
                      //Zusatz Ende
                      Sheet.Range('AC'+j).NumberFormat:='########,##';
                      IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                         Sheet.Range('AD'+j).Value :='X';
                      END;
                      IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                        Sheet.Range('AD'+j).Value :='X';
                      END;
                        Sheet.Range('AE'+j).Value :='Archiv2';
                    END;
                  END;
                END;
              END ELSE BEGIN
              // Rahmenauftrag benutzen
              vkk.SETFILTER(vkk."No.",'%1',VKRZ."Blanket Order No.");
              IF vkk.FINDFIRST THEN BEGIN
                Sheet.Range('W'+j).Value := vkk."Order Date";
                Sheet.Range('X'+j).Value := vkk."Currency Code";
                IF vkk."Currency Factor" = 0 THEN BEGIN
                  vkz.SETFILTER(vkz."Document No.",'%1',vkk."No.");
                  vkz.SETFILTER(vkz."Line No.",'%1',VKRZ."Blanket Order Line No.");
                  IF vkz.FINDFIRST THEN BEGIN
                    Sheet.Range('Z'+j).Value := vkz."Unit Cost (LCY)";
                    v_ek:=vkz."Unit Cost (LCY)";
                    Sheet.Range('AA'+j).Value := vkz."Unit Price";
                    v_vk:=vkz."Unit Price";
                  END;
                  Sheet.Range('AB'+j).Value := (v_vk - v_ek);
                  Sheet.Range('AB'+j).NumberFormat:='########,##';
                  //12.04.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                  IF v_vk <> 0 THEN BEGIN
                    Sheet.Range('AC'+j).Value := ((v_vk - v_ek)/v_vk*100);
                    v_marge1:= ((v_vk - v_ek)/v_vk*100);
                  END ELSE BEGIN
                    Sheet.Range('AC'+j).Value := 0;
                    v_marge1 := 0;
                  END;
                  //Zusatz Ende
                  Sheet.Range('AC'+j).NumberFormat:='########,##';
                  IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                    Sheet.Range('AD'+j).Value :='X';
                  END;
                  IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                    Sheet.Range('AD'+j).Value :='X';
                  END;
                  Sheet.Range('AE'+j).Value :='Rahmen1';
                END ELSE BEGIN
                  W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Starting Date",'%1',vkk."Order Date");
                  W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Currency Code",'%1',vkk."Currency Code");
                  IF W„hrungWechKurs.FINDFIRST THEN BEGIN
                    Sheet.Range('Y'+j).Value := W„hrungWechKurs."Exchange Rate Amount"*100;
                    v_w„_fact:=W„hrungWechKurs."Exchange Rate Amount";
                    vkz.SETFILTER(vkz."Document No.",'%1',vkk."No.");
                    vkz.SETFILTER(vkz."Line No.",'%1',VKRZ."Blanket Order Line No.");
                    IF vkz.FINDFIRST THEN BEGIN
                      v_vk:=vkz."Unit Price"/v_w„_fact;
                      W„hrungWechKurs.RESET;
                      W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Starting Date",'%1',vkk."Order Date");
                      W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Currency Code",'%1',vkz.Einkaufsw„hrungscode);
                      IF W„hrungWechKurs.FINDFIRST THEN BEGIN
                        v_w„_ek_kurs:=W„hrungWechKurs."Exchange Rate Amount";
                        v_ek:=(vkz."DC-Preis (EKW)"*((100+vkz."Handlingskosten %")/100)*((100+v_zoll)/100));
                        Sheet.Range('AG'+j).Value :=v_ek;
                        v_ek:=((v_ek) / (v_w„_ek_kurs));
                        Sheet.Range('AH'+j).Value :=v_ek;
                      END;
                        Sheet.Range('Z'+j).Value := v_ek;
                        Sheet.Range('AA'+j).Value := v_vk;
                        Sheet.Range('AB'+j).Value := (v_vk - v_ek);
                        Sheet.Range('AB'+j).NumberFormat:='########,##';
                        //12.04.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                        IF v_vk <> 0 THEN BEGIN
                          Sheet.Range('AC'+j).Value := ((v_vk - v_ek)/v_vk*100);
                          v_marge1 := ((v_vk - v_ek)/v_vk*100);
                        END ELSE BEGIN
                          Sheet.Range('AC'+j).Value := 0;
                          v_marge1 := 0;
                        END;
                        //Zusatz Ende
                        Sheet.Range('AC'+j).NumberFormat:='########,##';
                        IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                          Sheet.Range('AD'+j).Value :='X';
                        END;
                        IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                          Sheet.Range('AD'+j).Value :='X';
                        END;
                        Sheet.Range('AE'+j).Value :='Rahmen2';
                      END;
                    END;
                  END;
                END;
                //  Archivierten Rahmen
                avkk.SETFILTER(avkk."No.",'%1',VKRZ."Blanket Order No.");
                IF avkk.FINDLAST THEN BEGIN
                  Sheet.Range('W'+j).Value := avkk."Order Date";
                  Sheet.Range('X'+j).Value := avkk."Currency Code";
                  IF avkk."Currency Factor" = 0 THEN BEGIN
                    avkz.SETFILTER(avkz."Document No.",'%1',avkk."No.");
                    avkz.SETFILTER(avkz."Line No.",'%1',VKRZ."Blanket Order Line No.");
                    IF avkz.FINDLAST THEN BEGIN
                      Sheet.Range('Z'+j).Value := avkz."Unit Cost (LCY)";
                      v_ek:=avkz."Unit Cost (LCY)";
                      Sheet.Range('AA'+j).Value := avkz."Unit Price";
                      v_vk:=avkz."Unit Price";
                    END;
                    Sheet.Range('AB'+j).Value := (v_vk - v_ek);
                    Sheet.Range('AB'+j).NumberFormat:='########,##';
                    //12.04.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                    IF v_vk <> 0 THEN BEGIN
                      Sheet.Range('AC'+j).Value := ((v_vk - v_ek)/v_vk*100);
                      v_marge1:= ((v_vk - v_ek)/v_vk*100);
                    END ELSE BEGIN
                      Sheet.Range('AC'+j).Value := 0;
                      v_marge1:= 0;
                    END;
                    //Zusatz Ende
                    Sheet.Range('AC'+j).NumberFormat:='########,##';
                    IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                      Sheet.Range('AD'+j).Value :='X';
                    END;
                    IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                      Sheet.Range('AD'+j).Value :='X';
                    END;
                    Sheet.Range('AE'+j).Value :='Rahmen1';
                  END ELSE BEGIN
                    W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Starting Date",'%1',avkk."Order Date");
                    W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Currency Code",'%1',avkk."Currency Code");
                    IF W„hrungWechKurs.FINDFIRST THEN BEGIN
                      Sheet.Range('Y'+j).Value := W„hrungWechKurs."Exchange Rate Amount"*100;
                      v_w„_fact:=W„hrungWechKurs."Exchange Rate Amount";
                      avkz.SETFILTER(avkz."Document No.",'%1',avkk."No.");
                      avkz.SETFILTER(avkz."Line No.",'%1',VKRZ."Blanket Order Line No.");
                      IF avkz.FINDFIRST THEN BEGIN
                        v_vk:=avkz."Unit Price"/v_w„_fact;
                        v_ek:=avkz."DC-Preis (EKW)"*((100+vkz."Handlingskosten %")/100)*((100+v_zoll)/100);
                        v_ek:=v_ek/v_w„_fact;
                        IF vkz.Einkaufsw„hrungscode='JPY' THEN BEGIN
                          v_ek:=v_ek/100;
                        END;
                        Sheet.Range('Z'+j).Value := v_ek;
                        Sheet.Range('AA'+j).Value := v_vk;
                        Sheet.Range('AB'+j).Value := (v_vk - v_ek);
                        Sheet.Range('AB'+j).NumberFormat:='########,##';
                        //12.04.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                        IF v_vk <> 0 THEN BEGIN
                          Sheet.Range('AC'+j).Value := ((v_vk - v_ek)/v_vk*100);
                          v_marge1:= ((v_vk - v_ek)/v_vk*100);
                        END ELSE BEGIN
                          Sheet.Range('AC'+j).Value := 0;
                          v_marge1:= 0;
                        END;
                        //Zusatz Ende
                        Sheet.Range('AC'+j).NumberFormat:='########,##';
                        IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                          Sheet.Range('AD'+j).Value :='X';
                        END;
                        IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                          Sheet.Range('AD'+j).Value :='X';
                        END;
                        Sheet.Range('AE'+j).Value :='Rahmen2';
                      END;
                    END;
                  END;
                END;
                //  ENDE Archivierten Rahmen
              END;
              Sheet.Range('AI'+j).Value := v_zoll;
              j:=INCSTR(j);
            UNTIL VKRZ.NEXT=0;
          END;
        UNTIL VKRK.NEXT=0;
      END;

      //**************************************************************   2. Teil  Kontozeilen 4406 / 4407 etc ****************

      VKRK.RESET;
      VKRK.SETFILTER(VKRK."Posting Date",'%1..%2',v_datum_von,v_datum_bis);
      IF VKRK.FINDFIRST THEN BEGIN
        REPEAT
          v_wert_eu:=0;
          v_w„_fact:=0;
          v_ek:=1;
          v_vk:=1;
          v_re_marge:=0;
          v_marge1:=0;
          v_zoll:=0;
          VKRZ.RESET;
          VKRZ.SETFILTER(VKRZ."Document No.",'%1',VKRK."No.");
          VKRZ.SETFILTER(VKRZ.Quantity,'<>%1',0);
          VKRZ.SETFILTER(VKRZ.Type,'%1',VKRZ.Type::"G/L Account");
          VKRZ.SETFILTER(VKRZ."No.",'%1|%2|%3|%4|%5|%6|%7','4407','4408','4412','4118','4338','4317','4690');
          IF VKRZ.FINDFIRST THEN BEGIN
            REPEAT
              Sheet.Range('A'+j).Value := VKRK."No.";
              Sheet.Range('B'+j).Value := VKRK."Posting Date";
              Sheet.Range('C'+j).Value := VKRZ."No.";
              Sheet.Range('D'+j).Value := VKRZ.Quantity;
              Sheet.Range('D'+j).NumberFormat:='########';
              Sheet.Range('E'+j).Value := VKRZ."Unit Price";
              Sheet.Range('E'+j).NumberFormat:='########,##';
              Sheet.Range('F'+j).Value := VKRK."Currency Code";
              Sheet.Range('G'+j).Value := VKRZ."VK-Preis (MW)";
              Sheet.Range('G'+j).NumberFormat:='########,##';
              Sheet.Range('H'+j).Value := VKRZ."Unit Cost (LCY)";
              Sheet.Range('H'+j).NumberFormat:='#####.###,####';
              Sheet.Range('I'+j).Value := VKRK."Bill-to Name";
              Sheet.Range('J'+j).Value := VKRK."Bill-to Customer No.";
              Sheet.Range('K'+j).Value := VKRK."Bill-to Post Code";
              Sheet.Range('L'+j).Value := VKRK."Salesperson Code";
              Sheet.Range('M'+j).Value := VKRK."Betreuer Innendienst";
              Sheet.Range('N'+j).Value := VKRK.Teams;
              Sheet.Range('O'+j).Value := VKRK."Territory Code";
              IF  VKRK."Currency Factor">1 THEN BEGIN
                Sheet.Range('P'+j).Value := VKRZ."Unit Price"/VKRK."Currency Factor"*VKRZ.Quantity;
                Sheet.Range('O'+j).NumberFormat:='#####.###,####';
                Sheet.Range('Q'+j).Value:=(((VKRZ."Unit Price"/VKRK."Currency Factor")-VKRZ."Unit Cost (LCY)")*VKRZ.Quantity);
                Sheet.Range('Q'+j).NumberFormat:='#####.###,####';
              END ELSE BEGIN
                Sheet.Range('P'+j).Value := VKRZ.Amount;
                Sheet.Range('P'+j).NumberFormat:='#####.###,####';
                Sheet.Range('Q'+j).Value:=(VKRZ.Amount-(VKRZ."Unit Cost (LCY)"*VKRZ.Quantity));
                Sheet.Range('Q'+j).NumberFormat:='#####.###,####';
              END;
              Sheet.Range('R'+j).Value:=((VKRZ.Amount-(VKRZ."Unit Cost (LCY)"*VKRZ.Quantity))/VKRZ.Amount*100);
              Sheet.Range('R'+j).NumberFormat:='#####.###,####';
              // Sheet.Range('S'+j).Value := VKRZ."Shortcut Dimension 1 Code";
              // Sheet.Range('S'+j).Value :='IDT';
              // Sheet.Range('T'+j).Value := VKRZ."Manufacturer Code";
              //  Sheet.Range('T'+j).Value := '0';
              v_vkz1.RESET;
              v_vkz1.SETFILTER(v_vkz1."Document No.",'%1',VKRZ."Document No.");
              v_vkz1.SETFILTER(v_vkz1.Quantity,'>%1',0);
              v_vkz1.SETFILTER(v_vkz1.Type,'%1',v_vkz1.Type::Item);
              IF v_vkz1.FINDFIRST THEN BEGIN
                Sheet.Range('T'+j).Value :=v_vkz1."Manufacturer Code";
              END;
              j := INCSTR (j);
            UNTIL VKRZ.NEXT=0;
          END;
        UNTIL VKRK.NEXT=0;
      END;

      //*******************************************************  3. Teil   Gutschriften  **************************

      VKGK.RESET;
      VKGK.SETFILTER(VKGK."Posting Date",'%1..%2',v_datum_von,v_datum_bis);
      IF VKGK.FINDFIRST THEN BEGIN
        REPEAT
          v_wert_eu:=0;
          v_w„_fact:=0;
          v_ek:=1;
          v_vk:=1;
          v_re_marge:=0;
          v_marge1:=0;
          v_zoll:=0;
          VKGZ.RESET;
          VKGZ.SETFILTER(VKGZ."Document No.",'%1',VKGK."No.");
          VKGZ.SETFILTER(VKGZ.Quantity,'<>%1',0);
          VKGZ.SETFILTER(VKGZ.Type,'%1',VKRZ.Type::Item);
          VKGZ.SETFILTER(VKGZ."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF VKGZ.FINDFIRST THEN BEGIN
            REPEAT
              v_wert_eu:=0;
              Sheet.Range('A'+j).Value := VKGK."No.";
              Sheet.Range('B'+j).Value := VKGK."Posting Date";
              Sheet.Range('C'+j).Value := VKGZ."No.";
              Sheet.Range('D'+j).Value := VKGZ.Quantity;
              Sheet.Range('D'+j).NumberFormat:='########';
              Sheet.Range('E'+j).Value := VKGZ."Unit Price";
              Sheet.Range('E'+j).NumberFormat:='########,##';
              Sheet.Range('F'+j).Value := VKGK."Currency Code";
              Sheet.Range('G'+j).Value := VKGZ."VK-Preis (MW)";
              Sheet.Range('G'+j).NumberFormat:='########,##';
              Sheet.Range('H'+j).Value := VKGZ."Unit Cost (LCY)";
              Sheet.Range('H'+j).NumberFormat:='#####.###,####';
              Sheet.Range('I'+j).Value := VKGK."Bill-to Name";
              Sheet.Range('J'+j).Value := VKGK."Bill-to Customer No.";
              Sheet.Range('K'+j).Value := VKGK."Bill-to Post Code";
              Sheet.Range('L'+j).Value := VKGK."Salesperson Code";
              Sheet.Range('M'+j).Value := VKGK."Betreuer Innendienst";
              Sheet.Range('N'+j).Value := VKGK.Teams;
              Sheet.Range('O'+j).Value := VKGK."Territory Code";
              IF  VKGK."Currency Factor">1 THEN BEGIN
                IF VKGZ."Unit Price"<>0 THEN BEGIN
                  Sheet.Range('P'+j).Value := ((VKGZ."Unit Price"/VKGK."Currency Factor"*VKGZ.Quantity)*(-1));
                  Sheet.Range('P'+j).NumberFormat:='#####.###,####';
                  Sheet.Range('Q'+j).Value:=((((VKGZ."Unit Price"/VKGK."Currency Factor")-VKGZ."Unit Cost (LCY)")*VKGZ.Quantity)*(-1));
                  Sheet.Range('Q'+j).NumberFormat:='#####.###,####';
                  v_wert_eu:=((VKGZ."Unit Price"/VKGK."Currency Factor"*VKGZ.Quantity)*(-1));
                  Sheet.Range('R'+j).Value:=((v_wert_eu-(VKGZ."Unit Cost (LCY)"*VKGZ.Quantity)) /v_wert_eu*100);
                  Sheet.Range('R'+j).NumberFormat:='#####.###,####';
                END ELSE BEGIN
                END;
              END ELSE BEGIN
                IF VKGZ."Unit Price"<>0 THEN BEGIN
                  Sheet.Range('P'+j).Value := (VKGZ.Amount*(-1));
                  Sheet.Range('P'+j).NumberFormat:='#####.###,####';
                  Sheet.Range('Q'+j).Value:=((VKGZ.Amount-(VKGZ."Unit Cost (LCY)"*VKGZ.Quantity))*(-1));
                  Sheet.Range('Q'+j).NumberFormat:='#####.###,####';
                  Sheet.Range('R'+j).Value:=((VKGZ.Amount-(VKGZ."Unit Cost (LCY)"*VKGZ.Quantity))/VKGZ.Amount*100);
                  Sheet.Range('R'+j).NumberFormat:='#####.###,####';
                END ELSE BEGIN
                END;
              END;
              Sheet.Range('S'+j).Value := VKGZ."Shortcut Dimension 1 Code";
              Sheet.Range('T'+j).Value := VKGZ."Manufacturer Code";
              Sheet.Range('U'+j).Value := VKGK."Applies-to Doc. Type";
              Sheet.Range('V'+j).Value := VKGK."Applies-to Doc. No.";
              j := INCSTR (j);
            UNTIL VKGZ.NEXT=0;
          END;
        UNTIL VKGK.NEXT=0;
      END;
      IF wshFile.FileExists('F:\Tausch\Nav\Daten\Daten_Nav_Prov.xlsx') THEN wshFile.DeleteFile('F:\Tausch\Nav\Daten\Daten_Nav_Prov.xlsx');
      CLEAR(wshFile);
      Book._SaveAs('F:\Tausch\Nav\Daten\Daten_Nav_Prov.xlsx',51,'','',FALSE,FALSE);
      Book.Close(TRUE);

      //Excel.Visible(TRUE);
      Excel.Quit;
    END;

    PROCEDURE Wartungsvertragsbersicht@1140009();
    BEGIN
      {
      IF v_wartnr = '' THEN
      ERROR('Es wurde keine Wartungsvertragsnummer eingegeben. Report abgebrochen!');
      //IF Abgrenz_Datum = 0D THEN
      //ERROR('Es wurde kein Datum eingegeben. Report abgebrochen!');


      //Variablenbelegung
      liefnr:='LS00';
      liefzeilennr:=10;

      CLEAR(Excel);
      REPEAT
      UNTIL ISCLEAR(Excel);
      CREATE(Excel);

      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.Range('M:O').NumberFormat:='0,00';
      Sheet.Range('AB:AC').NumberFormat:='0,00';
      //Sheet.Range('O:O').NumberFormat:='###.###,####';

      Sheet.Range('A3').Value := 'šbersicht der Wartungsvertragspositionen zu  '; // šberschriftszeile

      Sheet.Range('F3').Value := v_wartnr;

      Sheet.Range('A4').Value := 'Lfd.Nr.';
      Sheet.Range('B4').Value := 'Ablauf-Datum';
      Sheet.Range('C4').Value := 'Art';
      Sheet.Range('D4').Value := 'Nr.';
      Sheet.Range('E4').Value := 'ZeilenNr.';
      Sheet.Range('F4').Value := 'Belegdatum';
      Sheet.Range('G4').Value := 'Artikelnr';
      Sheet.Range('H4').Value := 'Seriennr';
      Sheet.Range('I4').Value := 'Debitorennr';
      Sheet.Range('J4').Value := 'Debitorname';
      Sheet.Range('K4').Value := 'ChampsNr';
      Sheet.Range('L4').Value := 'WartVertragNr';
      //Sheet.Range('M4').Value := 'Champ DC';
      //Sheet.Range('N4').Value := 'Champ MSRP';
      Sheet.Range('M4').Value := 'Menge';
      Sheet.Range('N4').Value := 'Einstandspreis';
      Sheet.Range('O4').Value := 'VK';
      Sheet.Range('P4').Value := 'Lizenzdatum';
      Sheet.Range('Q4').Value := 'Ablaufdatum';
      Sheet.Range('R4').Value := 'LZ in Tagen';
      Sheet.Range('S4').Value := 'Abgr in Tagen';
      Sheet.Range('T4').Value := 'Abgr EK';
      Sheet.Range('U4').Value := 'Abgr VK';
      Sheet.Range('V4').Value := 'Inaktiv';
      Sheet.Range('W4').Value := 'Hauptwartungsvertrag';
      j := '5';                                   // <- Import in excel ab Zeile 3



      Service.RESET;
      Service.SETCURRENTKEY("Wartungsvertragsnr.","Nr.","Belegzeilennr.");
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);

      //  Hauptwartungsvertragsnummer filtern
      IF v_hauptwart = TRUE THEN BEGIN
      Service.SETFILTER(Service."Hauptwartungsvertragsnr.",'%1',v_wartnr);
      END ELSE BEGIN
      Service.SETFILTER(Service."Wartungsvertragsnr.",'%1',v_wartnr);
      END;

      Service.SETFILTER(Service."Ablaufdatum Serviceleistung",'>%1',Abgrenz_Datum);
      Service.SETFILTER(Service.Belegdatum,'<=%1',Abgrenz_Datum);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);

      //Eingrezungen auf bestimmte Artikel
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
      REPEAT

         artikel.RESET;
         artikel.SETFILTER(artikel."No.",'%1',Service."SUP Artikelnr.");
         artikel.SETFILTER(artikel."Manufacturer Code",'<>%1&<>%2','5710','5720');
         IF artikel.FINDFIRST THEN BEGIN
         LZ_rest:=0;

        Lief.RESET;
        Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
        Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
        Lief.SETFILTER(Lief."Manufacturer Code",'<>%1&<>%2','5710','5720');
        Lief.SETFILTER(Lief.Quantity,'<>%1',0);
         IF Lief.FINDFIRST THEN BEGIN


              Sheet.Range('A'+j).Value := Service."Lfd. Nr.";
              Sheet.Range('B'+j).Value := Service."Ablaufdatum Serviceleistung";
              Sheet.Range('C'+j).Value := FORMAT(Service.Art);
              Sheet.Range('D'+j).Value := Service."Nr.";
              Sheet.Range('E'+j).Value := Service."Belegzeilennr.";
              Sheet.Range('F'+j).Value := Service.Belegdatum;
              Sheet.Range('G'+j).Value := Service."Artikelnr.";
              Sheet.Range('H'+j).Value := Service."Seriennr.";
              Sheet.Range('I'+j).Value := Service."Debitornr.";
              Sheet.Range('J'+j).Value := Service.Debitorname;
              Sheet.Range('K'+j).Value := Service."SUP Artikelnr.";
              Sheet.Range('L'+j).Value := Service."Wartungsvertragsnr.";
      //        Sheet.Range('M'+j).Value := Service."Service DC";
      //        Sheet.Range('N'+j).Value := Service."Service MSRP";
              Sheet.Range('V'+j).Value := Service.Inaktiv;
              Sheet.Range('W'+j).Value := Service."Hauptwartungsvertragsnr.";
      //{
             IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
             END ELSE BEGIN
              Sheet.Range('M'+j).Value := Lief.Quantity;
              Sheet.Range('N'+j).Value := Lief."Unit Cost (LCY)";
              Sheet.Range('O'+j).Value := Lief."Unit Price";

              LZ_tage:= (Service."Ablaufdatum Serviceleistung"- Service.Lizenzdatum-1);
              LZ_tage_stich:=(Service."Ablaufdatum Serviceleistung"-Abgrenz_Datum-1);
              LZ_tage_bewert:=0;

              Sheet.Range('P'+j).Value := Service.Lizenzdatum;
              Sheet.Range('Q'+j).Value := Service."Ablaufdatum Serviceleistung";
              Sheet.Range('R'+j).Value := LZ_tage;
              IF LZ_tage_stich>LZ_tage THEN BEGIN
              LZ_tage_bewert := LZ_tage;
              END ELSE BEGIN
              LZ_tage_bewert := LZ_tage_stich;
              END;
              Sheet.Range('S'+j).Value := LZ_tage_bewert;
              Sheet.Range('T'+j).Value := ROUND((Lief."Unit Cost (LCY)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity),0.01);
              Sheet.Range('U'+j).Value := ROUND((Lief."VK-Preis (MW)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity),0.01);
              Sum_ek:=(Sum_ek+ (ROUND(Lief."Unit Cost (LCY)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
              Sum_vk:=(Sum_vk+ (ROUND(Lief."VK-Preis (MW)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
              liefnr:=Lief."Document No.";
              liefzeilennr:=Lief."Line No.";

          END;

      //}
            j:=INCSTR(j);
         END;

        Lief.RESET;
        Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
      //  Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
      //  Lief.SETFILTER(Lief."Manufacturer Code",'<>%1&<>%2','5710','5720');
        Lief.SETFILTER(Lief.Quantity,'<>%1',0);
         IF Lief.FINDFIRST THEN BEGIN
         REPEAT
              Sheet.Range('D'+j).Value := Lief."Document No.";
              Sheet.Range('E'+j).Value := Lief."Line No.";
              Sheet.Range('G'+j).Value := Lief."No.";
              Sheet.Range('M'+j).Value := Lief.Quantity;
              Sheet.Range('N'+j).Value := Lief."Unit Cost (LCY)";
              Sheet.Range('O'+j).Value := Lief."Unit Price";


             Service1.RESET;
             Service1.SETFILTER(Service1."Nr.",'%1',Lief."Document No.");
             Service1.SETFILTER(Service1."Belegzeilennr.",'%1',Lief."Line No.");
             IF Service1.FINDFIRST THEN BEGIN
              Sheet.Range('L'+j).Value := Service1."Wartungsvertragsnr.";
             END;


              j:=INCSTR(j);



         UNTIL Lief.NEXT=0;
       END;

       END;

      UNTIL Service.NEXT=0;
      END;
      Sheet.Range('A1').Value :='Abgrenz_Ek';
      Sheet.Range('B1').Value :=Sum_ek;
      Sheet.Range('D1').Value :='Abgrenz_Vk';
      Sheet.Range('E1').Value :=Sum_vk;

      //Excel.Visible(TRUE);




      //MESSAGE(' Differenzen wurden ordnungsgem„á nach Excel exportiert. ');
      }
    END;

    PROCEDURE "Abschluá"@1140011();
    BEGIN

      //CLEAR(Excel);
      //REPEAT
      //UNTIL ISCLEAR(Excel);
      CREATE(Excel,FALSE,TRUE);
      CREATE (wshFile,FALSE,TRUE);
      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.Range('C:O').NumberFormat:='0,00';

      Sheet.Range('A1').Value :='Ab Zeile  10 beginnen die Bilanzkonten';
      Sheet.Range('A2').Value :='Ab Zeile 300 beginnen die GuV-Konten';
      Sheet.Range('A3').Value :='Ab Zeile 800 beginnen sonstige bilanzrelevante Daten';
      Sheet.Range('A4').Value :=FORMAT('Zeitraum von ' +FORMAT(v_datum_von) + ' bis '+FORMAT( v_datum_bis));

      Sheet.Range('A8').Value :='Nr.';
      Sheet.Range('B8').Value :='Name';
      Sheet.Range('C8').Value :='Saldo';
      Sheet.Range('D8').Value :='Kontengruppe';

      j := '10';
      sachkonten.RESET;
      sachkonten.CALCFIELDS(Balance);
      sachkonten.SETFILTER(sachkonten."Income/Balance",'%1',sachkonten."Income/Balance"::"Balance Sheet");
      sachkonten.SETFILTER(sachkonten."No.",'<%1','8000');
      IF sachkonten.FINDFIRST THEN BEGIN
        REPEAT
          Sheet.Range('A'+j).Value := sachkonten."No.";
          Sheet.Range('B'+j).Value := sachkonten.Name;
          Sheet.Range('C'+j).Value := 0;
          Sheet.Range('D'+j).Value := FORMAT(sachkonten.Kontengruppe);
          var_balance_gesamt_konto := 0;
          sachposten.RESET;
          sachposten.SETFILTER(sachposten."G/L Account No.",'%1',sachkonten."No.");
          sachposten.SETFILTER(sachposten."Posting Date",'<=%1',v_datum_bis);
          IF sachposten.FINDFIRST THEN BEGIN
            REPEAT
              var_balance_gesamt_konto := var_balance_gesamt_konto + sachposten.Amount;
            UNTIL sachposten.NEXT=0;
          END;
          IF var_balance_gesamt_konto<>0 THEN BEGIN
            Sheet.Range('C'+j).Value := var_balance_gesamt_konto;
          END;
          j := INCSTR (j);
        UNTIL sachkonten.NEXT=0;
      END;

      j := '300';                                                    // <- Export nach Excel ab Zeile 300
      sachkonten.RESET;
      sachkonten.SETFILTER(sachkonten."No.",'%1..%2','4000','7999');
      IF sachkonten.FINDFIRST THEN BEGIN
        REPEAT
          Sheet.Range('A'+j).Value := sachkonten."No.";
          Sheet.Range('B'+j).Value := sachkonten.Name;
          Sheet.Range('C'+j).Value := 0;
          Sheet.Range('D'+j).Value := FORMAT(sachkonten.Kontengruppe);
          var_balance_gesamt_konto := 0;
          sachposten.RESET;
          sachposten.SETFILTER(sachposten."G/L Account No.",'%1',sachkonten."No.");
          sachposten.SETFILTER(sachposten."Posting Date",'%1..%2',v_datum_von,v_datum_bis);
          IF sachposten.FINDFIRST THEN BEGIN
            REPEAT
              var_balance_gesamt_konto := var_balance_gesamt_konto + sachposten.Amount;
            UNTIL sachposten.NEXT=0;
          END;
          IF var_balance_gesamt_konto<>0 THEN BEGIN
            Sheet.Range('C'+j).Value := var_balance_gesamt_konto;
          END;
          j := INCSTR (j);
        UNTIL sachkonten.NEXT=0;
      END;

      j := '800';
      Sheet.Range('A'+j).Value := 'kreditorische Debitoren:' ;
      j := INCSTR (j);
      deb.RESET;
      deb.SETFILTER(deb."No.",'<>%1','703630');
      IF deb.FINDFIRST THEN BEGIN
        REPEAT
          var_balance_gesamt_konto := 0;
          var_balance_total_summe := 0;
          deb_posten.RESET;
          deb_posten.SETCURRENTKEY("Customer No.","Posting Date","Currency Code");
          deb_posten.SETFILTER(deb_posten."Customer No.",'%1',deb."No.");
          deb_posten.SETFILTER(deb_posten."Posting Date",'<=%1',v_datum_bis);
          IF deb_posten.FINDFIRST THEN BEGIN
            REPEAT
              deb_posten.CALCFIELDS("Amount (LCY)",Amount);
              var_balance_gesamt_konto := var_balance_gesamt_konto + deb_posten."Amount (LCY)";
              IF deb_posten."Currency Code"<>'' THEN BEGIN
                var_balance_total_summe := var_balance_total_summe + deb_posten.Amount;
              END;
            UNTIL deb_posten.NEXT=0;
          END;
          IF var_balance_gesamt_konto <(-1) THEN BEGIN
            Sheet.Range('A'+j).Value := deb."No.";
            Sheet.Range('B'+j).Value := deb.Name;
            Sheet.Range('C'+j).Value := var_balance_gesamt_konto;
            Sheet.Range('D'+j).Value := deb_posten."Currency Code";
            Sheet.Range('E'+j).Value := var_balance_total_summe;
            j := INCSTR (j);
          END;
        UNTIL deb.NEXT=0;
      END;
      j := INCSTR (j);
      j := INCSTR (j);
      Sheet.Range('A'+j).Value := 'debitorische Kreditoren:' ;
      j := INCSTR (j);
      kred.RESET;
      kred.SETFILTER(kred."No.",'<>%1','880033');
      IF kred.FINDFIRST THEN BEGIN
        REPEAT
          var_balance_gesamt_konto := 0;
          var_balance_total_summe := 0;
          kred_posten.RESET;
          kred_posten.SETCURRENTKEY("Vendor No.","Posting Date","Currency Code");
          kred_posten.SETFILTER(kred_posten."Vendor No.",'%1',kred."No.");
          kred_posten.SETFILTER(kred_posten."Posting Date",'<=%1',v_datum_bis);
          IF kred_posten.FINDFIRST THEN BEGIN
            REPEAT
              kred_posten.CALCFIELDS("Amount (LCY)",Amount);
              var_balance_gesamt_konto := var_balance_gesamt_konto + kred_posten."Amount (LCY)";
              IF kred_posten."Currency Code"<>'' THEN BEGIN
                var_balance_total_summe := var_balance_total_summe + kred_posten.Amount;
              END;
            UNTIL kred_posten.NEXT=0;
          END;
          IF var_balance_gesamt_konto >1 THEN BEGIN
            Sheet.Range('A'+j).Value := kred."No.";
            Sheet.Range('B'+j).Value := kred.Name;
            Sheet.Range('C'+j).Value := var_balance_gesamt_konto;
            Sheet.Range('D'+j).Value := kred_posten."Currency Code";
            Sheet.Range('E'+j).Value := var_balance_total_summe;
            j := INCSTR (j);
          END;
        UNTIL kred.NEXT=0;
      END;

      IF wshFile.FileExists('F:\Tausch\Nav\Daten\Daten_Nav_Abschluá.xlsx') THEN wshFile.DeleteFile('F:\Tausch\Nav\Daten\Daten_Nav_Abschluá.xlsx');
      CLEAR(wshFile);
      Book._SaveAs('F:\Tausch\Nav\Daten\Daten_Nav_Abschluá.xlsx',51,'','',FALSE,FALSE);
      Book.Close(TRUE);
      //Excel.Visible(TRUE);
    END;

    LOCAL PROCEDURE CreateExcel@1000000001();
    BEGIN
      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;

      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');

      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);
    END;

    LOCAL PROCEDURE CloseExcel@1000000002(Sheetname@1000000000 : Text;FileName@1000000001 : Text;FilePath@1000000002 : Text);
    BEGIN
      Window.CLOSE;

      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,Sheetname);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN
          TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,Sheetname);
        TempExcelBuffer.WriteSheet(Sheetname,COMPANYNAME,USERID);
        //TempExcelBuffer.SetWidth(1,'A',20);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          IF (FileName = '') OR (FilePath = '') THEN
            TempExcelBuffer.OpenExcel //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
          ELSE
            TempExcelBuffer.OpenExcelWithoutAutoFit(Sheetname,FileName + ExcelFileExtensionTok,FilePath,TRUE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;

    END;

    LOCAL PROCEDURE EnterCell@1000000003(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text[250];Formular@1000000008 : Text[250];Bold@1000000003 : Boolean;Italic@1000000004 : Boolean;Underline@1000000005 : Boolean;NumberFormat@1000000006 : Text[30];CellType@1000000007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := Underline;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE UpdateCellValue@1000000004(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text);
    BEGIN
      IF TempExcelBuffer.GET(RowNo,ColumnNo)  THEN BEGIN
        TempExcelBuffer."Cell Value as Text" := CellValue;
        TempExcelBuffer.MODIFY;
      END;
    END;

    LOCAL PROCEDURE AE_nach_Excel@1000000000();
    BEGIN
      CreateExcel;
      RecNo := 0;
      //šberschriften
      RowNo := 1;
      EnterCell(RowNo,1,'AU Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Kundennr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Kundenname','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'AU Nummer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Artikel','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Menge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Betrag EUR EK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Betrag EUR VK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'Verk„ufer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Betreuer Innen','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      r_AE.RESET;
      r_AE.SETFILTER(r_AE.Datum,'%1..%2',v_datum_von,v_datum_bis);
      IF r_AE.FINDFIRST() THEN BEGIN
        REPEAT
          RowNo := RowNo + 1;
          EnterCell(RowNo,1,FORMAT(r_AE.Datum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
          EnterCell(RowNo,2,FORMAT(r_AE.Deb_Nr),'',FALSE,FALSE,FALSE,'000000',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,3,r_AE.Debitor,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,r_AE.AU_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,r_AE.Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,6,FORMAT(r_AE.Menge),'',FALSE,FALSE,FALSE,'#######0',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,7,FORMAT(r_AE."EK Gesamt"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,8,FORMAT(r_AE."Betrag in EUR"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,9,r_AE.Vertreter,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,10,r_AE.Betreuer,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        UNTIL r_AE.NEXT=0;
      END;

      CloseExcel('Daten_Nav_AE_Quartal','Daten_Nav_AE_Quartal','F:\Tausch\Nav\Daten');
      MESSAGE(Text003);
    END;

    LOCAL PROCEDURE Champsabgrenzungszeilen@1000000006();
    BEGIN
      IF Abgrenz_Datum = 0D THEN ERROR('Es wurde kein Abgrenzungsdatum eingegeben. Report abgebrochen!');
      //Variablenbelegung
      liefnr:='LS00';
      liefzeilennr:=10;
      CreateExcel;
      RowNo := 3;
      EnterCell(RowNo,1,'Abgrenzung der stichtagsbergreifenden Champsvereinbarungen zum  ','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,FORMAT(Abgrenz_Datum),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      RowNo := 4;
      EnterCell(RowNo,1,'Lfd.Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Ablauf-Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Art','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'ZeilenNr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Belegdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Artikelnr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Seriennr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'Debitorennr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Debitorname','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'ChampsNr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'WartVertragNr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'Menge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,'Einstandspreis','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'VK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,'Lizenzdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,'Ablaufdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,'LZ in Tagen','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,'Abgr in Tagen','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,20,'Abgr EK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,21,'Abgr VK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,23,'WartVertragNr2','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,24,'BET-Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,25,'ACO-Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,26,'Betrag °','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,27,'W„hrung','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      Service.RESET;
      Service.SETCURRENTKEY("Wartungsvertragsnr.","Nr.","Belegzeilennr.");
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      Service.SETFILTER(Service."Ablaufdatum Serviceleistung",'>%1',Abgrenz_Datum);
      Service.SETFILTER(Service.Belegdatum,'<=%1',Abgrenz_Datum);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);
      //Eingrezungen auf bestimmte Artikel
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
        REPEAT
          artikel.RESET;
          artikel.SETFILTER(artikel."No.",'%1',Service."SUP Artikelnr.");
          artikel.SETFILTER(artikel."Manufacturer Code",'<>%1&<>%2&<>%3','5710','5720','5730');
          //   artikel.SETFILTER(artikel.Artikelgruppe,'<>%1','CHAMPS_FEE');
          IF artikel.FINDFIRST THEN BEGIN
            LZ_rest:=0;
            Lief.RESET;
            Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
            Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
            Lief.SETFILTER(Lief."Manufacturer Code",'<>%1&<>%2&<>%3','5710','5720','5730');
            IF Lief.FINDFIRST THEN BEGIN
              RowNo := RowNo + 1;
              EnterCell(RowNo,1,Service."Lfd. Nr.",'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,2,FORMAT(Service."Ablaufdatum Serviceleistung"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,3,FORMAT(Service.Art),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,4,Service."Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,5,FORMAT(Service."Belegzeilennr."),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,6,FORMAT(Service.Belegdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,7,Service."Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,8,Service."Seriennr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,9,Service."Debitornr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,10,Service.Debitorname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,11,Service."SUP Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,12,Service."Hauptwartungsvertragsnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
              END ELSE BEGIN
                EnterCell(RowNo,13,FORMAT(Lief.Quantity),'',FALSE,FALSE,FALSE,'#,###,###',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,14,FORMAT(Lief."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,15,FORMAT(Lief."Unit Price"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                LZ_tage:= (Service."Ablaufdatum Serviceleistung"- Service.Lizenzdatum-1);
                LZ_tage_stich:=(Service."Ablaufdatum Serviceleistung"-Abgrenz_Datum-1);
                LZ_tage_bewert:=0;
                EnterCell(RowNo,16,FORMAT(Service.Lizenzdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,17,FORMAT(Service."Ablaufdatum Serviceleistung"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,18,FORMAT(LZ_tage),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
                IF LZ_tage_stich>LZ_tage THEN BEGIN
                  LZ_tage_bewert := LZ_tage;
                END ELSE BEGIN
                  LZ_tage_bewert := LZ_tage_stich;
                END;
                EnterCell(RowNo,19,FORMAT(LZ_tage_bewert),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,20,FORMAT(ROUND((Lief."Unit Cost (LCY)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity),0.01)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,21,FORMAT(ROUND((Lief."VK-Preis (MW)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity),0.01)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                Sum_ek:=(Sum_ek+ (ROUND(Lief."Unit Cost (LCY)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
                Sum_vk:=(Sum_vk+ (ROUND(Lief."VK-Preis (MW)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
                liefnr:=Lief."Document No.";
                liefzeilennr:=Lief."Line No.";
                EnterCell(RowNo,23,Service."Wartungsvertragsnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,24,Service."BET-Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,25,Service."ACO Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,26,FORMAT(Lief."VK-Preis (MW)"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,27,Lief."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;
            END ELSE BEGIN
      //    Anfang Lieferscheine aus Beleghistorie
              LZ_rest:=0;
              beleghis_ek:=0;
              beleghis.RESET;
              beleghis.SETFILTER(beleghis."Belegnr.",'%1',Service."Nr.");
              beleghis.SETFILTER(beleghis."Zeilennr.",'%1',Service."Belegzeilennr.");
              beleghis.SETFILTER(beleghis.Herstellercode,'<>%1&<>%2&<>%3','5710','5720','5730');
              IF beleghis.FINDFIRST THEN BEGIN
                RowNo := RowNo + 1;
                EnterCell(RowNo,1,Service."Lfd. Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,2,FORMAT(Service."Ablaufdatum Serviceleistung"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,3,FORMAT(Service.Art),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,4,Service."Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,5,FORMAT(Service."Belegzeilennr."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,6,FORMAT(Service.Belegdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,7,Service."Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,8,Service."Seriennr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,9,Service."Debitornr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,10,Service.Debitorname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,11,Service."SUP Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,12,Service."Hauptwartungsvertragsnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                IF (liefnr=beleghis."Belegnr.") AND (liefzeilennr=beleghis."Zeilennr.") THEN BEGIN
                END ELSE BEGIN
                  EnterCell(RowNo,13,FORMAT(beleghis.Menge),'',FALSE,FALSE,FALSE,'#,###,###',TempExcelBuffer."Cell Type"::Number);
                  beleghis_ek:= ROUND((beleghis."Einstandspreis MW"/((100+artikel."Handlingskosten %"+artikel."Zollsatz %")/100)),0.01);
                  EnterCell(RowNo,14,FORMAT(beleghis_ek),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  EnterCell(RowNo,15,FORMAT(beleghis."VK-Preis"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  LZ_tage:= (Service."Ablaufdatum Serviceleistung"- Service.Lizenzdatum-1);
                  LZ_tage_stich:=(Service."Ablaufdatum Serviceleistung"-Abgrenz_Datum-1);
                  LZ_tage_bewert:=0;
                  EnterCell(RowNo,16,FORMAT(Service.Lizenzdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                  EnterCell(RowNo,17,FORMAT(Service."Ablaufdatum Serviceleistung"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                  EnterCell(RowNo,18,FORMAT(LZ_tage),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
                  IF LZ_tage_stich>LZ_tage THEN BEGIN
                    LZ_tage_bewert := LZ_tage;
                  END ELSE BEGIN
                    LZ_tage_bewert := LZ_tage_stich;
                  END;
                  EnterCell(RowNo,19,FORMAT(LZ_tage_bewert),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
                  EnterCell(RowNo,20,FORMAT(ROUND((beleghis_ek / LZ_tage * LZ_tage_bewert * beleghis.Menge),0.01)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  EnterCell(RowNo,21,FORMAT(ROUND((beleghis."VK-Preis" / LZ_tage*LZ_tage_bewert*beleghis.Menge),0.01)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  Sum_ek:=(Sum_ek+ (ROUND(beleghis_ek / LZ_tage * LZ_tage_bewert * beleghis.Menge)));
                  Sum_vk:=(Sum_vk+ (ROUND(beleghis."VK-Preis"/ LZ_tage*LZ_tage_bewert*beleghis.Menge)));
                  liefnr:=beleghis."Belegnr.";
                  liefzeilennr:=beleghis."Zeilennr.";
                  EnterCell(RowNo,23,Service."Wartungsvertragsnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  EnterCell(RowNo,24,Service."BET-Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  EnterCell(RowNo,25,Service."ACO Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  EnterCell(RowNo,26,FORMAT(Lief."VK-Preis (MW)"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  EnterCell(RowNo,27,Lief."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                END;
              END;
      //      Ende Lieferscheine holen aus Beleghistorie
            END;
          END;
        UNTIL Service.NEXT=0;
      END;
      RowNo := 1;
      EnterCell(RowNo,1,'Abgrenz_Ek','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,FORMAT(Sum_ek),'',FALSE,FALSE,FALSE,'###,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,4,'Abgrenz_Vk','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,FORMAT(Sum_vk),'',FALSE,FALSE,FALSE,'###,###,##0.00',TempExcelBuffer."Cell Type"::Number);

      CloseExcel('Daten_Nav_CHAMPS-Abrenzungszeilen','Daten_Nav_CHAMPS-Abrenzungszeilen','F:\Tausch\Nav\Daten');
      MESSAGE(Text003);
    END;

    LOCAL PROCEDURE mtl_Provisionsauswertung@1000000007();
    BEGIN
      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,'Re_Nummer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Re_Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Artikelnr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Menge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'VK_W„hrung','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'W„hrung','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'VK_EUR','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Einstandspreis_EUR','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'Kunde','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Kunden_Nr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'PLZ','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'Verk„ufercode','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'Betreuer Innen','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,'Team','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'Gebiet','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,'Betrag','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,'Marge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,'Marge %','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,'Linie','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,20,'Herstellercode','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,21,'AU-Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,22,'Rahmen','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,23,'Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,24,'W„hrung','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,25,'Kurs','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,26,'EK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,27,'VK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,28,'Marge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,29,'Marge %','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,30,'Abweich 1%','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,31,'Kenner','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,32,'EK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,33,'EK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,34,'x','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,35,'Zollsatz %','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      VKRK.RESET;
      VKRK.SETFILTER(VKRK."Posting Date",'%1..%2',v_datum_von,v_datum_bis);
      IF VKRK.FINDFIRST THEN BEGIN
        REPEAT
          v_wert_eu := 0;
          v_w„_fact := 0;
          v_ek := 1;
          v_vk := 1;
          v_re_marge := 0;
          v_marge1 := 0;
          v_zoll :=0;
          VKRZ.RESET;
          VKRZ.SETFILTER(VKRZ."Document No.",'%1',VKRK."No.");
          VKRZ.SETFILTER(VKRZ.Quantity,'<>%1',0);
          VKRZ.SETFILTER(VKRZ.Type,'%1',VKRZ.Type::Item);
          VKRZ.SETFILTER(VKRZ."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF VKRZ.FINDFIRST THEN BEGIN
            REPEAT
              artikel.SETFILTER(artikel."No. 2",'%1',VKRZ."Artikelnr. 2");
              IF artikel.FINDFIRST THEN BEGIN
                v_zoll := artikel."Zollsatz %";
              END;
              RowNo := RowNo + 1;
              EnterCell(RowNo,1,VKRK."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,2,FORMAT(VKRK."Posting Date"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,3,VKRZ."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,4,FORMAT(VKRZ.Quantity),'',FALSE,FALSE,FALSE,'########',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,5,FORMAT(VKRZ."Unit Price"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,6,VKRK."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,7,FORMAT(VKRZ."VK-Preis (MW)"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
              IF VKRZ."Unit Price" <>0 THEN EnterCell(RowNo,8,FORMAT(VKRZ."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,9,VKRK."Bill-to Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,10,VKRK."Bill-to Customer No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,11,VKRK."Bill-to Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,12,VKRK."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,13,VKRK."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,14,VKRK.Teams,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,15,VKRK."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              IF  VKRK."Currency Factor" <> 0 THEN BEGIN
      //        IF  VKRK."Currency Factor" > 1 THEN BEGIN
                IF VKRZ."Unit Price" <>0 THEN EnterCell(RowNo,16,FORMAT(VKRZ."Unit Price"/VKRK."Currency Factor" * VKRZ.Quantity),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                IF VKRZ."Unit Price" <>0 THEN EnterCell(RowNo,17,FORMAT(((VKRZ."Unit Price"/VKRK."Currency Factor")-VKRZ."Unit Cost (LCY)")*VKRZ.Quantity),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                v_wert_eu :=((VKRZ."Unit Price")*(VKRZ.Quantity)/(VKRK."Currency Factor"));
      //        12.04.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                IF v_wert_eu <> 0 THEN BEGIN
                  v_re_marge := ((v_wert_eu -(VKRZ."Unit Cost (LCY)")*(VKRZ.Quantity))/v_wert_eu*100);
                  EnterCell(RowNo,18,FORMAT((v_wert_eu -(VKRZ."Unit Cost (LCY)")*(VKRZ.Quantity))/v_wert_eu*100),'',FALSE,FALSE,FALSE,'#,###,##0.00##',TempExcelBuffer."Cell Type"::Number);
                END ELSE BEGIN
                  v_re_marge := 0;
                  EnterCell(RowNo,18,FORMAT(0),'',FALSE,FALSE,FALSE,'#,###,##0.00##',TempExcelBuffer."Cell Type"::Number);
                END;
      //        Zusatz Ende
              END ELSE BEGIN
                IF VKRZ."Unit Price" <>0 THEN EnterCell(RowNo,16,FORMAT(VKRZ.Amount),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                IF VKRZ."Unit Price" <>0 THEN EnterCell(RowNo,17,FORMAT(VKRZ.Amount-(VKRZ."Unit Cost (LCY)"*VKRZ.Quantity)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);

      //      15.03.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
              IF VKRZ.Amount <> 0 THEN BEGIN
                IF VKRZ.Amount=0 THEN BEGIN
                END ELSE BEGIN
                  v_re_marge:= ((VKRZ.Amount-(VKRZ."Unit Cost (LCY)"*VKRZ.Quantity))/VKRZ.Amount*100);
                  EnterCell(RowNo,18,FORMAT((VKRZ.Amount -(VKRZ."Unit Cost (LCY)")*(VKRZ.Quantity))/VKRZ.Amount*100),'',FALSE,FALSE,FALSE,'#,###,##0.00##',TempExcelBuffer."Cell Type"::Number);
                END;
              END ELSE BEGIN
                v_re_marge := 0;
                EnterCell(RowNo,18,FORMAT(0),'',FALSE,FALSE,FALSE,'#,###,##0.00##',TempExcelBuffer."Cell Type"::Number);
              END;
      //      Zusatz Ende
            END;
            EnterCell(RowNo,19,VKRZ."Shortcut Dimension 1 Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,20,VKRZ."Manufacturer Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,21,VKRZ."Order No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,22,VKRZ."Blanket Order No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            IF VKRZ."Blanket Order No." ='' THEN BEGIN
      //      Auftrag benutzen
              vkk.SETFILTER(vkk."No.",'%1',VKRK."Order No.");
              IF vkk.FINDFIRST THEN BEGIN
                EnterCell(RowNo,23,FORMAT(vkk."Order Date"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,24,vkk."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                IF vkk."Currency Factor" = 0 THEN BEGIN
                  vkz.SETFILTER(vkz."Document No.",'%1',vkk."No.");
                  vkz.SETFILTER(vkz."Line No.",'%1',VKRZ."Order Line No.");
                  IF vkz.FINDFIRST THEN BEGIN
                    IF VKRZ."Unit Price" <>0 THEN EnterCell(RowNo,26,FORMAT(vkz."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    v_ek:=vkz."Unit Cost (LCY)";
                    EnterCell(RowNo,27,FORMAT(vkz."Unit Price"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    v_vk:=vkz."Unit Price";
                  END;
                  IF v_vk<>0 THEN EnterCell(RowNo,28,FORMAT(v_vk - v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      //          15.03.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                  IF v_vk <> 0 THEN BEGIN
                    EnterCell(RowNo,29,FORMAT((v_vk - v_ek)/v_vk*100),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    v_marge1:= ((v_vk - v_ek)/v_vk*100);
                  END ELSE BEGIN
                    EnterCell(RowNo,29,FORMAT(0),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    v_marge1 := 0;
                  END;
      //          Zusatz Ende
                  IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                    EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  END;
                  IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                    EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  END;
                  EnterCell(RowNo,31,'AU1','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                END ELSE BEGIN
                  W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Starting Date",'%1',vkk."Order Date");
                  W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Currency Code",'%1',vkk."Currency Code");
                  IF W„hrungWechKurs.FINDFIRST THEN BEGIN
                    EnterCell(RowNo,25,FORMAT(W„hrungWechKurs."Exchange Rate Amount"*100),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    v_w„_fact:=W„hrungWechKurs."Exchange Rate Amount";
                    vkz.SETFILTER(vkz."Document No.",'%1',vkk."No.");
                    vkz.SETFILTER(vkz."Line No.",'%1',VKRZ."Order Line No.");
                    IF vkz.FINDFIRST THEN BEGIN
                      v_vk:=vkz."Unit Price"/v_w„_fact;
                      W„hrungWechKurs.RESET;
                      W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Starting Date",'%1',vkk."Order Date");
                      W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Currency Code",'%1',vkz.Einkaufsw„hrungscode);
                      IF W„hrungWechKurs.FINDFIRST THEN BEGIN
                        v_w„_ek_kurs:=W„hrungWechKurs."Exchange Rate Amount";
                        v_ek:=(vkz."DC-Preis (EKW)"*((100+vkz."Handlingskosten %")/100)*((100+v_zoll)/100));
                        EnterCell(RowNo,32,FORMAT(v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                        IF v_w„_ek_kurs<>0 THEN BEGIN
                          v_ek:=((v_ek) / (v_w„_ek_kurs));
                        END;
                        EnterCell(RowNo,33,FORMAT(v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                      END;
                      IF VKRZ."Unit Price" <>0 THEN EnterCell(RowNo,26,FORMAT(v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                      EnterCell(RowNo,27,FORMAT(v_vk),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                      IF v_vk<>0 THEN EnterCell(RowNo,28,FORMAT(v_vk - v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      //              15.03.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                      IF v_vk <> 0 THEN BEGIN
                        EnterCell(RowNo,29,FORMAT((v_vk - v_ek)/v_vk*100),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                        v_marge1:= ((v_vk - v_ek)/v_vk*100);
                      END ELSE BEGIN
                        EnterCell(RowNo,29,FORMAT(0),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                        v_marge1 := 0;
                      END;
      //              Zusatz Ende
                      IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                        EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                      END;
                      IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                        EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                      END;
                      EnterCell(RowNo,31,'AU2','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    END;
                  END;
                END;
              END ELSE BEGIN
      //      archivierten Auftrag benutzen
              avkk.SETFILTER(avkk."No.",'%1',VKRK."Order No.");
              IF avkk.FINDLAST THEN BEGIN
                EnterCell(RowNo,23,FORMAT(avkk."Order Date"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,24,avkk."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                IF avkk."Currency Factor" = 0 THEN BEGIN
                  avkz.SETFILTER(avkz."Document No.",'%1',avkk."No.");
                  avkz.SETFILTER(avkz."Line No.",'%1',VKRZ."Order Line No.");
                  IF avkz.FINDLAST THEN BEGIN
                    IF avkz."Unit Price" <>0 THEN EnterCell(RowNo,26,FORMAT(avkz."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    v_ek:=avkz."Unit Cost (LCY)";
                    EnterCell(RowNo,27,FORMAT(avkz."Unit Price"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    v_vk:=avkz."Unit Price";
                  END;
                  IF v_vk<>0 THEN EnterCell(RowNo,28,FORMAT(v_vk - v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      //          15.03.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                  IF v_vk <> 0 THEN BEGIN
                    EnterCell(RowNo,29,FORMAT((v_vk - v_ek)/v_vk*100),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    v_marge1 := ((v_vk - v_ek)/v_vk*100);
                  END ELSE BEGIN
                    EnterCell(RowNo,29,FORMAT(0),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    v_marge1 := 0;
                  END;
      //          Zusatz Ende

                  IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                    EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  END;
                  IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                    EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  END;
                  EnterCell(RowNo,31,'Archiv1','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                END ELSE BEGIN
                  W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Starting Date",'%1',avkk."Order Date");
                  W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Currency Code",'%1',avkk."Currency Code");
                  IF W„hrungWechKurs.FINDFIRST THEN BEGIN
                    EnterCell(RowNo,25,FORMAT(W„hrungWechKurs."Exchange Rate Amount"*100),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    v_w„_fact:=W„hrungWechKurs."Exchange Rate Amount";
                    avkz.SETFILTER(avkz."Document No.",'%1',avkk."No.");
                    avkz.SETFILTER(avkz."Line No.",'%1',VKRZ."Order Line No.");
                    IF avkz.FINDFIRST THEN BEGIN
                      v_vk:=avkz."Unit Price"/v_w„_fact;
       //             EnterCell(RowNo,31,FORMAT(v_w„_fact),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                      W„hrungWechKurs.RESET;
                      W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Starting Date",'%1',avkk."Order Date");
                      W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Currency Code",'%1',avkz.Einkaufsw„hrungscode);
                      IF W„hrungWechKurs.FINDFIRST THEN BEGIN
                        v_w„_ek_kurs:=W„hrungWechKurs."Exchange Rate Amount";
                        v_ek:=(avkz."DC-Preis (EKW)"*((100+avkz."Handlingskosten %")/100)*((100+v_zoll)/100));
                        EnterCell(RowNo,32,FORMAT(v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                        IF v_w„_ek_kurs<>0 THEN BEGIN
                          v_ek:=((v_ek) / (v_w„_ek_kurs));
                        END;
                        EnterCell(RowNo,33,FORMAT(v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                      END;
                      IF avkz."Unit Price" <>0 THEN EnterCell(RowNo,26,FORMAT(v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                      EnterCell(RowNo,27,FORMAT(v_vk),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    END;
                  END;
                  IF v_vk<>0 THEN EnterCell(RowNo,28,FORMAT(v_vk - v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      //          15.03.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                  IF v_vk <> 0 THEN BEGIN
                    EnterCell(RowNo,29,FORMAT((v_vk - v_ek)/v_vk*100),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    v_marge1 := ((v_vk - v_ek)/v_vk*100);
                  END ELSE BEGIN
                    EnterCell(RowNo,29,FORMAT(0),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    v_marge1 := 0;
                  END;
      //          Zusatz Ende
                  IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                    EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  END;
                  IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                    EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  END;
                    EnterCell(RowNo,31,'Archiv2','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                END;
              END;
            END;
          END ELSE BEGIN
      //    Rahmenauftrag benutzen
            vkk.SETFILTER(vkk."No.",'%1',VKRZ."Blanket Order No.");
            IF vkk.FINDFIRST THEN BEGIN
              EnterCell(RowNo,23,FORMAT(vkk."Order Date"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,24,vkk."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              IF vkk."Currency Factor" = 0 THEN BEGIN
                vkz.SETFILTER(vkz."Document No.",'%1',vkk."No.");
                vkz.SETFILTER(vkz."Line No.",'%1',VKRZ."Blanket Order Line No.");
                IF vkz.FINDFIRST THEN BEGIN
                  IF vkz."Unit Price" <>0 THEN EnterCell(RowNo,26,FORMAT(vkz."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  v_ek:=vkz."Unit Cost (LCY)";
                  EnterCell(RowNo,27,FORMAT(vkz."Unit Price"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  v_vk:=vkz."Unit Price";
                END;
                IF v_vk<>0 THEN EnterCell(RowNo,28,FORMAT(v_vk - v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      //        12.04.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                IF v_vk <> 0 THEN BEGIN
                  EnterCell(RowNo,29,FORMAT((v_vk - v_ek)/v_vk*100),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  v_marge1:= ((v_vk - v_ek)/v_vk*100);
                END ELSE BEGIN
                  EnterCell(RowNo,29,FORMAT(0),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  v_marge1 := 0;
                END;
      //        Zusatz Ende
                IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                  EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                END;
                IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                  EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                END;
                EnterCell(RowNo,31,'Rahmen1','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END ELSE BEGIN
                W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Starting Date",'%1',vkk."Order Date");
                W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Currency Code",'%1',vkk."Currency Code");
                IF W„hrungWechKurs.FINDFIRST THEN BEGIN
                  EnterCell(RowNo,25,FORMAT(W„hrungWechKurs."Exchange Rate Amount"*100),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  v_w„_fact:=W„hrungWechKurs."Exchange Rate Amount";
                  vkz.SETFILTER(vkz."Document No.",'%1',vkk."No.");
                  vkz.SETFILTER(vkz."Line No.",'%1',VKRZ."Blanket Order Line No.");
                  IF vkz.FINDFIRST THEN BEGIN
                    v_vk:=vkz."Unit Price"/v_w„_fact;
                    W„hrungWechKurs.RESET;
                    W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Starting Date",'%1',vkk."Order Date");
                    W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Currency Code",'%1',vkz.Einkaufsw„hrungscode);
                    IF W„hrungWechKurs.FINDFIRST THEN BEGIN
                      v_w„_ek_kurs:=W„hrungWechKurs."Exchange Rate Amount";
                      v_ek:=(vkz."DC-Preis (EKW)"*((100+vkz."Handlingskosten %")/100)*((100+v_zoll)/100));
                      EnterCell(RowNo,32,FORMAT(v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                      IF v_w„_ek_kurs<>0 THEN BEGIN
                        v_ek:=((v_ek) / (v_w„_ek_kurs));
                      END;
                      EnterCell(RowNo,33,FORMAT(v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    END;
                    IF vkz."Unit Price" <>0 THEN EnterCell(RowNo,26,FORMAT(v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    EnterCell(RowNo,27,FORMAT(v_vk),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    IF v_vk<>0 THEN EnterCell(RowNo,28,FORMAT(v_vk - v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      //            12.04.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                    IF v_vk <> 0 THEN BEGIN
                      EnterCell(RowNo,29,FORMAT((v_vk - v_ek)/v_vk*100),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                      v_marge1 := ((v_vk - v_ek)/v_vk*100);
                    END ELSE BEGIN
                      EnterCell(RowNo,29,FORMAT(0),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                      v_marge1 := 0;
                    END;
      //            Zusatz Ende
                    IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                      EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    END;
                    IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                      EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    END;
                      EnterCell(RowNo,31,'Rahmen2','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  END;
                END;
              END;
            END;
      //    Archivierten Rahmen
            avkk.SETFILTER(avkk."No.",'%1',VKRZ."Blanket Order No.");
            IF avkk.FINDLAST THEN BEGIN
              EnterCell(RowNo,23,FORMAT(avkk."Order Date"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,24,avkk."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              IF avkk."Currency Factor" = 0 THEN BEGIN
                avkz.SETFILTER(avkz."Document No.",'%1',avkk."No.");
                avkz.SETFILTER(avkz."Line No.",'%1',VKRZ."Blanket Order Line No.");
                IF avkz.FINDLAST THEN BEGIN
                  IF avkz."Unit Price" <>0 THEN EnterCell(RowNo,26,FORMAT(avkz."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  v_ek:=avkz."Unit Cost (LCY)";
                  EnterCell(RowNo,27,FORMAT(avkz."Unit Price"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  v_vk:=avkz."Unit Price";
                END;
                IF v_vk<>0 THEN EnterCell(RowNo,28,FORMAT(v_vk - v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      //        12.04.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                IF v_vk <> 0 THEN BEGIN
                  EnterCell(RowNo,29,FORMAT((v_vk - v_ek)/v_vk*100),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  v_marge1:= ((v_vk - v_ek)/v_vk*100);
                END ELSE BEGIN
                  EnterCell(RowNo,29,FORMAT(0),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  v_marge1:= 0;
                END;
      //        Zusatz Ende
                IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                  EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                END;
                IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                  EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                END;
                EnterCell(RowNo,31,'Rahmen1','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END ELSE BEGIN
                W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Starting Date",'%1',avkk."Order Date");
                W„hrungWechKurs.SETFILTER(W„hrungWechKurs."Currency Code",'%1',avkk."Currency Code");
                IF W„hrungWechKurs.FINDFIRST THEN BEGIN
                  EnterCell(RowNo,25,FORMAT(W„hrungWechKurs."Exchange Rate Amount"*100),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  v_w„_fact:=W„hrungWechKurs."Exchange Rate Amount";
                  avkz.SETFILTER(avkz."Document No.",'%1',avkk."No.");
                  avkz.SETFILTER(avkz."Line No.",'%1',VKRZ."Blanket Order Line No.");
                  IF avkz.FINDFIRST THEN BEGIN
                    v_vk:=avkz."Unit Price"/v_w„_fact;
                    v_ek:=avkz."DC-Preis (EKW)"*((100+vkz."Handlingskosten %")/100)*((100+v_zoll)/100);
                    v_ek:=v_ek/v_w„_fact;
                    IF vkz.Einkaufsw„hrungscode='JPY' THEN BEGIN
                      v_ek:=v_ek/100;
                    END;
                    IF avkz."Unit Price" <>0 THEN EnterCell(RowNo,26,FORMAT(v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    EnterCell(RowNo,27,FORMAT(v_vk),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                    IF v_vk<>0 THEN EnterCell(RowNo,28,FORMAT(v_vk - v_ek),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      //            12.04.2011-ST Zusatzabfrage, da Nulldivision m”glich ist und der Report abbricht
                    IF v_vk <> 0 THEN BEGIN
                      EnterCell(RowNo,29,FORMAT((v_vk - v_ek)/v_vk*100),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                      v_marge1:= ((v_vk - v_ek)/v_vk*100);
                    END ELSE BEGIN
                      EnterCell(RowNo,29,FORMAT(0),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                      v_marge1:= 0;
                    END;
      //            Zusatz Ende
                    IF (v_marge1 - v_re_marge > 1) THEN BEGIN
                      EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    END;
                    IF (v_marge1 - v_re_marge < (-1)) THEN BEGIN
                      EnterCell(RowNo,30,'X','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    END;
                    EnterCell(RowNo,31,'Rahmen2','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  END;
                END;
              END;
            END;
      //    ENDE Archivierten Rahmen
            END;
            EnterCell(RowNo,35,FORMAT(v_zoll),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
            UNTIL VKRZ.NEXT=0;
          END;
        UNTIL VKRK.NEXT=0;
      END;

      //**************************************************************   2. Teil  Kontozeilen 4406 / 4407 etc ****************

      VKRK.RESET;
      VKRK.SETFILTER(VKRK."Posting Date",'%1..%2',v_datum_von,v_datum_bis);
      IF VKRK.FINDFIRST THEN BEGIN
        REPEAT
          v_wert_eu:=0;
          v_w„_fact:=0;
          v_ek:=1;
          v_vk:=1;
          v_re_marge:=0;
          v_marge1:=0;
          v_zoll:=0;
          VKRZ.RESET;
          VKRZ.SETFILTER(VKRZ."Document No.",'%1',VKRK."No.");
          VKRZ.SETFILTER(VKRZ.Quantity,'<>%1',0);
          VKRZ.SETFILTER(VKRZ.Type,'%1',VKRZ.Type::"G/L Account");
          VKRZ.SETFILTER(VKRZ."No.",'%1|%2|%3|%4|%5|%6|%7','4407','4408','4412','4118','4338','4317','4690');
          IF VKRZ.FINDFIRST THEN BEGIN
            REPEAT
              RowNo := RowNo + 1;
              EnterCell(RowNo,1,VKRK."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,2,FORMAT(VKRK."Posting Date"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,3,VKRZ."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,4,FORMAT(VKRZ.Quantity),'',FALSE,FALSE,FALSE,'########',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,5,FORMAT(VKRZ."Unit Price"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,6,VKRK."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,7,FORMAT(VKRZ."VK-Preis (MW)"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
              IF VKRZ."Unit Price"<>0 THEN EnterCell(RowNo,8,FORMAT(VKRZ."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,9,VKRK."Bill-to Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,10,VKRK."Bill-to Customer No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,11,VKRK."Bill-to Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,12,VKRK."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,13,VKRK."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,14,VKRK.Teams,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,15,VKRK."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              IF  VKRK."Currency Factor"<>0 THEN BEGIN
                EnterCell(RowNo,16,FORMAT(VKRZ."Unit Price"/VKRK."Currency Factor" * VKRZ.Quantity),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                IF VKRZ."Unit Price"<>0 THEN EnterCell(RowNo,17,FORMAT(((VKRZ."Unit Price"/VKRK."Currency Factor")-VKRZ."Unit Cost (LCY)")*VKRZ.Quantity),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
              END ELSE BEGIN
                EnterCell(RowNo,16,FORMAT(VKRZ.Amount),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                IF VKRZ."Unit Price"<>0 THEN EnterCell(RowNo,17,FORMAT(VKRZ.Amount-(VKRZ."Unit Cost (LCY)"*VKRZ.Quantity)),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
              END;
              IF VKRK.Amount<>0 THEN BEGIN
                EnterCell(RowNo,18,FORMAT((VKRZ.Amount-(VKRZ."Unit Cost (LCY)")*(VKRZ.Quantity))/VKRK.Amount*100),'',FALSE,FALSE,FALSE,'#,###,##0.00##',TempExcelBuffer."Cell Type"::Number);
              END;
              v_vkz1.RESET;
              v_vkz1.SETFILTER(v_vkz1."Document No.",'%1',VKRZ."Document No.");
              v_vkz1.SETFILTER(v_vkz1.Quantity,'>%1',0);
              v_vkz1.SETFILTER(v_vkz1.Type,'%1',v_vkz1.Type::Item);
              IF v_vkz1.FINDFIRST THEN BEGIN
                EnterCell(RowNo,20,v_vkz1."Manufacturer Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;
            UNTIL VKRZ.NEXT=0;
          END;
        UNTIL VKRK.NEXT=0;
      END;

      //*******************************************************  3. Teil   Gutschriften  **************************

      VKGK.RESET;
      VKGK.SETFILTER(VKGK."Posting Date",'%1..%2',v_datum_von,v_datum_bis);
      IF VKGK.FINDFIRST THEN BEGIN
        REPEAT
          v_wert_eu:=0;
          v_w„_fact:=0;
          v_ek:=1;
          v_vk:=1;
          v_re_marge:=0;
          v_marge1:=0;
          v_zoll:=0;
          VKGZ.RESET;
          VKGZ.SETFILTER(VKGZ."Document No.",'%1',VKGK."No.");
          VKGZ.SETFILTER(VKGZ.Quantity,'<>%1',0);
          VKGZ.SETFILTER(VKGZ.Type,'%1',VKRZ.Type::Item);
          VKGZ.SETFILTER(VKGZ."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF VKGZ.FINDFIRST THEN BEGIN
            REPEAT
              v_wert_eu:=0;
              RowNo := RowNo + 1;
              EnterCell(RowNo,1,VKGK."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,2,FORMAT(VKGK."Posting Date"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,3,VKGZ."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,4,FORMAT(VKGZ.Quantity),'',FALSE,FALSE,FALSE,'########',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,5,FORMAT(VKGZ."Unit Price"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,6,VKGK."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,7,FORMAT(VKGZ."VK-Preis (MW)"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,8,FORMAT(VKGZ."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,9,VKGK."Bill-to Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,10,VKGK."Bill-to Customer No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,11,VKGK."Bill-to Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,12,VKGK."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,13,VKGK."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,14,VKGK.Teams,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,15,VKGK."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              IF  VKGK."Currency Factor">1 THEN BEGIN
                IF VKGZ."Unit Price"<>0 THEN BEGIN
                  EnterCell(RowNo,16,FORMAT((VKGZ."Unit Price"/VKGK."Currency Factor" * VKGZ.Quantity)*(-1)),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  IF VKGZ."Unit Price"<>0 THEN EnterCell(RowNo,17,FORMAT((((VKGZ."Unit Price"/VKGK."Currency Factor")-VKGZ."Unit Cost (LCY)")*VKGZ.Quantity)*(-1)),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  v_wert_eu:=((VKGZ."Unit Price"/VKGK."Currency Factor"*VKGZ.Quantity)*(-1));
                  IF VKGZ."Unit Price"<>0 THEN EnterCell(RowNo,18,FORMAT((v_wert_eu-(VKGZ."Unit Cost (LCY)")*(VKGZ.Quantity))/v_wert_eu*100),'',FALSE,FALSE,FALSE,'#,###,##0.00##',TempExcelBuffer."Cell Type"::Number);
                END ELSE BEGIN
                END;
              END ELSE BEGIN
                IF VKGZ."Unit Price"<>0 THEN BEGIN
                  EnterCell(RowNo,16,FORMAT(VKGZ.Amount*(-1)),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  IF VKGZ."Unit Price"<>0 THEN EnterCell(RowNo,17,FORMAT((VKGZ.Amount-(VKGZ."Unit Cost (LCY)"*VKGZ.Quantity))*(-1)),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  IF VKGZ."Unit Price"<>0 THEN EnterCell(RowNo,18, FORMAT((VKGZ.Amount-(VKGZ."Unit Cost (LCY)")*(VKGZ.Quantity))/VKGZ.Amount*100),'',FALSE,FALSE,FALSE,'#,###,##0.00##',TempExcelBuffer."Cell Type"::Number);
                END ELSE BEGIN
                END;
              END;
              EnterCell(RowNo,19,VKGZ."Shortcut Dimension 1 Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,20,VKGZ."Manufacturer Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,21,FORMAT(VKGK."Applies-to Doc. Type"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,22,VKGK."Applies-to Doc. No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            UNTIL VKGZ.NEXT=0;
          END;
        UNTIL VKGK.NEXT=0;
      END;

      CloseExcel('Daten_Nav_Prov','Daten_Nav_Prov','F:\Tausch\Nav\Daten');
      MESSAGE(Text004);
    END;

    LOCAL PROCEDURE Daten_fr_Jahresabschluss@1000000008();
    BEGIN
      CreateExcel;
      EnterCell(1,1,'Ab Zeile  10 beginnen die Bilanzkonten','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(2,1,'Ab Zeile 300 beginnen die GuV-Konten','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(3,1,'Ab Zeile 800 beginnen sonstige bilanzrelevante Daten','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(4,1,FORMAT('Zeitraum von ' +FORMAT(v_datum_von) + ' bis '+FORMAT( v_datum_bis)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      EnterCell(8,1,'Nr.','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(8,2,'Name','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(8,3,'Saldo','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(8,4,'Kontogruppe','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      RowNo := 10;
      sachkonten.RESET;
      sachkonten.CALCFIELDS(Balance);
      sachkonten.SETFILTER(sachkonten."Income/Balance",'%1',sachkonten."Income/Balance"::"Balance Sheet");
      sachkonten.SETFILTER(sachkonten."No.",'<%1','8000');
      IF sachkonten.FINDFIRST THEN BEGIN
        REPEAT
          EnterCell(RowNo,1,sachkonten."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2,sachkonten.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,FORMAT(sachkonten.Kontengruppe),'',FALSE,FALSE,FALSE,'########',TempExcelBuffer."Cell Type"::Number);
          var_balance_gesamt_konto := 0;
          sachposten.RESET;
          sachposten.SETFILTER(sachposten."G/L Account No.",'%1',sachkonten."No.");
          sachposten.SETFILTER(sachposten."Posting Date",'<=%1',v_datum_bis);
          IF sachposten.FINDFIRST THEN BEGIN
            REPEAT
              var_balance_gesamt_konto := var_balance_gesamt_konto + sachposten.Amount;
            UNTIL sachposten.NEXT=0;
          END;
          IF var_balance_gesamt_konto<>0 THEN BEGIN
            EnterCell(RowNo,3,FORMAT(var_balance_gesamt_konto),'',FALSE,FALSE,FALSE,'###,###,##0.00',TempExcelBuffer."Cell Type"::Number);
          END ELSE BEGIN
            EnterCell(RowNo,3,FORMAT(0),'',FALSE,FALSE,FALSE,'##0.00',TempExcelBuffer."Cell Type"::Number);
          END;
          RowNo := RowNo + 1;
        UNTIL sachkonten.NEXT=0;
      END;

      RowNo := 300;                                                    // <- Export nach Excel ab Zeile 300
      sachkonten.RESET;
      sachkonten.SETFILTER(sachkonten."No.",'%1..%2','4000','7999');
      IF sachkonten.FINDFIRST THEN BEGIN
        REPEAT
          EnterCell(RowNo,1,sachkonten."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2,sachkonten.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,FORMAT(sachkonten.Kontengruppe),'',FALSE,FALSE,FALSE,'########',TempExcelBuffer."Cell Type"::Number);
          var_balance_gesamt_konto := 0;
          sachposten.RESET;
          sachposten.SETFILTER(sachposten."G/L Account No.",'%1',sachkonten."No.");
          sachposten.SETFILTER(sachposten."Posting Date",'%1..%2',v_datum_von,v_datum_bis);
          IF sachposten.FINDFIRST THEN BEGIN
            REPEAT
              var_balance_gesamt_konto := var_balance_gesamt_konto + sachposten.Amount;
            UNTIL sachposten.NEXT=0;
          END;
          IF var_balance_gesamt_konto<>0 THEN BEGIN
            EnterCell(RowNo,3,FORMAT(var_balance_gesamt_konto),'',FALSE,FALSE,FALSE,'###,###,##0.00',TempExcelBuffer."Cell Type"::Number);
          END ELSE BEGIN
            EnterCell(RowNo,3,FORMAT(0),'',FALSE,FALSE,FALSE,'##0.00',TempExcelBuffer."Cell Type"::Number);
          END;
          RowNo := RowNo + 1;
        UNTIL sachkonten.NEXT=0;
      END;

      RowNo := 800;
      EnterCell(RowNo,1,'kreditorische Debitoren:','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
      deb.RESET;
      deb.SETFILTER(deb."No.",'<>%1','703630');
      IF deb.FINDFIRST THEN BEGIN
        REPEAT
          var_balance_gesamt_konto := 0;
          var_balance_total_summe := 0;
          deb_posten.RESET;
          deb_posten.SETCURRENTKEY("Customer No.","Posting Date","Currency Code");
          deb_posten.SETFILTER(deb_posten."Customer No.",'%1',deb."No.");
          deb_posten.SETFILTER(deb_posten."Posting Date",'<=%1',v_datum_bis);
          IF deb_posten.FINDFIRST THEN BEGIN
            REPEAT
              deb_posten.CALCFIELDS("Amount (LCY)",Amount);
              var_balance_gesamt_konto := var_balance_gesamt_konto + deb_posten."Amount (LCY)";
              IF deb_posten."Currency Code"<>'' THEN BEGIN
                var_balance_total_summe := var_balance_total_summe + deb_posten.Amount;
              END;
            UNTIL deb_posten.NEXT=0;
          END;
          IF var_balance_gesamt_konto <(-1) THEN BEGIN
            EnterCell(RowNo,1,deb."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,2,deb.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,FORMAT(var_balance_gesamt_konto),'',FALSE,FALSE,FALSE,'###,###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,4,deb_posten."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,FORMAT(var_balance_total_summe),'',FALSE,FALSE,FALSE,'###,###,##0.00',TempExcelBuffer."Cell Type"::Number);
            RowNo := RowNo + 1;
          END;
        UNTIL deb.NEXT=0;
      END;
      RowNo := RowNo + 1;
      RowNo := RowNo + 1;
      EnterCell(RowNo,1,'debitorische Kreditoren:','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
      kred.RESET;
      kred.SETFILTER(kred."No.",'<>%1','880033');
      IF kred.FINDFIRST THEN BEGIN
        REPEAT
          var_balance_gesamt_konto := 0;
          var_balance_total_summe := 0;
          kred_posten.RESET;
          kred_posten.SETCURRENTKEY("Vendor No.","Posting Date","Currency Code");
          kred_posten.SETFILTER(kred_posten."Vendor No.",'%1',kred."No.");
          kred_posten.SETFILTER(kred_posten."Posting Date",'<=%1',v_datum_bis);
          IF kred_posten.FINDFIRST THEN BEGIN
            REPEAT
              kred_posten.CALCFIELDS("Amount (LCY)",Amount);
              var_balance_gesamt_konto := var_balance_gesamt_konto + kred_posten."Amount (LCY)";
              IF kred_posten."Currency Code"<>'' THEN BEGIN
                var_balance_total_summe := var_balance_total_summe + kred_posten.Amount;
              END;
            UNTIL kred_posten.NEXT=0;
          END;
          IF var_balance_gesamt_konto >1 THEN BEGIN
            EnterCell(RowNo,1,kred."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,2,kred.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,FORMAT(var_balance_gesamt_konto),'',FALSE,FALSE,FALSE,'###,###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,4,kred_posten."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,FORMAT(var_balance_total_summe),'',FALSE,FALSE,FALSE,'###,###,##0.00',TempExcelBuffer."Cell Type"::Number);
            RowNo := RowNo + 1;
          END;
        UNTIL kred.NEXT=0;
      END;
      CloseExcel('Daten_Nav_Abschluá','Daten_Nav_Abschluá','F:\Tausch\Nav\Daten');
      MESSAGE(Text003);
    END;

    LOCAL PROCEDURE Daten_Nav_Hersteller@1000000005();
    BEGIN
      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,'Hersteller Code','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Hersteller Name','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Hersteller Kurzbezeichnung','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Gesch„ftsbereich','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
      Herstell.RESET;
      Herstell.SETFILTER(Herstell.Code,'%1..%2','00','9999');
      Herstell.SETFILTER(Herstell.Name,'<>%1','');
      IF Herstell.FIND('-') THEN BEGIN
        REPEAT
          EnterCell(RowNo,1,Herstell.Code,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2,Herstell.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,Herstell.Herstellerkurzname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,FORMAT(Herstell.Gesch„ftsbereich),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo + 1;
        UNTIL Herstell.NEXT=0;
      END;
      CloseExcel('Daten_Nav_Hersteller','Daten_Nav_Hersteller','F:\Tausch\Nav\Daten');
      MESSAGE(Text003);
    END;

    LOCAL PROCEDURE Wartungsvertragsende_2HJ_2020@1000000009();
    BEGIN
      //IF Abgrenz_Datum = 0D THEN ERROR('Es wurde kein Datum eingegeben. Report abgebrochen!');
      //Variablenbelegung
      liefnr:='LS00';
      liefzeilennr:=10;
      CreateExcel;
      RowNo := 3;
      EnterCell(RowNo,1,'Abgrenzung der stichtagsbergreifenden Champsvereinbarungen zum  ','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,FORMAT(Abgrenz_Datum),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      RowNo := 4;
      EnterCell(RowNo,1,'Lfd.Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Ablauf-Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Art','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'ZeilenNr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Belegdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Artikelnr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Seriennr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'Debitorennr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Debitorname','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'ChampsNr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'WartVertragNr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'Menge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,'Einstandspreis','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'VK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,'Lizenzdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,'Ablaufdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,'LZ in Tagen','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,'Abgr in Tagen','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,20,'Abgr EK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,21,'Abgr VK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,23,'WartVertragNr2','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,24,'BET-Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,25,'ACO-Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,26,'Betrag °','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,27,'W„hrung','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      Service.RESET;
      Service.SETCURRENTKEY("Wartungsvertragsnr.","Nr.","Belegzeilennr.");
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      Service.SETFILTER(Service."Ablaufdatum Serviceleistung",'%1..%2',010720D,311220D);
      //Service.SETFILTER(Service.Belegdatum,'<=%1',Abgrenz_Datum);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);
      //Eingrezungen auf bestimmte Artikel
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
        REPEAT
          artikel.RESET;
          artikel.SETFILTER(artikel."No.",'%1',Service."SUP Artikelnr.");
          artikel.SETFILTER(artikel."Manufacturer Code",'<>%1&<>%2&<>%3','5710','5720','5730');
          //   artikel.SETFILTER(artikel.Artikelgruppe,'<>%1','CHAMPS_FEE');
          IF artikel.FINDFIRST THEN BEGIN
            LZ_rest:=0;
            Lief.RESET;
            Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
            Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
            Lief.SETFILTER(Lief."Manufacturer Code",'<>%1&<>%2&<>%3','5710','5720','5730');
            IF Lief.FINDFIRST THEN BEGIN
              RowNo := RowNo + 1;
              EnterCell(RowNo,1,Service."Lfd. Nr.",'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,2,FORMAT(Service."Ablaufdatum Serviceleistung"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,3,FORMAT(Service.Art),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,4,Service."Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,5,FORMAT(Service."Belegzeilennr."),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,6,FORMAT(Service.Belegdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,7,Service."Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,8,Service."Seriennr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,9,Service."Debitornr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,10,Service.Debitorname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,11,Service."SUP Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,12,Service."Hauptwartungsvertragsnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
              END ELSE BEGIN
                EnterCell(RowNo,13,FORMAT(Lief.Quantity),'',FALSE,FALSE,FALSE,'#,###,###',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,14,FORMAT(Lief."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,15,FORMAT(Lief."Unit Price"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                LZ_tage:= (Service."Ablaufdatum Serviceleistung"- Service.Lizenzdatum-1);
                LZ_tage_stich:=(Service."Ablaufdatum Serviceleistung"-Abgrenz_Datum-1);
                LZ_tage_bewert:=0;
                EnterCell(RowNo,16,FORMAT(Service.Lizenzdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,17,FORMAT(Service."Ablaufdatum Serviceleistung"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,18,FORMAT(LZ_tage),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
                IF LZ_tage_stich>LZ_tage THEN BEGIN
                  LZ_tage_bewert := LZ_tage;
                END ELSE BEGIN
                  LZ_tage_bewert := LZ_tage_stich;
                END;
                EnterCell(RowNo,19,FORMAT(LZ_tage_bewert),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,20,FORMAT(ROUND((Lief."Unit Cost (LCY)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity),0.01)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,21,FORMAT(ROUND((Lief."VK-Preis (MW)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity),0.01)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                Sum_ek:=(Sum_ek+ (ROUND(Lief."Unit Cost (LCY)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
                Sum_vk:=(Sum_vk+ (ROUND(Lief."VK-Preis (MW)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
                liefnr:=Lief."Document No.";
                liefzeilennr:=Lief."Line No.";
                EnterCell(RowNo,23,Service."Wartungsvertragsnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,24,Service."BET-Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,25,Service."ACO Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,26,FORMAT(Lief."VK-Preis (MW)"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,27,Lief."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;
            END ELSE BEGIN
      //    Anfang Lieferscheine aus Beleghistorie
              LZ_rest:=0;
              beleghis_ek:=0;
              beleghis.RESET;
              beleghis.SETFILTER(beleghis."Belegnr.",'%1',Service."Nr.");
              beleghis.SETFILTER(beleghis."Zeilennr.",'%1',Service."Belegzeilennr.");
              beleghis.SETFILTER(beleghis.Herstellercode,'<>%1&<>%2&<>%3','5710','5720','5730');
              IF beleghis.FINDFIRST THEN BEGIN
                RowNo := RowNo + 1;
                EnterCell(RowNo,1,Service."Lfd. Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,2,FORMAT(Service."Ablaufdatum Serviceleistung"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,3,FORMAT(Service.Art),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,4,Service."Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,5,FORMAT(Service."Belegzeilennr."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,6,FORMAT(Service.Belegdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,7,Service."Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,8,Service."Seriennr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,9,Service."Debitornr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,10,Service.Debitorname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,11,Service."SUP Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,12,Service."Hauptwartungsvertragsnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                IF (liefnr=beleghis."Belegnr.") AND (liefzeilennr=beleghis."Zeilennr.") THEN BEGIN
                END ELSE BEGIN
                  EnterCell(RowNo,13,FORMAT(beleghis.Menge),'',FALSE,FALSE,FALSE,'#,###,###',TempExcelBuffer."Cell Type"::Number);
                  beleghis_ek:= ROUND((beleghis."Einstandspreis MW"/((100+artikel."Handlingskosten %"+artikel."Zollsatz %")/100)),0.01);
                  EnterCell(RowNo,14,FORMAT(beleghis_ek),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  EnterCell(RowNo,15,FORMAT(beleghis."VK-Preis"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  LZ_tage:= (Service."Ablaufdatum Serviceleistung"- Service.Lizenzdatum-1);
                  LZ_tage_stich:=(Service."Ablaufdatum Serviceleistung"-Abgrenz_Datum-1);
                  LZ_tage_bewert:=0;
                  EnterCell(RowNo,16,FORMAT(Service.Lizenzdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                  EnterCell(RowNo,17,FORMAT(Service."Ablaufdatum Serviceleistung"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                  EnterCell(RowNo,18,FORMAT(LZ_tage),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
                  IF LZ_tage_stich>LZ_tage THEN BEGIN
                    LZ_tage_bewert := LZ_tage;
                  END ELSE BEGIN
                    LZ_tage_bewert := LZ_tage_stich;
                  END;
                  EnterCell(RowNo,19,FORMAT(LZ_tage_bewert),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
                  EnterCell(RowNo,20,FORMAT(ROUND((beleghis_ek / LZ_tage * LZ_tage_bewert * beleghis.Menge),0.01)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  EnterCell(RowNo,21,FORMAT(ROUND((beleghis."VK-Preis" / LZ_tage*LZ_tage_bewert*beleghis.Menge),0.01)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  Sum_ek:=(Sum_ek+ (ROUND(beleghis_ek / LZ_tage * LZ_tage_bewert * beleghis.Menge)));
                  Sum_vk:=(Sum_vk+ (ROUND(beleghis."VK-Preis"/ LZ_tage*LZ_tage_bewert*beleghis.Menge)));
                  liefnr:=beleghis."Belegnr.";
                  liefzeilennr:=beleghis."Zeilennr.";
                  EnterCell(RowNo,23,Service."Wartungsvertragsnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  EnterCell(RowNo,24,Service."BET-Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  EnterCell(RowNo,25,Service."ACO Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  EnterCell(RowNo,26,FORMAT(Lief."VK-Preis (MW)"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  EnterCell(RowNo,27,Lief."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                END;
              END;
      //      Ende Lieferscheine holen aus Beleghistorie
            END;
          END;
        UNTIL Service.NEXT=0;
      END;
      RowNo := 1;
      EnterCell(RowNo,1,'Abgrenz_Ek','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,FORMAT(Sum_ek),'',FALSE,FALSE,FALSE,'###,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,4,'Abgrenz_Vk','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,FORMAT(Sum_vk),'',FALSE,FALSE,FALSE,'###,###,##0.00',TempExcelBuffer."Cell Type"::Number);

      CloseExcel('Wartungvertragsende 2HJ 2020','Wartungvertragsende 2HJ 2020','F:\Daten NEU\USER\Uwe\Navision_2016');
      MESSAGE(Text003);
    END;

    LOCAL PROCEDURE Wartungsvertragsende_2HJ_2021@1000000010();
    BEGIN
      //IF Abgrenz_Datum = 0D THEN ERROR('Es wurde kein Datum eingegeben. Report abgebrochen!');
      //Variablenbelegung
      liefnr:='LS00';
      liefzeilennr:=10;
      CreateExcel;
      RowNo := 3;
      EnterCell(RowNo,1,'Abgrenzung der stichtagsbergreifenden Champsvereinbarungen zum  ','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,FORMAT(Abgrenz_Datum),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      RowNo := 4;
      EnterCell(RowNo,1,'Lfd.Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Ablauf-Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Art','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'ZeilenNr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Belegdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Artikelnr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Seriennr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'Debitorennr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Debitorname','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'ChampsNr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'WartVertragNr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'Menge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,'Einstandspreis','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'VK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,'Lizenzdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,'Ablaufdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,'LZ in Tagen','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,'Abgr in Tagen','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,20,'Abgr EK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,21,'Abgr VK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,23,'WartVertragNr2','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,24,'BET-Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,25,'ACO-Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,26,'Betrag °','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,27,'W„hrung','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      Service.RESET;
      Service.SETCURRENTKEY("Wartungsvertragsnr.","Nr.","Belegzeilennr.");
      Service.SETFILTER(Service.Art,'%1',Service.Art::Service);
      Service.SETFILTER(Service."Ablaufdatum Serviceleistung",'%1..%2',010721D,311221D);
      //Service.SETFILTER(Service.Belegdatum,'<=%1',Abgrenz_Datum);
      Service.SETFILTER(Service.Inaktiv,'%1',FALSE);
      //Eingrezungen auf bestimmte Artikel
      Service.SETFILTER(Service."SUP Artikelnr.",'<>%1&<>%2','RE_INSTATEMENT_FEE','CHAMPS-RE_INSTATE#01');
      IF Service.FINDFIRST THEN BEGIN
        REPEAT
          artikel.RESET;
          artikel.SETFILTER(artikel."No.",'%1',Service."SUP Artikelnr.");
          artikel.SETFILTER(artikel."Manufacturer Code",'<>%1&<>%2&<>%3','5710','5720','5730');
          //   artikel.SETFILTER(artikel.Artikelgruppe,'<>%1','CHAMPS_FEE');
          IF artikel.FINDFIRST THEN BEGIN
            LZ_rest:=0;
            Lief.RESET;
            Lief.SETFILTER(Lief."Document No.",'%1',Service."Nr.");
            Lief.SETFILTER(Lief."Line No.",'%1',Service."Belegzeilennr.");
            Lief.SETFILTER(Lief."Manufacturer Code",'<>%1&<>%2&<>%3','5710','5720','5730');
            IF Lief.FINDFIRST THEN BEGIN
              RowNo := RowNo + 1;
              EnterCell(RowNo,1,Service."Lfd. Nr.",'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,2,FORMAT(Service."Ablaufdatum Serviceleistung"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,3,FORMAT(Service.Art),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,4,Service."Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,5,FORMAT(Service."Belegzeilennr."),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,6,FORMAT(Service.Belegdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,7,Service."Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,8,Service."Seriennr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,9,Service."Debitornr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,10,Service.Debitorname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,11,Service."SUP Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,12,Service."Hauptwartungsvertragsnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              IF (liefnr=Lief."Document No.") AND (liefzeilennr=Lief."Line No.") THEN BEGIN
              END ELSE BEGIN
                EnterCell(RowNo,13,FORMAT(Lief.Quantity),'',FALSE,FALSE,FALSE,'#,###,###',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,14,FORMAT(Lief."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,15,FORMAT(Lief."Unit Price"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                LZ_tage:= (Service."Ablaufdatum Serviceleistung"- Service.Lizenzdatum-1);
                LZ_tage_stich:=(Service."Ablaufdatum Serviceleistung"-Abgrenz_Datum-1);
                LZ_tage_bewert:=0;
                EnterCell(RowNo,16,FORMAT(Service.Lizenzdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,17,FORMAT(Service."Ablaufdatum Serviceleistung"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,18,FORMAT(LZ_tage),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
                IF LZ_tage_stich>LZ_tage THEN BEGIN
                  LZ_tage_bewert := LZ_tage;
                END ELSE BEGIN
                  LZ_tage_bewert := LZ_tage_stich;
                END;
                EnterCell(RowNo,19,FORMAT(LZ_tage_bewert),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,20,FORMAT(ROUND((Lief."Unit Cost (LCY)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity),0.01)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,21,FORMAT(ROUND((Lief."VK-Preis (MW)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity),0.01)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                Sum_ek:=(Sum_ek+ (ROUND(Lief."Unit Cost (LCY)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
                Sum_vk:=(Sum_vk+ (ROUND(Lief."VK-Preis (MW)"/ LZ_tage*LZ_tage_bewert*Lief.Quantity)));
                liefnr:=Lief."Document No.";
                liefzeilennr:=Lief."Line No.";
                EnterCell(RowNo,23,Service."Wartungsvertragsnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,24,Service."BET-Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,25,Service."ACO Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,26,FORMAT(Lief."VK-Preis (MW)"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,27,Lief."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;
            END ELSE BEGIN
      //    Anfang Lieferscheine aus Beleghistorie
              LZ_rest:=0;
              beleghis_ek:=0;
              beleghis.RESET;
              beleghis.SETFILTER(beleghis."Belegnr.",'%1',Service."Nr.");
              beleghis.SETFILTER(beleghis."Zeilennr.",'%1',Service."Belegzeilennr.");
              beleghis.SETFILTER(beleghis.Herstellercode,'<>%1&<>%2&<>%3','5710','5720','5730');
              IF beleghis.FINDFIRST THEN BEGIN
                RowNo := RowNo + 1;
                EnterCell(RowNo,1,Service."Lfd. Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,2,FORMAT(Service."Ablaufdatum Serviceleistung"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,3,FORMAT(Service.Art),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,4,Service."Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,5,FORMAT(Service."Belegzeilennr."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,6,FORMAT(Service.Belegdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,7,Service."Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,8,Service."Seriennr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,9,Service."Debitornr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,10,Service.Debitorname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,11,Service."SUP Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,12,Service."Hauptwartungsvertragsnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                IF (liefnr=beleghis."Belegnr.") AND (liefzeilennr=beleghis."Zeilennr.") THEN BEGIN
                END ELSE BEGIN
                  EnterCell(RowNo,13,FORMAT(beleghis.Menge),'',FALSE,FALSE,FALSE,'#,###,###',TempExcelBuffer."Cell Type"::Number);
                  beleghis_ek:= ROUND((beleghis."Einstandspreis MW"/((100+artikel."Handlingskosten %"+artikel."Zollsatz %")/100)),0.01);
                  EnterCell(RowNo,14,FORMAT(beleghis_ek),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  EnterCell(RowNo,15,FORMAT(beleghis."VK-Preis"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  LZ_tage:= (Service."Ablaufdatum Serviceleistung"- Service.Lizenzdatum-1);
                  LZ_tage_stich:=(Service."Ablaufdatum Serviceleistung"-Abgrenz_Datum-1);
                  LZ_tage_bewert:=0;
                  EnterCell(RowNo,16,FORMAT(Service.Lizenzdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                  EnterCell(RowNo,17,FORMAT(Service."Ablaufdatum Serviceleistung"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                  EnterCell(RowNo,18,FORMAT(LZ_tage),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
                  IF LZ_tage_stich>LZ_tage THEN BEGIN
                    LZ_tage_bewert := LZ_tage;
                  END ELSE BEGIN
                    LZ_tage_bewert := LZ_tage_stich;
                  END;
                  EnterCell(RowNo,19,FORMAT(LZ_tage_bewert),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
                  EnterCell(RowNo,20,FORMAT(ROUND((beleghis_ek / LZ_tage * LZ_tage_bewert * beleghis.Menge),0.01)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  EnterCell(RowNo,21,FORMAT(ROUND((beleghis."VK-Preis" / LZ_tage*LZ_tage_bewert*beleghis.Menge),0.01)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  Sum_ek:=(Sum_ek+ (ROUND(beleghis_ek / LZ_tage * LZ_tage_bewert * beleghis.Menge)));
                  Sum_vk:=(Sum_vk+ (ROUND(beleghis."VK-Preis"/ LZ_tage*LZ_tage_bewert*beleghis.Menge)));
                  liefnr:=beleghis."Belegnr.";
                  liefzeilennr:=beleghis."Zeilennr.";
                  EnterCell(RowNo,23,Service."Wartungsvertragsnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  EnterCell(RowNo,24,Service."BET-Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  EnterCell(RowNo,25,Service."ACO Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  EnterCell(RowNo,26,FORMAT(Lief."VK-Preis (MW)"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
                  EnterCell(RowNo,27,Lief."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                END;
              END;
      //      Ende Lieferscheine holen aus Beleghistorie
            END;
          END;
        UNTIL Service.NEXT=0;
      END;
      RowNo := 1;
      EnterCell(RowNo,1,'Abgrenz_Ek','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,FORMAT(Sum_ek),'',FALSE,FALSE,FALSE,'###,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,4,'Abgrenz_Vk','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,FORMAT(Sum_vk),'',FALSE,FALSE,FALSE,'###,###,##0.00',TempExcelBuffer."Cell Type"::Number);

      CloseExcel('Wartungvertragsende 2HJ 2021','Wartungvertragsende 2HJ 2021','F:\Daten NEU\USER\Uwe\Navision_2016');
      MESSAGE(Text003);
    END;

    LOCAL PROCEDURE Cashflow_Daten_bereitstellen@1000000038();
    VAR
      XlWrkBkWriter@1000000005 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookWriter";
      XlWrkShtWriter@1000000004 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetWriter";
      XlApp@1000000008 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ApplicationClass" RUNONCLIENT;
      XlWrkBk@1000000007 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook" RUNONCLIENT;
      XlHelper@1000000009 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Excel.ExcelHelper" RUNONCLIENT;
      AuftrBestKopf@1000000011 : Record 36;
      AuftrBestZeile@1000000012 : Record 37;
      EinkBestKopf@1000000000 : Record 38;
      EinkBestZeile@1000000001 : Record 39;
      CustLedgerEntry@1000000013 : Record 21;
      VendorLedgerEntry@1000000015 : Record 25;
      BestBetrag@1000000002 : Decimal;
      BestBetragMW@1000000003 : Decimal;
      FilePath@1000000006 : Text;
      ServerUploadFile@1000000010 : Text;
      FileName@1000000014 : Text;
    BEGIN
      CreateExcel;

      //Parameter
      FilePath := 'F:\Tausch\Nav\Daten\';
      SheetName := 'AU Bestand';
      FileName := 'Daten_Nav_Cashflow';

      //AU Bestand
      ColumnNo := 1;
      RowNo := 1;
      EnterCell(RowNo,ColumnNo,'Auftrags.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Zeilennr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Laogerortcode','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Artikelnr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Restmenge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'gewnschter LT','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'zugesagter LT','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'W„hrungscode','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Betrag EKW','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Betrag MW','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'EK-Preis MW','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 2;

      Abgrenz_Datum := CALCDATE('<+180d>',WORKDATE);

      AuftrBestZeile.RESET;
      AuftrBestZeile.SETRANGE("Document Type",AuftrBestZeile."Document Type"::Order);
      AuftrBestZeile.SETRANGE(Type,AuftrBestZeile.Type::Item);
      AuftrBestZeile.SETFILTER("Location Code",'<>%1&<>%2','MUST','FAE');
      AuftrBestZeile.SETFILTER("Outstanding Quantity",'<>%1',0);
      //AuftrBestZeile.SETFILTER("Expected Receipt Date",'%1',31122055D);
      AuftrBestZeile.SETFILTER("Promised Delivery Date",'<=%1',Abgrenz_Datum);
      IF AuftrBestZeile.FIND('-') THEN BEGIN
        REPEAT
          ColumnNo := 1;
          EnterCell(RowNo,ColumnNo,FORMAT(AuftrBestZeile."Document No."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(AuftrBestZeile."Line No."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(AuftrBestZeile."Location Code"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(AuftrBestZeile."No."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(AuftrBestZeile."Outstanding Quantity"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(AuftrBestZeile."Requested Delivery Date"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(AuftrBestZeile."Promised Delivery Date"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(AuftrBestZeile."Currency Code"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          BestBetrag := ROUND(AuftrBestZeile."Outstanding Quantity" * AuftrBestZeile."Line Amount" / AuftrBestZeile.Quantity);
          BestBetragMW := BestBetrag;
          IF AuftrBestZeile."Currency Code" <> '' THEN BEGIN
            AuftrBestKopf.GET(AuftrBestKopf."Document Type"::Order,AuftrBestZeile."Document No.");
            IF AuftrBestKopf."Currency Factor" <> 0 THEN
              BestBetragMW :=
                ROUND(
                  W„hrungWechKurs.ExchangeAmtFCYToLCY(
                    WORKDATE,AuftrBestKopf."Currency Code",
                    BestBetragMW,AuftrBestKopf."Currency Factor"));
          END;
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(BestBetrag),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(BestBetragMW),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(AuftrBestZeile."DC-Preis (MW)"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
          RowNo := RowNo + 1;
        UNTIL AuftrBestZeile.NEXT = 0;
      END;

      Window.CLOSE;

      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet(SheetName,COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          TempExcelBuffer.OpenExcelWithoutAutoFit(SheetName,FileName + ExcelFileExtensionTok,FilePath,TRUE);
        TempExcelBuffer.QuitExcel;
        END;
      END;


      //BET Bestand
      SheetName := 'BET Bestand';
      ServerFileName := FilePath + FileName + ExcelFileExtensionTok;
      ServerUploadFile := FileMgt.UploadFileSilent(ServerFileName);
      XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
      XlWrkShtWriter := XlWrkBkWriter.AddWorksheet(SheetName);
      XlWrkBkWriter.Close;

      //SheetName := TempExcelBuffer.SelectSheetsName(ServerUploadFile);
      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);

      RowNo := 1;
      ColumnNo := 1;
      EnterCell(RowNo,ColumnNo,'Bestellnr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Zeilennr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Bestelldatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Laogerortcode','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Artikelnr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Restmenge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'gewnschter WE','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'zugesagter WE','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'W„hrungscode','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Herstellercode','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Kreditornr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Betrag EKW','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Betrag MW (akt. Kurs)','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'EK-Preis MW','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 2;

      EinkBestZeile.RESET;
      EinkBestZeile.SETRANGE("Document Type",EinkBestZeile."Document Type"::Order);
      EinkBestZeile.SETRANGE(Type,EinkBestZeile.Type::Item);
      EinkBestZeile.SETFILTER("Location Code",'<>%1','MUST');
      EinkBestZeile.SETFILTER("Outstanding Quantity",'<>%1',0);
      //EinkBestZeile.SETFILTER("Expected Receipt Date",'%1',31122055D);
      EinkBestZeile.SETFILTER("Promised Receipt Date",'<=%1',Abgrenz_Datum);
      IF EinkBestZeile.FIND('-') THEN BEGIN
        REPEAT
          ColumnNo := 1;
          EnterCell(RowNo,ColumnNo,FORMAT(EinkBestZeile."Document No."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(EinkBestZeile."Line No."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(EinkBestZeile."Order Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(EinkBestZeile."Location Code"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(EinkBestZeile."No."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(EinkBestZeile."Outstanding Quantity"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(EinkBestZeile."Requested Receipt Date"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(EinkBestZeile."Promised Receipt Date"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(EinkBestZeile."Currency Code"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          BestBetrag := ROUND(EinkBestZeile."Outstanding Quantity" * EinkBestZeile."Line Amount" / EinkBestZeile.Quantity);
          BestBetragMW := BestBetrag;
          IF EinkBestZeile."Currency Code" <> '' THEN BEGIN
            EinkBestKopf.GET(EinkBestKopf."Document Type"::Order,EinkBestZeile."Document No.");
            IF EinkBestKopf."Currency Factor" <> 0 THEN
              BestBetragMW :=
                ROUND(
                  W„hrungWechKurs.ExchangeAmtFCYToLCY(
                    WORKDATE,EinkBestKopf."Currency Code",
                    BestBetragMW,EinkBestKopf."Currency Factor"));
          END;

          BestBetragMW := BestBetrag / W„hrungWechKurs.ExchangeRate(WORKDATE,EinkBestKopf."Currency Code");
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(EinkBestZeile."Manufacturer Code"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(EinkBestZeile."Pay-to Vendor No."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(BestBetrag),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(BestBetragMW),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(EinkBestZeile."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
          RowNo := RowNo + 1;
        UNTIL EinkBestZeile.NEXT = 0;
      END;

      //Abschluss Server Datei downloaden und an Ziel bereitstellen
      TempExcelBuffer.UpdateBook(ServerUploadFile,SheetName);
      TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
      TempExcelBuffer.CloseBook;


      //Offene Debitorenposten
      SheetName := 'Offene Posten';
      XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
      XlWrkShtWriter := XlWrkBkWriter.AddWorksheet(SheetName);
      XlWrkBkWriter.Close;

      //SheetName := TempExcelBuffer.SelectSheetsName(ServerUploadFile);
      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);

      RowNo := 1;
      ColumnNo := 1;
      EnterCell(RowNo,ColumnNo,'Belegnr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Buchungsdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Debitornr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'F„lligkeitsdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'F„llig seit','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'W„hrungscode','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Restbetrag','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Restbetrag MW','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 2;

      CustLedgerEntry.RESET;
      CustLedgerEntry.SETRANGE("Document Type",CustLedgerEntry."Document Type"::Invoice);
      CustLedgerEntry.SETRANGE(Open,TRUE);
      //CustLedgerEntry.SETFILTER("Posting Date",'<=%1',Abgrenz_Datum);
      IF CustLedgerEntry.FIND('-') THEN BEGIN
        REPEAT
          ColumnNo := 1;
          EnterCell(RowNo,ColumnNo,FORMAT(CustLedgerEntry."Document No."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(CustLedgerEntry."Posting Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(CustLedgerEntry."Customer No."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          ColumnNo += 1;
          IF CustLedgerEntry."Due Date" < WORKDATE THEN BEGIN
            EnterCell(RowNo,ColumnNo,FORMAT(CustLedgerEntry."Due Date"),'',FALSE,FALSE,FALSE,'[red]dd.MM.YYYY',TempExcelBuffer."Cell Type"::Date);
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(WORKDATE-CustLedgerEntry."Due Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          END ELSE BEGIN
            EnterCell(RowNo,ColumnNo,FORMAT(CustLedgerEntry."Due Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
            ColumnNo += 1;
          END;
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(CustLedgerEntry."Currency Code"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          CustLedgerEntry.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(CustLedgerEntry."Remaining Amount"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(CustLedgerEntry."Remaining Amt. (LCY)"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
          RowNo := RowNo + 1;
        UNTIL CustLedgerEntry.NEXT = 0;
      END;

      //Abschluss Server Datei downloaden und an Ziel bereitstellen
      TempExcelBuffer.UpdateBook(ServerUploadFile,SheetName);
      TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
      TempExcelBuffer.CloseBook;


      //Offene Kreditorenposten
      SheetName := 'Offene Kred Posten';
      XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
      XlWrkShtWriter := XlWrkBkWriter.AddWorksheet(SheetName);
      XlWrkBkWriter.Close;

      //SheetName := TempExcelBuffer.SelectSheetsName(ServerUploadFile);
      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);

      RowNo := 1;
      ColumnNo := 1;
      EnterCell(RowNo,ColumnNo,'Belegnr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Buchungsdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Kreditornr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'F„lligkeitsdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'F„llig seit','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'W„hrungscode','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Restbetrag','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo += 1;
      EnterCell(RowNo,ColumnNo,'Restbetrag MW','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 2;

      VendorLedgerEntry.RESET;
      VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Invoice);
      VendorLedgerEntry.SETRANGE(Open,TRUE);
      //VendorLedgerEntry.SETFILTER("Posting Date",'<=%1',Abgrenz_Datum);
      IF VendorLedgerEntry.FIND('-') THEN BEGIN
        REPEAT
          ColumnNo := 1;
          EnterCell(RowNo,ColumnNo,FORMAT(VendorLedgerEntry."Document No."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(VendorLedgerEntry."Posting Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(VendorLedgerEntry."Vendor No."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          ColumnNo += 1;
          IF VendorLedgerEntry."Due Date" < WORKDATE THEN BEGIN
            EnterCell(RowNo,ColumnNo,FORMAT(VendorLedgerEntry."Due Date"),'',FALSE,FALSE,FALSE,'[red]dd.MM.YYYY',TempExcelBuffer."Cell Type"::Date);
            ColumnNo += 1;
            EnterCell(RowNo,ColumnNo,FORMAT(WORKDATE-VendorLedgerEntry."Due Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          END ELSE BEGIN
            EnterCell(RowNo,ColumnNo,FORMAT(VendorLedgerEntry."Due Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
            ColumnNo += 1;
          END;
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(VendorLedgerEntry."Currency Code"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          VendorLedgerEntry.CALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(VendorLedgerEntry."Remaining Amount"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
          ColumnNo += 1;
          EnterCell(RowNo,ColumnNo,FORMAT(VendorLedgerEntry."Remaining Amt. (LCY)"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
          RowNo := RowNo + 1;
        UNTIL VendorLedgerEntry.NEXT = 0;
      END;

      //Abschluss Server Datei downloaden und an Ziel bereitstellen
      TempExcelBuffer.UpdateBook(ServerUploadFile,SheetName);
      TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
      TempExcelBuffer.CloseBook;

      FileMgt.DownloadToFile(ServerUploadFile,ServerFileName);
      FileMgt.DeleteServerFile(ServerUploadFile);

      //Excel Datei ”ffnen
      XlApp := XlApp.ApplicationClass;
      XlApp.Visible(TRUE);
      XlWrkBk := XlHelper.CallOpen(XlApp,ServerFileName);

      CLEAR(XlWrkShtWriter);
      CLEAR(XlWrkBk);
    END;

    EVENT Sheet1@1000000142::SelectionChange@1543(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet1@1000000142::BeforeDoubleClick@1537(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet1@1000000142::BeforeRightClick@1534(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet1@1000000142::Activate@304();
    BEGIN
    END;

    EVENT Sheet1@1000000142::Deactivate@1530();
    BEGIN
    END;

    EVENT Sheet1@1000000142::Calculate@279();
    BEGIN
    END;

    EVENT Sheet1@1000000142::Change@1545(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet1@1000000142::FollowHyperlink@1470(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT Sheet1@1000000142::PivotTableUpdate@2156(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Sheet1@1000000142::PivotTableAfterValueChange@2886(TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet1@1000000142::PivotTableBeforeAllocateChanges@2889(TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet1@1000000142::PivotTableBeforeCommitChanges@2892(TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet1@1000000142::PivotTableBeforeDiscardChanges@2893(TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT Sheet1@1000000142::PivotTableChangeSync@2894(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book1@1000000143::Open@1923();
    BEGIN
    END;

    EVENT Book1@1000000143::Activate@304();
    BEGIN
    END;

    EVENT Book1@1000000143::Deactivate@1530();
    BEGIN
    END;

    EVENT Book1@1000000143::BeforeClose@1546(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book1@1000000143::BeforeSave@1547(SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book1@1000000143::BeforePrint@1549(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book1@1000000143::NewSheet@1550(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book1@1000000143::AddinInstall@1552();
    BEGIN
    END;

    EVENT Book1@1000000143::AddinUninstall@1553();
    BEGIN
    END;

    EVENT Book1@1000000143::WindowResize@1554(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book1@1000000143::WindowActivate@1556(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book1@1000000143::WindowDeactivate@1557(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book1@1000000143::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book1@1000000143::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book1@1000000143::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book1@1000000143::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book1@1000000143::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book1@1000000143::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book1@1000000143::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book1@1000000143::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT Book1@1000000143::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book1@1000000143::PivotTableCloseConnection@2158(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book1@1000000143::PivotTableOpenConnection@2159(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book1@1000000143::Sync@2266(SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book1@1000000143::BeforeXmlImport@2283(Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000002 : Text;IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book1@1000000143::AfterXmlImport@2285(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book1@1000000143::BeforeXmlExport@2287(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book1@1000000143::AfterXmlExport@2288(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book1@1000000143::RowsetComplete@2610(Description@1000000002 : Text;Sheet@1000000001 : Text;Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book1@1000000143::SheetPivotTableAfterValueChange@2895(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book1@1000000143::SheetPivotTableBeforeAllocateChanges@2896(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book1@1000000143::SheetPivotTableBeforeCommitChanges@2897(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book1@1000000143::SheetPivotTableBeforeDiscardChanges@2898(Sh@1000000003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book1@1000000143::SheetPivotTableChangeSync@2899(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book1@1000000143::AfterSave@2900(Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book1@1000000143::NewChart@2901(Ch@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    EVENT Sheet@1000000148::SelectionChange@1543(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet@1000000148::BeforeDoubleClick@1537(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1000000148::BeforeRightClick@1534(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1000000148::Activate@304();
    BEGIN
    END;

    EVENT Sheet@1000000148::Deactivate@1530();
    BEGIN
    END;

    EVENT Sheet@1000000148::Calculate@279();
    BEGIN
    END;

    EVENT Sheet@1000000148::Change@1545(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet@1000000148::FollowHyperlink@1470(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT Sheet@1000000148::PivotTableUpdate@2156(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Sheet@1000000148::PivotTableAfterValueChange@2886(TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet@1000000148::PivotTableBeforeAllocateChanges@2889(TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1000000148::PivotTableBeforeCommitChanges@2892(TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1000000148::PivotTableBeforeDiscardChanges@2893(TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT Sheet@1000000148::PivotTableChangeSync@2894(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000150::Open@1923();
    BEGIN
    END;

    EVENT Book@1000000150::Activate@304();
    BEGIN
    END;

    EVENT Book@1000000150::Deactivate@1530();
    BEGIN
    END;

    EVENT Book@1000000150::BeforeClose@1546(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000150::BeforeSave@1547(SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000150::BeforePrint@1549(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000150::NewSheet@1550(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1000000150::AddinInstall@1552();
    BEGIN
    END;

    EVENT Book@1000000150::AddinUninstall@1553();
    BEGIN
    END;

    EVENT Book@1000000150::WindowResize@1554(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book@1000000150::WindowActivate@1556(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book@1000000150::WindowDeactivate@1557(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book@1000000150::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book@1000000150::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000150::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000150::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1000000150::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1000000150::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1000000150::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book@1000000150::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT Book@1000000150::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000150::PivotTableCloseConnection@2158(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000150::PivotTableOpenConnection@2159(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000150::Sync@2266(SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book@1000000150::BeforeXmlImport@2283(Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000002 : Text;IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000150::AfterXmlImport@2285(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book@1000000150::BeforeXmlExport@2287(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000150::AfterXmlExport@2288(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book@1000000150::RowsetComplete@2610(Description@1000000002 : Text;Sheet@1000000001 : Text;Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000150::SheetPivotTableAfterValueChange@2895(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book@1000000150::SheetPivotTableBeforeAllocateChanges@2896(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000150::SheetPivotTableBeforeCommitChanges@2897(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000150::SheetPivotTableBeforeDiscardChanges@2898(Sh@1000000003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book@1000000150::SheetPivotTableChangeSync@2899(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000150::AfterSave@2900(Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000150::NewChart@2901(Ch@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    EVENT Excel@1000000151::NewWorkbook@1565(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000151::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Excel@1000000151::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000151::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000151::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1000000151::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1000000151::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1000000151::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookOpen@1567(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookActivate@1568(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookDeactivate@1569(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookBeforeClose@1570(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookBeforeSave@1571(Wb@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookBeforePrint@1572(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookNewSheet@1573(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookAddinInstall@1574(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookAddinUninstall@1575(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000151::WindowResize@1554(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Excel@1000000151::WindowActivate@1556(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Excel@1000000151::WindowDeactivate@1557(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Excel@1000000151::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT Excel@1000000151::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookPivotTableCloseConnection@2160(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookPivotTableOpenConnection@2161(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookSync@2289(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookBeforeXmlImport@2290(Wb@1000000004 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000002 : Text;IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookAfterXmlImport@2291(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookBeforeXmlExport@2292(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookAfterXmlExport@2293(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookRowsetComplete@2611(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Description@1000000002 : Text;Sheet@1000000001 : Text;Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000151::AfterCalculate@2612();
    BEGIN
    END;

    EVENT Excel@1000000151::SheetPivotTableAfterValueChange@2895(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Excel@1000000151::SheetPivotTableBeforeAllocateChanges@2896(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000151::SheetPivotTableBeforeCommitChanges@2897(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000151::SheetPivotTableBeforeDiscardChanges@2898(Sh@1000000003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT Excel@1000000151::ProtectedViewWindowOpen@2903(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1000000151::ProtectedViewWindowBeforeEdit@2905(Pvw@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000151::ProtectedViewWindowBeforeClose@2906(Pvw@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow";Reason@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000151::ProtectedViewWindowResize@2908(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1000000151::ProtectedViewWindowActivate@2909(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1000000151::ProtectedViewWindowDeactivate@2910(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookAfterSave@2911(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000151::WorkbookNewChart@2912(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Ch@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

