OBJECT Report 50118 Rechnungsausgang m. Excelblatt
{
  OBJECT-PROPERTIES
  {
    Date=06.05.22;
    Time=10:07:19;
    Modified=Yes;
    Version List=fs_v.2.0 5.9.03,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  //šberschriften
                  CreateExcel;
                  RowNo := 1;
                  ColumnNo := 1;
                  EnterCell(RowNo,ColumnNo,'Debitornr.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Name','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Name 2','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Adresse','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Adresse 2','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'PLZ','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Ort','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Artikel','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Menge','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'VK-Preis in Euro','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Betrag in Euro','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'VK-Preis','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Marge','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'W„hrung','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Lagerortcode','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Belegnr.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Belegdatum','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Wunschtermin','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Lieferdatum','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Debitor Artikelnr.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Email-Adresse','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Betreuer Innendienst','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Verk„ufercode','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Endkundennr.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Endkunde','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Herstellercode','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Artikelbezeich 2','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Artikelgruppe','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo += 1;
                  EnterCell(RowNo,ColumnNo,'Hinweise','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);

                  RowNo := 2;

                  IF Artikelnr_Filter1 <> '' THEN
                    Artikelnr := Artikelnr_Filter1
                  ELSE
                    Artikelnr := Artikelnr_Filter2;

                  IF Herstellercode_Filter1 <> '' THEN
                    Herstellercode := Herstellercode_Filter1
                  ELSE
                    Herstellercode := Herstellercode_Filter2;

                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   FinishExcel(Text001);
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               "Sales Invoice Header".SETFILTER("Sell-to Customer No.","Deb-Nr");
                               "Sales Invoice Header".SETFILTER("Betreuer Innendienst",Betreuer);
                               "Sales Invoice Header".SETFILTER("Salesperson Code",Verkcode);
                               "Sales Invoice Header".SETFILTER("Territory Code",Gebcode);
                               IF (PstDateFrom <> 0D) AND (PstDateTo = 0D) THEN
                                 "Sales Invoice Header".SETFILTER("Posting Date",'>=%1',PstDateFrom);
                               IF (PstDateFrom = 0D) AND (PstDateTo <> 0D) THEN
                                 "Sales Invoice Header".SETFILTER("Posting Date",'<=%1',PstDateTo);
                               IF (PstDateFrom <> 0D) AND (PstDateTo <> 0D) THEN
                                 "Sales Invoice Header".SETFILTER("Posting Date",'>=%1&<=%2',PstDateFrom,PstDateTo);

                               TotalRecNo := "Sales Invoice Header".COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  RecNo := RecNo + 1;
                                  Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                END;
                                 }

    { 2   ;1   ;DataItem;                    ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               OnPreDataItem=BEGIN
                               "Sales Invoice Line".SETFILTER("Sales Invoice Line"."Manufacturer Code",Herstellercode);
                             END;

               DataItemLink=Document No.=FIELD(No.) }

    { 3   ;2   ;DataItem;                    ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.);
               DataItemLink=No.=FIELD(Sell-to Customer No.) }

    { 4   ;3   ;DataItem;                    ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               //Item.SETFILTER(Item."No.",'*%1',Artikelnr);
                               Item.SETFILTER(Item."No.",Artikelnr);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF ("Sales Invoice Line".Quantity > 0) THEN BEGIN
                                    ColumnNo := 1;
                                    EnterCell(RowNo,ColumnNo,'',TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Customer.TABLENAME,1,21,Customer."No."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Customer.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Customer."Name 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Customer.Address,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Customer."Address 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Customer."Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Customer.City,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,'',TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Item.TABLENAME,1,30,"Sales Invoice Line"."No."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Invoice Line".Quantity),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Invoice Line"."VK-Preis (MW)"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    IF  "Sales Invoice Line"."VK-Preis (MW)" = "Sales Invoice Line"."Unit Price" THEN BEGIN
                                      EnterCell(RowNo,ColumnNo,FORMAT("Sales Invoice Line"."VK-Preis (MW)" * "Sales Invoice Line".Quantity),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                    END ELSE BEGIN
                                      IF "Sales Invoice Header"."Currency Factor" <> 0 THEN BEGIN
                                        EnterCell(RowNo,ColumnNo,FORMAT((("Sales Invoice Line"."Unit Price") / ("Sales Invoice Header"."Currency Factor")) * ("Sales Invoice Line".Quantity)),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
                                      END ELSE BEGIN
                                        EnterCell(RowNo,ColumnNo,FORMAT(("Sales Invoice Line"."Unit Price") * ("Sales Invoice Line".Quantity)),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
                                      END;
                                    END;
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT(("Sales Invoice Line"."Unit Price")),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    IF "Sales Invoice Line"."VK-Preis (MW)" <> 0 THEN BEGIN
                                      EnterCell(RowNo,ColumnNo,FORMAT(("Sales Invoice Line"."VK-Preis (MW)" - "Sales Invoice Line"."Unit Cost (LCY)") / "Sales Invoice Line"."VK-Preis (MW)" * 100),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                    END ELSE BEGIN
                                      EnterCell(RowNo,ColumnNo,FORMAT(0),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                    END;
                                    ColumnNo := ColumnNo + 1;
                                    IF "Sales Invoice Line".Einkaufsw„hrungscode = '' THEN BEGIN
                                      EnterCell(RowNo,ColumnNo,'EURO','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    END ELSE BEGIN
                                      EnterCell(RowNo,ColumnNo,"Sales Invoice Line".Einkaufsw„hrungscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    END;
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Invoice Line"."Location Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Invoice Line"."Document No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    IF ("Sales Invoice Line"."Posting Date" <> 0D)  AND ("Sales Invoice Line"."Posting Date" > 010100D) THEN BEGIN
                                      EnterCell(RowNo,ColumnNo,FORMAT("Sales Invoice Line"."Posting Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                    END;
                                    //IF ( "Sales Invoice Line". <> 0D) AND ("Sales Invoice Line".Wunschtermin > 010100D) THEN
                                    ColumnNo := ColumnNo + 1;
                                    //  Sheet.Range('R'+j).Value := "Sales Invoice Line".Wunschtermin;
                                    ColumnNo := ColumnNo + 1;
                                    IF ("Sales Invoice Line"."Shipment Date" <> 0D) AND ("Sales Invoice Line"."Shipment Date" > 010100D) THEN BEGIN
                                      EnterCell(RowNo,ColumnNo,FORMAT("Sales Invoice Line"."Shipment Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                    END;
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Invoice Line"."Cross-Reference No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;

                                    email := '';
                                    ContRela.SETFILTER("No.","Sales Invoice Line"."Sell-to Customer No.");
                                    IF ContRela.FINDFIRST THEN BEGIN
                                      Cont.SETFILTER("Company No.",ContRela."Contact No.");
                                      Cont.SETFILTER("Unternehmen verlassen",'%1',FALSE);
                                      IF Cont.FINDFIRST THEN BEGIN
                                        REPEAT
                                          pcn.RESET;
                                          pcn.SETFILTER("Contact No.",'%1',Cont."No.");
                                          pcn.SETFILTER("Job Responsibility Code",'%1','PCN-EOL');
                                          IF pcn.FINDFIRST THEN
                                            REPEAT
                                              IF email = '' THEN
                                                email := Cont."E-Mail"
                                              ELSE
                                                IF STRPOS(email,Cont."E-Mail") = 0 THEN
                                                  email := email + '; ' + Cont."E-Mail";
                                            UNTIL pcn.NEXT = 0;
                                            IF email <> '' THEN BEGIN
                                              IF NOT TempExcelBuffer.GET(RowNo,ColumnNo) THEN
                                                EnterCell(RowNo,ColumnNo,email,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text)
                                              ELSE
                                                UpdateCellValue(RowNo,ColumnNo,email);
                                            END;
                                        UNTIL Cont.NEXT = 0;
                                      END;
                                    END;

                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Invoice Header"."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Invoice Header"."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Invoice Line"."Endkundennr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Invoice Line".Endkunde,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Invoice Line"."Manufacturer Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Item."Description 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Item.Artikelgruppe,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

                                    ColumnNo := ColumnNo + 1;
                                    hinweise := '';
                                    ContRela.SETFILTER("No.","Sales Invoice Line"."Sell-to Customer No.");
                                    IF ContRela.FINDFIRST THEN BEGIN
                                      Cont.SETFILTER("Company No.",ContRela."Contact No.");
                                      Cont.SETFILTER("Unternehmen verlassen",'%1',FALSE);
                                      IF Cont.FINDFIRST THEN BEGIN
                                        ContMailGroup.RESET;
                                        ContMailGroup.SETFILTER("Contact No.",'%1',Cont."No.");
                                        ContMailGroup.SETFILTER("Mailing Group Code",'%1','PCN*');
                                        IF ContMailGroup.FINDFIRST THEN
                                          REPEAT
                                            CASE ContMailGroup."Mailing Group Code"  OF
                                              'PCN_ARTNR' :
                                                BEGIN
                                                  IF (hinweise = '') THEN
                                                    hinweise := 'Kd-Artikelnr. angeben'
                                                  ELSE
                                                    hinweise := hinweise + '; ' + 'Kd-Artikelnr. angeben';
                                                END;
                                              'PCN_DECKBL' :
                                                BEGIN
                                                  IF (hinweise = '') THEN
                                                    hinweise := 'Mitteilung nur mit KD-Formular'
                                                  ELSE
                                                    hinweise := hinweise + '; ' + 'Mitteilung nur mit KD-Formular';
                                                END;
                                            END;

                                          UNTIL ContMailGroup.NEXT = 0;
                                          IF hinweise <> '' THEN BEGIN
                                            IF NOT TempExcelBuffer.GET(RowNo,ColumnNo) THEN
                                              EnterCell(RowNo,ColumnNo,hinweise,'',FALSE,FALSE,FALSE,'@[red]',TempExcelBuffer."Cell Type"::Number)
                                          END;
                                      END;
                                    END;

                                    RowNo := RowNo + 1;

                                  END;
                                END;

               DataItemLinkReference=Sales Invoice Line;
               DataItemLink=No.=FIELD(No.) }

    { 5   ;4   ;Column  ;No_Customer         ;
               SourceExpr=Customer."No." }

    { 6   ;4   ;Column  ;Name_Customer       ;
               SourceExpr=Customer.Name }

    { 7   ;4   ;Column  ;DocumentNo_SalesInvoiceLine;
               SourceExpr="Sales Invoice Line"."Document No." }

    { 8   ;4   ;Column  ;No_SalesInvoiceLine ;
               SourceExpr="Sales Invoice Line"."No." }

    { 9   ;4   ;Column  ;Quantity_SalesInvoiceLine;
               SourceExpr="Sales Invoice Line".Quantity }

    { 10  ;4   ;Column  ;PostingDate_SalesInvoiceLine;
               SourceExpr="Sales Invoice Line"."Posting Date" }

    { 11  ;4   ;Column  ;ShipmentDate_SalesInvoiceLine;
               SourceExpr="Sales Invoice Line"."Shipment Date" }

    { 12  ;4   ;Column  ;email               ;
               SourceExpr=email }

    { 13  ;    ;DataItem;                    ;
               DataItemTable=Table114;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               ReportForNav.NewPageWithoutTransportTotals;
                               "Sales Cr.Memo Header".SETFILTER("Sell-to Customer No.","Deb-Nr");
                               "Sales Cr.Memo Header".SETFILTER("Betreuer Innendienst",Betreuer);
                               "Sales Cr.Memo Header".SETFILTER("Salesperson Code",Verkcode);
                               "Sales Cr.Memo Header".SETFILTER("Territory Code",Gebcode);
                               IF (PstDateFrom <> 0D ) AND (PstDateTo = 0D) THEN
                                 "Sales Cr.Memo Header".SETFILTER("Posting Date",'>=%1',PstDateFrom);
                               IF (PstDateFrom = 0D) AND (PstDateTo <> 0D) THEN
                                 "Sales Cr.Memo Header".SETFILTER("Posting Date",'<=%1',PstDateTo);
                               IF (PstDateFrom <> 0D) AND (PstDateTo <> 0D) THEN
                                 "Sales Cr.Memo Header".SETFILTER("Posting Date",'>=%1&<=%2',PstDateFrom,PstDateTo);

                               RowNo := RowNo + 1;
                             END;
                              }

    { 14  ;1   ;DataItem;                    ;
               DataItemTable=Table115;
               DataItemTableView=SORTING(Document No.,Line No.);
               OnPreDataItem=BEGIN
                               "Sales Cr.Memo Line".SETFILTER("Manufacturer Code",Herstellercode);
                               "Sales Cr.Memo Line".SETFILTER("No.",Artikelnr);
                             END;

               DataItemLink=Document No.=FIELD(No.) }

    { 15  ;2   ;DataItem;Debitor2            ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=VAR
                                  verkaufsgutschriftskopf@1140000 : Record 114;
                                BEGIN
                                END;

               DataItemLink=No.=FIELD(Sell-to Customer No.) }

    { 16  ;3   ;DataItem;Artikel2            ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               Artikel2.SETFILTER(Artikel2."No.",Artikelnr);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF ("Sales Cr.Memo Line".Quantity > 0) THEN BEGIN
                                    ColumnNo := 1;
                                    EnterCell(RowNo,ColumnNo,'',TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Debitor2.TABLENAME,1,21,Debitor2."No."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Debitor2.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Debitor2."Name 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Debitor2.Address,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Debitor2."Address 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo, Debitor2."Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Debitor2.City,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,'',TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Item.TABLENAME,1,30,"Sales Cr.Memo Line"."No."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Cr.Memo Line".Quantity),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Cr.Memo Line"."VK-Preis (MW)"),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT(-"Sales Cr.Memo Line"."VK-Preis (MW)" * "Sales Cr.Memo Line".Quantity),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Cr.Memo Line"."Unit Price"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    IF "Sales Cr.Memo Line"."VK-Preis (MW)" <> 0 THEN BEGIN
                                      EnterCell(RowNo,ColumnNo,FORMAT(("Sales Cr.Memo Line"."VK-Preis (MW)" - "Sales Cr.Memo Line"."Unit Cost (LCY)") / "Sales Cr.Memo Line"."VK-Preis (MW)" * 100),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                    END ELSE BEGIN
                                    EnterCell(RowNo,ColumnNo,FORMAT(0),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                    END;
                                    ColumnNo := ColumnNo + 1;
                                    verkaufsgutschriftskopf.RESET;
                                    verkaufsgutschriftskopf.SETFILTER("No.",'%1',"Sales Cr.Memo Line"."Document No.");
                                    IF verkaufsgutschriftskopf.FIND('-') THEN BEGIN
                                      IF verkaufsgutschriftskopf."Currency Code" = '' THEN BEGIN
                                        EnterCell(RowNo,ColumnNo,'EURO','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      END ELSE BEGIN
                                        EnterCell(RowNo,ColumnNo,verkaufsgutschriftskopf."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      END;
                                    END;
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Cr.Memo Line"."Location Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Cr.Memo Line"."Document No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    IF ("Sales Cr.Memo Header"."Posting Date" <> 0D)  AND ("Sales Cr.Memo Header"."Posting Date" > 010100D) THEN BEGIN
                                      EnterCell(RowNo,ColumnNo,FORMAT("Sales Cr.Memo Header"."Posting Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                    END;
                                    //IF ("Sales Cr.Memo Line".Wunschtermin <> 0D) AND ("Sales Cr.Memo Line".Wunschtermin > 010100D) THEN
                                    ColumnNo := ColumnNo + 1;
                                    //  Sheet.Range('R'+j).Value := "Sales Cr.Memo Line".Wunschtermin;
                                    ColumnNo := ColumnNo + 1;
                                    IF ("Sales Cr.Memo Line"."Shipment Date" <> 0D) AND ("Sales Cr.Memo Line"."Shipment Date" > 010100D) THEN BEGIN
                                      EnterCell(RowNo,ColumnNo,FORMAT("Sales Cr.Memo Line"."Shipment Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                    END;
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Cr.Memo Line"."Cross-Reference No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;

                                    email := '';
                                    ContRela.SETFILTER("No.","Sales Cr.Memo Header"."Sell-to Customer No.");
                                    IF ContRela.FINDFIRST THEN BEGIN
                                      Cont.SETFILTER("Company No.",ContRela."Contact No.");
                                      Cont.SETFILTER("Unternehmen verlassen",'%1',FALSE);
                                      IF Cont.FINDFIRST THEN BEGIN
                                        REPEAT
                                          pcn.RESET;
                                          pcn.SETFILTER("Contact No.",'=%1',Cont."No.");
                                          pcn.SETFILTER("Job Responsibility Code",'=%1','PCN-EOL');
                                          IF pcn.FINDFIRST THEN
                                            REPEAT
                                              IF email = '' THEN
                                                email := Cont."E-Mail"
                                              ELSE
                                                IF STRPOS(email,Cont."E-Mail") = 0 THEN
                                                  email := email + '; ' + Cont."E-Mail";
                                            UNTIL pcn.NEXT = 0;
                                            IF email <> '' THEN BEGIN
                                              IF NOT TempExcelBuffer.GET(RowNo,ColumnNo) THEN
                                                EnterCell(RowNo,ColumnNo,email,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text)
                                              ELSE
                                                UpdateCellValue(RowNo,ColumnNo,email);
                                            END;
                                        UNTIL Cont.NEXT = 0;
                                      END;
                                    END;

                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Cr.Memo Header"."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Cr.Memo Header"."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Cr.Memo Line"."Endkundennr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Cr.Memo Line".Endkunde,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Cr.Memo Line"."Manufacturer Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Item."Description 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Item.Artikelgruppe,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

                                    ColumnNo := ColumnNo + 1;
                                    hinweise := '';
                                    ContRela.SETFILTER("No.","Sales Cr.Memo Line"."Sell-to Customer No.");
                                    IF ContRela.FINDFIRST THEN BEGIN
                                      Cont.SETFILTER("Company No.",ContRela."Contact No.");
                                      Cont.SETFILTER("Unternehmen verlassen",'%1',FALSE);
                                      IF Cont.FINDFIRST THEN BEGIN
                                        ContMailGroup.RESET;
                                        ContMailGroup.SETFILTER("Contact No.",'%1',Cont."No.");
                                        ContMailGroup.SETFILTER("Mailing Group Code",'%1','PCN*');
                                        IF ContMailGroup.FINDFIRST THEN
                                          REPEAT
                                            CASE ContMailGroup."Mailing Group Code"  OF
                                              'PCN_ARTNR' :
                                                BEGIN
                                                  IF (hinweise = '') THEN
                                                    hinweise := 'Kd-Artikelnr. angeben'
                                                  ELSE
                                                    hinweise := hinweise + '; ' + 'Kd-Artikelnr. angeben';
                                                END;
                                              'PCN_DECKBL' :
                                                BEGIN
                                                  IF (hinweise = '') THEN
                                                    hinweise := 'Mitteilung nur mit KD-Formular'
                                                  ELSE
                                                    hinweise := hinweise + '; ' + 'Mitteilung nur mit KD-Formular';
                                                END;
                                            END;

                                          UNTIL ContMailGroup.NEXT = 0;
                                          IF hinweise <> '' THEN BEGIN
                                            IF NOT TempExcelBuffer.GET(RowNo,ColumnNo) THEN
                                              EnterCell(RowNo,ColumnNo,hinweise,'',FALSE,FALSE,FALSE,'@[red]',TempExcelBuffer."Cell Type"::Number)
                                          END;
                                      END;
                                    END;

                                    RowNo := RowNo + 1;

                                  END;
                                END;

               DataItemLinkReference=Sales Cr.Memo Line;
               DataItemLink=No.=FIELD(No.) }

    { 17  ;4   ;Column  ;email2              ;
               SourceExpr=email }

    { 18  ;4   ;Column  ;No_Debitor2         ;
               SourceExpr=Debitor2."No." }

    { 19  ;4   ;Column  ;Name_Debitor2       ;
               SourceExpr=Debitor2.Name }

    { 20  ;4   ;Column  ;DocumentNo_SalesCrMemoLine;
               SourceExpr="Sales Cr.Memo Line"."Document No." }

    { 21  ;4   ;Column  ;No_SalesCrMemoLine  ;
               SourceExpr="Sales Cr.Memo Line"."No." }

    { 22  ;4   ;Column  ;Quantity_SalesCrMemoLine;
               SourceExpr="Sales Cr.Memo Line".Quantity }

    { 23  ;4   ;Column  ;PostingDate_SalesCrMemoHeader;
               SourceExpr="Sales Cr.Memo Header"."Posting Date" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1000000004;2;Group  ;
                  CaptionML=DEU=Herstellercode Filter;
                  GroupType=Group }

      { 1000000006;3;Group  ;
                  CaptionML=DEU=1.) Hier bis zu 10 Zeichen Herstellercode Filter mit Tabellenvorschau:;
                  GroupType=Group }

      { 1140004;4;Field     ;
                  CaptionML=DEU=Herstellercode;
                  SourceExpr=Herstellercode_Filter1;
                  TableRelation=Manufacturer;
                  OnValidate=BEGIN
                               Herstellercode_Filter2 := '';
                             END;

                  OnLookup=BEGIN
                             Hersteller.RESET;
                             IF PAGE.RUNMODAL(5728,Hersteller) = ACTION::LookupOK THEN
                                Herstellercode := Hersteller.Code;
                           END;
                            }

      { 1000000008;4;Field  ;
                  CaptionML=DEU=oder }

      { 1000000005;3;Group  ;
                  CaptionML=DEU=2.) Hier k”nnen gr”áere Herstellercode Filter gebaut werden:;
                  GroupType=Group }

      { 1000000007;4;Field  ;
                  CaptionML=DEU=Herstellercode;
                  SourceExpr=Herstellercode_Filter2;
                  OnValidate=BEGIN
                               Herstellercode_Filter1 := '';
                             END;
                              }

      { 1000000000;2;Group  ;
                  CaptionML=DEU=Artikelnr Filter;
                  GroupType=Group }

      { 1000000001;3;Group  ;
                  CaptionML=DEU=1.) Hier k”nnen die exakten Artikelnr. eingegeben werden:;
                  GroupType=Group }

      { 1140010;4;Field     ;
                  CaptionML=DEU=Artikelnr;
                  SourceExpr=Artikelnr_Filter1;
                  TableRelation=Item;
                  OnValidate=BEGIN
                               Artikelnr_Filter2 := '';
                             END;
                              }

      { 1000000011;4;Field  ;
                  CaptionML=DEU=oder }

      { 1000000003;3;Group  ;
                  CaptionML=DEU=2.) Hier kann mit Platzhalter wie * gearbeitet werden:;
                  GroupType=Group }

      { 1000000002;4;Field  ;
                  CaptionML=DEU=Artikelnr;
                  SourceExpr=Artikelnr_Filter2;
                  OnValidate=BEGIN
                               Artikelnr_Filter1 := '';
                             END;
                              }

      { 1140005;2;Field     ;
                  CaptionML=DEU=Buchungsdatum;
                  SourceExpr=PstDateFrom }

      { 1140008;2;Field     ;
                  CaptionML=DEU=bis;
                  SourceExpr=PstDateTo }

      { 1140012;2;Field     ;
                  CaptionML=DEU=Betreuer Innendienst;
                  SourceExpr=Betreuer;
                  TableRelation=Salesperson/Purchaser }

      { 1140014;2;Field     ;
                  CaptionML=DEU=Verk„ufercode;
                  SourceExpr=Verkcode;
                  TableRelation=Salesperson/Purchaser }

      { 1140016;2;Field     ;
                  CaptionML=DEU=Gebietscode;
                  SourceExpr=Gebcode;
                  TableRelation=Territory }

      { 1140006;2;Field     ;
                  CaptionML=DEU=Verk. an Deb.-Nr.;
                  SourceExpr="Deb-Nr";
                  TableRelation=Customer }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      pcn@1000000027 : Record 5067;
      verkaufsgutschriftskopf@1000000026 : Record 114;
      ContRela@1000000025 : Record 5054;
      Cont@1000000024 : Record 5050;
      Hersteller@1000000023 : Record 5720;
      Artikel@1000000022 : Record 27;
      ContMailGroup@1000000032 : Record 5056;
      waehrung@1140008 : Text[30];
      waehrung2@1000000029 : Text[30];
      waecode@1140009 : Text[30];
      betragmw@1000000028 : Decimal;
      betragmw2@1140010 : Decimal;
      email@1000000021 : Text;
      hinweise@1000000031 : Text;
      "Deb-Nr"@1000000030 : Code[20];
      Herstellercode@1140020 : Code[40];
      Herstellercode_Filter1@1000000002 : Code[40];
      Herstellercode_Filter2@1000000003 : Code[40];
      Artikelnr@1140025 : Code[20];
      Artikelnr_Filter1@1000000001 : Code[20];
      Artikelnr_Filter2@1000000000 : Code[20];
      PstDateFrom@1140021 : Date;
      PstDateTo@1140022 : Date;
      Betreuer@1140027 : Code[10];
      Verkcode@1140028 : Code[10];
      Gebcode@1140029 : Code[10];
      TempExcelBuffer@1000000015 : TEMPORARY Record 370;
      FileMgt@1000000014 : Codeunit 419;
      TOPAS_API@1000000013 : Codeunit 50001;
      ServerFileName@1000000012 : Text;
      SheetName@1000000011 : Text[250];
      DoUpdateExistingWorksheet@1000000010 : Boolean;
      Testmode@1000000009 : Boolean;
      Window@1000000008 : Dialog;
      RecNo@1000000007 : Integer;
      TotalRecNo@1000000006 : Integer;
      RowNo@1000000005 : Integer;
      ColumnNo@1000000004 : Integer;
      Text000@1000000020 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000019 : TextConst 'DEU=Rechnungen';
      Text002@1000000018 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text003@1000000017 : TextConst 'DEU=Excel Export erfolgreich abgeschlossen.';
      ExcelFileExtensionTok@1000000016 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body3@5066(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput("Sales Invoice Line".Quantity > 0)
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesCrMemoHeader_Header4@5067(VAR "Sales Cr.Memo Header"@1000000000 : Record 114);
    BEGIN
      WITH "Sales Cr.Memo Header" DO BEGIN
      END;
    END;

    LOCAL PROCEDURE OnPreSectionArtikel2_Body7@5068(VAR Artikel2@1000000000 : Record 27);
    BEGIN
      WITH Artikel2 DO BEGIN
        ReportForNav.ShowOutput("Sales Cr.Memo Line".Quantity > 0)
      END;
    END;

    PROCEDURE CreateExcel@1000000001();
    BEGIN
      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;
      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');
      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);
    END;

    LOCAL PROCEDURE FinishExcel@1000000018(SheetName@1000000000 : Text);
    BEGIN
      Window.CLOSE;
      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN
          TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet(SheetName,COMPANYNAME,USERID);
        //TempExcelBuffer.SetWidth(1,'A',20);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
          //TempExcelBuffer.OpenExcelWithoutAutoFit('','','',TRUE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE UpdateCellValue@1000000008(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text);
    BEGIN
      IF TempExcelBuffer.GET(RowNo,ColumnNo)  THEN BEGIN
        TempExcelBuffer."Cell Value as Text" := CellValue;
        TempExcelBuffer.MODIFY;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Item': CASE SectionId OF
          'Body3': OnPreSectionItem_Body3(Item);
        END;
        'SalesCrMemoHeader': CASE SectionId OF
          'Header4': OnPreSectionSalesCrMemoHeader_Header4("Sales Cr.Memo Header");
        END;
        'Artikel2': CASE SectionId OF
          'Body7': OnPreSectionArtikel2_Body7(Artikel2);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    {
      TOPAS 11.05.09 -ST
      - Request Option eingebaut
      TOPAS 01.03.18 - ST
      - Umstellung auf neue Excel Technik
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

