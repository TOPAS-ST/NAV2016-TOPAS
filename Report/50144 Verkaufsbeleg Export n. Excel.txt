OBJECT Report 50144 Verkaufsbeleg Export n. Excel
{
  OBJECT-PROPERTIES
  {
    Date=23.04.19;
    Time=09:15:55;
    Modified=Yes;
    Version List=Topas Bericht;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    UseRequestPage=No;
  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table36;
               OnPreDataItem=BEGIN
                               Firmendaten.GET;
                             END;

               OnAfterGetRecord=VAR
                                  Window@1000 : Dialog;
                                  RecNo@1001 : Integer;
                                  TotalRecNo@1002 : Integer;
                                  RowNo@1003 : Integer;
                                  ColumnNo@1004 : Integer;
                                BEGIN
                                  IF GETFILTER("No.") = '' THEN EXIT;

                                  IF DoUpdateExistingWorksheet THEN BEGIN
                                    IF ServerFileName = '' THEN
                                      ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
                                    IF ServerFileName = '' THEN
                                      EXIT;
                                    SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
                                    IF SheetName = '' THEN
                                      EXIT;
                                  END;

                                  Window.OPEN(
                                    Text000 +
                                    '@1@@@@@@@@@@@@@@@@@@@@@\');

                                  TempExcelBuffer.DELETEALL;
                                  CLEAR(TempExcelBuffer);

                                  RecNo := 0;
                                  TotalRecNo := TotalRecNo + 1;
                                  SalesOrderNo := GETFILTER("No.");

                                  SalesHeader.RESET;
                                  SalesHeader.SETRANGE("No.",SalesOrderNo);
                                  IF SalesHeader.FINDFIRST THEN BEGIN
                                    IF Customer.GET(SalesHeader."Sell-to Customer No.") THEN
                                      CurrReport.LANGUAGE := Language.GetLanguageID(Customer."Language Code");
                                    TOPAS_Funktionen.GetCompanyInformation(CompanyInfo,Firmendaten);
                                    //Header
                                    RowNo := 1;
                                    ColumnNo := 2;
                                    EnterCell(RowNo,ColumnNo,FORMAT(SalesHeader."Document Type") + ' ' + SalesHeader."No.",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    RowNo := RowNo + 1;
                                    EnterCell(RowNo,ColumnNo,STRSUBSTNO(Text060,SalesHeader."Document Date"),'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    RowNo := RowNo + 1;
                                    IF SalesHeader."Payment Terms Code" <> '' THEN BEGIN
                                      PaymentTerms.GET(SalesHeader."Payment Terms Code");
                                      EnterCell(RowNo,ColumnNo,Text050 + ' ' + PaymentTerms.Description,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    END;
                                    RowNo := RowNo + 1;
                                    EnterCell(RowNo,ColumnNo,Text061,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    RowNo := RowNo + 1;
                                    EnterCell(RowNo,ColumnNo,STRSUBSTNO(Text062,SalesHeader."External Document No."),'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := 1;
                                    EnterCell(RowNo,ColumnNo,CompanyInfo[2],'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    RowNo := RowNo + 1;
                                    EnterCell(RowNo,ColumnNo,CompanyInfo[4] + ' ' + CompanyInfo[5],'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    RowNo := RowNo + 1;
                                    EnterCell(RowNo,ColumnNo,CompanyInfo[15],'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    RowNo := RowNo + 2;

                                    SalesLine.SETRANGE("Document No.",SalesHeader."No.");
                                    IF SalesLine.FINDFIRST THEN BEGIN

                                      ColumnNo := 1;
                                      EnterCell(RowNo,ColumnNo,Text032,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text033,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text034,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text035,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text036,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text037,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text038,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text039,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text041,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text042,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);

                                      RecNo := RecNo + 1;
                                      Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                      RowNo := RowNo + 1;
                                      ColumnNo := 1;
                                      Total := 0;

                                      REPEAT
                                        //Body
                                        EnterCell(RowNo,ColumnNo,SalesLine."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                        ColumnNo += 1;
                                        EnterCell(RowNo,ColumnNo,SalesLine.Description,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                        ColumnNo += 1;
                                        EnterCell(RowNo,ColumnNo,SalesLine."Description 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                        ColumnNo += 1;
                                        IF SalesLine.Type = SalesLine.Type::Item THEN BEGIN
                                          IF SalesLine."System Projektinfos" <> '' THEN SystemInfo := SalesLine."System Projektinfos";
                                          EnterCell(RowNo,ColumnNo,FORMAT(SalesLine.Quantity),'',FALSE,FALSE,FALSE,'#,##0',TempExcelBuffer."Cell Type"::Number);
                                          ColumnNo += 1;
                                          EnterCell(RowNo,ColumnNo,FORMAT(SalesLine."Unit Price"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                          ColumnNo += 1;
                                          EnterCell(RowNo,ColumnNo,FORMAT(TOPAS_Funktionen.FindItemSalesPrice(SalesLine."No.",WORKDATE,SalesLine.Einkaufsw„hrungscode,SalesLine."Unit of Measure",SalesLine."Quantity (Base)",
                                                    SalesHeader."Preislisten Kalkulation")),'',FALSE,FALSE,FALSE,'$ #,##0.00',TempExcelBuffer."Cell Type"::Number);
                                          ColumnNo += 1;
                                          EnterCell(RowNo,ColumnNo,FORMAT(SalesLine.Einkaufsw„hrungsfaktor),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                          ColumnNo += 1;
                                          EnterCell(RowNo,ColumnNo,SalesLine."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                          ColumnNo += 1;
                                          EnterCell(RowNo,ColumnNo,FORMAT(SalesLine.Amount),'',TRUE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                          ColumnNo += 1;
                                          EnterCell(RowNo,ColumnNo,SalesLine.LZ_Text,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                          Total += SalesLine.Amount;

                                          IF Item.GET(SalesLine."No.") THEN BEGIN
                                            IF Item."Software Upgrade Protection" THEN BEGIN
                                              ServRelaDoc.SETRANGE(Art,ServRelaDoc.Art::"SUP-AU");
                                              ServRelaDoc.SETRANGE("Nr.",SalesLine."Document No.");
                                              ServRelaDoc.SETRANGE("Zeilennr.",SalesLine."Line No.");
                                              IF ServRelaDoc.FINDFIRST THEN BEGIN
                                                RowNo := RowNo + 1;
                                                ColumnNo := 1;
                                                EnterCell(RowNo,ColumnNo,'Serviceleistungen bestehen aus','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                                RowNo := RowNo + 1;
                                                EnterCell(RowNo,ColumnNo,'Ger„te Artikelnr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                                ColumnNo := ColumnNo + 1;
                                                EnterCell(RowNo,ColumnNo,'Startdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                                ColumnNo := ColumnNo + 1;
                                                EnterCell(RowNo,ColumnNo,'Enddatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                                ColumnNo := ColumnNo + 1;
                                                EnterCell(RowNo,ColumnNo,'Menge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                                ColumnNo := ColumnNo + 1;
                                                EnterCell(RowNo,ColumnNo,'Einzelpreis','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                                ColumnNo := ColumnNo + 1;
                                                EnterCell(RowNo,ColumnNo,'Gesamtbetrag','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                                ColumnNo := ColumnNo + 1;
                                                EnterCell(RowNo,ColumnNo,'Service Artikel','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                                //ColumnNo := ColumnNo + 1;
                                                //EnterCell(RowNo,ColumnNo,'W„hrungsfaktor','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                                ColumnNo := ColumnNo + 1;
                                                EnterCell(RowNo,ColumnNo,'Laufzeit','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                                RowNo := RowNo + 1;
                                                REPEAT
                                                  ColumnNo := 1;
                                                  EnterCell(RowNo,ColumnNo,ServRelaDoc."Ger„te Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                                  ColumnNo := ColumnNo + 1;
                                                  EnterCell(RowNo,ColumnNo,FORMAT(ServRelaDoc.Startdatum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                                  ColumnNo := ColumnNo + 1;
                                                  EnterCell(RowNo,ColumnNo,FORMAT(ServRelaDoc.Ablaufdatum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                                  ColumnNo := ColumnNo + 1;
                                                  EnterCell(RowNo,ColumnNo,FORMAT(ServRelaDoc."Menge kalk."),'',FALSE,FALSE,FALSE,'#,##0',TempExcelBuffer."Cell Type"::Number);
                                                  ColumnNo := ColumnNo + 1;
                                                  EnterCell(RowNo,ColumnNo,FORMAT(ServRelaDoc."Service VK-Preis einzeln"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                                  ColumnNo := ColumnNo + 1;
                                                  EnterCell(RowNo,ColumnNo,FORMAT(ServRelaDoc."Service VK-Preis Zeilenbetrag"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                                  ColumnNo := ColumnNo + 1;
                                                  EnterCell(RowNo,ColumnNo,ServRelaDoc."Service Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                                  //ColumnNo := ColumnNo + 1;
                                                  //EnterCell(RowNo,ColumnNo,FORMAT(ServRelaDoc."Service W„hrungsfaktor"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                                  ColumnNo := ColumnNo + 1;
                                                  EnterCell(RowNo,ColumnNo,FORMAT(ServRelaDoc.Laufzeit),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                                  RowNo := RowNo + 1;
                                                UNTIL ServRelaDoc.NEXT = 0;
                                              END;
                                            END;
                                          END;
                                        END ELSE BEGIN
                                          ColumnNo += 5;
                                        END;

                                        TotalColumnNo := ColumnNo;
                                        ColumnNo := 1;
                                        RowNo := RowNo + 1;
                                      UNTIL SalesLine.NEXT = 0;

                                      //"Footer"
                                      EnterCell(RowNo,TotalColumnNo-1,Text040,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Number);
                                      EnterCell(RowNo,TotalColumnNo,FORMAT(Total),'',FALSE,FALSE,TRUE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                      RowNo := RowNo + 2;

                                    END;
                                  END;

                                  Window.CLOSE;

                                  IF DoUpdateExistingWorksheet THEN BEGIN
                                    TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
                                    TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
                                    TempExcelBuffer.CloseBook;
                                    IF NOT TestMode THEN
                                      TempExcelBuffer.DownloadAndOpenExcel;
                                  END ELSE BEGIN
                                    TempExcelBuffer.CreateBook(ServerFileName,Text001);
                                    TempExcelBuffer.WriteSheet(
                                      PADSTR(STRSUBSTNO('%1 %2',Text001,SalesOrderNo),30),COMPANYNAME,USERID);
                                    TempExcelBuffer.SetWidth(1,'A',40);
                                    TempExcelBuffer.SetWidth(1,'B',50);
                                    TempExcelBuffer.SetWidth(1,'C',50);
                                    TempExcelBuffer.SetWidth(1,'F',20);
                                    TempExcelBuffer.SetWidth(1,'G',20);
                                    //TempExcelBuffer.SetWidth(1,'H',25);
                                    //TempExcelBuffer.SetWidth(1,'I',15);
                                    TempExcelBuffer.CloseBook;
                                    IF NOT TestMode THEN BEGIN
                                      //TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
                                      TempExcelBuffer.OpenExcelWithoutAutoFit(Text001,SalesOrderNo + ExcelFileExtensionTok,NewFileDirectory,FALSE);

                                      ClientFileName := NewFileDirectory + SalesOrderNo + ExcelFileExtensionTok;
                                      XlWrkApp := XlWrkApp.ApplicationClass();
                                      XlWrkBk := XlHelper.CallOpen(XlWrkApp,ClientFileName);
                                      XlWrkApp.Visible(TRUE);
                                      //XlWrkBk := XlWrkApp.Workbooks.Open(ClientFileName,0,FALSE);
                                      XlWrkBk := XlWrkApp.ActiveWorkbook;
                                      XlWrkSht := XlWrkBk.Worksheets.Item(1);
                                      IF FileMgt.ClientFileExists(SystemeLogo) THEN
                                        XlWrkSht.Shapes.AddPicture(SystemeLogo,1, 1, 5, 10, 180, 35);
                                      XlWrkSht.PageSetup.PaperSize := 9;
                                      XlWrkSht.PageSetup.Zoom := FALSE;
                                      XlWrkSht.PageSetup.FitToPagesWide := 1;
                                      XlWrkSht.PageSetup.FitToPagesTall := FALSE;
                                      XlWrkBk.Save;

                                      //XlWrkBk.Close;
                                    END;
                                  END;
                                  IF NOT TestMode THEN
                                    TempExcelBuffer.GiveUserControl;
                                END;

               ReqFilterFields=No. }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1001 : TextConst 'DEU=Angebot;ENU=Quotation';
      Text002@1002 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      TempExcelBuffer@1006 : TEMPORARY Record 370;
      SalesHeader@1000000001 : Record 36;
      SalesLine@1000000011 : Record 37;
      PaymentTerms@1000000023 : Record 3;
      Customer@1000000014 : Record 18;
      ServRelaDoc@1000000024 : Record 50027;
      Item@1000000029 : Record 27;
      Firmendaten@1000000036 : Record 79;
      Language@1000000015 : Record 8;
      FileMgt@1000000032 : Codeunit 419;
      TOPAS_Funktionen@1000000035 : Codeunit 50006;
      CompanyInfo@1000000033 : ARRAY [15] OF Text;
      DateFilter@1036 : Text[30];
      ServerFileName@1050 : Text;
      SheetName@1010 : Text[250];
      Text003@1004 : TextConst 'DEU=Tabellendaten;ENU=Table Data';
      Text004@1044 : TextConst 'DEU=Zeilenansicht;ENU=Show as Lines';
      Text005@1045 : TextConst 'DEU=Spaltenansicht;ENU=Show as Columns';
      Text010@1005 : TextConst 'DEU=%1 darf nicht leer sein.;ENU=%1 must not be blank.';
      Text011@1008 : TextConst 'DEU=Wert anzeigen als;ENU=Show Value as';
      DoUpdateExistingWorksheet@1052 : Boolean;
      Text020@1000000018 : TextConst 'DEU=Verk. an Name;ENU=Sell-to Customer Name';
      Text021@1000000019 : TextConst 'DEU=Belegdatum;ENU=Document Date';
      Text030@1000000002 : TextConst 'DEU=Belegnr.;ENU=Document No.';
      Text031@1000000003 : TextConst 'DEU=Pos.;ENU=Pos.';
      Text032@1000000004 : TextConst 'DEU=Artikelnr.;ENU=Item No.';
      Text033@1000000005 : TextConst 'DEU=Beschreibung;ENU=Description';
      Text034@1000000006 : TextConst 'DEU=Beschreibung 2;ENU=Description 2';
      Text035@1000000008 : TextConst 'DEU=Menge;ENU=Quantity';
      Text036@1000000009 : TextConst 'DEU=VK-Preis;ENU=Unit Price';
      Text037@1000000030 : TextConst 'DEU=MSRP USD';
      Text038@1000000031 : TextConst 'DEU=Einkaufsw„hrungsfaktor;ENU=Currency Factor';
      Text039@1000000010 : TextConst 'DEU=W„hrungscode;ENU=Currency Code';
      Text040@1000000012 : TextConst 'DEU=Betrag;ENU=Amount';
      Text041@1000000017 : TextConst 'DEU=Gesamt;ENU=Total';
      Text042@1000000007 : TextConst 'DEU=Lieferzeit;ENU=Lead time';
      Text050@1000000022 : TextConst 'DEU=Zahlungsziel;ENU=Terms of Payment';
      Text054@1000000021 : TextConst 'DEU=Rechnung an:;ENU=Billt to';
      Text055@1000000020 : TextConst 'DEU=Lieferung an:;ENU=Ship to:';
      Text060@1000000037 : TextConst 'DEU=Angebotserstellung am %1 aktualisiert;ENU=Quoting was updated on %1';
      Text061@1000000038 : TextConst 'DEU=Unser Angebot ist freibleibend;ENU=Our non binding quotation';
      Text062@1000000039 : TextConst 'DEU=Ihre Referenz ist %1;ENU=Your reference is %1';
      ExcelFileExtensionTok@1011 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      TestMode@1051 : Boolean;
      Total@1000000013 : Decimal;
      TotalColumnNo@1000000016 : Integer;
      NewFileDirectory@1000000034 : TextConst 'DEU=F:\Daten NEU\Gemeinsame Ordner\Vertrieb\EMailVersand\';
      SalesOrderNo@1000000000 : Code[20];
      HintText@1000000027 : ARRAY [4] OF Text;
      SystemInfo@1000000040 : Text;
      ClientFileName@1000000043 : Text;
      XlWrkApp@1000000028 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ApplicationClass" RUNONCLIENT;
      XlWrkBk@1000000026 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook" RUNONCLIENT;
      XlWrkSht@1000000025 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Worksheet" RUNONCLIENT;
      XlHelper@1000000041 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Excel.ExcelHelper" RUNONCLIENT;
      SystemeLogo@1000000042 : TextConst 'DEU=F:\Daten NEU\Gemeinsame Ordner\LOGOs\TOPAS\TOPAS_Systeme\Topas_Systems_logo_mini.jpg';

    LOCAL PROCEDURE EnterFilterInCell@5(RowNo@1000 : Integer;Filter@1001 : Text[250];FieldName@1002 : Text[100]);
    BEGIN
      EnterCell(RowNo,1,FieldName,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,Filter,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    PROCEDURE SetUpdateExistingWorksheet@7(UpdateExistingWorksheet@1000 : Boolean);
    BEGIN
      DoUpdateExistingWorksheet := UpdateExistingWorksheet;
    END;

    EVENT XlWrkApp@1000000028::AppEvents_Event_NewWorkbook@424(Wb@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetSelectionChange@425(Sh@1000000001 : Variant;Target@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetBeforeDoubleClick@426(Sh@1000000002 : Variant;Target@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetBeforeRightClick@427(Sh@1000000002 : Variant;Target@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetActivate@428(Sh@1000000000 : Variant);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetDeactivate@429(Sh@1000000000 : Variant);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetCalculate@430(Sh@1000000000 : Variant);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetChange@431(Sh@1000000001 : Variant;Target@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookOpen@432(Wb@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookActivate@433(Wb@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookDeactivate@434(Wb@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookBeforeClose@435(Wb@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookBeforeSave@436(Wb@1000000002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookBeforePrint@437(Wb@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookNewSheet@438(Wb@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Sh@1000000000 : Variant);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookAddinInstall@439(Wb@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookAddinUninstall@440(Wb@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WindowResize@441(Wb@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Wn@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Window");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WindowActivate@442(Wb@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Wn@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Window");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WindowDeactivate@443(Wb@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Wn@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Window");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetFollowHyperlink@444(Sh@1000000001 : Variant;Target@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Hyperlink");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetPivotTableUpdate@445(Sh@1000000001 : Variant;Target@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookPivotTableCloseConnection@446(Wb@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Target@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookPivotTableOpenConnection@447(Wb@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Target@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookSync@448(Wb@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";SyncEventType@1000000000 : DotNet "'office, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Core.MsoSyncEventType");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookBeforeXmlImport@449(Wb@1000000004 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Map@1000000003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";Url@1000000002 : Text;IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookAfterXmlImport@450(Wb@1000000003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Map@1000000002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlXmlImportResult");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookBeforeXmlExport@451(Wb@1000000003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Map@1000000002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";Url@1000000001 : Text;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookAfterXmlExport@452(Wb@1000000003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Map@1000000002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XmlMap";Url@1000000001 : Text;Result@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlXmlExportResult");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookRowsetComplete@453(Wb@1000000003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Description@1000000002 : Text;Sheet@1000000001 : Text;Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::AfterCalculate@454();
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetPivotTableAfterValueChange@455(Sh@1000000002 : Variant;TargetPivotTable@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";TargetRange@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Range");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetPivotTableBeforeAllocateChanges@456(Sh@1000000004 : Variant;TargetPivotTable@1000000003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetPivotTableBeforeCommitChanges@457(Sh@1000000004 : Variant;TargetPivotTable@1000000003 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetPivotTableBeforeDiscardChanges@458(Sh@1000000003 : Variant;TargetPivotTable@1000000002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::ProtectedViewWindowOpen@459(Pvw@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::ProtectedViewWindowBeforeEdit@460(Pvw@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::ProtectedViewWindowBeforeClose@461(Pvw@1000000002 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow";Reason@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.XlProtectedViewCloseReason";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::ProtectedViewWindowResize@462(Pvw@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::ProtectedViewWindowActivate@463(Pvw@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::ProtectedViewWindowDeactivate@464(Pvw@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ProtectedViewWindow");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookAfterSave@465(Wb@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookNewChart@466(Wb@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Ch@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Chart");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetLensGalleryRenderComplete@467(Sh@1000000000 : Variant);
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetTableUpdate@468(Sh@1000000001 : Variant;Target@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.TableObject");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::WorkbookModelChange@469(Wb@1000000001 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.Workbook";Changes@1000000000 : DotNet "'Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c'.Microsoft.Office.Interop.Excel.ModelChanges");
    BEGIN
    END;

    EVENT XlWrkApp@1000000028::SheetBeforeDelete@470(Sh@1000000000 : Variant);
    BEGIN
    END;

    BEGIN
    {
      Excel Vorlage aus Report 7132 Export Item Budget to Excel
    }
    END.
  }
  RDLDATA
  {
  }
}

