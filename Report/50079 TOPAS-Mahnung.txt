OBJECT Report 50079 TOPAS-Mahnung
{
  OBJECT-PROPERTIES
  {
    Date=09.05.18;
    Time=14:04:44;
    Modified=Yes;
    Version List=Beleg,FORNAV3.1.0.1460/1460;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   FIBUEinrichtung.GET;
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   Firmendaten.GET;
                   Firmendaten.CALCFIELDS(Picture,"ISO Logo");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table297;
               DataItemTableView=SORTING(No.);
               ReqFilterHeadingML=DEU=Mahnung;
               OnPreDataItem=BEGIN
                               FormatAdrCodeunit.Company(FirmaAdr,Firmendaten);
                             END;

               OnAfterGetRecord=BEGIN
                                  TOPAS_Funktionen.GetCompanyInformation(CompanyInfo,Firmendaten);
                                  FormatAddr(DebAdr);
                                  IF "Your Reference" = '' THEN
                                    ReferenzText := ''
                                  ELSE
                                    ReferenzText := FIELDNAME("Your Reference");
                                  IF "VAT Registration No." = '' THEN
                                    MWStNrText := ''
                                  ELSE
                                    MWStNrText := FIELDNAME("VAT Registration No.");
                                  IF "Currency Code" = '' THEN BEGIN
                                    FIBUEinrichtung.TESTFIELD("LCY Code");
                                    TotalText := STRSUBSTNO('Total %1',FIBUEinrichtung."LCY Code");
                                    TotalInklMWStText := STRSUBSTNO('Total %1 inkl. MWSt',FIBUEinrichtung."LCY Code");
                                  END ELSE BEGIN
                                    TotalText := STRSUBSTNO('Total %1',"Currency Code");
                                    TotalInklMWStText := STRSUBSTNO('Total %1 inkl. MWSt',"Currency Code");
                                  END;
                                  ReportForNav.PageNo := 1;
                                  IF NOT CurrReport.PREVIEW THEN
                                    IncrNoPrinted;
                                  IF "Currency Code" = '' THEN BEGIN
                                    waehrung := 'EUR';
                                    waehrung2 := 'EUR';
                                  END ELSE BEGIN
                                    waehrung := '[ ' + "Currency Code" + ' ]';
                                    waehrung2 := "Currency Code";
                                  END;
                                  SoR_Text := '';
                                  v_adr_ok := '';
                                END;

               ReqFilterFields=No. }

    { 2   ;1   ;DataItem;                    ;
               DataItemTable=Table18;
               OnAfterGetRecord=BEGIN
                                   // TOPAS  17.03.06  Angang
                                  //IF Debitor."Zlg.-Bedingungscode"='SOR' THEN
                                  // SoR_Text :='Sale or Return - nicht versenden';
                                   // TOPAS  17.03.06  ENDE
                                END;

               DataItemLink=No.=FIELD(Customer No.) }

    { 3   ;1   ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1)) }

    { 1000000000;2;Column;Picture_Firmendaten;
               SourceExpr=Firmendaten.Picture }

    { 4   ;2   ;Column  ;ISOLogo_Firmendaten ;
               SourceExpr=Firmendaten."ISO Logo" }

    { 1000000003;2;Column;CompanyName        ;
               SourceExpr=CompanyInfo[1] }

    { 1000000001;2;Column;CompanyAddress     ;
               SourceExpr=CompanyInfo[2]+ ', ' + CompanyInfo[4] +  ' ' + CompanyInfo[5] }

    { 1000000005;2;Column;CompanyPhone       ;
               SourceExpr=CompanyInfo[6] }

    { 1000000006;2;Column;CompanyFax         ;
               SourceExpr=CompanyInfo[7] }

    { 1000000007;2;Column;CompanyVATRegNo    ;
               SourceExpr=CompanyInfo[8] }

    { 1000000008;2;Column;CompanyRegNo       ;
               SourceExpr=CompanyInfo[9] }

    { 1000000009;2;Column;CompanyVorstand    ;
               SourceExpr=CompanyInfo[10] }

    { 1000000010;2;Column;CompanyARV         ;
               SourceExpr=CompanyInfo[11] }

    { 1000000011;2;Column;CompanyAmtsgericht ;
               SourceExpr=CompanyInfo[12] }

    { 1000000012;2;Column;CompanyWEEERegNo   ;
               SourceExpr=CompanyInfo[13] }

    { 1000000013;2;Column;CompanyPostfach    ;
               SourceExpr=CompanyInfo[14] }

    { 1000000002;2;Column;CompanyHomepage    ;
               SourceExpr=CompanyInfo[15] }

    { 5   ;2   ;Column  ;SoR_Text            ;
               SourceExpr=SoR_Text }

    { 6   ;2   ;Column  ;YourReference_IssuedReminderHeader;
               SourceExpr="Issued Reminder Header"."Your Reference" }

    { 7   ;2   ;Column  ;OurAccountNo_Customer;
               SourceExpr=Customer."Our Account No." }

    { 8   ;2   ;Column  ;VATRegistrationNo_IssuedReminderHeader;
               SourceExpr="Issued Reminder Header"."VAT Registration No." }

    { 9   ;2   ;Column  ;MWStNrText          ;
               SourceExpr=MWStNrText }

    { 10  ;2   ;Column  ;STRSUBSTNO_SeitePct1_FORMAT_ReportForNavPageNo_;
               SourceExpr=STRSUBSTNO('Seite %1',FORMAT(ReportForNav.PageNo)) }

    { 11  ;2   ;Column  ;DebAdr8             ;
               SourceExpr=DebAdr[8] }

    { 12  ;2   ;Column  ;DebAdr7             ;
               SourceExpr=DebAdr[7] }

    { 13  ;2   ;Column  ;DebAdr6             ;
               SourceExpr=DebAdr[6] }

    { 14  ;2   ;Column  ;DebAdr5             ;
               SourceExpr=DebAdr[5] }

    { 15  ;2   ;Column  ;DebAdr4             ;
               SourceExpr=DebAdr[4] }

    { 16  ;2   ;Column  ;DebAdr3             ;
               SourceExpr=DebAdr[3] }

    { 17  ;2   ;Column  ;DebAdr2             ;
               SourceExpr=DebAdr[2] }

    { 18  ;2   ;Column  ;DebAdr1             ;
               SourceExpr=DebAdr[1] }

    { 19  ;2   ;Column  ;CustomerNo_IssuedReminderHeader;
               SourceExpr="Issued Reminder Header"."Customer No." }

    { 20  ;2   ;Column  ;DocumentDate_IssuedReminderHeader;
               SourceExpr="Issued Reminder Header"."Document Date" }

    { 21  ;2   ;Column  ;No_IssuedReminderHeader;
               SourceExpr="Issued Reminder Header"."No." }

    { 22  ;2   ;Column  ;ReminderLevel_IssuedReminderHeader;
               SourceExpr="Issued Reminder Header"."Reminder Level" }

    { 23  ;2   ;DataItem;Vortext             ;
               DataItemTable=Table298;
               OnPreDataItem=BEGIN
                               //lshanf c01
                               gzeile := 0;
                               //lshend c01
                             END;

               OnAfterGetRecord=BEGIN
                                  //lshanf c01
                                  IF Type <> 0 THEN
                                    CurrReport.BREAK
                                  ELSE
                                    gzeile := "Line No.";
                                  //lshend c01
                                END;

               DataItemLinkReference=Issued Reminder Header;
               DataItemLink=Reminder No.=FIELD(No.) }

    { 24  ;3   ;Column  ;Description_Vortext ;
               SourceExpr=Description }

    { 25  ;2   ;DataItem;                    ;
               DataItemTable=Table298;
               DataItemTableView=SORTING(Reminder No.,Line No.);
               OnPreDataItem=BEGIN
                               //lshanf c01
                               SETFILTER("Line No.",'>%1',gzeile);
                               //lshend c01
                               IF FIND('-') THEN BEGIN
                                 StartZeileNr := 0;
                                 REPEAT
                                   Fortsetzen := Type = Type::" ";
                                   IF Fortsetzen AND (Description = '') THEN
                                     StartZeileNr := "Line No.";
                                 UNTIL (NEXT = 0) OR NOT Fortsetzen;
                               END;
                               IF FIND('+') THEN BEGIN
                                 EndeZeileNr := "Line No." + 1;
                                 REPEAT
                                   Fortsetzen := Type = Type::" ";
                                   IF Fortsetzen AND (Description = '') THEN
                                     EndeZeileNr := "Line No.";
                                 UNTIL (NEXT(-1) = 0) OR NOT Fortsetzen;
                               END;
                               MWSTBetragZeile.DELETEALL;
                               //lshanf c01
                               {
                               SETFILTER("Zeilennr.",'<%1',EndeZeileNr);
                               }
                               SETFILTER("Line No.",'>%1&<%2',gzeile,EndeZeileNr);
                               //lshend
                             END;

               OnAfterGetRecord=BEGIN
                                  MWSTBetragZeile.INIT;
                                  MWSTBetragZeile."VAT %" := "VAT %";
                                  MWSTBetragZeile."VAT Base" := Amount;
                                  MWSTBetragZeile."VAT Amount" := "VAT Amount";
                                  MWSTBetragZeile."Amount Including VAT" := Amount + "VAT Amount";
                                  MWSTBetragZeile.InsertLine;
                                  CASE Type OF
                                    Type::"G/L Account":
                                      "Remaining Amount" := Amount;
                                    Type::"Customer Ledger Entry":
                                      MahnungZinsBetrag := Amount;
                                  END;
                                  // Neu TOPAS 2.9.2014 UB  Prfen, ob Rechnungsanschrift abweicht von Mahnungsanschrift
                                  verkaufsrechnungskopf.RESET;
                                  verkaufsrechnungskopf.SETFILTER(verkaufsrechnungskopf."No.",'%1',"Issued Reminder Line"."Document No.");
                                  IF verkaufsrechnungskopf.FINDFIRST THEN BEGIN
                                    IF "Issued Reminder Header".Name <> verkaufsrechnungskopf."Bill-to Name" THEN v_adr_ok := '*';
                                    IF "Issued Reminder Header"."Name 2" <> verkaufsrechnungskopf."Bill-to Name 2" THEN v_adr_ok := '*';
                                    IF "Issued Reminder Header".Address <> verkaufsrechnungskopf."Bill-to Address" THEN v_adr_ok := '*';
                                    IF "Issued Reminder Header"."Address 2" <> verkaufsrechnungskopf."Bill-to Address 2" THEN v_adr_ok := '*';
                                    IF "Issued Reminder Header"."Post Code" <> verkaufsrechnungskopf."Bill-to Post Code" THEN v_adr_ok := '*';
                                    IF "Issued Reminder Header".City <> verkaufsrechnungskopf."Bill-to City" THEN v_adr_ok := '*';
                                    IF "Issued Reminder Header".County <> verkaufsrechnungskopf."Bill-to County" THEN v_adr_ok := '*';
                                    IF "Issued Reminder Header"."Country/Region Code" <> verkaufsrechnungskopf."Bill-to Country/Region Code" THEN v_adr_ok := '*';
                                  END;
                                END;

               DataItemLinkReference=Issued Reminder Header;
               DataItemLink=Reminder No.=FIELD(No.) }

    { 26  ;3   ;Column  ;IssuedReminderLineFIELDCAPTION_DocumentType;
               SourceExpr="Issued Reminder Line".FIELDCAPTION("Document Type") }

    { 27  ;3   ;Column  ;IssuedReminderLineFIELDCAPTION_RemainingAmount;
               SourceExpr="Issued Reminder Line".FIELDCAPTION("Remaining Amount") }

    { 28  ;3   ;Column  ;IssuedReminderLineFIELDCAPTION_DocumentNo;
               SourceExpr="Issued Reminder Line".FIELDCAPTION("Document No.") }

    { 29  ;3   ;Column  ;waehrung2           ;
               SourceExpr=waehrung2 }

    { 30  ;3   ;Column  ;RemainingAmount_IssuedReminderLine;
               SourceExpr="Remaining Amount";
               AutoFormatType=1;
               AutoFormatExpr="Issued Reminder Line".GetCurrencyCodeFromHeader }

    { 31  ;3   ;Column  ;Description_IssuedReminderLine;
               SourceExpr=Description }

    { 32  ;3   ;Column  ;NoofReminders_IssuedReminderLine;
               SourceExpr="No. of Reminders" }

    { 33  ;3   ;Column  ;DocumentType_IssuedReminderLine;
               SourceExpr="Document Type" }

    { 34  ;3   ;Column  ;OriginalAmount_IssuedReminderLine;
               SourceExpr="Original Amount";
               AutoFormatType=1;
               AutoFormatExpr="Issued Reminder Line".GetCurrencyCodeFromHeader }

    { 35  ;3   ;Column  ;DueDate_IssuedReminderLine;
               SourceExpr="Due Date" }

    { 36  ;3   ;Column  ;DocumentNo_IssuedReminderLine;
               SourceExpr="Document No." }

    { 37  ;3   ;Column  ;DocumentDate_IssuedReminderLine;
               SourceExpr="Document Date" }

    { 38  ;3   ;Column  ;v_adr_ok            ;
               SourceExpr=v_adr_ok }

    { 39  ;3   ;Column  ;TotalText           ;
               SourceExpr=TotalText }

    { 40  ;3   ;Column  ;RemainingAmount_MahnungZinsBetrag;
               SourceExpr="Remaining Amount" + MahnungZinsBetrag;
               AutoFormatType=1;
               AutoFormatExpr="Issued Reminder Line".GetCurrencyCodeFromHeader }

    { 41  ;3   ;Column  ;VATAmount_IssuedReminderLine_Lbl;
               SourceExpr="Issued Reminder Line".FIELDCAPTION("VAT Amount") }

    { 42  ;3   ;Column  ;VATAmount_IssuedReminderLine;
               SourceExpr="VAT Amount";
               AutoFormatType=1;
               AutoFormatExpr="Issued Reminder Line".GetCurrencyCodeFromHeader }

    { 43  ;3   ;Column  ;TotalInklMWStText   ;
               SourceExpr=TotalInklMWStText }

    { 44  ;3   ;Column  ;RemainingAmount_MahnungZinsBetrag_VATAmount;
               SourceExpr="Remaining Amount" + MahnungZinsBetrag + "VAT Amount";
               AutoFormatType=1;
               AutoFormatExpr="Issued Reminder Line".GetCurrencyCodeFromHeader }

    { 45  ;2   ;DataItem;RegMahnungZeile2    ;
               DataItemTable=Table298;
               DataItemTableView=SORTING(Reminder No.,Line No.);
               OnPreDataItem=BEGIN
                               SETFILTER("Line No.",'>=%1',EndeZeileNr);
                             END;

               DataItemLinkReference=Issued Reminder Header;
               DataItemLink=Reminder No.=FIELD(No.) }

    { 46  ;3   ;Column  ;Description_RegMahnungZeile2;
               SourceExpr=Description }

    { 47  ;2   ;DataItem;MWStZ„hler          ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               IF "Issued Reminder Line"."VAT Amount" = 0 THEN
                                 CurrReport.BREAK;
                               SETRANGE(Number,1,MWSTBetragZeile.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  MWSTBetragZeile.GetLine(Number);
                                END;
                                 }

    { 48  ;3   ;Column  ;VATBase_MWSTBetragZeile;
               SourceExpr=MWSTBetragZeile."VAT Base";
               AutoFormatType=1;
               AutoFormatExpr="Issued Reminder Line".GetCurrencyCodeFromHeader }

    { 49  ;3   ;Column  ;VATAmount_MWSTBetragZeile;
               SourceExpr=MWSTBetragZeile."VAT Amount";
               AutoFormatType=1;
               AutoFormatExpr="Issued Reminder Line".GetCurrencyCodeFromHeader }

    { 50  ;3   ;Column  ;AmountIncludingVAT_MWSTBetragZeile;
               SourceExpr=MWSTBetragZeile."Amount Including VAT";
               AutoFormatType=1;
               AutoFormatExpr="Issued Reminder Line".GetCurrencyCodeFromHeader }

    { 51  ;3   ;Column  ;VATPct_MWSTBetragZeile;
               SourceExpr=MWSTBetragZeile."VAT %" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      FIBUEinrichtung@1140000 : Record 98;
      Firmendaten@1140001 : Record 79;
      MWSTBetragZeile@1140002 : TEMPORARY Record 290;
      mahnzeile@1000000003 : Record 298;
      verkaufsrechnungskopf@1000000002 : Record 112;
      FormatAdrCodeunit@1140003 : Codeunit 365;
      TOPAS_Funktionen@1000000001 : Codeunit 50006;
      CompanyInfo@1000000000 : ARRAY [15] OF Text;
      DebAdr@1140004 : ARRAY [8] OF Text[50];
      FirmaAdr@1140005 : ARRAY [8] OF Text[50];
      MWStNrText@1140006 : Text[30];
      ReferenzText@1140007 : Text[30];
      TotalText@1140008 : Text[50];
      TotalInklMWStText@1140009 : Text[50];
      MahnungZinsBetrag@1140010 : Decimal;
      StartZeileNr@1140011 : Integer;
      EndeZeileNr@1140012 : Integer;
      Fortsetzen@1140013 : Boolean;
      "-------lsh---------"@1140014 : Integer;
      gzeile@1140015 : Integer;
      waehrung2@1140016 : Code[10];
      waehrung@1140017 : Code[10];
      SoR_Text@1140018 : Text[40];
      v_adr_ok@1140021 : Text[5];
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionInteger_Header1@5025(VAR Integer@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer DO BEGIN
        SoR_Text := '';
        IF mahnzeile."Document Type" = mahnzeile."Document Type"::Invoice THEN BEGIN
          mahnzeile.SETFILTER(mahnzeile."Reminder No.",'%1',"Issued Reminder Header"."No.");
          mahnzeile.FIND('-');
          verkaufsrechnungskopf.SETFILTER(verkaufsrechnungskopf."No.",'%1',mahnzeile."Document No.");
          verkaufsrechnungskopf.FIND('-');
          IF verkaufsrechnungskopf."Payment Terms Code" = 'SOR' THEN BEGIN
            SoR_Text := 'Sale or Return - nicht versenden!' ;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionIssuedReminderLine_Body7@5026(VAR "Issued Reminder Line"@1000000000 : Record 298);
    BEGIN
      WITH "Issued Reminder Line" DO BEGIN
        ReportForNav.ShowOutput := "Line No." <= StartZeileNr;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionIssuedReminderLine_Body8@5027(VAR "Issued Reminder Line"@1000000000 : Record 298);
    BEGIN
      WITH "Issued Reminder Line" DO BEGIN
        ReportForNav.ShowOutput := ("Line No." > StartZeileNr) AND (Type = Type::"Customer Ledger Entry");
      END;
    END;

    LOCAL PROCEDURE OnPreSectionIssuedReminderLine_Body9@5028(VAR "Issued Reminder Line"@1000000000 : Record 298);
    BEGIN
      WITH "Issued Reminder Line" DO BEGIN
        ReportForNav.ShowOutput := ("Line No." > StartZeileNr) AND (Type <> Type::"Customer Ledger Entry");
      END;
    END;

    LOCAL PROCEDURE OnPreSectionIssuedReminderLine_Footer12@5029(VAR "Issued Reminder Line"@1000000000 : Record 298);
    BEGIN
      WITH "Issued Reminder Line" DO BEGIN
        ReportForNav.ShowOutput := MahnungZinsBetrag <> 0;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionIssuedReminderLine_Footer14@5030(VAR "Issued Reminder Line"@1000000000 : Record 298);
    BEGIN
      WITH "Issued Reminder Line" DO BEGIN
        ReportForNav.ShowOutput := "VAT Amount" <> 0
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Integer': CASE SectionId OF
          'Header1': OnPreSectionInteger_Header1(Integer);
        END;
        'IssuedReminderLine': CASE SectionId OF
          'Body7': OnPreSectionIssuedReminderLine_Body7("Issued Reminder Line");
          'Body8': OnPreSectionIssuedReminderLine_Body8("Issued Reminder Line");
          'Body9': OnPreSectionIssuedReminderLine_Body9("Issued Reminder Line");
          'Footer12': OnPreSectionIssuedReminderLine_Footer12("Issued Reminder Line");
          'Footer14': OnPreSectionIssuedReminderLine_Footer14("Issued Reminder Line");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      CASE DataItemId OF
        'IssuedReminderLine': WITH "Issued Reminder Line" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Remaining Amount");
                ReportForNav.AddTotal(DataItemId,1,"VAT Amount");
                ReportForNav.AddTotal(DataItemId,2,MahnungZinsBetrag);
              END;
           'Restore': BEGIN
                 "Remaining Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "VAT Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 MahnungZinsBetrag := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;  'MWStZahler': WITH MWStZ„hler DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,MWSTBetragZeile."VAT Base");
                ReportForNav.AddTotal(DataItemId,1,MWSTBetragZeile."VAT Amount");
                ReportForNav.AddTotal(DataItemId,2,MWSTBetragZeile."Amount Including VAT");
              END;
           'Restore': BEGIN
                 MWSTBetragZeile."VAT Base" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 MWSTBetragZeile."VAT Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 MWSTBetragZeile."Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      copyright Lederer Systemhaus GmbH
      Žnderungen Standard
      291299 pl
                   Layout angepasst
      c01/di/gl/se Vortext vor šberschrift
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

