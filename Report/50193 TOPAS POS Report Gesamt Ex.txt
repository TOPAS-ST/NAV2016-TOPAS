OBJECT Report 50193 TOPAS POS Report Gesamt Ex
{
  OBJECT-PROPERTIES
  {
    Date=08.02.18;
    Time=13:52:15;
    Modified=Yes;
    Version List=TOPAS,FORNAV2.0.0.1189/1189;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ReportForNav := ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  Firmendaten.GET;
                  vkrk := "Sales Invoice Header".GETFILTERS;
                  vkrz := "Sales Invoice Line".GETFILTERS;
                  vkgk := "Sales Cr.Memo Header".GETFILTERS;
                  vkgz := "Sales Cr.Memo Line".GETFILTERS;
                  artre := Item.GETFILTERS;
                  artgu := "<Artikel1>".GETFILTERS;
                  //ArtDatumFilter := Artikel.GETFILTER(Datumsfilter);

                  CreateExcel;

                  ReportForNav.OpenDesigner := ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   FinishExcel(Text001);
                   ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table112;
               OnPreDataItem=BEGIN
                               RecNo := 0;
                               TotalRecNo := "Sales Invoice Header".COUNT;
                             END;

               ReqFilterFields=Posting Date }

    { 2   ;1   ;Column  ;STRSUBSTNO_artgu    ;
               SourceExpr=STRSUBSTNO(artgu) }

    { 3   ;1   ;Column  ;STRSUBSTNO_artre    ;
               SourceExpr=STRSUBSTNO(artre) }

    { 4   ;1   ;Column  ;STRSUBSTNO_vkrz     ;
               SourceExpr=STRSUBSTNO(vkrz) }

    { 5   ;1   ;Column  ;STRSUBSTNO_vkgk     ;
               SourceExpr=STRSUBSTNO(vkgk) }

    { 6   ;1   ;Column  ;STRSUBSTNO_vkgz     ;
               SourceExpr=STRSUBSTNO(vkgz) }

    { 7   ;1   ;Column  ;STRSUBSTNO_vkrk     ;
               SourceExpr=STRSUBSTNO(vkrk) }

    { 8   ;1   ;Column  ;TODAY_0_4           ;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 9   ;1   ;Column  ;USERID              ;
               SourceExpr=USERID }

    { 10  ;1   ;Column  ;ReportForNavPageNo  ;
               SourceExpr=ReportForNav.PageNo }

    { 11  ;1   ;Column  ;betragmw2           ;
               DecimalPlaces=2:2;
               SourceExpr=betragmw2 }

    { 12  ;1   ;DataItem;                    ;
               DataItemTable=Table113;
               ReqFilterFields=Manufacturer Code;
               DataItemLink=Document No.=FIELD(No.) }

    { 13  ;2   ;DataItem;                    ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  v_endkunde := ' ';
                                  IF "Sales Invoice Header"."Currency Factor" <> 0 THEN BEGIN
                                    betragmw := ("Sales Invoice Line".Amount) / ("Sales Invoice Header"."Currency Factor");
                                    betragmw2 := ("Sales Invoice Line".Amount) / ("Sales Invoice Header"."Currency Factor");
                                  END ELSE BEGIN
                                    betragmw := "Sales Invoice Line".Amount;
                                    betragmw2 := "Sales Invoice Line".Amount;
                                  END;
                                  IF "Sales Invoice Header"."Currency Code" = '' THEN
                                    waehrung := 'EUR'
                                  ELSE
                                    waehrung := "Sales Invoice Header"."Currency Code";
                                  Item.CALCFIELDS("DC-Preis");
                                  IF (("Sales Invoice Line".Quantity > 0) AND (("Sales Invoice Line"."Location Code" = 'ZENT')
                                  OR ("Sales Invoice Line"."Location Code" = 'KONSI'))) THEN BEGIN
                                    ColumnNo := 1;
                                    EnterCell(RowNo,ColumnNo,Firmendaten.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,COPYSTR("Sales Invoice Header"."Bill-to Name",1,29),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Invoice Header"."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Invoice Line"."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Invoice Line".Quantity),'',FALSE,FALSE,FALSE,'#,##',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Invoice Line"."Unit Price"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,waehrung,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Invoice Header"."Posting Date"),'',FALSE,FALSE,FALSE,'yyyymmdd',TempExcelBuffer."Cell Type"::Date);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT(betragmw),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,COPYSTR("Sales Invoice Line".Endkunde,1,29),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

                                    "Ek-Preise".RESET;
                                    "Ek-Preise".SETFILTER("Item No.",'%1',Item."No.");
                                    IF "Ek-Preise".FINDLAST THEN BEGIN
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,FORMAT("Ek-Preise"."Direct Unit Cost"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                    END ELSE BEGIN
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,FORMAT(0),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                    END;
                                    quotedaten.SETFILTER("Quotenr.",'%1',"Sales Invoice Line"."Quotenr.");        //Spezial Buy Price
                                    IF quotedaten.FINDFIRST THEN BEGIN
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,FORMAT(quotedaten.Quotepreis),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,quotedaten."Quotenr. Hersteller",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,quotedaten.Genehmigungstext,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,quotedaten.Validationcode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    END;
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Invoice Line"."DC-Preis (EKW)"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Invoice Line".Einkaufsw„hrungscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    RowNo := RowNo + 1;
                                    RecNo := RecNo + 1;
                                  END;
                                END;

               DataItemLink=No.=FIELD(No.) }

    { 14  ;3   ;Column  ;betragmw            ;
               DecimalPlaces=2:2;
               SourceExpr=betragmw }

    { 15  ;3   ;Column  ;PostingDate_SalesInvoiceHeader;
               SourceExpr="Sales Invoice Header"."Posting Date" }

    { 16  ;3   ;Column  ;waehrung            ;
               SourceExpr=waehrung }

    { 17  ;3   ;Column  ;Amount_SalesInvoiceLine;
               DecimalPlaces=2:2;
               SourceExpr="Sales Invoice Line".Amount }

    { 18  ;3   ;Column  ;UnitPrice_SalesInvoiceLine;
               DecimalPlaces=2:5;
               SourceExpr="Sales Invoice Line"."Unit Price" }

    { 19  ;3   ;Column  ;No_SalesInvoiceHeader;
               SourceExpr="Sales Invoice Header"."No." }

    { 20  ;3   ;Column  ;No_SalesInvoiceLine ;
               SourceExpr="Sales Invoice Line"."No." }

    { 21  ;3   ;Column  ;Quantity_SalesInvoiceLine;
               SourceExpr="Sales Invoice Line".Quantity }

    { 22  ;3   ;Column  ;Bill_toName_SalesInvoiceHeader;
               SourceExpr="Sales Invoice Header"."Bill-to Name" }

    { 23  ;3   ;Column  ;Sell_toCustomerNo_SalesInvoiceHeader;
               SourceExpr="Sales Invoice Header"."Sell-to Customer No." }

    { 24  ;    ;DataItem;                    ;
               DataItemTable=Table114;
               OnPreDataItem=BEGIN
                               RecNo := 0;
                               TotalRecNo := "Sales Cr.Memo Header".COUNT;
                             END;

               ReqFilterFields=Posting Date }

    { 25  ;1   ;Column  ;betragmw22          ;
               DecimalPlaces=2:2;
               SourceExpr=betragmw2 }

    { 26  ;1   ;DataItem;                    ;
               DataItemTable=Table115;
               ReqFilterFields=Manufacturer Code;
               DataItemLink=Document No.=FIELD(No.) }

    { 27  ;2   ;DataItem;<Artikel1>          ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  v_endkunde := ' ';
                                  IF "Sales Cr.Memo Header"."Currency Factor" <> 0 THEN BEGIN
                                    betragmw := ("Sales Cr.Memo Line".Amount) / ("Sales Cr.Memo Header"."Currency Factor");
                                    betragmw2 := ("Sales Cr.Memo Line".Amount) / ("Sales Cr.Memo Header"."Currency Factor");
                                  END ELSE BEGIN
                                    betragmw := "Sales Cr.Memo Line".Amount;
                                    betragmw2 := "Sales Cr.Memo Line".Amount;
                                  END;
                                  IF "Sales Cr.Memo Header"."Currency Code" = '' THEN
                                    waehrung := 'EUR'
                                  ELSE
                                    waehrung := "Sales Cr.Memo Header"."Currency Code";
                                  Item.CALCFIELDS("DC-Preis");
                                  IF (("Sales Cr.Memo Line".Quantity > 1) AND (("Sales Cr.Memo Line"."Location Code" = 'ZENT')
                                  OR ("Sales Cr.Memo Line"."Location Code" = 'ZENT'))) THEN BEGIN
                                    ColumnNo := 1;
                                    EnterCell(RowNo,ColumnNo,Firmendaten.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,COPYSTR("Sales Cr.Memo Header"."Bill-to Name",1,29),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Cr.Memo Header"."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Cr.Memo Line"."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Cr.Memo Line".Quantity),'',FALSE,FALSE,FALSE,'#,##',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Cr.Memo Line"."Unit Price"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,waehrung,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Cr.Memo Header"."Posting Date"),'',FALSE,FALSE,FALSE,'yyyymmdd',TempExcelBuffer."Cell Type"::Date);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT(betragmw * (-1)),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,COPYSTR( "Sales Cr.Memo Line".Endkunde,1,29),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

                                    "Ek-Preise".RESET;
                                    "Ek-Preise".SETFILTER("Item No.",'%1',Item."No.");
                                    IF "Ek-Preise".FINDLAST THEN BEGIN
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,FORMAT("Ek-Preise"."Direct Unit Cost"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                    END ELSE BEGIN
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,FORMAT(0),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                    END;
                                    quotedaten.SETFILTER("Quotenr.",'%1',"Sales Cr.Memo Line"."Quotenr.");        //Spezial Buy Price
                                    IF quotedaten.FINDFIRST THEN BEGIN
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,FORMAT(quotedaten.Quotepreis),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,quotedaten."Quotenr. Hersteller",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,quotedaten.Genehmigungstext,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,quotedaten.Validationcode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    END;
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Cr.Memo Line"."DC-Preis (EKW)"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Cr.Memo Line".Einkaufsw„hrungscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    RowNo := RowNo + 1;
                                    RecNo := RecNo + 1;
                                  END;
                                END;

               DataItemLink=No.=FIELD(No.) }

    { 28  ;3   ;Column  ;betragmw3           ;
               DecimalPlaces=2:2;
               SourceExpr=betragmw }

    { 29  ;3   ;Column  ;PostingDate_SalesCrMemoHeader;
               SourceExpr="Sales Cr.Memo Header"."Posting Date" }

    { 30  ;3   ;Column  ;waehrung3           ;
               SourceExpr=waehrung }

    { 31  ;3   ;Column  ;Amount_SalesCrMemoLine;
               DecimalPlaces=2:2;
               SourceExpr="Sales Cr.Memo Line".Amount }

    { 32  ;3   ;Column  ;UnitPrice_SalesCrMemoLine;
               DecimalPlaces=2:5;
               SourceExpr="Sales Cr.Memo Line"."Unit Price" }

    { 33  ;3   ;Column  ;No_SalesCrMemoHeader;
               SourceExpr="Sales Cr.Memo Header"."No." }

    { 34  ;3   ;Column  ;No_SalesCrMemoLine  ;
               SourceExpr="Sales Cr.Memo Line"."No." }

    { 35  ;3   ;Column  ;Quantity_SalesCrMemoLine;
               SourceExpr="Sales Cr.Memo Line".Quantity }

    { 36  ;3   ;Column  ;Bill_toName_SalesCrMemoHeader;
               SourceExpr="Sales Cr.Memo Header"."Bill-to Name" }

    { 37  ;3   ;Column  ;Sell_toCustomerNo_SalesCrMemoHeader;
               SourceExpr="Sales Cr.Memo Header"."Sell-to Customer No." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      quotedaten@1000000001 : Record 50014;
      "Ek-Preise"@1000000000 : Record 7012;
      Firmendaten@1000000003 : Record 79;
      TempExcelBuffer@1000000019 : TEMPORARY Record 370;
      FileMgt@1000000013 : Codeunit 419;
      betragmw@1140007 : Decimal;
      waehrung@1140008 : Text[30];
      betragmw2@1140010 : Decimal;
      waehrung2@1140011 : Text[30];
      vkrk@1140012 : Text[90];
      vkrz@1140013 : Text[30];
      vkgk@1140014 : Text[90];
      vkgz@1000000002 : Text[30];
      v_endkunde@1140018 : Text[30];
      artre@1000000020 : Text[30];
      artgu@1140021 : Text[30];
      ServerFileName@1000000012 : Text;
      SheetName@1000000011 : Text[250];
      DoUpdateExistingWorksheet@1000000010 : Boolean;
      Testmode@1000000009 : Boolean;
      Window@1000000008 : Dialog;
      RecNo@1000000007 : Integer;
      TotalRecNo@1000000006 : Integer;
      RowNo@1000000005 : Integer;
      ColumnNo@1000000004 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;
      Text000@1000000018 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000017 : TextConst 'DEU=POS';
      Text002@1000000016 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text003@1000000015 : TextConst 'DEU=Excel Export erfolgreich abgeschlossen.';
      ExcelFileExtensionTok@1000000014 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';

    LOCAL PROCEDURE OnPreSectionSalesInvoiceHeader_Body3@5030(VAR "Sales Invoice Header"@1000000000 : Record 112);
    BEGIN
      WITH "Sales Invoice Header" DO BEGIN
        // ReportForNav.ShowOutput((Verkaufsrechnungszeile.Menge > 0) AND (Verkaufsrechnungszeile."VK-Preis" > 0));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body8@5031(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput(("Sales Invoice Line".Quantity > 0) AND ("Sales Invoice Line"."Unit Price" > 0));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionArtikel1_Body12@5032(VAR "<Artikel1>"@1000000000 : Record 27);
    BEGIN
      WITH "<Artikel1>" DO BEGIN
        ReportForNav.ShowOutput(("Sales Cr.Memo Line".Quantity > 0) AND ("Sales Cr.Memo Line"."Unit Price" > 0));
      END;
    END;

    PROCEDURE CreateExcel@1140000();
    BEGIN
      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;

      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);

      RowNo := 1;
      //šberschriften
      EnterCell(RowNo,1,'Disti Name','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Customer Name','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Disti Invoice #','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Part Number','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Qty Sold','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Resale Price','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Currency of Resale Price','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Date of Sale','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'Total Resale','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'End Customer','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'Disti Cost','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'Quote Price','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'AUCD Quote','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,'Information','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'Validationcode','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);

      RowNo := 2;
    END;

    LOCAL PROCEDURE FinishExcel@1000000018(SheetName@1000000000 : Text);
    BEGIN
      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN
          TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet(SheetName,COMPANYNAME,USERID);
        //TempExcelBuffer.SetWidth(1,'A',20);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
          //TempExcelBuffer.OpenExcelWithoutAutoFit('','','',TRUE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'SalesInvoiceHeader': CASE SectionId OF
          'Body3': OnPreSectionSalesInvoiceHeader_Body3("Sales Invoice Header");
        END;
        'Item': CASE SectionId OF
          'Body8': OnPreSectionItem_Body8(Item);
        END;
        'Artikel1': CASE SectionId OF
          'Body12': OnPreSectionArtikel1_Body12("<Artikel1>");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'SalesInvoiceHeader': WITH "Sales Invoice Header" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,betragmw);
                ReportForNav.AddTotal(DataItemId,1,betragmw2);
              END;
           'Restore': BEGIN
                 betragmw := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 betragmw2 := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'SalesInvoiceLine': WITH "Sales Invoice Line" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,betragmw);
                ReportForNav.AddTotal(DataItemId,1,betragmw2);
              END;
           'Restore': BEGIN
                 betragmw := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 betragmw2 := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Item': WITH Item DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,betragmw);
                ReportForNav.AddTotal(DataItemId,1,betragmw2);
              END;
           'Restore': BEGIN
                 betragmw := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 betragmw2 := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'SalesCrMemoHeader': WITH "Sales Cr.Memo Header" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,betragmw);
                ReportForNav.AddTotal(DataItemId,1,betragmw2);
              END;
           'Restore': BEGIN
                 betragmw := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 betragmw2 := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'SalesCrMemoLine': WITH "Sales Cr.Memo Line" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,betragmw);
                ReportForNav.AddTotal(DataItemId,1,betragmw2);
              END;
           'Restore': BEGIN
                 betragmw := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 betragmw2 := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Artikel1': WITH "<Artikel1>" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,betragmw);
                ReportForNav.AddTotal(DataItemId,1,betragmw2);
              END;
           'Restore': BEGIN
                 betragmw := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 betragmw2 := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      ########################################################
      14.02.18 ST - neue Excel Technik aber ohne Window Update
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>3e0942d6-25cd-4863-b55a-a72f5d0ec7d1</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>d1b04a55-f715-4795-b471-819708ca53ee</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="STRSUBSTNO_artgu">
          <DataField>STRSUBSTNO_artgu</DataField>
        </Field>
        <Field Name="STRSUBSTNO_artre">
          <DataField>STRSUBSTNO_artre</DataField>
        </Field>
        <Field Name="STRSUBSTNO_vkrz">
          <DataField>STRSUBSTNO_vkrz</DataField>
        </Field>
        <Field Name="STRSUBSTNO_vkgk">
          <DataField>STRSUBSTNO_vkgk</DataField>
        </Field>
        <Field Name="STRSUBSTNO_vkgz">
          <DataField>STRSUBSTNO_vkgz</DataField>
        </Field>
        <Field Name="STRSUBSTNO_vkrk">
          <DataField>STRSUBSTNO_vkrk</DataField>
        </Field>
        <Field Name="TODAY_0_4">
          <DataField>TODAY_0_4</DataField>
        </Field>
        <Field Name="USERID">
          <DataField>USERID</DataField>
        </Field>
        <Field Name="ReportForNavPageNo">
          <DataField>ReportForNavPageNo</DataField>
        </Field>
        <Field Name="betragmw2">
          <DataField>betragmw2</DataField>
        </Field>
        <Field Name="betragmw2Format">
          <DataField>betragmw2Format</DataField>
        </Field>
        <Field Name="betragmw">
          <DataField>betragmw</DataField>
        </Field>
        <Field Name="betragmwFormat">
          <DataField>betragmwFormat</DataField>
        </Field>
        <Field Name="PostingDate_SalesInvoiceHeader">
          <DataField>PostingDate_SalesInvoiceHeader</DataField>
        </Field>
        <Field Name="waehrung">
          <DataField>waehrung</DataField>
        </Field>
        <Field Name="Amount_SalesInvoiceLine">
          <DataField>Amount_SalesInvoiceLine</DataField>
        </Field>
        <Field Name="Amount_SalesInvoiceLineFormat">
          <DataField>Amount_SalesInvoiceLineFormat</DataField>
        </Field>
        <Field Name="UnitPrice_SalesInvoiceLine">
          <DataField>UnitPrice_SalesInvoiceLine</DataField>
        </Field>
        <Field Name="UnitPrice_SalesInvoiceLineFormat">
          <DataField>UnitPrice_SalesInvoiceLineFormat</DataField>
        </Field>
        <Field Name="No_SalesInvoiceHeader">
          <DataField>No_SalesInvoiceHeader</DataField>
        </Field>
        <Field Name="No_SalesInvoiceLine">
          <DataField>No_SalesInvoiceLine</DataField>
        </Field>
        <Field Name="Quantity_SalesInvoiceLine">
          <DataField>Quantity_SalesInvoiceLine</DataField>
        </Field>
        <Field Name="Quantity_SalesInvoiceLineFormat">
          <DataField>Quantity_SalesInvoiceLineFormat</DataField>
        </Field>
        <Field Name="Bill_toName_SalesInvoiceHeader">
          <DataField>Bill_toName_SalesInvoiceHeader</DataField>
        </Field>
        <Field Name="Sell_toCustomerNo_SalesInvoiceHeader">
          <DataField>Sell_toCustomerNo_SalesInvoiceHeader</DataField>
        </Field>
        <Field Name="betragmw22">
          <DataField>betragmw22</DataField>
        </Field>
        <Field Name="betragmw22Format">
          <DataField>betragmw22Format</DataField>
        </Field>
        <Field Name="betragmw3">
          <DataField>betragmw3</DataField>
        </Field>
        <Field Name="betragmw3Format">
          <DataField>betragmw3Format</DataField>
        </Field>
        <Field Name="PostingDate_SalesCrMemoHeader">
          <DataField>PostingDate_SalesCrMemoHeader</DataField>
        </Field>
        <Field Name="waehrung3">
          <DataField>waehrung3</DataField>
        </Field>
        <Field Name="Amount_SalesCrMemoLine">
          <DataField>Amount_SalesCrMemoLine</DataField>
        </Field>
        <Field Name="Amount_SalesCrMemoLineFormat">
          <DataField>Amount_SalesCrMemoLineFormat</DataField>
        </Field>
        <Field Name="UnitPrice_SalesCrMemoLine">
          <DataField>UnitPrice_SalesCrMemoLine</DataField>
        </Field>
        <Field Name="UnitPrice_SalesCrMemoLineFormat">
          <DataField>UnitPrice_SalesCrMemoLineFormat</DataField>
        </Field>
        <Field Name="No_SalesCrMemoHeader">
          <DataField>No_SalesCrMemoHeader</DataField>
        </Field>
        <Field Name="No_SalesCrMemoLine">
          <DataField>No_SalesCrMemoLine</DataField>
        </Field>
        <Field Name="Quantity_SalesCrMemoLine">
          <DataField>Quantity_SalesCrMemoLine</DataField>
        </Field>
        <Field Name="Quantity_SalesCrMemoLineFormat">
          <DataField>Quantity_SalesCrMemoLineFormat</DataField>
        </Field>
        <Field Name="Bill_toName_SalesCrMemoHeader">
          <DataField>Bill_toName_SalesCrMemoHeader</DataField>
        </Field>
        <Field Name="Sell_toCustomerNo_SalesCrMemoHeader">
          <DataField>Sell_toCustomerNo_SalesCrMemoHeader</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

