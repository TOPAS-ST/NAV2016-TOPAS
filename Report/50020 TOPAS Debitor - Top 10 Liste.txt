OBJECT Report 50020 TOPAS Debitor - Top 10 Liste
{
  OBJECT-PROPERTIES
  {
    Date=23.04.18;
    Time=17:12:28;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV2.0.0.1189/1189;
  }
  PROPERTIES
  {
    CaptionML=[DEU=TOPAS Debitor - Top 10 Liste;
               ENU=TOPAS Customer - Top 10 List];
    OnInitReport=BEGIN
                   ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  //Excel Definition
                  filter := 'Datum: ' + FORMAT(StartBuchdatum) + ' bis ' + FORMAT(Endbuchdatum) +
                                    ', ' + 'Anzeigen: ' + FORMAT(NoOfRecordsToPrint) + ', Herstellercode: ' + vHerstellercode
                                    +  ', ' + l„ndercode;
                  ges_aubestand := 0;
                  ges_CustSalesLCY := 0;

                  IF DoUpdateExistingWorksheet THEN BEGIN
                    IF ServerFileName = '' THEN
                      ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
                    IF ServerFileName = '' THEN
                      EXIT;
                    SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
                    IF SheetName = '' THEN
                      EXIT;
                  END;

                  TempExcelBuffer.DELETEALL;
                  CLEAR(TempExcelBuffer);

                  //Header
                  RowNo := 1;
                  ColumnNo := 1;
                  EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Text025,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  RowNo := 2;

                  //*******************************************************************************************************
                  //                                 Akt. Angebote werden durchsucht
                  //*******************************************************************************************************

                  Belege.RESET;
                  //belege.SETFILTER("Debitornr.",Customer."No.");
                  Belege.SETFILTER(Verk„ufercode,vkcode);
                  Belege.SETFILTER("Betreuer Innendienst",betrinnen);
                  Belege.SETFILTER(Teams,vteams);
                  Belege.SETFILTER(Herstellercode,vHerstellercode);
                  Belege.SETFILTER(Gebiet,vGebietscode);
                  Belege.SETFILTER(Lagerortcode,'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
                  Belege.SETFILTER(Menge,'<>%1',0);
                  Belege.SETFILTER(Belegart,'Rechnung');
                  IF (StartBuchdatum <> 0D ) AND (Endbuchdatum = 0D) THEN
                    Belege.SETFILTER(Belegdatum,'>=%1',StartBuchdatum);
                  IF (StartBuchdatum = 0D) AND (Endbuchdatum <> 0D) THEN
                    Belege.SETFILTER(Belegdatum,'<=%1',Endbuchdatum);
                  IF (StartBuchdatum <> 0D) AND (Endbuchdatum <> 0D) THEN
                    Belege.SETFILTER(Belegdatum,'>=%1&<=%2',StartBuchdatum,Endbuchdatum);
                  IF Belege.FINDFIRST THEN BEGIN
                    REPEAT
                      Customer.RESET;
                      Customer.SETRANGE("No.",Belege."Debitornr.");
                      Customer.SETFILTER("Country/Region Code",l„ndercode);
                      IF Customer.FINDFIRST THEN BEGIN
                        Berichtstabelle.RESET;
                        Berichtstabelle.SETFILTER(Tabelle,'%1','DEBITOR');
                        Berichtstabelle.SETFILTER(Index,'%1',Belege."Debitornr.");
                        IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
                          //*******************************************************************************************************
                          //                                     Debitor Daten schreiben
                          //*******************************************************************************************************
                          Berichtstabelle.INIT;
                          Berichtstabelle.Tabelle := 'DEBITOR';
                          Berichtstabelle.Index := Belege."Debitornr.";
                          Customer.GET(Belege."Debitornr.");
                          Customer.CALCFIELDS("Sales (LCY)");
                          Berichtstabelle."Feld 4" := Customer."Sales (LCY)";
                          Berichtstabelle."Feld 6" := Customer."Post Code";
                          Berichtstabelle."Feld 10" := Customer.Name;
                          Berichtstabelle."Feld 12" := Customer.City;
                          Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                          Berichtstabelle.User := USERID;
                          Berichtstabelle.INSERT;
                        END;
                        Berichtstabelle.INIT;
                        Berichtstabelle.Tabelle := 'BELEGE';
                        Berichtstabelle.Index := Belege."Debitornr.";
                        Berichtstabelle."Belegnr." := Belege."Belegnr.";
                        Berichtstabelle."Zeilennr." := Belege."Zeilennr.";
                        Berichtstabelle."Feld 4" := Belege."Betrag MW ohne Mwst.";
                        Berichtstabelle."Feld 5" := Belege."DB %";
                        Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                        Berichtstabelle.User := USERID;
                        Berichtstabelle.INSERT;
                      END;
                    UNTIL Belege.NEXT = 0;
                    //Gutschriften werden abgezogen
                    Belege.RESET;
                    //belege.SETFILTER("Debitornr.",Customer."No.");
                    Belege.SETFILTER(Verk„ufercode,vkcode);
                    Belege.SETFILTER("Betreuer Innendienst",betrinnen);
                    Belege.SETFILTER(Teams,vteams);
                    Belege.SETFILTER(Herstellercode,vHerstellercode);
                    Belege.SETFILTER(Gebiet,vGebietscode);
                    Belege.SETFILTER(Lagerortcode,'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
                    Belege.SETFILTER(Menge,'<>%1',0);
                    Belege.SETFILTER(Belegart,'Gutschrift');
                    IF (StartBuchdatum <> 0D ) AND (Endbuchdatum = 0D) THEN
                      Belege.SETFILTER(Belegdatum,'>=%1',StartBuchdatum);
                    IF (StartBuchdatum = 0D) AND (Endbuchdatum <> 0D) THEN
                      Belege.SETFILTER(Belegdatum,'<=%1',Endbuchdatum);
                    IF (StartBuchdatum <> 0D) AND (Endbuchdatum <> 0D) THEN
                      Belege.SETFILTER(Belegdatum,'>=%1&<=%2',StartBuchdatum,Endbuchdatum);
                    IF Belege.FINDFIRST THEN
                      REPEAT
                        Customer.RESET;
                        Customer.SETRANGE("No.",Belege."Debitornr.");
                        Customer.SETFILTER("Country/Region Code",l„ndercode);
                        IF Customer.FINDFIRST THEN BEGIN
                          Berichtstabelle.INIT;
                          Berichtstabelle.Tabelle := 'BELEGE';
                          Berichtstabelle.Index := Belege."Debitornr.";
                          Berichtstabelle."Belegnr." := Belege."Belegnr.";
                          Berichtstabelle."Zeilennr." := Belege."Zeilennr.";
                          Berichtstabelle."Feld 4" := - Belege."Betrag MW ohne Mwst.";
                          Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                          Berichtstabelle.User := USERID;
                          Berichtstabelle.INSERT;
                        END;
                      UNTIL Belege.NEXT = 0;
                    END;
                  ;ReportForNav.OpenDesigner := ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   RowNo := RowNo + 1;
                   ColumnNo := 3;
                   EnterCell(RowNo,ColumnNo,FORMAT(ges_CustSalesLCY),'',TRUE,FALSE,TRUE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
                   ColumnNo := ColumnNo + 1;
                   EnterCell(RowNo,ColumnNo,FORMAT(ges_aubestand),'',TRUE,FALSE,TRUE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
                   RowNo := RowNo + 1;

                   IF DoUpdateExistingWorksheet THEN BEGIN
                     TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
                     TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
                     TempExcelBuffer.CloseBook;
                     IF NOT Testmode THEN
                       TempExcelBuffer.DownloadAndOpenExcel;
                   END ELSE BEGIN
                     TempExcelBuffer.CreateBook(ServerFileName,Text001);
                     TempExcelBuffer.WriteSheet(
                       PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
                     TempExcelBuffer.CloseBook;
                     IF NOT Testmode THEN BEGIN
                       TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
                       //TempExcelBuffer.OpenExcelWithoutAutoFit(Text001,Text001 + ExcelFileExtensionTok,'',TRUE);
                     END;
                   END;
                   IF NOT Testmode THEN
                     TempExcelBuffer.GiveUserControl;

                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Debitor             ;
               DataItemTable=Table18;
               OnPreDataItem=BEGIN
                               Window.OPEN(Text000);
                               i := 0;
                               CustAmount.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1,Debitor."No.");
                                  ges_CustSalesLCY := 0;
                                  aubestand := 0;
                                  //Auftr„ge
                                  Berichtstabelle.RESET;
                                  Berichtstabelle.SETFILTER(Tabelle,'%1','BELEGE');
                                  Berichtstabelle.SETFILTER(Index,'%1',Debitor."No.");
                                  IF Berichtstabelle.FINDFIRST THEN
                                    REPEAT
                                      CustSalesLCY := CustSalesLCY - Berichtstabelle."Feld 4";
                                   UNTIL Berichtstabelle.NEXT = 0;
                                  //AU-Bestand
                                    SalesHeader.RESET;
                                    SalesHeader.SETFILTER("Sell-to Customer No.",Debitor."No.");
                                    SalesHeader.SETFILTER("Document Type",'Auftrag');
                                    SalesHeader.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
                                    SalesHeader.SETFILTER("Salesperson Code",vkcode);
                                    SalesHeader.SETFILTER("Betreuer Innendienst",betrinnen);
                                    SalesHeader.SETFILTER(Teams,vteams);
                                    IF SalesHeader.FINDFIRST THEN BEGIN
                                      REPEAT
                                        SalesLine.RESET;
                                        SalesLine.SETFILTER("Document No.",SalesHeader."No.");
                                        SalesLine.SETFILTER(Type,'%1',SalesLine.Type::Item);
                                        SalesLine.SETFILTER("Manufacturer Code",vHerstellercode);
                                        SalesLine.SETFILTER("Outstanding Quantity",'>%1',0);
                                        IF SalesLine.FINDFIRST THEN
                                          REPEAT
                                            aubestand := aubestand + (SalesLine."VK-Preis (MW)" * SalesLine."Outstanding Quantity");
                                         UNTIL SalesLine.NEXT = 0;
                                       UNTIL SalesHeader.NEXT = 0;
                                     END;
                                    //Datensatz wird in Tabelle Debitorenbetrag (temp.) eingetragen, wenrn Umsatz > 0  oder AE >0
                                  IF ((CustSalesLCY < 0) OR (aubestand > 0)) THEN BEGIN
                                      CustAmount.INIT;
                                      CustAmount."Customer No." := Debitor."No.";
                                      CustAmount."Amount (LCY)" := CustSalesLCY;
                                      CustAmount."Amount 2 (LCY)" := aubestand;
                                      CustAmount.INSERT;
                                      IF (NoOfRecordsToPrint = 0) OR (i < NoOfRecordsToPrint) THEN
                                        i := i + 1
                                      ELSE BEGIN
                                        CustAmount.FIND('+');
                                        CustAmount.DELETE;
                                      END;
                                    END;
                                END;
                                 }

    { 2   ;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnPreDataItem=BEGIN
                               Window.CLOSE;
                               Berichtstabelle.RESET;
                               Berichtstabelle.SETRANGE(Tabelle,'DEBITOR');
                               SETRANGE(Number,1,Berichtstabelle.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle.FIND('-');
                                    IF NOT CustAmount.FINDFIRST THEN
                                      CurrReport.BREAK;
                                  END ELSE BEGIN
                                    Berichtstabelle.NEXT;
                                    IF CustAmount.NEXT = 0 THEN
                                      CurrReport.BREAK;
                                  END;

                                  CustAmount."Amount (LCY)" := -CustAmount."Amount (LCY)";
                                  Customer.GET(CustAmount."Customer No.");
                                  IF MaxAmount = 0 THEN
                                    MaxAmount := CustAmount."Amount (LCY)";
                                  IF (MaxAmount > 0) AND (CustAmount."Amount (LCY)" > 0) THEN
                                    BarText := PADSTR('',ROUND(CustAmount."Amount (LCY)" / MaxAmount * 45,1),'*')
                                  ELSE
                                    BarText := '';
                                  CustAmount."Amount (LCY)" := -CustAmount."Amount (LCY)";
                                  ges_CustSalesLCY := ges_CustSalesLCY - CustAmount."Amount (LCY)";
                                  ges_aubestand := ges_aubestand + CustAmount."Amount 2 (LCY)";
                                  CustName := '';
                                  Cust.SETFILTER(Cust."No.",CustAmount."Customer No.");
                                  IF Cust.FINDFIRST THEN
                                    CustName := Cust.Name;
                                  vk_wert := 0;
                                  ma_wert := 0;
                                  ma_proz := 0;
                                  marge := 0;
                                  linien := '';

                                  ColumnNo := 1;
                                  EnterCell(RowNo,ColumnNo,'',TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Customer.TABLENAME,1,21,CustAmount."Customer No."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,Cust.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,FORMAT(CustAmount."Amount (LCY)" * (-1)),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,FORMAT(CustAmount."Amount 2 (LCY)"),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);

                                  Belege.RESET;
                                  Belege.SETFILTER(Belegart,'%1',Belege.Belegart::Invoice);
                                  Belege.SETFILTER("Debitornr.",'%1',CustAmount."Customer No.");
                                  Belege.SETFILTER(Verk„ufercode,vkcode);
                                  Belege.SETFILTER("Betreuer Innendienst",betrinnen);
                                  Belege.SETFILTER(Teams,vteams);
                                  Belege.SETFILTER(Gebiet,vGebietscode);
                                  Belege.SETFILTER(Herstellercode,vHerstellercode);
                                  Belege.SETFILTER(Lagerortcode,'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
                                  Belege.SETFILTER(Menge,'<>%1',0);
                                  IF (StartBuchdatum <> 0D ) AND (Endbuchdatum = 0D) THEN
                                    Belege.SETFILTER(Belegdatum,'>=%1',StartBuchdatum);
                                  IF (StartBuchdatum = 0D) AND (Endbuchdatum <> 0D) THEN
                                    Belege.SETFILTER(Belegdatum,'<=%1',Endbuchdatum);
                                  IF (StartBuchdatum <> 0D) AND (Endbuchdatum <> 0D) THEN
                                    Belege.SETFILTER(Belegdatum,'>=%1&<=%2',StartBuchdatum,Endbuchdatum);
                                  IF Belege.FINDFIRST THEN BEGIN
                                    REPEAT
                                      IF marge = 0 THEN
                                        marge := Belege."DB %"
                                      ELSE
                                        marge := marge + Belege."DB %";
                                        //marge := (marge + belege."DB %") / 2;
                                      Hersteller.GET(Belege.Herstellercode);
                                      IF STRPOS(linien,Hersteller.Herstellerkurzname) = 0 THEN
                                        linien := linien + ' ' + Hersteller.Herstellerkurzname;
                                      vk_wert := vk_wert + Belege."Betrag MW ohne Mwst.";
                                      ma_wert := ma_wert + ((Belege."Betrag MW ohne Mwst." / 100) * Belege."DB %");
                                    UNTIL Belege.NEXT = 0;
                                    IF vk_wert <> 0 THEN
                                      ma_proz := (ma_wert / vk_wert) * 100;
                                    marge := marge / Belege.COUNT;
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT(ROUND(ma_proz,0.01)),'',FALSE,FALSE,FALSE,'0.00',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,linien,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,vGebietscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                  END;
                                  RowNo := RowNo + 1;
                                END;
                                 }

    { 7   ;1   ;Column  ;USERID              ;
               SourceExpr=USERID }

    { 8   ;1   ;Column  ;COMPANYNAME         ;
               SourceExpr=COMPANYNAME }

    { 9   ;1   ;Column  ;ReportForNavPageNo  ;
               SourceExpr=ReportForNav.PageNo }

    { 10  ;1   ;Column  ;TODAY_0_4           ;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 3   ;1   ;Column  ;vteams              ;
               SourceExpr=vteams }

    { 4   ;1   ;Column  ;vkcode              ;
               SourceExpr=vkcode }

    { 5   ;1   ;Column  ;betrinnen           ;
               SourceExpr=betrinnen }

    { 6   ;1   ;Column  ;filter              ;
               SourceExpr=filter }

    { 11  ;1   ;Column  ;CustomerTABLECAPTION___CustFilter;
               SourceExpr=Customer.TABLECAPTION + ': ' + CustFilter }

    { 12  ;1   ;Column  ;Amount2_LCY_CustAmount;
               SourceExpr=CustAmount."Amount 2 (LCY)" }

    { 13  ;1   ;Column  ;BarText             ;
               SourceExpr=BarText }

    { 14  ;1   ;Column  ;CustAmountAmount_LCY__1;
               SourceExpr=CustAmount."Amount (LCY)"*(-1) }

    { 15  ;1   ;Column  ;CustName            ;
               SourceExpr=CustName }

    { 16  ;1   ;Column  ;CustomerNo_CustAmount;
               SourceExpr=CustAmount."Customer No." }

    { 17  ;1   ;Column  ;Number_Integer      ;
               SourceExpr=Number }

    { 18  ;1   ;Column  ;SalesPct            ;
               DecimalPlaces=1:1;
               SourceExpr=SalesPct }

    { 19  ;1   ;Column  ;ges_aubestand       ;
               SourceExpr=ges_aubestand }

    { 20  ;1   ;Column  ;ges_CustSalesLCY    ;
               SourceExpr=ges_CustSalesLCY }

    { 21  ;1   ;Column  ;aubestand           ;
               SourceExpr=aubestand }

    { 22  ;1   ;Column  ;CustSalesLCY_1      ;
               SourceExpr=CustSalesLCY*(-1) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF NoOfRecordsToPrint = 0 THEN
                     NoOfRecordsToPrint := 10;
                   letzteRE := 0D;
                   Belege.RESET;
                   Belege.SETFILTER(Belege.Belegart,'Rechnung');
                   IF Belege.FINDLAST THEN
                     BEGIN
                       letzteRE:=Belege.Belegdatum;
                       "RE-Nr" := Belege."Belegnr.";
                     END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1140007;2;Field     ;
                  CaptionML=DEU=Stand letzte RE:;
                  SourceExpr=letzteRE;
                  Editable=FALSE }

      { 1140011;2;Field     ;
                  SourceExpr="RE-Nr";
                  Editable=FALSE }

      { 1140010;2;Field     ;
                  CaptionML=DEU=Betreuer Innendienst;
                  SourceExpr=betrinnen;
                  TableRelation=Salesperson/Purchaser }

      { 1140001;2;Field     ;
                  CaptionML=DEU=Verk„ufercode;
                  SourceExpr=vkcode;
                  TableRelation=Salesperson/Purchaser }

      { 1140017;2;Field     ;
                  CaptionML=DEU=Teams;
                  SourceExpr=vteams;
                  TableRelation=Team }

      { 1140019;2;Field     ;
                  CaptionML=DEU=Gebietscode;
                  SourceExpr=vGebietscode;
                  TableRelation=Territory }

      { 1140004;2;Field     ;
                  CaptionML=DEU=Buchungsdatum von;
                  SourceExpr=StartBuchdatum }

      { 1140006;2;Field     ;
                  CaptionML=DEU=bis;
                  SourceExpr=Endbuchdatum }

      { 1000000004;2;Field  ;
                  CaptionML=DEU=Herstellercode;
                  SourceExpr=vHerstellercode }

      { 1000000001;2;Field  ;
                  SourceExpr='Hersteller šbersicht';
                  TableRelation=Manufacturer }

      { 1140013;2;Field     ;
                  CaptionML=DEU=L„ndercode;
                  SourceExpr=l„ndercode;
                  TableRelation=Country/Region }

      { 3   ;2   ;Field     ;
                  CaptionML=[DEU=Menge;
                             ENU=Quantity];
                  SourceExpr=NoOfRecordsToPrint }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Debitoren sortieren  #1##########;ENU=Sorting customers    #1##########';
      Window@1004 : Dialog;
      CustAmount@1005 : TEMPORARY Record 266;
      Cust@1140005 : Record 18;
      SalesHeader@1140000 : Record 36;
      SalesLine@1140001 : Record 37;
      Belege@1140003 : Record 50010;
      Customer@1140027 : Record 18;
      Berichtstabelle@1140024 : TEMPORARY Record 50037;
      Hersteller@1140028 : Record 5720;
      CustName@1140004 : Text[50];
      CustFilter@1006 : Text[250];
      CustDateFilter@1007 : Text[30];
      ShowType@1008 : 'Sales (LCY),Balance (LCY)';
      NoOfRecordsToPrint@1009 : Integer;
      CustSalesLCY@1010 : Decimal;
      ges_CustSalesLCY@1140015 : Decimal;
      SalesPct@1012 : Decimal;
      MaxAmount@1014 : Decimal;
      BarText@1015 : Text[50];
      i@1016 : Integer;
      vkcode@1140002 : Code[80];
      betrinnen@1140019 : Code[80];
      vteams@1140023 : Code[80];
      aubestand@1140012 : Decimal;
      ges_aubestand@1140014 : Decimal;
      marge@1140013 : Decimal;
      letzteRE@1140006 : Date;
      "RE-Nr"@1140020 : Code[20];
      StartBuchdatum@1140017 : Date;
      Endbuchdatum@1140016 : Date;
      filter@1140018 : Text[250];
      l„ndercode@1140021 : Code[40];
      vHerstellercode@1140022 : Code[40];
      vGebietscode@1140033 : Code[20];
      counter@1140025 : Integer;
      linien@1140029 : Text[250];
      vk_wert@1140030 : Decimal;
      ma_wert@1140031 : Decimal;
      ma_proz@1140032 : Decimal;
      TOPAS_API@1000000000 : Codeunit 50001;
      TempExcelBuffer@1000000018 : TEMPORARY Record 370;
      FileMgt@1000000016 : Codeunit 419;
      ServerFileName@1000000015 : Text;
      SheetName@1000000014 : Text[250];
      DoUpdateExistingWorksheet@1000000013 : Boolean;
      Testmode@1000000012 : Boolean;
      RowNo@1000000008 : Integer;
      ColumnNo@1000000005 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;
      Text001@1000000007 : TextConst 'DEU=Debitoren TOP 10';
      Text002@1000000006 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text020@1000000004 : TextConst 'DEU=Kundennr.';
      Text021@1000000003 : TextConst 'DEU=Kunde';
      Text022@1000000002 : TextConst 'DEU=Umsatz in °';
      Text023@1000000001 : TextConst 'DEU=AU-Bestand Gesamt';
      Text024@1000000017 : TextConst 'DEU=Durchschn. Marge';
      Text025@1000000019 : TextConst 'DEU=Hersteller';
      ExcelFileExtensionTok@1000000011 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';

    LOCAL PROCEDURE OnPreSectionInteger_Header2@5010(VAR Integer@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer DO BEGIN
        ReportForNav.ShowOutput((ReportForNav.PageNo = 1) AND (CustFilter <> ''));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionInteger_Footer5@5011(VAR Integer@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer DO BEGIN
        SalesPct := Pct(ges_CustSalesLCY,CustSalesLCY*(-1));
      END;
    END;

    LOCAL PROCEDURE Pct@1(Numeral1@1000 : Decimal;Numeral2@1001 : Decimal) : Decimal;
    BEGIN
      IF Numeral2 = 0 THEN
        EXIT(0);
      EXIT(ROUND(Numeral1 / Numeral2 * 100,0.1));
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Integer': CASE SectionId OF
          'Header2': OnPreSectionInteger_Header2(Integer);
          'Footer5': OnPreSectionInteger_Footer5(Integer);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Debitor': WITH Debitor DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,aubestand);
                ReportForNav.AddTotal(DataItemId,1,CustSalesLCY);
              END;
           'Restore': BEGIN
                 aubestand := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 CustSalesLCY := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Nr.     Version   Datum       User  Beschreibung
      ===========================================================================
      1       TOP1.00   10.10.17    ST    Umstellung Berichtstabelle auf TEMPORARY = YES, um L”schungprobleme in der Berichtstabelle zu verhindern
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>addeab18-f39e-47a2-ac49-21b189d8bb92</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>d7ab8421-bd9b-444b-971f-1b74f603e042</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="USERID">
          <DataField>USERID</DataField>
        </Field>
        <Field Name="COMPANYNAME">
          <DataField>COMPANYNAME</DataField>
        </Field>
        <Field Name="ReportForNavPageNo">
          <DataField>ReportForNavPageNo</DataField>
        </Field>
        <Field Name="TODAY_0_4">
          <DataField>TODAY_0_4</DataField>
        </Field>
        <Field Name="vteams">
          <DataField>vteams</DataField>
        </Field>
        <Field Name="vkcode">
          <DataField>vkcode</DataField>
        </Field>
        <Field Name="betrinnen">
          <DataField>betrinnen</DataField>
        </Field>
        <Field Name="filter">
          <DataField>filter</DataField>
        </Field>
        <Field Name="CustomerTABLECAPTION___CustFilter">
          <DataField>CustomerTABLECAPTION___CustFilter</DataField>
        </Field>
        <Field Name="Amount2_LCY_CustAmount">
          <DataField>Amount2_LCY_CustAmount</DataField>
        </Field>
        <Field Name="Amount2_LCY_CustAmountFormat">
          <DataField>Amount2_LCY_CustAmountFormat</DataField>
        </Field>
        <Field Name="BarText">
          <DataField>BarText</DataField>
        </Field>
        <Field Name="CustAmountAmount_LCY__1">
          <DataField>CustAmountAmount_LCY__1</DataField>
        </Field>
        <Field Name="CustAmountAmount_LCY__1Format">
          <DataField>CustAmountAmount_LCY__1Format</DataField>
        </Field>
        <Field Name="CustName">
          <DataField>CustName</DataField>
        </Field>
        <Field Name="CustomerNo_CustAmount">
          <DataField>CustomerNo_CustAmount</DataField>
        </Field>
        <Field Name="Number_Integer">
          <DataField>Number_Integer</DataField>
        </Field>
        <Field Name="SalesPct">
          <DataField>SalesPct</DataField>
        </Field>
        <Field Name="SalesPctFormat">
          <DataField>SalesPctFormat</DataField>
        </Field>
        <Field Name="ges_aubestand">
          <DataField>ges_aubestand</DataField>
        </Field>
        <Field Name="ges_aubestandFormat">
          <DataField>ges_aubestandFormat</DataField>
        </Field>
        <Field Name="ges_CustSalesLCY">
          <DataField>ges_CustSalesLCY</DataField>
        </Field>
        <Field Name="ges_CustSalesLCYFormat">
          <DataField>ges_CustSalesLCYFormat</DataField>
        </Field>
        <Field Name="aubestand">
          <DataField>aubestand</DataField>
        </Field>
        <Field Name="aubestandFormat">
          <DataField>aubestandFormat</DataField>
        </Field>
        <Field Name="CustSalesLCY_1">
          <DataField>CustSalesLCY_1</DataField>
        </Field>
        <Field Name="CustSalesLCY_1Format">
          <DataField>CustSalesLCY_1Format</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

