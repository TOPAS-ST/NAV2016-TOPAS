OBJECT Report 50020 TOPAS Debitor - Top 10 Liste
{
  OBJECT-PROPERTIES
  {
    Date=18.10.21;
    Time=09:35:58;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    CaptionML=[DEU=TOPAS Debitor - Top 10 Liste;
               ENU=TOPAS Customer - Top 10 List];
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  //Excel Definition
                  filter := 'Datum: ' + FORMAT(StartBuchdatum) + ' bis ' + FORMAT(Endbuchdatum) +
                                    ', ' + 'Anzeigen: ' + FORMAT(NoOfRecordsToPrint) + ', Herstellercode: ' + vHerstellercode
                                    +  ', ' + l„ndercode;
                  ges_aubestand := 0;
                  ges_CustSalesLCY := 0;

                  IF DoUpdateExistingWorksheet THEN BEGIN
                    IF ServerFileName = '' THEN
                      ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
                    IF ServerFileName = '' THEN
                      EXIT;
                    SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
                    IF SheetName = '' THEN
                      EXIT;
                  END;

                  TempExcelBuffer.DELETEALL;
                  CLEAR(TempExcelBuffer);

                  //Header
                  RowNo := 1;
                  ColumnNo := 1;
                  EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Text025,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  RowNo := 2;

                  //*******************************************************************************************************
                  //                                 Akt. Angebote werden durchsucht
                  //*******************************************************************************************************

                  Belege.RESET;
                  //belege.SETFILTER("Debitornr.",Customer."No.");
                  Belege.SETFILTER(Verk„ufercode,vkcode);
                  Belege.SETFILTER("Betreuer Innendienst",betrinnen);
                  Belege.SETFILTER(Teams,vteams);
                  Belege.SETFILTER(Herstellercode,vHerstellercode);
                  Belege.SETFILTER(Gebiet,vGebietscode);
                  Belege.SETFILTER(Lagerortcode,'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
                  Belege.SETFILTER(Menge,'<>%1',0);
                  Belege.SETFILTER(Belegart,'Rechnung');
                  IF (StartBuchdatum <> 0D ) AND (Endbuchdatum = 0D) THEN
                    Belege.SETFILTER(Belegdatum,'>=%1',StartBuchdatum);
                  IF (StartBuchdatum = 0D) AND (Endbuchdatum <> 0D) THEN
                    Belege.SETFILTER(Belegdatum,'<=%1',Endbuchdatum);
                  IF (StartBuchdatum <> 0D) AND (Endbuchdatum <> 0D) THEN
                    Belege.SETFILTER(Belegdatum,'>=%1&<=%2',StartBuchdatum,Endbuchdatum);
                  IF Belege.FINDFIRST THEN BEGIN
                    REPEAT
                      Customer.RESET;
                      Customer.SETRANGE("No.",Belege."Debitornr.");
                      Customer.SETFILTER("Country/Region Code",l„ndercode);
                      IF Customer.FINDFIRST THEN BEGIN
                        Berichtstabelle.RESET;
                        Berichtstabelle.SETFILTER(Tabelle,'%1','DEBITOR');
                        Berichtstabelle.SETFILTER(Index,'%1',Belege."Debitornr.");
                        IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
                          //*******************************************************************************************************
                          //                                     Debitor Daten schreiben
                          //*******************************************************************************************************
                          Berichtstabelle.INIT;
                          Berichtstabelle.Tabelle := 'DEBITOR';
                          Berichtstabelle.Index := Belege."Debitornr.";
                          Customer.GET(Belege."Debitornr.");
                          Customer.CALCFIELDS("Sales (LCY)");
                          Berichtstabelle."Feld 4" := Customer."Sales (LCY)";
                          Berichtstabelle."Feld 6" := Customer."Post Code";
                          Berichtstabelle."Feld 10" := Customer.Name;
                          Berichtstabelle."Feld 12" := Customer.City;
                          Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                          Berichtstabelle.User := USERID;
                          Berichtstabelle.INSERT;
                        END;
                        Berichtstabelle.INIT;
                        Berichtstabelle.Tabelle := 'BELEGE';
                        Berichtstabelle.Index := Belege."Debitornr.";
                        Berichtstabelle."Belegnr." := Belege."Belegnr.";
                        Berichtstabelle."Zeilennr." := Belege."Zeilennr.";
                        Berichtstabelle."Feld 4" := Belege."Betrag MW ohne Mwst.";
                        Berichtstabelle."Feld 5" := Belege."DB %";
                        Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                        Berichtstabelle.User := USERID;
                        Berichtstabelle.INSERT;
                      END;
                    UNTIL Belege.NEXT = 0;
                    //Gutschriften werden abgezogen
                    Belege.RESET;
                    //belege.SETFILTER("Debitornr.",Customer."No.");
                    Belege.SETFILTER(Verk„ufercode,vkcode);
                    Belege.SETFILTER("Betreuer Innendienst",betrinnen);
                    Belege.SETFILTER(Teams,vteams);
                    Belege.SETFILTER(Herstellercode,vHerstellercode);
                    Belege.SETFILTER(Gebiet,vGebietscode);
                    Belege.SETFILTER(Lagerortcode,'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
                    Belege.SETFILTER(Menge,'<>%1',0);
                    Belege.SETFILTER(Belegart,'Gutschrift');
                    IF (StartBuchdatum <> 0D ) AND (Endbuchdatum = 0D) THEN
                      Belege.SETFILTER(Belegdatum,'>=%1',StartBuchdatum);
                    IF (StartBuchdatum = 0D) AND (Endbuchdatum <> 0D) THEN
                      Belege.SETFILTER(Belegdatum,'<=%1',Endbuchdatum);
                    IF (StartBuchdatum <> 0D) AND (Endbuchdatum <> 0D) THEN
                      Belege.SETFILTER(Belegdatum,'>=%1&<=%2',StartBuchdatum,Endbuchdatum);
                    IF Belege.FINDFIRST THEN
                      REPEAT
                        Customer.RESET;
                        Customer.SETRANGE("No.",Belege."Debitornr.");
                        Customer.SETFILTER("Country/Region Code",l„ndercode);
                        IF Customer.FINDFIRST THEN BEGIN
                          Berichtstabelle.INIT;
                          Berichtstabelle.Tabelle := 'BELEGE';
                          Berichtstabelle.Index := Belege."Debitornr.";
                          Berichtstabelle."Belegnr." := Belege."Belegnr.";
                          Berichtstabelle."Zeilennr." := Belege."Zeilennr.";
                          Berichtstabelle."Feld 4" := - Belege."Betrag MW ohne Mwst.";
                          Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                          Berichtstabelle.User := USERID;
                          Berichtstabelle.INSERT;
                        END;
                      UNTIL Belege.NEXT = 0;
                    END;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   RowNo := RowNo + 1;
                   ColumnNo := 3;
                   EnterCell(RowNo,ColumnNo,FORMAT(ges_CustSalesLCY),'',TRUE,FALSE,TRUE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
                   ColumnNo := ColumnNo + 1;
                   EnterCell(RowNo,ColumnNo,FORMAT(ges_aubestand),'',TRUE,FALSE,TRUE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
                   RowNo := RowNo + 1;

                   IF DoUpdateExistingWorksheet THEN BEGIN
                     TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
                     TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
                     TempExcelBuffer.CloseBook;
                     IF NOT Testmode THEN
                       TempExcelBuffer.DownloadAndOpenExcel;
                   END ELSE BEGIN
                     TempExcelBuffer.CreateBook(ServerFileName,Text001);
                     TempExcelBuffer.WriteSheet(
                       PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
                     TempExcelBuffer.CloseBook;
                     IF NOT Testmode THEN BEGIN
                       TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
                       //TempExcelBuffer.OpenExcelWithoutAutoFit(Text001,Text001 + ExcelFileExtensionTok,'',TRUE);
                     END;
                   END;
                   IF NOT Testmode THEN
                     TempExcelBuffer.GiveUserControl;

                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;Debitor             ;
               DataItemTable=Table18;
               OnPreDataItem=BEGIN
                               Window.OPEN(Text000);
                               i := 0;
                               CustAmount.DELETEALL;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1,Debitor."No.");
                                  ges_CustSalesLCY := 0;
                                  aubestand := 0;
                                  //Auftr„ge
                                  Berichtstabelle.RESET;
                                  Berichtstabelle.SETFILTER(Tabelle,'%1','BELEGE');
                                  Berichtstabelle.SETFILTER(Index,'%1',Debitor."No.");
                                  IF Berichtstabelle.FINDFIRST THEN
                                    REPEAT
                                      CustSalesLCY := CustSalesLCY - Berichtstabelle."Feld 4";
                                   UNTIL Berichtstabelle.NEXT = 0;
                                  //AU-Bestand
                                    SalesHeader.RESET;
                                    SalesHeader.SETFILTER("Sell-to Customer No.",Debitor."No.");
                                    SalesHeader.SETFILTER("Document Type",'Auftrag');
                                    SalesHeader.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
                                    SalesHeader.SETFILTER("Salesperson Code",vkcode);
                                    SalesHeader.SETFILTER("Betreuer Innendienst",betrinnen);
                                    SalesHeader.SETFILTER(Teams,vteams);
                                    IF SalesHeader.FINDFIRST THEN BEGIN
                                      REPEAT
                                        SalesLine.RESET;
                                        SalesLine.SETFILTER("Document No.",SalesHeader."No.");
                                        SalesLine.SETFILTER(Type,'%1',SalesLine.Type::Item);
                                        SalesLine.SETFILTER("Manufacturer Code",vHerstellercode);
                                        SalesLine.SETFILTER("Outstanding Quantity",'>%1',0);
                                        IF SalesLine.FINDFIRST THEN
                                          REPEAT
                                            aubestand := aubestand + (SalesLine."VK-Preis (MW)" * SalesLine."Outstanding Quantity");
                                         UNTIL SalesLine.NEXT = 0;
                                       UNTIL SalesHeader.NEXT = 0;
                                     END;
                                    //Datensatz wird in Tabelle Debitorenbetrag (temp.) eingetragen, wenrn Umsatz > 0  oder AE >0
                                  IF ((CustSalesLCY < 0) OR (aubestand > 0)) THEN BEGIN
                                      CustAmount.INIT;
                                      CustAmount."Customer No." := Debitor."No.";
                                      CustAmount."Amount (LCY)" := CustSalesLCY;
                                      CustAmount."Amount 2 (LCY)" := aubestand;
                                      CustAmount.INSERT;
                                      IF (NoOfRecordsToPrint = 0) OR (i < NoOfRecordsToPrint) THEN
                                        i := i + 1
                                      ELSE BEGIN
                                        CustAmount.FIND('+');
                                        CustAmount.DELETE;
                                      END;
                                    END;
                                END;
                                 }

    { 2   ;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnPreDataItem=BEGIN
                               Window.CLOSE;
                               Berichtstabelle.RESET;
                               Berichtstabelle.SETRANGE(Tabelle,'DEBITOR');
                               SETRANGE(Number,1,Berichtstabelle.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle.FIND('-');
                                    IF NOT CustAmount.FINDFIRST THEN
                                      CurrReport.BREAK;
                                  END ELSE BEGIN
                                    Berichtstabelle.NEXT;
                                    IF CustAmount.NEXT = 0 THEN
                                      CurrReport.BREAK;
                                  END;

                                  CustAmount."Amount (LCY)" := -CustAmount."Amount (LCY)";
                                  Customer.GET(CustAmount."Customer No.");
                                  IF MaxAmount = 0 THEN
                                    MaxAmount := CustAmount."Amount (LCY)";
                                  IF (MaxAmount > 0) AND (CustAmount."Amount (LCY)" > 0) THEN
                                    BarText := PADSTR('',ROUND(CustAmount."Amount (LCY)" / MaxAmount * 45,1),'*')
                                  ELSE
                                    BarText := '';
                                  CustAmount."Amount (LCY)" := -CustAmount."Amount (LCY)";
                                  ges_CustSalesLCY := ges_CustSalesLCY - CustAmount."Amount (LCY)";
                                  ges_aubestand := ges_aubestand + CustAmount."Amount 2 (LCY)";
                                  CustName := '';
                                  Cust.SETFILTER(Cust."No.",CustAmount."Customer No.");
                                  IF Cust.FINDFIRST THEN
                                    CustName := Cust.Name;
                                  vk_wert := 0;
                                  ma_wert := 0;
                                  ma_proz := 0;
                                  marge := 0;
                                  linien := '';

                                  ColumnNo := 1;
                                  EnterCell(RowNo,ColumnNo,'',TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Customer.TABLENAME,1,21,CustAmount."Customer No."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,Cust.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,FORMAT(CustAmount."Amount (LCY)" * (-1)),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,FORMAT(CustAmount."Amount 2 (LCY)"),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);

                                  Belege.RESET;
                                  Belege.SETFILTER(Belegart,'%1',Belege.Belegart::Invoice);
                                  Belege.SETFILTER("Debitornr.",'%1',CustAmount."Customer No.");
                                  Belege.SETFILTER(Verk„ufercode,vkcode);
                                  Belege.SETFILTER("Betreuer Innendienst",betrinnen);
                                  Belege.SETFILTER(Teams,vteams);
                                  Belege.SETFILTER(Gebiet,vGebietscode);
                                  Belege.SETFILTER(Herstellercode,vHerstellercode);
                                  Belege.SETFILTER(Lagerortcode,'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
                                  Belege.SETFILTER(Menge,'<>%1',0);
                                  IF (StartBuchdatum <> 0D ) AND (Endbuchdatum = 0D) THEN
                                    Belege.SETFILTER(Belegdatum,'>=%1',StartBuchdatum);
                                  IF (StartBuchdatum = 0D) AND (Endbuchdatum <> 0D) THEN
                                    Belege.SETFILTER(Belegdatum,'<=%1',Endbuchdatum);
                                  IF (StartBuchdatum <> 0D) AND (Endbuchdatum <> 0D) THEN
                                    Belege.SETFILTER(Belegdatum,'>=%1&<=%2',StartBuchdatum,Endbuchdatum);
                                  IF Belege.FINDFIRST THEN BEGIN
                                    REPEAT
                                      IF marge = 0 THEN
                                        marge := Belege."DB %"
                                      ELSE
                                        marge := marge + Belege."DB %";
                                        //marge := (marge + belege."DB %") / 2;
                                      Hersteller.GET(Belege.Herstellercode);
                                      IF STRPOS(linien,Hersteller.Herstellerkurzname) = 0 THEN
                                        linien := linien + ' ' + Hersteller.Herstellerkurzname;
                                      vk_wert := vk_wert + Belege."Betrag MW ohne Mwst.";
                                      ma_wert := ma_wert + ((Belege."Betrag MW ohne Mwst." / 100) * Belege."DB %");
                                    UNTIL Belege.NEXT = 0;
                                    IF vk_wert <> 0 THEN
                                      ma_proz := (ma_wert / vk_wert) * 100;
                                    marge := marge / Belege.COUNT;
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT(ROUND(ma_proz,0.01)),'',FALSE,FALSE,FALSE,'0.00',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,linien,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,vGebietscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                  END;
                                  RowNo := RowNo + 1;
                                END;
                                 }

    { 7   ;1   ;Column  ;USERID              ;
               SourceExpr=USERID }

    { 8   ;1   ;Column  ;COMPANYNAME         ;
               SourceExpr=COMPANYNAME }

    { 9   ;1   ;Column  ;ReportForNavPageNo  ;
               SourceExpr=ReportForNav.PageNo }

    { 10  ;1   ;Column  ;TODAY_0_4           ;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 3   ;1   ;Column  ;vteams              ;
               SourceExpr=vteams }

    { 4   ;1   ;Column  ;vkcode              ;
               SourceExpr=vkcode }

    { 5   ;1   ;Column  ;betrinnen           ;
               SourceExpr=betrinnen }

    { 6   ;1   ;Column  ;filter              ;
               SourceExpr=filter }

    { 11  ;1   ;Column  ;CustomerTABLECAPTION___CustFilter;
               SourceExpr=Customer.TABLECAPTION + ': ' + CustFilter }

    { 12  ;1   ;Column  ;Amount2_LCY_CustAmount;
               SourceExpr=CustAmount."Amount 2 (LCY)" }

    { 13  ;1   ;Column  ;BarText             ;
               SourceExpr=BarText }

    { 14  ;1   ;Column  ;CustAmountAmount_LCY__1;
               SourceExpr=CustAmount."Amount (LCY)"*(-1) }

    { 15  ;1   ;Column  ;CustName            ;
               SourceExpr=CustName }

    { 16  ;1   ;Column  ;CustomerNo_CustAmount;
               SourceExpr=CustAmount."Customer No." }

    { 17  ;1   ;Column  ;Number_Integer      ;
               SourceExpr=Number }

    { 18  ;1   ;Column  ;SalesPct            ;
               DecimalPlaces=1:1;
               SourceExpr=SalesPct }

    { 19  ;1   ;Column  ;ges_aubestand       ;
               SourceExpr=ges_aubestand }

    { 20  ;1   ;Column  ;ges_CustSalesLCY    ;
               SourceExpr=ges_CustSalesLCY }

    { 21  ;1   ;Column  ;aubestand           ;
               SourceExpr=aubestand }

    { 22  ;1   ;Column  ;CustSalesLCY_1      ;
               SourceExpr=CustSalesLCY*(-1) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF NoOfRecordsToPrint = 0 THEN
                     NoOfRecordsToPrint := 10;
                   letzteRE := 0D;
                   Belege.RESET;
                   Belege.SETFILTER(Belege.Belegart,'Rechnung');
                   IF Belege.FINDLAST THEN
                     BEGIN
                       letzteRE:=Belege.Belegdatum;
                       "RE-Nr" := Belege."Belegnr.";
                     END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1140007;2;Field     ;
                  CaptionML=DEU=Stand letzte RE:;
                  SourceExpr=letzteRE;
                  Editable=FALSE }

      { 1140011;2;Field     ;
                  SourceExpr="RE-Nr";
                  Editable=FALSE }

      { 1140010;2;Field     ;
                  CaptionML=DEU=Betreuer Innendienst;
                  SourceExpr=betrinnen;
                  TableRelation=Salesperson/Purchaser }

      { 1140001;2;Field     ;
                  CaptionML=DEU=Verk„ufercode;
                  SourceExpr=vkcode;
                  TableRelation=Salesperson/Purchaser }

      { 1140017;2;Field     ;
                  CaptionML=DEU=Teams;
                  SourceExpr=vteams;
                  TableRelation=Team }

      { 1140019;2;Field     ;
                  CaptionML=DEU=Gebietscode;
                  SourceExpr=vGebietscode;
                  TableRelation=Territory }

      { 1140004;2;Field     ;
                  CaptionML=DEU=Buchungsdatum von;
                  SourceExpr=StartBuchdatum }

      { 1140006;2;Field     ;
                  CaptionML=DEU=bis;
                  SourceExpr=Endbuchdatum }

      { 1000000004;2;Field  ;
                  CaptionML=DEU=Herstellercode;
                  SourceExpr=vHerstellercode }

      { 1000000001;2;Field  ;
                  SourceExpr='Hersteller šbersicht';
                  TableRelation=Manufacturer }

      { 1140013;2;Field     ;
                  CaptionML=DEU=L„ndercode;
                  SourceExpr=l„ndercode;
                  TableRelation=Country/Region }

      { 3   ;2   ;Field     ;
                  CaptionML=[DEU=Menge;
                             ENU=Quantity];
                  SourceExpr=NoOfRecordsToPrint }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Debitoren sortieren  #1##########;ENU=Sorting customers    #1##########';
      Window@1004 : Dialog;
      CustAmount@1005 : TEMPORARY Record 266;
      Cust@1140005 : Record 18;
      SalesHeader@1140000 : Record 36;
      SalesLine@1140001 : Record 37;
      Belege@1140003 : Record 50010;
      Customer@1140027 : Record 18;
      Berichtstabelle@1140024 : TEMPORARY Record 50037;
      Hersteller@1140028 : Record 5720;
      CustName@1140004 : Text[50];
      CustFilter@1006 : Text[250];
      CustDateFilter@1007 : Text[30];
      ShowType@1008 : 'Sales (LCY),Balance (LCY)';
      NoOfRecordsToPrint@1009 : Integer;
      CustSalesLCY@1010 : Decimal;
      ges_CustSalesLCY@1140015 : Decimal;
      SalesPct@1012 : Decimal;
      MaxAmount@1014 : Decimal;
      BarText@1015 : Text[50];
      i@1016 : Integer;
      vkcode@1140002 : Code[80];
      betrinnen@1140019 : Code[80];
      vteams@1140023 : Code[80];
      aubestand@1140012 : Decimal;
      ges_aubestand@1140014 : Decimal;
      marge@1140013 : Decimal;
      letzteRE@1140006 : Date;
      "RE-Nr"@1140020 : Code[20];
      StartBuchdatum@1140017 : Date;
      Endbuchdatum@1140016 : Date;
      filter@1140018 : Text[250];
      l„ndercode@1140021 : Code[40];
      vHerstellercode@1140022 : Code[40];
      vGebietscode@1140033 : Code[20];
      counter@1140025 : Integer;
      linien@1140029 : Text[250];
      vk_wert@1140030 : Decimal;
      ma_wert@1140031 : Decimal;
      ma_proz@1140032 : Decimal;
      TOPAS_API@1000000000 : Codeunit 50001;
      TempExcelBuffer@1000000018 : TEMPORARY Record 370;
      FileMgt@1000000016 : Codeunit 419;
      ServerFileName@1000000015 : Text;
      SheetName@1000000014 : Text[250];
      DoUpdateExistingWorksheet@1000000013 : Boolean;
      Testmode@1000000012 : Boolean;
      RowNo@1000000008 : Integer;
      ColumnNo@1000000005 : Integer;
      Text001@1000000007 : TextConst 'DEU=Debitoren TOP 10';
      Text002@1000000006 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text020@1000000004 : TextConst 'DEU=Kundennr.';
      Text021@1000000003 : TextConst 'DEU=Kunde';
      Text022@1000000002 : TextConst 'DEU=Umsatz in °';
      Text023@1000000001 : TextConst 'DEU=AU-Bestand Gesamt';
      Text024@1000000017 : TextConst 'DEU=Durchschn. Marge';
      Text025@1000000019 : TextConst 'DEU=Hersteller';
      ExcelFileExtensionTok@1000000011 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionInteger_Header2@5010(VAR Integer@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer DO BEGIN
        ReportForNav.ShowOutput((ReportForNav.PageNo = 1) AND (CustFilter <> ''));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionInteger_Footer5@5011(VAR Integer@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer DO BEGIN
        SalesPct := Pct(ges_CustSalesLCY,CustSalesLCY*(-1));
      END;
    END;

    LOCAL PROCEDURE Pct@1(Numeral1@1000 : Decimal;Numeral2@1001 : Decimal) : Decimal;
    BEGIN
      IF Numeral2 = 0 THEN
        EXIT(0);
      EXIT(ROUND(Numeral1 / Numeral2 * 100,0.1));
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Integer': CASE SectionId OF
          'Header2': OnPreSectionInteger_Header2(Integer);
          'Footer5': OnPreSectionInteger_Footer5(Integer);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
      ForNavOperation@1000000009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Debitor': WITH Debitor DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,aubestand);
                ReportForNav.AddTotal(DataItemId,1,CustSalesLCY);
              END;
           'Restore': BEGIN
                 aubestand := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 CustSalesLCY := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      Nr.     Version   Datum       User  Beschreibung
      ===========================================================================
      1       TOP1.00   10.10.17    ST    Umstellung Berichtstabelle auf TEMPORARY = YES, um L”schungprobleme in der Berichtstabelle zu verhindern
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

