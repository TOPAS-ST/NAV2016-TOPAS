OBJECT Report 50015 RMA Beantragung d. RMA-Nr 2
{
  OBJECT-PROPERTIES
  {
    Date=12.07.19;
    Time=14:17:07;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV3.1.0.1460/1460;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   Firmendaten.GET;
                   Firmendaten.CALCFIELDS(Picture);
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table50020;
               OnAfterGetRecord=BEGIN
                                  TOPAS_Funktionen.GetCompanyInformation(CompanyInfo,Firmendaten);

                                  Anredetext := '';
                                  Name := '';
                                  Adresse := '';
                                  Telefonnr := '';
                                  Faxnr := '';
                                  Email := '';
                                  Ort := '';
                                  PLZ := '';

                                  IF Verk„ufer.GET("RMA-Kopf".Betreuer) THEN ;

                                  Beteiligte.RESET;
                                  Beteiligte.SETFILTER("RMA-Nr.","RMA-Kopf"."RMA-Nr.");
                                  Beteiligte.SETFILTER(Art,'Kunde');
                                  Beteiligte.SETFILTER(Fhrungsrolle,'%1',TRUE);
                                  IF Beteiligte.FINDFIRST THEN BEGIN
                                    Name := Beteiligte.Name + ' ' + Beteiligte."Name 2";
                                    Adresse := Beteiligte.Adresse + ' ' + Beteiligte."Adresse 2";
                                    Beteiligte2.RESET;
                                    Beteiligte2.SETFILTER(Beteiligte2."RMA-Nr.",Beteiligte."RMA-Nr.");
                                    Beteiligte2.SETFILTER(Beteiligte2.Art,'Ansprechpartner Kunde');
                                    Beteiligte2.SETFILTER(Beteiligte2."Kontakt Mandantennr.",Beteiligte."Kontakt Mandantennr.");
                                    IF Beteiligte2.FINDFIRST THEN BEGIN
                                      Contact.RESET;
                                      Contact.SETFILTER(Contact."No.",Beteiligte2."Nr.");
                                      IF Contact.FINDFIRST THEN BEGIN
                                        IF Contact."Salutation Code" = 'HERR' THEN Anredetext := 'Sehr geehrter Herr ' + Contact.Surname + ',';
                                        IF Contact."Salutation Code" = 'FRAU' THEN Anredetext := 'Sehr geehrte Frau ' + Contact.Surname + ',';
                                        Beteiligte2.CALCFIELDS("Telefonnr.","E-Mail","Faxnr.");
                                        Telefonnr := Beteiligte2."Telefonnr.";
                                        Faxnr := Beteiligte2."Faxnr.";
                                        Email := Beteiligte2."E-Mail";
                                        Ort := Beteiligte.Ort;
                                        PLZ := Beteiligte."PLZ-Code";
                                      END;
                                    END ELSE BEGIN
                                      Beteiligte.CALCFIELDS("Telefonnr.","E-Mail","Faxnr.");
                                      Anredetext := 'Sehr geehrter Kunde,';
                                      Telefonnr := Beteiligte."Telefonnr.";
                                      Faxnr := Beteiligte."Faxnr.";
                                      Email := Beteiligte."E-Mail";
                                      Ort := Beteiligte.Ort;
                                      PLZ := Beteiligte."PLZ-Code";
                                    END;
                                  END;
                                END;

               ReqFilterFields=RMA-Nr. }

    { 1000000000;1;Column;Picture_Firmendaten;
               SourceExpr=Firmendaten.Picture }

    { 1000000002;1;Column;CompanyName        ;
               SourceExpr=CompanyInfo[1] }

    { 1000000001;1;Column;CompanyAddress     ;
               SourceExpr=CompanyInfo[2] }

    { 1000000003;1;Column;CompanyPostCode_City;
               SourceExpr=CompanyInfo[4] + ' ' + CompanyInfo[5] }

    { 1000000005;1;Column;CompanyPhone       ;
               SourceExpr=CompanyInfo[6] }

    { 1000000006;1;Column;CompanyFax         ;
               SourceExpr=CompanyInfo[7] }

    { 1000000007;1;Column;CompanyVATRegNo    ;
               SourceExpr=CompanyInfo[8] }

    { 1000000008;1;Column;CompanyRegNo       ;
               SourceExpr=CompanyInfo[9] }

    { 1000000009;1;Column;CompanyVorstand    ;
               SourceExpr=CompanyInfo[10] }

    { 1000000010;1;Column;CompanyARV         ;
               SourceExpr=CompanyInfo[11] }

    { 1000000011;1;Column;CompanyAmtsgericht ;
               SourceExpr=CompanyInfo[12] }

    { 1000000012;1;Column;CompanyWEEERegNo   ;
               SourceExpr=CompanyInfo[13] }

    { 1000000013;1;Column;CompanyPostfach    ;
               SourceExpr=CompanyInfo[14] }

    { 1000000004;1;Column;CompanyHomepage    ;
               SourceExpr=CompanyInfo[15] }

    { 2   ;1   ;Column  ;E_Mail_Verkaufer    ;
               SourceExpr=Verk„ufer."E-Mail" }

    { 3   ;1   ;Column  ;Verkauferfirstname__VerkauferName;
               SourceExpr=Verk„ufer."First name"+'  ' +Verk„ufer.Name }

    { 4   ;1   ;Column  ;Fax_international_Verkaufer;
               SourceExpr=Verk„ufer.Fax_international }

    { 5   ;1   ;Column  ;Tel_international_Verkaufer;
               SourceExpr=Verk„ufer.Tel_international }

    { 6   ;1   ;Column  ;Ansprech_Verkaufer  ;
               SourceExpr=Verk„ufer.Ansprech }

    { 7   ;1   ;Column  ;Beteiligte2Name__Beteiligte2Name2;
               SourceExpr=Beteiligte2.Name+' '+Beteiligte2."Name 2" }

    { 8   ;1   ;Column  ;Ort                 ;
               SourceExpr=Ort }

    { 9   ;1   ;Column  ;PLZ                 ;
               SourceExpr=PLZ }

    { 10  ;1   ;Column  ;Adresse             ;
               SourceExpr=Adresse }

    { 11  ;1   ;Column  ;Email               ;
               SourceExpr=Email }

    { 12  ;1   ;Column  ;Telefonnr           ;
               SourceExpr=Telefonnr }

    { 13  ;1   ;Column  ;Faxnr               ;
               SourceExpr=Faxnr }

    { 14  ;1   ;Column  ;Name                ;
               SourceExpr=Name }

    { 15  ;1   ;Column  ;Debitornr_Beteiligte;
               SourceExpr=Beteiligte."Debitornr." }

    { 16  ;1   ;Column  ;Anredetext          ;
               SourceExpr=Anredetext }

    { 17  ;1   ;Column  ;WORKDATE            ;
               SourceExpr=WORKDATE }

    { 18  ;1   ;Column  ;RMA_Nr_RMA_Kopf_Lbl ;
               SourceExpr="RMA-Kopf".FIELDCAPTION("RMA-Nr.") }

    { 19  ;1   ;Column  ;RMA_Nr_RMA_Kopf     ;
               SourceExpr="RMA-Nr." }

    { 20  ;1   ;DataItem;                    ;
               DataItemTable=Table50021;
               DataItemTableView=WHERE(Belegart=FILTER(vom Kunden));
               OnAfterGetRecord=BEGIN
                                  TariffNo := '';
                                  Artikelnr := '';
                                  Artikel.SETFILTER("No.",'%1',"Artikelnr.");
                                  IF Artikel.FINDFIRST THEN BEGIN
                                    TariffNo := Artikel."Tariff No.";
                                    Artikelnr := Artikel."No. 2";
                                  END ELSE
                                    Artikelnr := "Artikelnr.";
                                END;

               DataItemLink=RMA-Nr.=FIELD(RMA-Nr.) }

    { 21  ;2   ;Column  ;TariffNo            ;
               SourceExpr=TariffNo }

    { 22  ;2   ;Column  ;ExterneBelegnummmer_RMA_Zeile;
               SourceExpr="Externe Belegnummmer" }

    { 23  ;2   ;Column  ;SN_Nr_DC_RMA_Zeile  ;
               SourceExpr="SN-Nr. / DC" }

    { 24  ;2   ;Column  ;MengeSN_Nr_DC_RMA_Zeile;
               DecimalPlaces=0:0;
               SourceExpr="Menge SN-Nr. / DC" }

    { 25  ;2   ;Column  ;Artikelnr           ;
               SourceExpr=Artikelnr }

    { 26  ;1   ;DataItem;Text unten          ;
               DataItemTable=Table50023;
               DataItemTableView=WHERE(Art=FILTER(vom Kunden),
                                       Andruck=FILTER(Text unten));
               DataItemLink=Nr.=FIELD(RMA-Nr.) }

    { 27  ;2   ;Column  ;Bemerkung_Textunten ;
               SourceExpr=Bemerkung }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Firmendaten@1000000000 : Record 79;
      Artikel@1140000 : Record 27;
      Beteiligte@1140001 : Record 50022;
      Beteiligte2@1140002 : Record 50022;
      Contact@1140008 : Record 5050;
      Verk„ufer@1140012 : Record 13;
      TOPAS_Funktionen@1000000002 : Codeunit 50006;
      CompanyInfo@1000000001 : ARRAY [15] OF Text;
      Anredetext@1140007 : Text[80];
      Name@1140003 : Text[100];
      Adresse@1140004 : Text[100];
      PLZ@1140005 : Code[20];
      Ort@1140006 : Text[30];
      Telefonnr@1140009 : Text[30];
      Faxnr@1140010 : Text[30];
      Email@1140011 : Text[80];
      TariffNo@1140013 : Code[20];
      Artikelnr@1140014 : Code[40];
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionRMA_Kopf_Header2@1000000040(VAR "RMA-Kopf"@1000000000 : Record 50020);
    BEGIN
      WITH "RMA-Kopf" DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'RMA_Kopf': CASE SectionId OF
          'Header2': OnPreSectionRMA_Kopf_Header2("RMA-Kopf");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

