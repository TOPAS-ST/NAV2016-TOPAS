OBJECT Report 50016 RMA-Lieferschein Kunde
{
  OBJECT-PROPERTIES
  {
    Date=23.02.21;
    Time=11:45:12;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV3.1.0.1460/1460;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                   Firmendaten.GET;
                   Firmendaten.CALCFIELDS(Picture,"ISO Logo");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table50020;
               OnAfterGetRecord=BEGIN
                                  TOPAS_Funktionen.GetCompanyInformation(CompanyInfo,Firmendaten);
                                END;

               ReqFilterFields=RMA-Nr. }

    { 2   ;1   ;DataItem;                    ;
               DataItemTable=Table50022;
               DataItemTableView=WHERE(Art=FILTER(Kunde));
               OnAfterGetRecord=BEGIN
                                  IF Land.GET("L„nder-/Regionscode") THEN ;
                                END;

               DataItemLink=RMA-Nr.=FIELD(RMA-Nr.) }

    { 1000000000;2;Column;Picture_Firmendaten;
               SourceExpr=Firmendaten.Picture }

    { 3   ;2   ;Column  ;ISOLogo_Firmendaten ;
               SourceExpr=Firmendaten."ISO Logo" }

    { 1000000020;2;Column;CompanyName        ;
               SourceExpr=CompanyInfo[1] }

    { 1000000019;2;Column;CompanyAddress     ;
               SourceExpr=CompanyInfo[2] }

    { 1000000018;2;Column;CompanyPostCode_City;
               SourceExpr=CompanyInfo[4] + ' ' + CompanyInfo[5] }

    { 1000000017;2;Column;CompanyPhone       ;
               SourceExpr=CompanyInfo[6] }

    { 1000000016;2;Column;CompanyFax         ;
               SourceExpr=CompanyInfo[7] }

    { 1000000015;2;Column;CompanyVATRegNo    ;
               SourceExpr=CompanyInfo[8] }

    { 1000000014;2;Column;CompanyRegNo       ;
               SourceExpr=CompanyInfo[9] }

    { 1000000009;2;Column;CompanyVorstand    ;
               SourceExpr=CompanyInfo[10] }

    { 1000000010;2;Column;CompanyARV         ;
               SourceExpr=CompanyInfo[11] }

    { 1000000011;2;Column;CompanyAmtsgericht ;
               SourceExpr=CompanyInfo[12] }

    { 1000000012;2;Column;CompanyWEEERegNo   ;
               SourceExpr=CompanyInfo[13] }

    { 1000000013;2;Column;CompanyPostfach    ;
               SourceExpr=CompanyInfo[14] }

    { 1000000021;2;Column;CompanyHomepage    ;
               SourceExpr=CompanyInfo[15] }

    { 1000000006;2;Column;Andruck1           ;
               SourceExpr=Andruck[1] }

    { 1000000005;2;Column;Andruck2           ;
               SourceExpr=Andruck[2] }

    { 1000000004;2;Column;Andruck3           ;
               SourceExpr=Andruck[3] }

    { 1000000003;2;Column;Andruck4           ;
               SourceExpr=Andruck[4] }

    { 1000000002;2;Column;Andruck5           ;
               SourceExpr=Andruck[5] }

    { 1000000001;2;Column;Andruck6           ;
               SourceExpr=Andruck[6] }

    { 1000000008;2;Column;Andruck7           ;
               SourceExpr=Andruck[7] }

    { 1000000007;2;Column;Andruck8           ;
               SourceExpr=Andruck[8] }

    { 8   ;2   ;Column  ;Debitornr_RMA_Beteiligte;
               SourceExpr="Debitornr." }

    { 12  ;2   ;Column  ;WORKDATE            ;
               SourceExpr=WORKDATE }

    { 13  ;2   ;Column  ;RMA_Nr_RMA_Beteiligte;
               SourceExpr="RMA-Nr." }

    { 14  ;1   ;DataItem;                    ;
               DataItemTable=Table50023;
               DataItemTableView=WHERE(Art=FILTER(an Kunden),
                                       Andruck=FILTER(Text oben));
               DataItemLink=Nr.=FIELD(RMA-Nr.) }

    { 15  ;2   ;Column  ;Bemerkung_TOPASBemerkungen;
               SourceExpr=Bemerkung }

    { 16  ;1   ;DataItem;                    ;
               DataItemTable=Table50021;
               DataItemTableView=WHERE(Belegart=FILTER(an Kunden),
                                       Ausblenden=FILTER(No));
               OnAfterGetRecord=BEGIN
                                  TariffNo := '';
                                  Text_Abweichung_SN_DC := '';

                                  Artikel.RESET;
                                  Artikel.SETFILTER("No.",'%1',"Artikelnr.");
                                  IF Artikel.FINDFIRST THEN BEGIN
                                    TariffNo := Artikel."Tariff No.";
                                    Artikelnr := Artikel."No. 2";
                                  END ELSE
                                    Artikelnr := "Artikelnr.";

                                  r_rma_zeile.RESET;
                                  r_rma_zeile.SETRANGE(Belegart,r_rma_zeile.Belegart::"vom Kunden");
                                  r_rma_zeile.SETRANGE("RMA-Nr.","RMA-Zeile"."RMA-Nr.");
                                  r_rma_zeile.SETRANGE("Belegnr.","RMA-Zeile"."Belegnr.");
                                  r_rma_zeile.SETRANGE("Belegzeilennr.","RMA-Zeile"."Belegzeilennr.");
                                  r_rma_zeile.SETRANGE("Datecode Pos.","RMA-Zeile"."Datecode Pos.");
                                  IF (r_rma_zeile.FINDFIRST) AND (r_rma_zeile."SN-Nr. / DC" <> "RMA-Zeile"."SN-Nr. / DC") THEN
                                    Text_Abweichung_SN_DC := 'Ersatzlieferung: alte Seriennr. ' + r_rma_zeile."SN-Nr. / DC";
                                END;

               DataItemLink=RMA-Nr.=FIELD(RMA-Nr.) }

    { 17  ;2   ;Column  ;MasnahmeHersteller_RMA_Zeile;
               DecimalPlaces=0:0;
               SourceExpr="RMA-Zeile"."Maánahme Hersteller" }

    { 18  ;2   ;Column  ;SN_Nr_DC_RMA_Zeile  ;
               SourceExpr="SN-Nr. / DC" }

    { 19  ;2   ;Column  ;Ursprungsland_RMA_Zeile;
               SourceExpr=Ursprungsland }

    { 20  ;2   ;Column  ;MengeSN_Nr_DC_RMA_Zeile;
               DecimalPlaces=0:0;
               SourceExpr="Menge SN-Nr. / DC" }

    { 21  ;2   ;Column  ;Artikelnr           ;
               SourceExpr=Artikelnr }

    { 22  ;2   ;Column  ;Anzahl_Zeile        ;
               SourceExpr=Anzahl_Zeile }

    { 23  ;2   ;Column  ;TariffNo            ;
               SourceExpr=TariffNo }

    { 24  ;2   ;Column  ;ExterneBelegnummmer_RMA_Zeile;
               SourceExpr="Externe Belegnummmer" }

    { 25  ;2   ;Column  ;Text_Abweichung_SN_DC;
               SourceExpr=Text_Abweichung_SN_DC }

    { 26  ;1   ;DataItem;Textunten           ;
               DataItemTable=Table50023;
               DataItemTableView=WHERE(Art=FILTER(an Kunden),
                                       Andruck=FILTER(Text unten));
               DataItemLink=Nr.=FIELD(RMA-Nr.) }

    { 27  ;2   ;Column  ;Bemerkung_Textunten ;
               SourceExpr=Bemerkung }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Land@1140000 : Record 9;
      Firmendaten@1000000000 : Record 79;
      r_rma_zeile@1140012 : Record 50021;
      Artikel@1000000005 : Record 27;
      FormatAddr@1000000001 : Codeunit 365;
      TOPAS_Funktionen@1000000004 : Codeunit 50006;
      CompanyInfo@1000000003 : ARRAY [15] OF Text;
      Amount@1140001 : Decimal;
      Totalamount@1140002 : Decimal;
      Anzahl_Zeile@1140004 : Integer;
      Andruck@1000000002 : ARRAY [8] OF Text;
      Zeile1@1140005 : Text[60];
      Zeile2@1140006 : Text[60];
      Zeile3@1140007 : Text[60];
      Zeile4@1140008 : Text[60];
      TariffNo@1140011 : Code[20];
      Artikelnr@1140013 : Code[40];
      Text_Abweichung_SN_DC@1140014 : Text[80];
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionRMA_Beteiligte_Body2@5025(VAR "RMA-Beteiligte"@1000000000 : Record 50022);
    BEGIN
      WITH "RMA-Beteiligte" DO BEGIN
        ReportForNav.ShowOutput((Art = Art::Kunde) AND (Fhrungsrolle = TRUE));
        FormatAddr.FormatAddr(Andruck,Name,"Name 2",'',Adresse,"Adresse 2",Ort,"PLZ-Code",'',"L„nder-/Regionscode");
      END;
    END;

    LOCAL PROCEDURE OnPreSectionRMA_Zeile_Body5@5026(VAR "RMA-Zeile"@1000000000 : Record 50021);
    BEGIN
      WITH "RMA-Zeile" DO BEGIN
        ReportForNav.ShowOutput(Belegart = Belegart::"an Kunden");
        IF  Belegart = Belegart::"an Kunden" THEN BEGIN
          //  Amount := ROUND(( "RMA-Zeile"."Menge SN-Nr. / DC") * ("RMA-Zeile"."urspr. DC-Preis EK-Lieferung"),0.01);
          //  Totalamount += Amount;
          Anzahl_Zeile += 1;
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionRMA_Zeile_Body6@5027(VAR "RMA-Zeile"@1000000000 : Record 50021);
    BEGIN
      WITH "RMA-Zeile" DO BEGIN
        ReportForNav.ShowOutput(TariffNo <> '');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionRMA_Zeile_Body7@5028(VAR "RMA-Zeile"@1000000000 : Record 50021);
    BEGIN
      WITH "RMA-Zeile" DO BEGIN
        ReportForNav.ShowOutput("RMA-Zeile"."Externe Belegnummmer" <> '');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionRMA_Zeile_Body8@5029(VAR "RMA-Zeile"@1000000000 : Record 50021);
    BEGIN
      WITH "RMA-Zeile" DO BEGIN
        ReportForNav.ShowOutput(Text_Abweichung_SN_DC <> '');
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'RMA_Beteiligte': CASE SectionId OF
          'Body2': OnPreSectionRMA_Beteiligte_Body2("RMA-Beteiligte");
        END;
        'RMA_Zeile': CASE SectionId OF
          'Body5': OnPreSectionRMA_Zeile_Body5("RMA-Zeile");
          'Body6': OnPreSectionRMA_Zeile_Body6("RMA-Zeile");
          'Body7': OnPreSectionRMA_Zeile_Body7("RMA-Zeile");
          'Body8': OnPreSectionRMA_Zeile_Body8("RMA-Zeile");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>jXoAAL1d63LbOJb+v1X7Diz92O7UyDQB8OqOZ9YXeeyOb2vZTma3plKMBFucSKSHotJxv8w8zLzYAiQk3g4ogFY6PxIRBHH5zsG5AAcn7//yfTE3vtF0GSXx4QCZ1sCg8SSZRvHz4WCVPe35g7/8+T//4/2nLA3v6EuSZsvL8DVZZWOaRuE8+p2mRvnzcdOQbWLT4a3VigbGdbighwPR0lmSXoffBsZJEmdpMr9/fWHvTum30feXlC6XZqVT8+Gi8oiHhqTaN97NcN2rcWisRzI0TlbzbJVSVhbTFftkPjRuV1/m0eQDfb1PvlJee+pNQp/62PKebGpbbPyn0fJlHr6KcV8d7V1G9Im1PpnRKDY+rOIpHRi1+WxmTEyGp4lslzVz8+UfdJJdJ4cDx7KQOzDOIjqffqRfGHjfogl9SOeHg1mWvRzs718fPY5Hd497mFU0f8NfzSx5CZfmlB54lu3vn77G4SKaLFm1wNq/OQ2zcP8kWbyE8evPP93f3B6Nf3o3MK7C9DmKl4cDbLG5O0MD8X9tNpTb8Jme0+h5lrGXgSdKPkbTbMYKkJUXvND0QxRPDwdHNhsrow/7xak8NLyXjKHyErG6jr2e+kMcsRr3NM5my5uno6toPo8WNKPpgDGPYbw/DuPpMv/JHi4yukDGBtHPH5KXpwYTFEjyqfHK/GvWp3i6D7/MWZX8HwYmtvgg/nkWzVl3OarLglDXqTkwLtgU0ED03BhIZTB39InRCxzEWZKwhoshFGMuSlAVhTEjLqN54/1JGI9naRR/PRw8hfMlY5Rb9pRdhd9v4gm9pSkHvv7uJh6x1fhavMjSFS+fhxN6ER8nWZYs1oUFAc8OBx42yaAyITYlMYllrbQ+VRuc6j39nh0n39fzFI+ILdsxW92sM+Q71pCz82UyCfmEz+ZJyAjPOMuqwlFjmOAlGxqTWZiOaXbIqvFmj+bRc7ygvNZVNJ3O6Qn7zbjFOE/S3/OXh4N1Ea/PngoOP08W9IWBU7ADazGneDHeZpXG/BkC4+x1ThnOSRplrwUSzsB4WNJiwIIQ7LkxRvFiv4nofg4phDMuWnd1cEYbnBmIQ8c3bdxCGjmImDZyXcJXtOn4hP2pQt8aIx8NKUbjlRzMhzGesWWOEBNzXAgA48wr1Ilvc3YDyE9q9D9O0imTgowF5nP2PW+maJeT9zKK6Zqq5fM4S2k2ma35+yh+5os8sCAq8vaKGfmi9WJaRUswlUh9jewDi6RNTkHKUlQdM5kWMb7IqIbAug1TxkVcEpXSTibMcOPVY0R/Oxx8PB/djX4+SrPDs4vL+9Hdz7neefeurHyZSxkh9lit0eXpz+LpXSEFcUNKNCVhU0QgmCeOk+lrVRjyZ1yl/Xm4vIlvUypE4kaKdUi+tpysyVPRxUbkIUwgtpCIvda8EDivy/ALndfXR16Urw/brayCwAyCwPf8IWkLQkR8y7SYhmc2iOt4pu34lhtIRaPHReOSC6XD42Q+5Ui88NauLpkdNHo4HGd0RVNOxAM2i19G1w+H90efjOskf14vomoRMHlY7nGp3hR8zZUDL4rG4ihag3VnN6geDGqBH0bd4Po5uLg3tA/jzNy7ODULcHNoH4/u2WyezRzLNbj1QnV4bR14sQxeIbiR0wNev4Q3sDi8nuNu41kP5bCi3rB+HI1GexyvCq6VsiqyzWJ1bF0dbIkMW1u05mno6FIOYEJMZloT5AmWtVyAYx0vR973NxwrRdY1PacO7nar6ZI+ZTWbqSioWUyMgRnI10mHxbSpok4C/w1mU0kbW0YbR3QTaNDG608bwfZ/OG34EthGnLKOMnW4S7QD6jgy6riiG1iTSqxbqx95PHetSb2Aa4w/mELbqKNLGUDr9qCMK6OMJ7qB1TFMmWBDmMAKTA8HoJKwTd91PdseGrbnm4FlY+JWqdEbYT4W40/GT0PjJ/aPKLxNltlTOJl1IN/9nTpF7F4U8GQU8EWzChq70NUb9D3HRAxWNCS5MRT4nN1BMjDvLxga2MImYg6g16mtaxqaa+Oz8Ltp/MJ1df5rTY3iQR02LR3sy9AKRGuwDm6jhRtoIdfO8fIYXIELuMsl2yK3gEsPrdtZEtMCrns6L+EqyjXwAhSmHK9A6sNYojkdxUhKQxAjInRewWR+QGSgFUzGDHGOmu07P26xH02nfB/X0F3sm++UqUCsXosdWVJ6rLcOdVQhrmhCm7EuX8NDuy1zuVPkWZ5r45J7/d0I3Zx9O/Au3qvjivvhKnUrkfAriY4is3vgCgvR3rgyKdqBKn+rjmk/xYSkviQSziSBVROMqVMxDpzcHutST4RJi1x0SNVTb2SP7h4rK3+RLZ9pGk1mWQfc0k/UaeD2o4HU50TC6SQ6TqffpIGvSgPkIpMtg3wzZQc0eEzSZbbZ2oRdyXUVdYz9fhhLfUcknEeioyNLM8zlu9wyA7hQip6bu4uk68hjDd1RPE1Xk68ehNnmnTJYNuDZdWAk9eCQcOFsJb1VKyw2l4gOXr6ljZffgZevgZfeLqfUr0LCsbKV9BGAF9bBy8HF5qYj395sI4Y6EEMaiGltXCKpH4SEI2QraZs2YiTQQsztgRjuQAxrIKblCiGpL4SEM2Qr6QYAMV8HMdfqgRjpQIxoIKblDCGpN4SFN2QrSXoAMU8LMTtHzNbAy+7Ay1bHy9GS+ljqrWDhrTg9pT5xtfDadkTTxsvpwMvRwEtL6mP54ZbwQpyeUp84WlYF1taSbgdergZeeodVUg8DCw/DgWX+bTThAVgtyMryHDXo5A8HgelZTFrxqIfcpiW4tl0vYHYYoDZyPdsfIuzmNnKAN3s2RT+fz6KUGZnTMKMxhB9YDYQjn7Ow6B041ENxznxlNeYcuJbJpos9x8QBclwHmC5B1hBb1nqCF+Oby+Q52TZBsJp8gsKcdhT26JpnkKQ0e2xsbTt8dFxoY7lzi47vy10cH10fGKcjYhnYsXyDh4QZludZrEE3MCrwbK2ovmK0NBiW2uFY2OEOrMG6wUUVcLG59WzXITm86vufeQTCx4uz+73jixOTIXc3Gp+Ozs6ws4FU9loZSFdPtUkNdCwMdLdHdAextLjUKmD0HC0gRw93e0PjYXy6Z6ziqfHr7d/2PrBvkoM1lPIK6mDq6T2p7Y6F7e72iOrAgQ6Y8FmSVsTBSbJY0PT3L2H81Tj669A4D+M4+VYLHITfq8Oqpx6lBj4WBr7bI5oD+zqwEr/gUVturHZJUpcZPo7lceFosb+I5RguciyjJUnlFdXB1fKesNQXIMIXcHuoKexpgeu8VY6OHu5PR/j806dPoBytvFaHUUshEamLQISL4PZQSNjVghH3lqO5gOSSsi1Bm6+UAfS0FBGR+gxE+AxeD0WEHR0AcaCyyDtl5yldZfwmg3Esk54dNdSh1VJLRB4Mtw5j7rsJV8pQ7MLuGCEW8zCQI49m99dOmN4O+in9EmVJGqefm2HEbftcWlcdcS2NRaTHFUQ4N17PTbxq3KwEcdf+QYh/vLn7cHp0P4IQ3rxTR1Qv5lB6OEGEN+X1UFN2KR6Q5cCh+AJPK9iCZ1MQhNlqkQdrsl+b6Pz8tzpEeipI6hMR4RN5fVSQrSBBma/EJCiTjlyAkm790yk+j1eT2SycZ6v4+SAH72gySVZxFrHnzU5NpUgZSl9PGUm9IiK8Ir+PMiIaUPo4h9Im/WPdz2maGr8m4WQWLYyrMFwuc0ivUrNeuga2/UIdXj2FJPWTiPCT/D5+ksrWyAZep4C3N7h57JLlIGQEhusbrr2H8C9lfNOf7MCov6zHOQHv1cHW00VS74kI78nv4z0hHbD9N4qFPJSuBrYj0M7fNMF0SrSl79XR1tNTUnfKFu6U38edUtlPWaMdoDdLDroIo/mB8Y/Ff68vyq7xBN6oI6mlzmypR2ULj8rvoc5Qw2IFNX5hs+pq/ItZSovryzG/qpGz59+SVWoIhcVvFK1hbJUrgxhoKTJb6lXZwqsKep5coUpsmOQkxkLKhmhxke9axZaHK6rjp6WpbKnrZAvXKeihqRCpYwcyYYGeLhPyG4qPSfocxs85A+Y3Fku+Wz+qw6Wla2z51SDh9wSO7MYsl9lbb8z6zBZHAK8FQQ6WJ78zK5lxefE1cGs3X+/oJAv5ldnO+Uq9Elt4JUEPaW9VAjWwZbqOjYdBe862H5iWuM+xVcMiF2CWauKFnFvGs+jlhRnWTCStfRbpvXKxzVb/on3ZXJ3TdnQBqu0FgVeTxaur1TyLTpL5ahGLYQRqt9Lf77ev+74vGpLcAR4zmT+hPMUGI3l5UGiKg0uRWcFa/+l9kCpukcq6+69/rpLsl4vxjcGPLIunom8wFkXpaFPcrKx2KaIXL+Kn5P/Q3+uTw+DkKoHpkh5saQ+40QO/5iaPYi2i3CWdONJO7L/zgPlqvHxe7DT7BiPtKtdpTpIp/XzCGF8yAlc6ArfZFRgEWY9IB7vwpF14zS7AiIhqcDbYgS/twG92AIaotK5agr0E0l6CZi9g4FD9ShrYBbLkbG01OrG6uK4M9YX7QfJ+musHda2fo7tHWRdY3kVrAYHBj1CwONxVhzAgza7AqMH2fU64I7lMQHazI1DAte7Hwf3IxQJqCgDchV2ZbgXup774ReRRS4JaXXFKSNa2B7bdJL3VFTOGZW37YNtNWltd8XtE1nYAtt0kr9UVSynL44ItsO0mSa2uyFZH1jYC224KcasrztiVtY3BtpvS2+qK+vZkbROw7abgtroi8H1Z2/X1Wpgfm+MZs2qOgEOXn/rA3dWXbXmCkU8EJGpZB27RBSYg8sJURw8LG4mXu98wLdt2ZDurhbC5xJ0LnqTsmC5o+nUVP3MT7Yfk0iFquXRCkcYtfjcUgxVcsa7AjXoj+cIqtBLuyJLtoEZ07/ZsOxKHEkq3U4sQfWNeHVLJq2O/KatOz0NZt9yZQT4Bt2a2ZRdbe3cbjvrcZrA2c3fUVvYCkV6al/b2lpazhxAku3fu7W2QEKwMKtgurFXlA2nKB7uSaet/mbj5UUm2UIdgOKZz+hx2SofVkn3Di9Z1rhO9VFzI1ZYOPgjFOQ2n9dyERYm9Iwmxaa3MveW4JnCbSF1M9NgFdxuZjIYOsH2LPMTDpb1OSVE/RsgXGM8Zt85R1thwugr//a84nC2oONvNom+5G/xI00xsG90nL62NJ1Z2x9EqT4DXH1b2m4oa6oIGSunyhnRdktQt3WQo94EDC6SBtVv8mZNTnEvwkavA/utqmUVPr5soRf6ZBsR60bPSc8p1cz222t3KNUEPgxh7OwaZGULRVzovDoOZ3DOuV4svfMdUG+7q1xqo6x0PS3ew1831OB12y9NhREDODixkejsWLpQpyxz1/1mFcdZHsJQfvkWwaB0Yb03YpZLJpYm/E1ROOT3TDYLAQYwMZrHhBpw2OcQ2+Q2z4hZ85w0zPao8pMuXlJkxyznTqTl1TvihZ/pqJE/GTRo9R7EKmZqpa1tNvOHkAemlktmWxAvxgH34jEty7a2ZFZYtGR802t03nG+h/FKG5gFXOw5Kal9vT92LJDldII+sdpJ1Sb/ROc86/YNSoTq1VKi+CVyHVzbHCOx1bvfaKokQLZ5xHTpRxygwCb+MYMrvNFbO1K/CZW5tnTMuyeh8ToudB+EItF2Qzvrqy4mnmNllIlS7hwCs5MYLbBBLrvZ9Tmud43WemJ/GcWoa+xw/OkmmtAhULFL281iO6qvNMSn8VgNTIKv2G0wpopRGu82lViXsywO3FvipNFJBVj/+eHzN985OT7qZGKilAbO3U9uJwE7mdpgrCcYsSZR3cSvJlB/5VwRBTQl3wyerqoFhsFP7x4azZm+PlPdqNiiUtYqLAFUIc+tSjQNlVdUh5FehdmiQ2D11klV1nmA21IFQOEZxCp4bbF5qwKSlaLal+Myv/fSCqVQ2CIEwYWWU9CTiUfx7OJvLObH2XgNXLWXTDubW24O1oTMuUI3VVJgkqQtkTLqAMYl/lDHp7mr/34aVR/eFlorjF2DTka5ZvajC+zCNnp7ylPibFPmVIg3O0tINW01Dp6dusFxFM0YpdLWAAk5qvHmnjpGjJfzbpp7e6nOgE33QuqlZNhJPFlp9HrD6yI9afd6uVp/Tx+uo+HABYfyzm9WXB5aLoN4l8z0OytDyOx7ASRlUB7XI8kqxBt9pSf3ta7Oni+E4u1ubetp09D2jaUzz86p4teBJDroNve4PNJDX8jrevOKh2AzQFq/Z4ZKEKtCK94EVb/+oFe9XVjyUJ0V5xbs9lYlT2exm3CvZuvHyAHUldcL+/nz05TcaTWb8OJh5EqcnoG4BK6qznaulaN561O5KFU3df9E/aj+lk2gRzvP/1W15OLAOuD0OxujkC7N4FME6mxNJo9z0qoXxgEFO3RtrCgHZRRfja36EzXeETmp9gpFPkO+pEIdd8+dF+2CYqnSPQBKKrYZ67gsbkonCceBST1shXLviYuYdwKF1ZSWF+Ou6j5W3KgkGrNZTiLouzca8UTBerKyjEGVdQCuUklHVSjXQwRDMLbpPIfpaIrbyLsGAF8kHqrEuVWUlOKFsdxVnOwuCewzTVsN/SIBc3pd6hBzWjoGRpP2QxcDU7pO+OQYmqOhtrnolUlOMFLbGIeOjrmTLo6M3mhm82d14Fn1Tf7jO1rg+3COwr87U0pi0TTV1+0Ivw8db7QsPCmcGDOadhvJh0DwA0VWVa6U1VB9pFaXyzfv9jv9H+s//Dw==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

