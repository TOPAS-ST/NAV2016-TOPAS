OBJECT Report 50016 RMA-Lieferschein Kunde
{
  OBJECT-PROPERTIES
  {
    Date=11.09.23;
    Time=13:40:16;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                   Firmendaten.GET;
                   Firmendaten.CALCFIELDS(Picture,"ISO Logo");
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table50020;
               OnAfterGetRecord=BEGIN
                                  TOPAS_Funktionen.GetCompanyInformation(CompanyInfo,Firmendaten);
                                END;

               ReqFilterFields=RMA-Nr. }

    { 2   ;1   ;DataItem;                    ;
               DataItemTable=Table50022;
               DataItemTableView=WHERE(Art=FILTER(Kunde));
               OnAfterGetRecord=BEGIN
                                  IF Land.GET("L„nder-/Regionscode") THEN ;
                                END;

               DataItemLink=RMA-Nr.=FIELD(RMA-Nr.) }

    { 1000000000;2;Column;Picture_Firmendaten;
               SourceExpr=Firmendaten.Picture }

    { 3   ;2   ;Column  ;ISOLogo_Firmendaten ;
               SourceExpr=Firmendaten."ISO Logo" }

    { 1000000020;2;Column;CompanyName        ;
               SourceExpr=CompanyInfo[1] }

    { 1000000019;2;Column;CompanyAddress     ;
               SourceExpr=CompanyInfo[2] }

    { 1000000018;2;Column;CompanyPostCode_City;
               SourceExpr=CompanyInfo[4] + ' ' + CompanyInfo[5] }

    { 1000000017;2;Column;CompanyPhone       ;
               SourceExpr=CompanyInfo[6] }

    { 1000000016;2;Column;CompanyFax         ;
               SourceExpr=CompanyInfo[7] }

    { 1000000015;2;Column;CompanyVATRegNo    ;
               SourceExpr=CompanyInfo[8] }

    { 1000000014;2;Column;CompanyRegNo       ;
               SourceExpr=CompanyInfo[9] }

    { 1000000009;2;Column;CompanyVorstand    ;
               SourceExpr=CompanyInfo[10] }

    { 1000000010;2;Column;CompanyARV         ;
               SourceExpr=CompanyInfo[11] }

    { 1000000011;2;Column;CompanyAmtsgericht ;
               SourceExpr=CompanyInfo[12] }

    { 1000000012;2;Column;CompanyWEEERegNo   ;
               SourceExpr=CompanyInfo[13] }

    { 1000000013;2;Column;CompanyPostfach    ;
               SourceExpr=CompanyInfo[14] }

    { 1000000021;2;Column;CompanyHomepage    ;
               SourceExpr=CompanyInfo[15] }

    { 1000000022;2;Column;CompanyEORINr      ;
               SourceExpr=CompanyInfo[16] }

    { 1000000006;2;Column;Andruck1           ;
               SourceExpr=Andruck[1] }

    { 1000000005;2;Column;Andruck2           ;
               SourceExpr=Andruck[2] }

    { 1000000004;2;Column;Andruck3           ;
               SourceExpr=Andruck[3] }

    { 1000000003;2;Column;Andruck4           ;
               SourceExpr=Andruck[4] }

    { 1000000002;2;Column;Andruck5           ;
               SourceExpr=Andruck[5] }

    { 1000000001;2;Column;Andruck6           ;
               SourceExpr=Andruck[6] }

    { 1000000008;2;Column;Andruck7           ;
               SourceExpr=Andruck[7] }

    { 1000000007;2;Column;Andruck8           ;
               SourceExpr=Andruck[8] }

    { 8   ;2   ;Column  ;Debitornr_RMA_Beteiligte;
               SourceExpr="Debitornr." }

    { 12  ;2   ;Column  ;WORKDATE            ;
               SourceExpr=WORKDATE }

    { 13  ;2   ;Column  ;RMA_Nr_RMA_Beteiligte;
               SourceExpr="RMA-Nr." }

    { 14  ;1   ;DataItem;                    ;
               DataItemTable=Table50023;
               DataItemTableView=WHERE(Art=FILTER(an Kunden),
                                       Andruck=FILTER(Text oben));
               DataItemLink=Nr.=FIELD(RMA-Nr.) }

    { 15  ;2   ;Column  ;Bemerkung_TOPASBemerkungen;
               SourceExpr=Bemerkung }

    { 16  ;1   ;DataItem;                    ;
               DataItemTable=Table50021;
               DataItemTableView=WHERE(Belegart=FILTER(an Kunden),
                                       Ausblenden=FILTER(No));
               OnAfterGetRecord=BEGIN
                                  TariffNo := '';
                                  Text_Abweichung_SN_DC := '';

                                  Artikel.RESET;
                                  Artikel.SETFILTER("No.",'%1',"Artikelnr.");
                                  IF Artikel.FINDFIRST THEN BEGIN
                                    TariffNo := Artikel."Tariff No.";
                                    Artikelnr := Artikel."No. 2";
                                  END ELSE
                                    Artikelnr := "Artikelnr.";

                                  r_rma_zeile.RESET;
                                  r_rma_zeile.SETRANGE(Belegart,r_rma_zeile.Belegart::"vom Kunden");
                                  r_rma_zeile.SETRANGE("RMA-Nr.","RMA-Zeile"."RMA-Nr.");
                                  r_rma_zeile.SETRANGE("Belegnr.","RMA-Zeile"."Belegnr.");
                                  r_rma_zeile.SETRANGE("Belegzeilennr.","RMA-Zeile"."Belegzeilennr.");
                                  r_rma_zeile.SETRANGE("Datecode Pos.","RMA-Zeile"."Datecode Pos.");
                                  IF (r_rma_zeile.FINDFIRST) AND (r_rma_zeile."SN-Nr. / DC" <> "RMA-Zeile"."SN-Nr. / DC") THEN
                                    Text_Abweichung_SN_DC := 'Ersatzlieferung: alte Seriennr. ' + r_rma_zeile."SN-Nr. / DC";
                                END;

               DataItemLink=RMA-Nr.=FIELD(RMA-Nr.) }

    { 17  ;2   ;Column  ;MasnahmeHersteller_RMA_Zeile;
               DecimalPlaces=0:0;
               SourceExpr="RMA-Zeile"."Maánahme Hersteller" }

    { 18  ;2   ;Column  ;SN_Nr_DC_RMA_Zeile  ;
               SourceExpr="SN-Nr. / DC" }

    { 19  ;2   ;Column  ;Ursprungsland_RMA_Zeile;
               SourceExpr=Ursprungsland }

    { 20  ;2   ;Column  ;MengeSN_Nr_DC_RMA_Zeile;
               DecimalPlaces=0:0;
               SourceExpr="Menge SN-Nr. / DC" }

    { 21  ;2   ;Column  ;Artikelnr           ;
               SourceExpr=Artikelnr }

    { 22  ;2   ;Column  ;Anzahl_Zeile        ;
               SourceExpr=Anzahl_Zeile }

    { 23  ;2   ;Column  ;TariffNo            ;
               SourceExpr=TariffNo }

    { 24  ;2   ;Column  ;ExterneBelegnummmer_RMA_Zeile;
               SourceExpr="Externe Belegnummmer" }

    { 25  ;2   ;Column  ;Text_Abweichung_SN_DC;
               SourceExpr=Text_Abweichung_SN_DC }

    { 26  ;1   ;DataItem;Textunten           ;
               DataItemTable=Table50023;
               DataItemTableView=WHERE(Art=FILTER(an Kunden),
                                       Andruck=FILTER(Text unten));
               DataItemLink=Nr.=FIELD(RMA-Nr.) }

    { 27  ;2   ;Column  ;Bemerkung_Textunten ;
               SourceExpr=Bemerkung }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Land@1140000 : Record 9;
      Firmendaten@1000000000 : Record 79;
      r_rma_zeile@1140012 : Record 50021;
      Artikel@1000000005 : Record 27;
      FormatAddr@1000000001 : Codeunit 365;
      TOPAS_Funktionen@1000000004 : Codeunit 50006;
      CompanyInfo@1000000003 : ARRAY [20] OF Text;
      Amount@1140001 : Decimal;
      Totalamount@1140002 : Decimal;
      Anzahl_Zeile@1140004 : Integer;
      Andruck@1000000002 : ARRAY [8] OF Text;
      Zeile1@1140005 : Text[60];
      Zeile2@1140006 : Text[60];
      Zeile3@1140007 : Text[60];
      Zeile4@1140008 : Text[60];
      TariffNo@1140011 : Code[20];
      Artikelnr@1140013 : Code[40];
      Text_Abweichung_SN_DC@1140014 : Text[80];
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionRMA_Beteiligte_Body2@5025(VAR "RMA-Beteiligte"@1000000000 : Record 50022);
    BEGIN
      WITH "RMA-Beteiligte" DO BEGIN
        ReportForNav.ShowOutput((Art = Art::Kunde) AND (Fhrungsrolle = TRUE));
        FormatAddr.FormatAddr(Andruck,Name,"Name 2",Bemerkung,Adresse,"Adresse 2",Ort,"PLZ-Code",'',"L„nder-/Regionscode");
      END;
    END;

    LOCAL PROCEDURE OnPreSectionRMA_Zeile_Body5@5026(VAR "RMA-Zeile"@1000000000 : Record 50021);
    BEGIN
      WITH "RMA-Zeile" DO BEGIN
        ReportForNav.ShowOutput(Belegart = Belegart::"an Kunden");
        IF  Belegart = Belegart::"an Kunden" THEN BEGIN
          //  Amount := ROUND(( "RMA-Zeile"."Menge SN-Nr. / DC") * ("RMA-Zeile"."urspr. DC-Preis EK-Lieferung"),0.01);
          //  Totalamount += Amount;
          Anzahl_Zeile += 1;
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionRMA_Zeile_Body6@5027(VAR "RMA-Zeile"@1000000000 : Record 50021);
    BEGIN
      WITH "RMA-Zeile" DO BEGIN
        ReportForNav.ShowOutput(TariffNo <> '');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionRMA_Zeile_Body7@5028(VAR "RMA-Zeile"@1000000000 : Record 50021);
    BEGIN
      WITH "RMA-Zeile" DO BEGIN
        ReportForNav.ShowOutput("RMA-Zeile"."Externe Belegnummmer" <> '');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionRMA_Zeile_Body8@5029(VAR "RMA-Zeile"@1000000000 : Record 50021);
    BEGIN
      WITH "RMA-Zeile" DO BEGIN
        ReportForNav.ShowOutput(Text_Abweichung_SN_DC <> '');
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'RMA_Beteiligte': CASE SectionId OF
          'Body2': OnPreSectionRMA_Beteiligte_Body2("RMA-Beteiligte");
        END;
        'RMA_Zeile': CASE SectionId OF
          'Body5': OnPreSectionRMA_Zeile_Body5("RMA-Zeile");
          'Body6': OnPreSectionRMA_Zeile_Body6("RMA-Zeile");
          'Body7': OnPreSectionRMA_Zeile_Body7("RMA-Zeile");
          'Body8': OnPreSectionRMA_Zeile_Body8("RMA-Zeile");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

