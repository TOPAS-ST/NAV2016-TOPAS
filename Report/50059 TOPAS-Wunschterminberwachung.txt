OBJECT Report 50059 TOPAS-Wunschterminberwachung
{
  OBJECT-PROPERTIES
  {
    Date=18.10.21;
    Time=09:35:58;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  DebFilter := "Sales Header".GETFILTERS;
                  VerkZeileFilter := "Sales Line".GETFILTERS;
                  PeriodeText := "Sales Line".GETFILTER("Promised Delivery Date");
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table13;
               PrintOnlyIfDetail=Yes }

    { 2   ;1   ;DataItem;                    ;
               DataItemTable=Table36;
               PrintOnlyIfDetail=Yes;
               OnPreDataItem=BEGIN
                               //ReportForNav.GetDataItem('SalesHeader').NewPagePerRecord := NurEinProSeiteDrucken;
                             END;

               OnAfterGetRecord=BEGIN
                                  deb := "Sales Header"."Sell-to Customer Name";
                                  debnr :="Sales Header"."Sell-to Customer No.";
                                END;

               ReqFilterFields=Order Date,Location Code;
               DataItemLink=Betreuer Innendienst=FIELD(Code) }

    { 3   ;2   ;Column  ;Code_Salesperson_Purchaser;
               SourceExpr="Salesperson/Purchaser".Code }

    { 4   ;2   ;Column  ;USERID              ;
               SourceExpr=USERID }

    { 5   ;2   ;Column  ;ReportForNavPageNo  ;
               SourceExpr=ReportForNav.PageNo }

    { 6   ;2   ;Column  ;TODAY_0_4           ;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 7   ;2   ;Column  ;SalesHeaderTABLENAME___DebFilter;
               SourceExpr="Sales Header".TABLENAME + ': ' + DebFilter }

    { 8   ;2   ;Column  ;STRSUBSTNO_Auftragszeile_Pct1_VerkZeileFilter;
               SourceExpr=STRSUBSTNO('Auftragszeile: %1',VerkZeileFilter) }

    { 9   ;2   ;DataItem;                    ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document Type,Bill-to Customer No.,Currency Code)
                                 WHERE(Document Type=CONST(Order),
                                       Outstanding Quantity=FILTER(<>0),
                                       Unit Cost (LCY)=FILTER(<>0));
               PrintOnlyIfDetail=Yes;
               ReqFilterHeadingML=DEU=Verkaufszeile;
               OnAfterGetRecord=BEGIN
                                  NeuerAuftrag := "Sales Line"."Document No." <> AuftragKopf."No.";
                                  IF NeuerAuftrag THEN
                                    AuftragKopf.GET(1,"Sales Line"."Document No.");
                                  IF "Sales Line"."Promised Delivery Date" <= WORKDATE THEN
                                    RckstandMenge := "Sales Line"."Outstanding Quantity"
                                  ELSE
                                    RckstandMenge := 0;
                                  AuftragBetrag := ROUND("Sales Line"."Outstanding Quantity" * Amount / Quantity);
                                  AuftragBetragMW := AuftragBetrag;
                                  {
                                  //Auskommentiert am 15.05.08 A
                                  IF AuftragKopf."Currency Code" <> '' THEN BEGIN
                                    IF AuftragKopf."Currency Factor" <> 0 THEN
                                      AuftragBetragMW :=
                                        ROUND(
                                          W„hrungWechKurs.UmrechnenBetrFWInMW(
                                            WORKDATE,AuftragKopf.W„hrungscode,
                                            AuftragBetragMW,AuftragKopf.W„hrungsfaktor));
                                    IF Betr„geDruckInMW THEN BEGIN
                                      "VK-Preis" :=
                                        ROUND(W„hrungWechKurs.UmrechnenBetrFWInMW(
                                            WORKDATE,AuftragKopf.W„hrungscode,
                                            "VK-Preis",AuftragKopf.W„hrungsfaktor));
                                      AuftragBetrag := AuftragBetragMW;
                                    END;
                                  END;
                                  }
                                  //Auskommentiert am 15.05.08 E
                                  W„hrungscode2 := AuftragKopf."Currency Code";
                                  IF Betr„geDruckInMW THEN
                                    W„hrungscode2 := '';
                                  W„hrungSummenPuffer.UpdateTotal(
                                    W„hrungscode2,
                                    AuftragBetrag,
                                    Z„hler1,
                                    Z„hler1);
                                  marge := 0;
                                  IF ("Sales Line"."Unit Cost" <> 0) AND ("Sales Line"."Unit Price" <> 0) THEN
                                    marge := (("Unit Price"-"Unit Cost") / "Unit Price" * 100)
                                  ELSE
                                    marge := 999;
                                  IF "Currency Code" = '' THEN
                                    waehrung := 'EUR'
                                  ELSE
                                    waehrung:="Currency Code";
                                  vk_mw := 0;
                                  IF ("Sales Header"."Currency Factor" <> 0) AND ("Unit Price" <> 0) THEN
                                    vk_mw := ("Unit Price" / "Sales Header"."Currency Factor")
                                  ELSE
                                    vk_mw := "Unit Price";
                                END;

               ReqFilterFields=Promised Delivery Date,Unit Cost (LCY),No.,Manufacturer Code;
               DataItemLink=Sell-to Customer No.=FIELD(Sell-to Customer No.),
                            Document No.=FIELD(No.) }

    { 10  ;3   ;DataItem;                    ;
               DataItemTable=Table27;
               PrintOnlyIfDetail=No;
               OnPreDataItem=BEGIN
                               Item.CALCFIELDS(Item.Inventory);
                             END;

               ReqFilterFields=Location Filter;
               DataItemLink=No.=FIELD(No.) }

    { 11  ;4   ;Column  ;TerritoryCode_SalesHeader;
               SourceExpr="Sales Header"."Territory Code" }

    { 12  ;4   ;Column  ;SalespersonCode_SalesHeader;
               SourceExpr="Sales Header"."Salesperson Code" }

    { 13  ;4   ;Column  ;BetreuerInnendienst_SalesHeader;
               SourceExpr="Sales Header"."Betreuer Innendienst" }

    { 14  ;4   ;Column  ;debnr               ;
               SourceExpr=debnr }

    { 15  ;4   ;Column  ;deb                 ;
               SourceExpr=deb }

    { 16  ;4   ;Column  ;Inventory_Item      ;
               SourceExpr=Inventory;
               AutoCalcField=Yes }

    { 17  ;4   ;Column  ;No_SalesHeader      ;
               SourceExpr="Sales Header"."No." }

    { 18  ;4   ;Column  ;OrderDate_SalesHeader;
               SourceExpr="Sales Header"."Order Date" }

    { 19  ;4   ;Column  ;Sell_toCustomerNo_SalesLine;
               SourceExpr="Sales Line"."Sell-to Customer No." }

    { 20  ;4   ;Column  ;RequestedDeliveryDate_SalesLine;
               SourceExpr="Sales Line"."Requested Delivery Date" }

    { 21  ;4   ;Column  ;CurrencyFactor_SalesHeader;
               SourceExpr="Sales Header"."Currency Factor" }

    { 22  ;4   ;Column  ;waehrung            ;
               SourceExpr=waehrung }

    { 23  ;4   ;Column  ;UnitCost_LCY_SalesLine;
               SourceExpr="Sales Line"."Unit Cost (LCY)" }

    { 24  ;4   ;Column  ;marge               ;
               SourceExpr=marge }

    { 25  ;4   ;Column  ;AuftragBetrag       ;
               SourceExpr=AuftragBetrag;
               AutoFormatType=1 }

    { 26  ;4   ;Column  ;UnitPrice_SalesLine ;
               SourceExpr="Sales Line"."Unit Price";
               AutoFormatType=2 }

    { 27  ;4   ;Column  ;OutstandingQuantity_SalesLine;
               SourceExpr="Sales Line"."Outstanding Quantity" }

    { 28  ;4   ;Column  ;Quantity_SalesLine  ;
               SourceExpr="Sales Line".Quantity }

    { 29  ;4   ;Column  ;PromisedDeliveryDate_SalesLine;
               SourceExpr="Sales Line"."Promised Delivery Date" }

    { 30  ;4   ;Column  ;Artikelnr2_SalesLine;
               SourceExpr="Sales Line"."Artikelnr. 2" }

    { 31  ;3   ;DataItem;                    ;
               DataItemTable=Table50014;
               PrintOnlyIfDetail=No;
               DataItemLink=Quotenr.=FIELD(Quotenr.) }

    { 32  ;4   ;Column  ;QuotenrHersteller_Quotedaten;
               SourceExpr="Quotenr. Hersteller" }

    { 33  ;2   ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN
                                    OK := W„hrungSummenPuffer.FIND('-')
                                  ELSE
                                    OK := W„hrungSummenPuffer.NEXT <> 0;
                                  IF NOT OK THEN
                                    CurrReport.BREAK;
                                  W„hrungSummenPuffer2.UpdateTotal(
                                    W„hrungSummenPuffer."Currency Code",
                                    W„hrungSummenPuffer."Total Amount",
                                    Z„hler1,
                                    Z„hler1);
                                  IF W„hrungSummenPuffer."Currency Code" = '' THEN
                                    waehrung2 := 'EUR'
                                  ELSE
                                    waehrung2 := W„hrungSummenPuffer."Currency Code";
                                END;

               OnPostDataItem=BEGIN
                                W„hrungSummenPuffer.DELETEALL;
                              END;
                               }

    { 34  ;1   ;DataItem;Integer2            ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN
                                    OK := W„hrungSummenPuffer2.FIND('-')
                                  ELSE
                                    OK := W„hrungSummenPuffer2.NEXT <> 0;
                                  IF NOT OK THEN
                                    CurrReport.BREAK;
                                  IF W„hrungSummenPuffer2."Currency Code" = '' THEN
                                    waehrung3 := 'EUR'
                                  ELSE
                                    waehrung3 := W„hrungSummenPuffer2."Currency Code";
                                END;

               OnPostDataItem=BEGIN
                                W„hrungSummenPuffer2.DELETEALL;
                              END;
                               }

    { 35  ;2   ;Column  ;waehrung22          ;
               SourceExpr=waehrung2 }

    { 36  ;2   ;Column  ;TotalAmount_WahrungSummenPuffer2;
               SourceExpr=W„hrungSummenPuffer2."Total Amount";
               AutoFormatType=1;
               AutoFormatExpr=W„hrungSummenPuffer."Currency Code" }

    { 37  ;2   ;Column  ;waehrung3           ;
               SourceExpr=waehrung3 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1   ;2   ;Field     ;
                  CaptionML=DEU=Betr„ge in MW anzeigen;
                  SourceExpr=Betr„geDruckInMW }

      { 2   ;2   ;Field     ;
                  CaptionML=DEU=Neue Seite pro Debitor;
                  SourceExpr=NurEinProSeiteDrucken }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      vk_mw@1140000 : Decimal;
      marge@1140001 : Decimal;
      W„hrungWechKurs@1140002 : Record 330;
      W„hrungSummenPuffer@1140003 : TEMPORARY Record 332;
      W„hrungSummenPuffer2@1140004 : TEMPORARY Record 332;
      AuftragKopf@1140005 : Record 36;
      DebFilter@1140006 : Text[250];
      VerkZeileFilter@1140007 : Text[250];
      AuftragBetrag@1140008 : Decimal;
      AuftragBetragMW@1140009 : Decimal;
      Betr„geDruckInMW@1140010 : Boolean;
      PeriodeText@1140011 : Text[30];
      NurEinProSeiteDrucken@1140012 : Boolean;
      RckstandMenge@1140013 : Decimal;
      NeuerAuftrag@1140014 : Boolean;
      OK@1140015 : Boolean;
      Z„hler1@1140016 : Integer;
      W„hrungscode2@1140017 : Code[10];
      waehrung@1140018 : Code[10];
      waehrung2@1140019 : Code[10];
      waehrung3@1140020 : Code[10];
      deb@1140021 : Text[60];
      debnr@1140022 : Code[20];
      v_quote@1140023 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Header2@5056(VAR "Sales Header"@1000000000 : Record 36);
    BEGIN
      WITH "Sales Header" DO BEGIN
        ReportForNav.ShowOutput(Betr„geDruckInMW);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Header3@5057(VAR "Sales Header"@1000000000 : Record 36);
    BEGIN
      WITH "Sales Header" DO BEGIN
        ReportForNav.ShowOutput((ReportForNav.PageNo = 1) AND (DebFilter <> ''));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Header4@5058(VAR "Sales Header"@1000000000 : Record 36);
    BEGIN
      WITH "Sales Header" DO BEGIN
        ReportForNav.ShowOutput((ReportForNav.PageNo = 1) AND (VerkZeileFilter <> ''));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Header7@5059(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        //ReportForNav.ShowOutput((Verkaufszeile.Lieferdatum>Verkaufszeile.Wunschtermin) AND
        //(debnr=Verkaufszeile."Verk. an Deb.-Nr.") AND (Verkaufszeile.Restauftragsmenge > 0));
        {//Auskommentiert am 08.02.2012-ST
        IF ("Sales Header"."Order Date" > WORKDATE - 8 ) THEN BEGIN
          ReportForNav.ShowOutput(("Sales Line"."Promised Delivery Date" > "Sales Line"."Requested Delivery Date")
          AND ("Sales Line"."Promised Delivery Date" <> 31122055D) AND ("Sales Line"."Requested Delivery Date" <> 31122054D));
        END ELSE BEGIN
        }
        IF "Sales Line"."Requested Delivery Date" = (31122054D) THEN BEGIN
          ReportForNav.ShowOutput(("Sales Line"."Promised Delivery Date" > WORKDATE)
          AND (debnr = "Sales Line"."Sell-to Customer No.")
          AND ("Sales Line"."Outstanding Quantity" > 0));
        END ELSE BEGIN
          ReportForNav.ShowOutput(("Sales Line"."Promised Delivery Date" > "Sales Line"."Requested Delivery Date")
          AND (debnr = "Sales Line"."Sell-to Customer No.")
          AND ("Sales Line"."Outstanding Quantity" > 0));
        END;
        //  END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body8@5060(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        {//Auskommentiert am 08.02.2012-ST
        IF ("Sales Header"."Order Date" > WORKDATE - 8 ) THEN
          BEGIN
            ReportForNav.ShowOutput(("Sales Line"."Promised Delivery Date" > "Sales Line"."Requested Delivery Date")
            AND ("Sales Line"."Promised Delivery Date" <> 31122055D) AND ("Sales Line"."Requested Delivery Date" <> 31122054D));
          END
        ELSE
          BEGIN
        }
        IF "Sales Line"."Requested Delivery Date" = (31122054D) THEN BEGIN
          ReportForNav.ShowOutput(("Sales Line"."Promised Delivery Date" > WORKDATE) AND ("Sales Line"."Outstanding Quantity" > 0));
          //ReportForNav.ShowOutput(("Sales Line"."Promised Delivery Date" > WORKDATE + 30) AND ("Sales Line"."Outstanding Quantity" > 0));
        END ELSE BEGIN
          ReportForNav.ShowOutput(("Sales Line"."Promised Delivery Date" > "Sales Line"."Requested Delivery Date")
          AND ("Sales Line"."Outstanding Quantity" > 0));
        END;
        //  END
      END;
    END;

    LOCAL PROCEDURE OnPreSectionQuotedaten_Body9@5061(VAR Quotedaten@1000000000 : Record 50014);
    BEGIN
      WITH Quotedaten DO BEGIN
        // wird nicht mehr angezeigt
        v_quote := 0;
        ReportForNav.ShowOutput(("Quotenr. Hersteller" <> '') AND
        ("Sales Line"."Promised Delivery Date" > "Sales Line"."Requested Delivery Date") AND (v_quote = 1));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionInteger2_Body10@5062(VAR Integer2@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer2 DO BEGIN
        ReportForNav.ShowOutput(Betr„geDruckInMW);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionInteger2_Body11@5063(VAR Integer2@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer2 DO BEGIN
        ReportForNav.ShowOutput(NOT Betr„geDruckInMW);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'SalesHeader': CASE SectionId OF
          'Header2': OnPreSectionSalesHeader_Header2("Sales Header");
          'Header3': OnPreSectionSalesHeader_Header3("Sales Header");
          'Header4': OnPreSectionSalesHeader_Header4("Sales Header");
        END;
        'Item': CASE SectionId OF
          'Header7': OnPreSectionItem_Header7(Item);
          'Body8': OnPreSectionItem_Body8(Item);
        END;
        'Quotedaten': CASE SectionId OF
          'Body9': OnPreSectionQuotedaten_Body9(Quotedaten);
        END;
        'Integer2': CASE SectionId OF
          'Body10': OnPreSectionInteger2_Body10(Integer2);
          'Body11': OnPreSectionInteger2_Body11(Integer2);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
      ForNavOperation@1000000009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'SalesHeader': WITH "Sales Header" DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,AuftragBetragMW);
              END;
           'Restore': BEGIN
                 AuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'SalesLine': WITH "Sales Line" DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,AuftragBetragMW);
                ReportForNav.AddTotal(DataItemId,1,AuftragBetrag);
              END;
           'Restore': BEGIN
                 AuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 AuftragBetrag := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>DWsAAN1dzXLjNhK+b9W+A0tVydi1skzwRyQno6Tkv4x3/LeWPLPZi4qWIJk7FKlQ1Mw4z5PH2Fte
bAESFEGqQRK0nENy2LFIEOj+utHobjSw7376tvSVLzhae2Ew6KCe2lFwMA1nXrAYdDbx/Mju/PTj
3//27t9x5N7jVRjF6yv3OdzEIxx5ru/9hiMl//PjtiOjp/VM2lvhUUe5cZd40Bnf3g1HR582wXr6
FONo6QV//O8RR1/d6dMmWHSU0zCIo9AfP69I4zP85fzbKsLrdY+jovdwyf3Uuoqg2Rc6bjcjQxko
GWld5XTjx5sIk2cB3pBP/K5yt3n0vekH/DwOP2PaemZNXRvbmmrNDWyohKEzb73y3edmjDAqLsLo
xv2yhULvEaB7yOiT7m4f/4un8U046JiqajrbB426v/CwP/uEH4kEvnhT/BD5g85THK/eHh/fDD+O
zu8/Hmkq6ve+ap97cbhy170Zfmuphn189hy4S2+6Js0c9fj2zI3d49NwuXKD54M3ybBvDjvKtRst
vGBNhGcTvMyuglTyr0HIvnMX+D32Fk/xoKM5FnvyyZvFT+QBUpMHKxx98ILZoDM0CK1EpuQvqipd
xVrFBMmVR9qaRgbTQ+CRFmMcxE/r2/nw2vN9b4kJ3x2igYry7sQNZuvkT/LjMsZLxNRp5Pp4TQZb
h8HkbhNNn9w1+aioRakIKJ/0S9oVUUb8lVJ9h6N7PA0jQmgcbTChPPKC+Dbwny/nZzh2PT97kX0+
dh99Kh76D9I7yiX5FHUYaSVKYWrfY3fWiEYhLacRdmM8DmPXJwIabuZEgxcnmP7v9SeYVL2fP7/y
gs+DDm2PN2QOXwYBDmYeDtbx4OLy/Ors4DSc4UMqml8vPJ8IIdE1MtJtRAin3eDuVTh1YzqraNsU
BY3KPSIizMahD2H5cPgAkHGw3eP5oGOAWKUwMmkm6KZPEK9dDMJzYuaeqbwLYr52v90GU6oD6as5
gZOi6wajpyjBiD0ZkVlJeC2Nks6BCzp7eyr5D5l6p8QF4YNRXuavzKMJ8njlPmI/Y497hBCxRyqx
GCNiegkFCKGe5SAL2V2TTL9MOBd+6JJpReatyoNy6q7o2+srYmDPHwaZIrxNLHY89L0FMVQnYRyH
y44yxt/SR0tMJ3H6+ArP4/RVrkfk8/dh9Bv7PGkB8Ey4HsXPPiYCCCMvfk65J8r5sMaloRj4xxBy
xwl0Iky1tFcLxJSOchJ+K6LKHqa42ltcLaOHNFNFEKpbzEvoVgAGwFuGjIFKZ9VEYNvo9BrhOJmU
KQ8VrRuLwG4lAk0kAj3t1WkpAmsrAkO1e5pq611ulpVFQRa6RBSvIYkHspRenkGoszeNEUZqK4h1
EcQG6xa1MB36Fl+TLO+AdvdR2WoUFnGkreKusqZMDk5Cf7ZjVMSOS1Mbc0r+puqeikHcHyc39klz
iWiJRFLOagVhiARhst70lspubIVBgO45jmOZ/Sp1R6bp0Ga23UTh7+kqVafxrFGK9fj2bPjLRJ0Y
kNZzL0GoKCB9Bgi8cFdrpplrZsqkZTmVYBgaDEZJIUfYi3Fz7fvnZh178+cMEva1kGOLcQwv4/Uq
0M/tnVnNrVOel3sSeuqHp6RRd+gmhKQPtGo+29qt8tauT3UscKpgt4B3CRDsE4h8SY0H+gp/wT51
9pX37vo2uIsw8wtLscP+nU2NczYNracT5dBIvNja2US2/MSkqxdTUTJ+l5Ih62gOfR8r1F384/cF
VrxAocFKG5cT7Ki184mcPXmfNXpZ9pWYn8RFhiQww68WF3YLvwVRolV6/tHDXwlxt/fjy5ufD87C
6Yaio1DauickSD+KQ+WUmMpwSQLDm7DXPd1EJAScPidx4aHy6f35/Xnxu8Hp7c1ofJDEkoddhsXt
Jl7HhDkvWCj/2rhBTKRDgtGr8fn9wfd+/MP3i/gHdduaZgvIAOtYObg6/eVwt+FhOdgd4V1aWbAL
vSIjbWnOW9IXChcW08lJCM7Um2jyZ3czX/+GPR8D0fNdFC69NZ4pZ9j3qI1II+kSM12K4rUbbObu
lKaoIi7CdoQRNssp7KokFFtz5iBVPvp3O71jswTSJc0qC6GIJIDQNqmQPmbJFVXIdTJf4Hku4pvj
PZn8mia1IFi8eataBl5i7i3O3FsqzGDCR4W5B3lt66BqeaLBJKYfiIVVGi4gcbxgr3LvEkfE9obR
cx61ZhkxwNsUNq7gGTbzmtHM2d/2IcwxFLBljoXW1vNDddjaRmNouRRAE3CrmsvD228DL5Q/KMDL
8gha21yOWgdv32oMb5bp4hKmdRDXfSIPs90GZiiHUICZ5RI0OF8jcgy1PI1AdwkswDD01co8glVO
I1xv/Nijdn3r0xR9yI8fjn7Ga3cJBzdVsVAqQ+77nUhIWhi62kYYUB6hIAyWT9BREfLRk7vCNIgC
JJS844Shq11Unwg+CakTtk4cavIx7SPtlEKTOqMpavnvEdHnePqUSWcYLOiC71SsUil4tG/GlsaG
SnlLu61HzaxDjSUddPlFTjPqjERjEzHDjwFoCNIX8hrWatHq12HF0hW6/KKV58aNPuwKNLenBBMB
VC2AarX87OYW8vc1zlW1e8C7Bjq8dp2Es2fewaS/bfl8QztHkw22dTPtPbqZOpxdqNIqg1umVXiZ
ttnuczHxRWKX4Aux9cRDnKRRzK4+lVtUqgUvN/nNC81sYEkkVsOUxZuwzs0otZCePUarhayp82bA
OxRVQPZ1LicutjOSUHKuwbU3m/k4TSoJdn6SDAUN0evQhxvKC6HhbkRRCE1dO0N+Xeznu3BIE2kz
NCdpSmUSh1lGJdPOdKkH4pCq5rWzlXlLBrzZUMWfzsVemgnxp1kgh3J6dI9/3eB1jGdZ3idXFREi
tZ/UosK8IUN+hdfyaN+BZ56hCuSeJf8u3Cmxt3XTpqp1LX/MgzFgd7hS6rm3ZwssS1/A31cXP0XJ
puMuN/m7WtptRrt8TGtYdbLRRbLZE+0Oo73FGs+tjbogiyQinuZIaYp0cnX6S/XMEbWsZQypjDP5
Vd/IFysLZszUBIwt3WgB8sFe1JOd1Q+p8hOBM+8CX950BHQDewlF+ksN6vlgTpcp7yvotU4XTQWJ
FYuswtMaeww2q+eJ+T8mnGOuNMJcbZcKLk22SDTcVkq2k1LNXM0H9WwyD8NsEXnbdWxaIr+/GW/t
GGIuhSnvUmjcnNJBhqjte7FLkW0lNfco6r6oB4V5FGYLjyKvbtDgJVfgUciBMoxi7zP2g0irhgJu
JwagNhVAmiRpy9PQ3ywDBlNf3GVV9PTuWLxz9S4doGZbaxRuoimm9fCDzve/bsL4h4RLJXWt0ie9
9J/t7kqyx5g+Y5tuSG43RsxrGlBLEMXtSuySpcnuY1QTpssQBhVMF4jT2+wAVBNoFAhk2cVkMLA4
izWo7NIsd8k6NEW5uOru+oXutrmWjjLckJDO9adJb1nKKhmp/5IsDfP+JeR2E/YKYrIaZFCqh7dl
hs+L5gtU2M0zCdXEOEJiqGErTi2g1KFAlLO38DzzqRvTtg15i+URPHmautdYOfOfJWS5rW5JY9YC
caDFbBPjZv4wT1ceoSVjgWawPorLvNLGQinVphT4Ba2dbPiVOZA8RSz0SQYBrVxNbJT5cHyfpXCE
2ibioizdOPVhEBsOtIENQ5nMS5IDN4kqMlzLZGmMLNBgSsUkKXFis7lDHFSQVRA/aEVbhhIpdWKr
ylGXdcuoAK2o/NASNhSu4ipAA1rRtg546kBJGNKte9tTNJ4sHbSeMs4wdYRFDmjtiZxMNCGx1IT1
YO/1ZqaqZk5RXnKWjEegYHVn2c9DBgl6zdIyC86RQft+zuuWlbEhtrt9+h53+yy5khGECllAXRAL
VpURJ0I8uol6b5XKMDHLE3CtdyLHpnuBtnx6LQ96dRtk1NRrSvkbxLxMod+T4CcmbhqOJvwMg0xj
Vfs9x8A2qouB4e3z14iBs5mv5KwXjCPoUbVBq95I7gb+MMPw/h4LC7OgKcaLRmeJwQpdNf1P65fe
F6u+bzbLRxxltdzpr6zkGvV6h5kx1VtWJ+8ACZdJ8Zt9ttyRYB0oq6gxtK9xjEMvHeNof4DDbllt
ylvfvq31LNXWrWZnOfZymJLThvHw5Or8Znh9PplMzvBjVvEtyO5UfdP8iOu+jhnXHPQol6rxG7K2
3AEkA9Bc88/XXGN/miu/cZhqrlasbvwTdXZ8P3o4GY1vbicsEkxPeEzupjGa0EMf/6E/KxRYqoPm
2vwnHVsqFxPy2+8O7BaJtNkEtLn/imprcmqLkNbT2uut0+KUNV9XqoLl0ZZWXSwpXR59RTCKlEec
ROHtDteVumh9rM6ROlxdd5eDA28uVuOvF+qXAPy1mmJVafzTY+pKek699WnjYi/NEW9YLNzw6oYW
V5JwtUM0uoMOBOj9fUP+x+9J2nOtzN3PcRi1PBiw202z8wGgIBoWIze74MGBXYZqQaA61a85sCUt
hmxpU0iAsMQSUijpfrmf5qA3PBnT7DIHRzatQUFXa7Vf1fcM+7kXJIZ6faSsIuytD84f7g9bTgFB
X+3nQXIXWHOZQEc8CvdJqC0WYeTwJXOQTEx1zzKhV6clx9K/aykIvoOXoC+1AkOHRgp3W6gtlmDE
FfhYMPzJ/XL7hP/jh6M7qr7tT4ixz18CvdRSDB1D4StFkdpiLUZWobYKgN7Z9xpwT5zGI4Ugu5C4
aaV0CwnXw0vwl1qBbRH+TtZdiyUY5QlgG4Tf3rfzf/0C4K9fDrnU+usI4y0166/FCozyUlAdpdcC
GRbBPr1PZ0cCupO0cfoOFUTSSDf1PfpE6eZae1+Ifd9cCEhqwUWqUArZTTFtbhdDRq3zqZt7jns9
PCdR68yNN8vWcBc6kcBcLtAVRrpZCTSihWS7B38TZOElGDj960ie/hWwmx/bRYlU83O793hKfMWF
X80stNdRmW0qL4WFZVBwvdZFGMbFdFP6pM9zW0gPbd/vppGqkk4sZWXVbKU2voaJLhGwoAXXSQCC
BjYWq495p7+y63pf5dh3UW+shue9W+Yni4s3tJUm2DOsrpdN60mPtzdpshqL/DIesP6p6t7OnW2u
3dLY7LJJ2j9Y+pQ1APsqFnbxV7X1shvdaMdgkRN0/Rs4SLFW6+L2/no4PkguBeyqXYPtBYIFSxU3
BwKFqcJKvO0mkPIP5c1b5Q35h9s/oqODpUn1W08gUcV6rjyVf/CmkMt/q3yH3nRLuXwGBlijJLmr
cFxS8l2N3p09hcIbtlMMn0SBt4o/ulH52z9hF9l4rVukkcCmQvU4RdfkdQpy6Bj5ptpLlhGtxSHI
PDVedQhS+qh6VoNaXaGqARsxCVfgHa3WPvcRkCa/AanneT0Nvp0Ama3QSm7qGy7DTRBPPrkJNCOa
9QzuNvP5dsKVrGjdNxLIOvvcL0A6vBkoDhW4BAUSnDQ25WAtRQXpTT9vBYVVhfh32/QFETAtJ3xJ
2r+iyGq3uArRkiW4cqbyAlTB/TigFUTAfu2rXUeC0L7soS5/bq9vvq49BJ3F/KWEjpl7tYa6/NLR
/4taQ11qnam3hnJ37JrGX80YSi0uLzWGFC/YGGolz/kl4eHWf2G+KhhJ8S5Qg5Av23cuqG12PpNq
t5Kqt+iMCOIfibssH2Aqn6zU4ZCtdko2CEQ5G5iMBIZnXKOmsU4u2aJUedOXv3l3XPH/Y/Xj/wE=</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

