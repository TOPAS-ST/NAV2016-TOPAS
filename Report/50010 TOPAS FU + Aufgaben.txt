OBJECT Report 50010 TOPAS FU + Aufgaben
{
  OBJECT-PROPERTIES
  {
    Date=18.10.21;
    Time=09:35:57;
    Modified=Yes;
    Version List=TOPAS, BT šbergabe Fkt.! ,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  //*******************************************************************************************************
                  //                                    Vorbereitende Filter
                  //*******************************************************************************************************
                  Aufgaben.RESET;
                  Aufgaben.SETFILTER("System To-do Type",'%1',aufgabe."System To-do Type"::Organizer);
                  //*******************************************************************************************************
                  /////Filter - šbersicht Aufgaben\\\\\
                  IF option = option::"šbersicht - Aufgaben" THEN BEGIN
                    Aufgaben.SETFILTER(Aufgabenart,filter_art);
                    //IF (STRPOS(filter_betreuer,'|') = 0) AND (filter_verk„ufer = '')
                    //AND (filter_teams = '') THEN
                      Aufgaben.SETFILTER("Salesperson Code",filter_bearbeiter);
                    IF (filter_startdatum <> 0D) OR (filter_startdatum_e <> 0D) THEN
                      //Zusatzabfrage, denn wenn das Enddatum 0D ist, gibt es einen internen Bug, setzt fr leer '' ein
                      IF filter_startdatum_e <> 0D THEN
                        Aufgaben.SETFILTER(Date,'%1..%2',filter_startdatum,filter_startdatum_e)
                      ELSE
                        Aufgaben.SETFILTER(Date,'%1..',filter_startdatum);
                    IF (filter_datum <> 0D) OR (filter_datum_e <> 0D) THEN
                      IF filter_datum_e <> 0D THEN
                        Aufgaben.SETFILTER("Follow Up",'%1..%2',filter_datum,filter_datum_e)
                      ELSE
                        Aufgaben.SETFILTER("Follow Up",'%1..',filter_datum);
                    IF filter_abgeschlossen = FALSE THEN
                      Aufgaben.SETFILTER(Closed,'%1',FALSE);
                    berschrift := 'šbersicht - Aufgaben';
                    filter := 'Bearbeiter: ' + filter_bearbeiter + ' ,Betreuer: ' + filter_betreuer +  ' ,Verk„ufer: ' + filter_verk„ufer + ' ,Teams: '
                    + filter_teams + ' ,Gebiete: ' + filter_gebiet + ' ,FU-Datum von: ' + FORMAT(filter_datum)
                    + ' bis: ' + FORMAT(filter_datum_e) + ' ,Aufgabenart: ' + filter_art +
                    ',Startdatum: ' + FORMAT(filter_startdatum) + ' bis: ' + FORMAT(filter_startdatum_e) +
                    ', Herstellercode: ' + filter_hersteller;
                  END;

                  //*******************************************************************************************************
                  /////Filter - FU's d.l. Wo. - Projekt Aufgaben\\\\\
                  IF option = option::"FU's d.l. Wo. - Projekt Aufgaben" THEN BEGIN
                    Aufgaben.SETFILTER(Aufgabenart,'%1','PROJEKT');
                    IF (filter_datum <> 0D) OR (filter_datum_e <> 0D) THEN
                      IF filter_datum_e <> 0D THEN
                        Aufgaben.SETFILTER("Follow Up",'%1..%2',filter_datum,filter_datum_e)
                      ELSE
                        Aufgaben.SETFILTER("Follow Up",'%1..',filter_datum);
                    IF filter_abgeschlossen = FALSE THEN
                      Aufgaben.SETFILTER(Closed,'%1',FALSE);
                    berschrift := 'FUïs d.l. Wo. - Projekt Aufgaben';
                    filter := 'Betreuer Projekt: ' + filter_betreuer + ' ,Verk„ufer Projekt: ' + filter_verk„ufer
                    + ', Teams: ' + filter_teams + ' ,Gebiete: ' + filter_gebiet + ' ,FU-Datum von: ' + FORMAT(filter_datum)
                    + ' bis: ' + FORMAT(filter_datum_e);
                  END;

                  //*******************************************************************************************************
                  /////Filter - FU's d.l. Wo. - Muster\\\\\
                  IF option = option::"FU's d.l. Wo. - Muster" THEN BEGIN
                    Aufgaben.SETFILTER(Aufgabenart,'%1','MUSTER');
                    IF (filter_datum <> 0D) OR (filter_datum_e <> 0D) THEN
                      IF filter_datum_e <> 0D THEN
                        Aufgaben.SETFILTER("Follow Up",'%1..%2',filter_datum,filter_datum_e)
                      ELSE
                        Aufgaben.SETFILTER("Follow Up",'%1..',filter_datum);
                      IF filter_abgeschlossen = FALSE THEN
                      Aufgaben.SETFILTER(Closed,'%1',FALSE);
                      berschrift := 'FUïs d.l. Wo. - Muster';
                      filter := 'Betreuer Auftrag:' + ' ' + filter_betreuer + '  ' + ',Verk„ufer Auftrag: ' + filter_verk„ufer
                      + ', Teams: ' + filter_teams + ' ,Gebiete: ' + filter_gebiet + ' ,FU-Datum von: ' + FORMAT(filter_datum)
                      + ' ' + 'bis: ' + FORMAT(filter_datum_e) + ', Herstellercode: ' + filter_hersteller;
                  END;

                  //*******************************************************************************************************
                  /////Filter - FU's d.l. Wo. - Angebote\\\\\
                  IF option = option::"FU's d.l. Wo. - Angebote" THEN BEGIN
                    Aufgaben.SETFILTER(Aufgabenart,'ANGEBOT');
                    IF (filter_datum <> 0D) OR (filter_datum_e <> 0D) THEN
                      IF filter_datum_e <> 0D THEN
                        Aufgaben.SETFILTER("Follow Up",'%1..%2',filter_datum,filter_datum_e)
                      ELSE
                        Aufgaben.SETFILTER("Follow Up",'%1..',filter_datum);
                    IF filter_abgeschlossen = FALSE THEN
                      Aufgaben.SETFILTER(Closed,'%1',FALSE);
                    berschrift := 'FUïs d.l. Wo. - Angebote';
                    filter := 'Betreuer Angebot:' + ' ' + filter_betreuer + ' ,Verk„ufer Angebot: ' + filter_verk„ufer
                    + ', Teams: ' + filter_teams + ' ,Gebiete: ' + filter_gebiet + ', FU-Datum von:' + ' ' + FORMAT(filter_datum) + ' '
                    + 'bis:' + ' ' + FORMAT(filter_datum_e) + ', Herstellercode: ' + filter_hersteller;
                  END;

                  //*******************************************************************************************************
                  //                                  Aufgaben werden durchsucht
                  //*******************************************************************************************************
                  IF Aufgaben.FINDFIRST THEN
                    REPEAT
                      //*******************************************************************************************************
                      ////šbersicht Aufgaben
                      IF option = option::"šbersicht - Aufgaben" THEN BEGIN
                        nur_bearbeiter := FALSE;
                        IF (STRPOS(filter_betreuer,'|') = 0) AND (filter_verk„ufer = '')
                        AND (filter_teams = '') THEN BEGIN
                          nur_bearbeiter := TRUE;
                          Aufgabe_fllen_v2(FALSE);
                        END ELSE
                          IF (Aufgaben."Belegnr." = '') AND (Aufgaben."Arch. Belegnr." = '')
                          AND (Aufgaben."Campaign No." = '') AND (filter_hersteller = '') THEN
                            Aufgabe_fllen_v2(TRUE);
                        IF Aufgaben."Arch. Belegnr." <> '' THEN BEGIN
                          Zusatz_Arch_Belege_fllen_v2(Aufgaben."Arch. Belegnr.",nur_bearbeiter);
                        END ELSE BEGIN
                          IF Aufgaben."Belegnr." <> '' THEN
                            Zusatz_Akt_Belege_fllen_v2(Aufgaben."Belegnr.",nur_bearbeiter);
                        END;
                        ////Zusatzinfos aus Projekt
                        IF Aufgaben."Campaign No." <> '' THEN
                          Zusatz_Projekte_fllen_v2(Aufgaben."Campaign No.",nur_bearbeiter);
                      END;
                      //*******************************************************************************************************
                      ////Projekt Aufgaben
                      IF option = option::"FU's d.l. Wo. - Projekt Aufgaben" = TRUE THEN BEGIN
                        Zusatz_Projekte_fllen;
                      END;
                      //*******************************************************************************************************
                      ////Muster Aufgaben
                      ////Angebote - Aufgaben
                      IF (option = option::"FU's d.l. Wo. - Muster")
                      OR (option = option::"FU's d.l. Wo. - Angebote") THEN BEGIN
                        IF Aufgaben."Arch. Belegnr." <> '' THEN BEGIN
                          Zusatz_Arch_Belege_fllen;
                        END ELSE BEGIN
                          IF Aufgaben."Belegnr." <> '' THEN
                            Zusatz_Akt_Belege_fllen;
                        END;
                        ////Zusatzinfos aus Projekt
                        IF zusatz_projekt = TRUE THEN
                          Zusatz_Projekte_fllen;
                      END;
                    UNTIL Aufgaben.NEXT = 0;

                  Berichtstabelle_Bemerkung.COPY(Berichtstabelle,TRUE);
                  Berichtstabelle_Projekt.COPY(Berichtstabelle,TRUE);
                  Berichtstabelle_Muster.COPY(Berichtstabelle,TRUE);
                  Berichtstabelle_Belegkopf.COPY(Berichtstabelle,TRUE);
                  Berichtstabelle_Belegzeilen.COPY(Berichtstabelle,TRUE);

                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;CopyToDo          ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle.RESET;
                               Berichtstabelle.SETCURRENTKEY("Feld 11");
                               Berichtstabelle.SETFILTER(Tabelle,'%1','AUFGABEN');
                               SETRANGE(Number,1,Berichtstabelle.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle.NEXT;
                                  END;
                                END;
                                 }

    { 1000000007;1;Column;TODAY_0_4          ;
               IncludeCaption=No;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 1000000006;1;Column;USERID             ;
               IncludeCaption=No;
               SourceExpr=USERID }

    { 2   ;1   ;Column  ;uberschrift         ;
               IncludeCaption=No;
               SourceExpr=berschrift }

    { 3   ;1   ;Column  ;filter_abgeschlossen;
               IncludeCaption=No;
               SourceExpr=filter_abgeschlossen }

    { 4   ;1   ;Column  ;zusatz_kontakt      ;
               IncludeCaption=No;
               SourceExpr=zusatz_kontakt }

    { 5   ;1   ;Column  ;zusatz_projekt      ;
               IncludeCaption=No;
               SourceExpr=zusatz_projekt }

    { 6   ;1   ;Column  ;zusatz_beleg        ;
               IncludeCaption=No;
               SourceExpr=zusatz_beleg }

    { 7   ;1   ;Column  ;filter              ;
               IncludeCaption=No;
               SourceExpr=filter }

    { 8   ;1   ;Column  ;ReportForNavPageNo  ;
               IncludeCaption=No;
               SourceExpr=ReportForNav.PageNo }

    { 9   ;1   ;Column  ;Feld3_ToDo          ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 3" }

    { 10  ;1   ;Column  ;Feld8_ToDo          ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 8" }

    { 11  ;1   ;Column  ;Feld13_ToDo         ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 13" }

    { 12  ;1   ;Column  ;Feld19_ToDo         ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 19" }

    { 13  ;1   ;Column  ;Feld12_ToDo         ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 12" }

    { 14  ;1   ;Column  ;Feld11_ToDo         ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 11" }

    { 15  ;1   ;Column  ;Feld9_ToDo          ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 9" }

    { 16  ;1   ;Column  ;Feld14_ToDo         ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 14" }

    { 17  ;1   ;Column  ;Feld15_ToDo         ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 15" }

    { 18  ;1   ;Column  ;Feld16_ToDo         ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 16" }

    { 19  ;1   ;Column  ;Index_ToDo          ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle.Index }

    { 20  ;1   ;Column  ;Feld1_ToDo          ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 1" }

    { 21  ;1   ;Column  ;Feld6_ToDo          ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 6" }

    { 22  ;1   ;Column  ;Feld18_ToDo         ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 18" }

    { 23  ;1   ;Column  ;Datum_ToDo          ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle.Datum }

    { 24  ;1   ;Column  ;Feld7_ToDo          ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 7" }

    { 25  ;1   ;Column  ;Feld10_ToDo         ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 10" }

    { 1000000001;1;DataItem;CopyBemerkung    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_Bemerkung.RESET;
                               Berichtstabelle_Bemerkung.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_Bemerkung.SETFILTER(Tabelle,'%1','BEMERKUNG');
                               Berichtstabelle_Bemerkung.SETFILTER(Index,'%1',Berichtstabelle.Index);
                               SETRANGE(Number,1,Berichtstabelle_Bemerkung.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_Bemerkung.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_Bemerkung.NEXT;
                                  END;
                                END;
                                 }

    { 27  ;2   ;Column  ;Datum_Bemerkung     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Bemerkung.Datum }

    { 28  ;2   ;Column  ;Feld1_Bemerkung     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Bemerkung."Feld 1" }

    { 1000000002;1;DataItem;CopyProjekt      ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_Projekt.RESET;
                               Berichtstabelle_Projekt.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_Projekt.SETFILTER(Tabelle,'%1','PROJEKT');
                               Berichtstabelle_Projekt.SETFILTER("Belegnr.",'%1',Berichtstabelle.Index);
                               SETRANGE(Number,1,Berichtstabelle_Projekt.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_Projekt.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_Projekt.NEXT;
                                  END;
                                END;
                                 }

    { 30  ;2   ;Column  ;Index_Projekt       ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Projekt.Index }

    { 31  ;2   ;Column  ;Feld10_Projekt      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Projekt."Feld 10" }

    { 32  ;2   ;Column  ;Feld1_Projekt       ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Projekt."Feld 1" }

    { 33  ;2   ;Column  ;Feld11_Projekt      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Projekt."Feld 11" }

    { 34  ;2   ;Column  ;Feld2_Projekt       ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Projekt."Feld 2" }

    { 35  ;2   ;Column  ;Feld5_Projekt       ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Projekt."Feld 5" }

    { 36  ;2   ;Column  ;Feld4_Projekt       ;
               DecimalPlaces=0:0;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Projekt."Feld 4" }

    { 37  ;2   ;Column  ;Feld9_Projekt       ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Projekt."Feld 9" }

    { 38  ;2   ;Column  ;Feld8_Projekt       ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Projekt."Feld 8" }

    { 39  ;2   ;Column  ;Feld7_Projekt       ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Projekt."Feld 7" }

    { 40  ;2   ;Column  ;Feld6_Projekt       ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Projekt."Feld 6" }

    { 1000000003;1;DataItem;CopyMusterberwachung;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_Muster.RESET;
                               Berichtstabelle_Muster.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_Muster.SETFILTER(Tabelle,'%1','MšWACH');
                               Berichtstabelle_Muster.SETFILTER("Belegnr.",'%1',Berichtstabelle.Index);
                               SETRANGE(Number,1,Berichtstabelle_Muster.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_Muster.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_Muster.NEXT;
                                  END;
                                END;
                                 }

    { 42  ;2   ;Column  ;Feld4_Musteruberwachung;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Muster."Feld 4" }

    { 43  ;2   ;Column  ;Feld13_Musteruberwachung;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Muster."Feld 13" }

    { 44  ;2   ;Column  ;Feld12_Musteruberwachung;
               DecimalPlaces=0:0;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Muster."Feld 12" }

    { 45  ;2   ;Column  ;Index_Musteruberwachung;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Muster.Index }

    { 46  ;2   ;Column  ;Feld10_Musteruberwachung;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Muster."Feld 10" }

    { 1000000004;1;DataItem;CopyBelegkopf    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_Belegkopf.RESET;
                               Berichtstabelle_Belegkopf.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_Belegkopf.SETFILTER(Tabelle,'%1','BELEGKOPF');
                               Berichtstabelle_Belegkopf.SETFILTER("Belegnr.",'%1',Berichtstabelle.Index);
                               SETRANGE(Number,1,Berichtstabelle_Belegkopf.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_Belegkopf.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_Belegkopf.NEXT;
                                  END;
                                END;
                                 }

    { 48  ;2   ;Column  ;Feld12_Belegkopf    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf."Feld 12" }

    { 49  ;2   ;Column  ;Feld9_Belegkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf."Feld 9" }

    { 50  ;2   ;Column  ;Feld7_Belegkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf."Feld 7" }

    { 51  ;2   ;Column  ;Feld6_Belegkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf."Feld 6" }

    { 52  ;2   ;Column  ;Feld10_Belegkopf    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf."Feld 10" }

    { 53  ;2   ;Column  ;Feld2_Belegkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf."Feld 2" }

    { 54  ;2   ;Column  ;Datum_Belegkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf.Datum }

    { 55  ;2   ;Column  ;Index_Belegkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf.Index }

    { 1000000005;2;DataItem;CopyBelegzeile   ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_Belegzeilen.RESET;
                               Berichtstabelle_Belegzeilen.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_Belegzeilen.SETFILTER(Tabelle,'%1','BELEGZEILE');
                               Berichtstabelle_Belegzeilen.SETFILTER(Index,'%1',Berichtstabelle_Belegkopf.Index);
                               SETRANGE(Number,1,Berichtstabelle_Belegzeilen.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_Belegzeilen.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_Belegzeilen.NEXT;
                                  END;
                                END;
                                 }

    { 57  ;3   ;Column  ;Feld19_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeilen."Feld 19" }

    { 58  ;3   ;Column  ;Feld16_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeilen."Feld 16" }

    { 59  ;3   ;Column  ;Feld7_Belegzeile    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeilen."Feld 7" }

    { 60  ;3   ;Column  ;Feld10_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeilen."Feld 10" }

    { 61  ;3   ;Column  ;Feld14_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeilen."Feld 14" }

    { 62  ;3   ;Column  ;Feld6_Belegzeile    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeilen."Feld 6" }

    { 63  ;3   ;Column  ;Feld3_Belegzeile    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeilen."Feld 3" }

    { 64  ;3   ;Column  ;Feld4_Belegzeile    ;
               DecimalPlaces=0:0;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeilen."Feld 4" }

    { 65  ;3   ;Column  ;Feld5_Belegzeile    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeilen."Feld 5" }

    { 66  ;3   ;Column  ;Feld12_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeilen."Feld 12" }

    { 67  ;3   ;Column  ;Feld15_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeilen."Feld 15" }

    { 68  ;3   ;Column  ;Feld13_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeilen."Feld 13" }

    { 69  ;3   ;Column  ;Feld11_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeilen."Feld 11" }

    { 70  ;3   ;Column  ;Feld1_Belegzeile    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeilen."Feld 1" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1000000007;1;Group  ;
                  CaptionML=DEU=Berichtsmodus;
                  GroupType=Group }

      { 1000000000;2;Field  ;
                  Name=option;
                  CaptionML=DEU=Option;
                  OptionCaptionML=ENU=šbersicht - Aufgaben,FU's d.l. Wo. - Projekt Aufgaben,FU's d.l. Wo. - Muster,FU's d.l. Wo. - Angebote;
                  SourceExpr=option;
                  OnValidate=BEGIN
                               berichtsmodus := option;

                               RequestOptionsPage.UPDATE;
                             END;
                              }

      { 1900000002;1;Group  ;
                  CaptionML=DEU=Filter;
                  Visible=berichtsmodus = 0;
                  GroupType=Group }

      { 1000000008;2;Field  ;
                  CaptionML=DEU=Bearbeiter;
                  SourceExpr=filter_bearbeiter }

      { 1140053;2;Field     ;
                  Name=filter_betreuer;
                  CaptionML=DEU=Betreuer Innendienst;
                  SourceExpr=filter_betreuer;
                  TableRelation=Salesperson/Purchaser }

      { 1140049;2;Field     ;
                  Name=filter_verk„ufer;
                  CaptionML=DEU=Verk„ufercode;
                  SourceExpr=filter_verk„ufer;
                  TableRelation=Salesperson/Purchaser }

      { 1140007;2;Field     ;
                  Name=filter_teams;
                  CaptionML=DEU=Teams;
                  SourceExpr=filter_teams;
                  TableRelation=Team }

      { 1140037;2;Field     ;
                  Name=filter_gebiet;
                  CaptionML=DEU=Gebietscode;
                  SourceExpr=filter_gebiet;
                  TableRelation=Territory }

      { 1140014;2;Field     ;
                  Name=filter_art;
                  Lookup=Yes;
                  CaptionML=DEU=Aufgabenart;
                  SourceExpr=filter_art;
                  TableRelation=Optionstabelle.Code WHERE (Tabellen ID=FILTER(5080),
                                                           Feld ID=FILTER(51002)) }

      { 1000000005;2;Group  ;
                  CaptionML=DEU=FU-Datum Aufgabe;
                  GroupType=Group }

      { 1140051;3;Field     ;
                  Name=filter_datum;
                  CaptionML=DEU=FU' Datum von;
                  SourceExpr=filter_datum }

      { 1140043;3;Field     ;
                  Name=filter_datum_e;
                  CaptionML=DEU=FU' Datum bis;
                  SourceExpr=filter_datum_e }

      { 1000000004;2;Group  ;
                  CaptionML=DEU=Startdatum Aufgabe;
                  GroupType=Group }

      { 1140025;3;Field     ;
                  Name=filter_startdatum;
                  CaptionML=DEU=Startdatum;
                  SourceExpr=filter_startdatum }

      { 1140026;3;Field     ;
                  Name=filter_startdatum_e;
                  CaptionML=DEU=Enddatum;
                  SourceExpr=filter_startdatum_e }

      { 1140029;2;Field     ;
                  Name=filter_abgeschlossen;
                  CaptionML=DEU=Erledigte Aufgaben;
                  SourceExpr=filter_abgeschlossen }

      { 1000000011;1;Group  ;
                  CaptionML=DEU=Filter;
                  Visible=berichtsmodus <> 0;
                  GroupType=Group }

      { 1000000021;2;Field  ;
                  Name=filter_betreuer_;
                  CaptionML=DEU=Betreuer Innendienst;
                  SourceExpr=filter_betreuer;
                  TableRelation=Salesperson/Purchaser }

      { 1000000020;2;Field  ;
                  Name=filter_verk„ufer_;
                  CaptionML=DEU=Verk„ufercode;
                  SourceExpr=filter_verk„ufer;
                  TableRelation=Salesperson/Purchaser }

      { 1000000019;2;Field  ;
                  Name=filter_teams_;
                  CaptionML=DEU=Teams;
                  SourceExpr=filter_teams;
                  TableRelation=Team }

      { 1000000018;2;Field  ;
                  Name=filter_gebiet_;
                  CaptionML=DEU=Gebietscode;
                  SourceExpr=filter_gebiet;
                  TableRelation=Territory }

      { 1000000006;2;Group  ;
                  CaptionML=DEU=FU-Datum Aufgabe;
                  GroupType=Group }

      { 1000000016;3;Field  ;
                  Name=filter_datum_;
                  CaptionML=DEU=FU' Datum von;
                  SourceExpr=filter_datum }

      { 1000000015;3;Field  ;
                  Name=filter_datum_e_;
                  CaptionML=DEU=FU' Datum bis;
                  SourceExpr=filter_datum_e }

      { 1000000012;2;Field  ;
                  Name=filter_abgeschlossen_;
                  CaptionML=DEU=Erledigte Aufgaben;
                  SourceExpr=filter_abgeschlossen }

      { 1000000002;1;Group  ;
                  CaptionML=DEU=Herstellercode;
                  Visible=berichtsmodus <> 1;
                  GroupType=Group }

      { 1000000001;2;Field  ;
                  Name=btn_herstellercode;
                  CaptionML=DEU=Herstellercode;
                  SourceExpr=filter_hersteller;
                  TableRelation=Manufacturer }

      { 1900000003;1;Group  ;
                  CaptionML=DEU=Details;
                  GroupType=Group }

      { 1140001;2;Field     ;
                  Name=radio_ktinfo;
                  CaptionML=DEU=Kontaktinfo;
                  SourceExpr=zusatz_kontakt }

      { 1140000;2;Field     ;
                  Name=radio_projekte;
                  CaptionML=DEU=Projekte;
                  SourceExpr=zusatz_projekt }

      { 1140006;2;Field     ;
                  Name=radio_belege;
                  CaptionML=DEU=Belegpositionen;
                  SourceExpr=zusatz_beleg }

      { 1900000005;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1000000003;2;Field  ;
                  Name=berichtsmodus;
                  CaptionML=DEU=Berichtsmodus;
                  SourceExpr=berichtsmodus;
                  Enabled=FALSE;
                  Editable=FALSE }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Berichtstabelle@1140047 : TEMPORARY Record 50037;
      Berichtstabelle_Bemerkung@1140010 : TEMPORARY Record 50037;
      Berichtstabelle_Projekt@1000000000 : TEMPORARY Record 50037;
      Berichtstabelle_Muster@1000000001 : TEMPORARY Record 50037;
      Berichtstabelle_Belegkopf@1000000006 : TEMPORARY Record 50037;
      Berichtstabelle_Belegzeilen@1000000007 : TEMPORARY Record 50037;
      Aufgaben@1140049 : Record 5080;
      Bemerkungen@1140051 : Record 5061;
      Projekte@1140050 : Record 5071;
      Linien@1140052 : Record 50002;
      Manufac@1140053 : Record 5720;
      Artikel@1140057 : Record 27;
      "Ek-Preis"@1140028 : Record 7012;
      Mšwach@1140060 : Record 50029;
      kontakt@1140000 : Record 5050;
      ansprechpartner@1140002 : Record 50005;
      beziehung@1140004 : Record 5054;
      aufgabe@1140003 : Record 5080;
      Customer@1140006 : Record 18;
      optionstab@1140026 : Record 50001;
      teilnehmer@1140046 : Record 5199;
      UserTab@1000000005 : Record 2000000120;
      debitornr@1140005 : Text[30];
      w„hrung@1140007 : Text[30];
      w„hrung_dc@1140045 : Text[30];
      w„hrung_archiv@1140008 : Text[30];
      w„hrung_archiv_dc@1140044 : Text[30];
      w„hrung_archiv2@1140011 : Text[30];
      w„hrung_archiv2_dc@1140043 : Text[30];
      w„hrung_projekt@1140015 : Text[30];
      kontakt_verk„ufer@1140042 : Code[20];
      kontakt_betreuer@1140041 : Code[20];
      kontakt_fnr@1140040 : Text[50];
      kontakt_name@1140039 : Text[50];
      kontakt_firma@1140038 : Text[50];
      kontakt_tel@1140014 : Text[50];
      kontakt_nr@1140017 : Text[50];
      fhrung@1140001 : Text[50];
      filter@1140035 : Text[250];
      berschrift@1140034 : Text[250];
      betrag@1140009 : Decimal;
      betrag2@1140012 : Decimal;
      gesamt_betrag@1140058 : Decimal;
      zusatz_kontakt@1140018 : Boolean;
      zusatz_projekt@1140016 : Boolean;
      zusatz_beleg@1140019 : Boolean;
      anzeigen_projekt@1140029 : Boolean;
      anzeigen_aufgabe@1140030 : Boolean;
      anzeigen_belege@1140031 : Boolean;
      anzeigen_m@1140032 : Boolean;
      anzeigen_beleg_archiv@1140037 : Boolean;
      filter_hersteller@1140056 : Code[40];
      filter_bearbeiter@1000000008 : Code[40];
      filter_betreuer@1140020 : Code[40];
      filter_verk„ufer@1140024 : Code[40];
      filter_teams@1140036 : Code[40];
      filter_gebiet@1140054 : Code[40];
      filter_datum@1140021 : Date;
      filter_datum_e@1140027 : Date;
      filter_startdatum@1140033 : Date;
      filter_startdatum_e@1140013 : Date;
      filter_abgeschlossen@1140022 : Boolean;
      filter_art@1140023 : Code[15];
      nur_bearbeiter@1140055 : Boolean;
      option@1140025 : 'šbersicht - Aufgaben,FU''s d.l. Wo. - Projekt Aufgaben,FU''s d.l. Wo. - Muster,FU''s d.l. Wo. - Angebote';
      berichtsmodus@1000000002 : Integer;
      counter@1140048 : Integer;
      l@1000000003 : Integer;
      i@1000000004 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    PROCEDURE Aufgabe_fllen@1140001();
    BEGIN
      //*******************************************************************************************************
      ////Aufgaben fllen
      Berichtstabelle.INIT;
      Berichtstabelle.Index := Aufgaben."No.";
      Berichtstabelle.Tabelle := 'AUFGABEN';
      Berichtstabelle.Datum := Aufgaben.Date;
      Berichtstabelle."Feld 1" := Aufgaben.Description;
      Berichtstabelle."Feld 3" := Aufgaben.Aufgabenart;
      Berichtstabelle."Feld 6" := Aufgaben.Ersteller;
      Berichtstabelle."Feld 7" := Aufgaben."Salesperson Code";
      Berichtstabelle."Feld 10" := FORMAT(Aufgaben.Status);
      Berichtstabelle."Feld 18" := Aufgaben."Follow Up";
      Berichtstabelle.Uhrzeit := CURRENTDATETIME;
      Berichtstabelle.User := USERID;
      //*******************************************************************************************************
      ////Zusatzinfos aus Kontakt
      kontakt.RESET;
      IF zusatz_kontakt = TRUE THEN BEGIN
        CASE Aufgaben.Type OF
          Aufgaben.Type::Meeting:
            BEGIN
              teilnehmer.RESET;
              teilnehmer.SETRANGE("To-do No.",Aufgaben."No.");
              teilnehmer.SETRANGE("Attendee Type",teilnehmer."Attendee Type"::Contact);
              IF teilnehmer.FINDFIRST THEN BEGIN
                kontakt.SETRANGE("No.",teilnehmer."Attendee No.");
                IF (kontakt.FINDFIRST) AND (teilnehmer."Attendee No." <> '') THEN BEGIN
                  Berichtstabelle."Feld 8" := kontakt."No.";
                  //*******************************************************************************************************
                  /////Debitornr. fllen\\\\\
                  beziehung.RESET;
                  beziehung.SETRANGE("Contact No.",Aufgaben."Contact Company No.");
                  IF beziehung.FINDFIRST THEN BEGIN
                    IF Customer.GET(beziehung."No.") THEN
                      Berichtstabelle."Feld 9" := Customer."No.";
                  END;
                  Berichtstabelle."Feld 11" := kontakt."Company Name";
                  Berichtstabelle."Feld 12" := kontakt.Name;
                  Berichtstabelle."Feld 13" := kontakt."Phone No.";
                  Berichtstabelle."Feld 14" := kontakt."Betreuer Innendienst";
                  Berichtstabelle."Feld 15" := kontakt."Salesperson Code";
                  Berichtstabelle."Feld 16" := kontakt."Territory Code";
                  Berichtstabelle."Feld 19" := kontakt."Company No.";
                END ELSE BEGIN
                  Berichtstabelle."Feld 11" := 'Bitte Kontakt eintragen,da Besprechung'
                END;
              END ELSE BEGIN
                  Berichtstabelle."Feld 11" := 'Bitte Kontakt eintragen,da Besprechung'
                END;
            END;
          Aufgaben.Type::" ",Aufgaben.Type::"Phone Call":
            BEGIN
              kontakt.SETRANGE("No.",Aufgaben."Contact No.");
              IF (kontakt.FINDFIRST) AND (Aufgaben."Contact No."<>'') THEN BEGIN
                Berichtstabelle."Feld 8" := kontakt."No.";
                //*******************************************************************************************************
                /////Debitornr. fllen\\\\\
                beziehung.RESET;
                beziehung.SETRANGE("Contact No.",Aufgaben."Contact Company No.");
                IF beziehung.FINDFIRST THEN BEGIN
                  IF Customer.GET(beziehung."No.") THEN
                    Berichtstabelle."Feld 9" := Customer."No.";
                END;
                Berichtstabelle."Feld 11" := kontakt."Company Name";
                Berichtstabelle."Feld 12" := kontakt.Name;
                Berichtstabelle."Feld 13" := kontakt."Phone No.";
                Berichtstabelle."Feld 14" := kontakt."Betreuer Innendienst";
                Berichtstabelle."Feld 15" := kontakt."Salesperson Code";
                Berichtstabelle."Feld 16" := kontakt."Territory Code";
                Berichtstabelle."Feld 19" := kontakt."Company No.";
              END;
            END;
        END;
      END;
      Berichtstabelle.INSERT;
      //*******************************************************************************************************
      //                                        Bemerkungen fllen
      //*******************************************************************************************************
      Bemerkungen.RESET;
      Bemerkungen.SETFILTER("Table Name",'%1',Bemerkungen."Table Name"::"To-do");
      Bemerkungen.SETFILTER("No.",'%1',Aufgaben."No.");
      IF Bemerkungen.FINDFIRST THEN
        REPEAT
          Berichtstabelle.INIT;
          Berichtstabelle.Index := Bemerkungen."No.";
          Berichtstabelle.Tabelle := 'BEMERKUNG';
          Berichtstabelle.Datum := Bemerkungen.Date;
          Berichtstabelle."Zeilennr." := Bemerkungen."Line No.";
          Berichtstabelle."Feld 1" := Bemerkungen.Comment;
          Berichtstabelle.Uhrzeit := CURRENTDATETIME;
          Berichtstabelle.User := USERID;
          Berichtstabelle.INSERT;
        UNTIL Bemerkungen.NEXT = 0;
    END;

    PROCEDURE Aufgabe_fllen_v2@1140010(Nachlauf@1140000 : Boolean);
    BEGIN
      //*******************************************************************************************************
      ////Aufgaben fllen
      Berichtstabelle.RESET;
      Berichtstabelle.SETFILTER(Tabelle,'%1','AUFGABEN');
      Berichtstabelle.SETFILTER(Index,'%1',Aufgaben."No.");
      IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
        Berichtstabelle.INIT;
        //*******************************************************************************************************
        ////Zusatzinfos aus Kontakt
        //IF zusatz_kontakt = TRUE THEN
        //  BEGIN
        kontakt.RESET;
        CASE Aufgaben.Type OF
          Aufgaben.Type::Meeting:
            BEGIN
              teilnehmer.RESET;
              teilnehmer.SETRANGE("To-do No.",Aufgaben."No.");
              teilnehmer.SETRANGE("Attendee Type",teilnehmer."Attendee Type"::Contact);
              IF teilnehmer.FINDFIRST THEN BEGIN
                kontakt.SETFILTER("No.",teilnehmer."Attendee No.");
                IF Nachlauf THEN BEGIN
                  IF (STRPOS(filter_betreuer,'|') <> 0) OR (filter_verk„ufer <> '')
                  OR (filter_teams <> '') THEN BEGIN
                    //kontakt.SETFILTER("Betreuer Innendienst",filter_betreuer);
                    //kontakt.SETFILTER("Salesperson Code",filter_verk„ufer);
                    //kontakt.SETFILTER(Teams,filter_teams);
                    //kontakt.SETFILTER("Territory Code",filter_gebiet);
                    //IF NOT kontakt.FINDFIRST THEN EXIT;
                    IF kontakt.FINDFIRST THEN ;
                  END;
                END;
                IF (kontakt.FINDFIRST) AND (teilnehmer."Attendee No." <> '') THEN BEGIN
                  Berichtstabelle."Feld 8" := kontakt."No.";
                  //*******************************************************************************************************
                  /////Debitornr. fllen\\\\\
                  beziehung.RESET;
                  beziehung.SETRANGE("Contact No.",Aufgaben."Contact Company No.");
                  IF beziehung.FINDFIRST THEN BEGIN
                    IF Customer.GET(beziehung."No.") THEN
                      Berichtstabelle."Feld 9" := Customer."No.";
                  END;
                  Berichtstabelle."Feld 11" := kontakt."Company Name";
                  Berichtstabelle."Feld 12" := kontakt.Name;
                  Berichtstabelle."Feld 13" := kontakt."Phone No.";
                  Berichtstabelle."Feld 14" := kontakt."Betreuer Innendienst";
                  Berichtstabelle."Feld 15" := kontakt."Salesperson Code";
                  Berichtstabelle."Feld 16" := kontakt."Territory Code";
                  Berichtstabelle."Feld 19" := kontakt."Company No.";
                END ELSE BEGIN
                  Berichtstabelle."Feld 11" := 'Bitte Kontakt eintragen,da Besprechung'
                END;
              END ELSE BEGIN
                Berichtstabelle."Feld 11" := 'Bitte Kontakt eintragen,da Besprechung'
              END;
          END;
          Aufgaben.Type::" ",Aufgaben.Type::"Phone Call":
            BEGIN
              kontakt.SETFILTER(kontakt."No.",Aufgaben."Contact No.");
              IF Nachlauf THEN BEGIN
                IF (STRPOS(filter_betreuer,'|') <> 0) OR (filter_verk„ufer <> '')
                OR (filter_teams <> '') THEN BEGIN
                  //kontakt.SETFILTER("Betreuer Innendienst",filter_betreuer);
                  //kontakt.SETFILTER("Salesperson Code",filter_verk„ufer);
                  //kontakt.SETFILTER(Teams,filter_teams);
                  //kontakt.SETFILTER("Territory Code",filter_gebiet);
                  //IF NOT kontakt.FINDFIRST THEN EXIT;
                  IF kontakt.FINDFIRST THEN ;
                END;
              END;
              IF (kontakt.FINDFIRST) AND (Aufgaben."Contact No."<>'') THEN BEGIN
                Berichtstabelle."Feld 8" := kontakt."No.";
                //*******************************************************************************************************
                /////Debitornr. fllen\\\\\
                beziehung.RESET;
                beziehung.SETRANGE("Contact No.",Aufgaben."Contact Company No.");
                IF beziehung.FINDFIRST THEN BEGIN
                  IF Customer.GET(beziehung."No.") THEN
                    Berichtstabelle."Feld 9" := Customer."No.";
                END;
                Berichtstabelle."Feld 11" := kontakt."Company Name";
                Berichtstabelle."Feld 12" := kontakt.Name;
                Berichtstabelle."Feld 13" := kontakt."Phone No.";
                Berichtstabelle."Feld 14" := kontakt."Betreuer Innendienst";
                Berichtstabelle."Feld 15" := kontakt."Salesperson Code";
                Berichtstabelle."Feld 16" := kontakt."Territory Code";
                Berichtstabelle."Feld 19" := kontakt."Company No.";
              END;
            END;
        END;
        Berichtstabelle.Index := Aufgaben."No.";
        Berichtstabelle.Tabelle := 'AUFGABEN';
        Berichtstabelle.Datum := Aufgaben.Date;
        Berichtstabelle."Feld 1" := Aufgaben.Description;
        Berichtstabelle."Feld 3" := Aufgaben.Aufgabenart;
        Berichtstabelle."Feld 6" := Aufgaben.Ersteller;
        Berichtstabelle."Feld 7" := Aufgaben."Salesperson Code";
        Berichtstabelle."Feld 10" := FORMAT(Aufgaben.Status);
        Berichtstabelle."Feld 18" := Aufgaben."Follow Up";
        Berichtstabelle.Uhrzeit := CURRENTDATETIME;
        Berichtstabelle.User := USERID;
        IF Aufgaben."Contact No." = '' THEN ERROR('Bitte fllen Sie zu Aufgabe %1 die Kontaktnr. aus' +
                                                  ' und starten Sie dann den Bericht neu.',Aufgaben."No.");
        Berichtstabelle.INSERT;
        //*******************************************************************************************************
        //                                        Bemerkungen fllen
        //*******************************************************************************************************
        Bemerkungen.RESET;
        Bemerkungen.SETFILTER("Table Name",'%1',Bemerkungen."Table Name"::"To-do");
        Bemerkungen.SETFILTER("No.",'%1',Aufgaben."No.");
        IF Bemerkungen.FINDFIRST THEN
          REPEAT
            Berichtstabelle.INIT;
            Berichtstabelle.Index := Bemerkungen."No.";
            Berichtstabelle.Tabelle := 'BEMERKUNG';
            Berichtstabelle.Datum := Bemerkungen.Date;
            Berichtstabelle."Zeilennr." := Bemerkungen."Line No.";
            Berichtstabelle."Feld 1" := Bemerkungen.Comment;
            Berichtstabelle.Uhrzeit := CURRENTDATETIME;
            Berichtstabelle.User := USERID;
            Berichtstabelle.INSERT;
          UNTIL Bemerkungen.NEXT = 0;
      END;
    END;

    PROCEDURE Zusatz_Projekte_fllen@1140000();
    BEGIN
      Projekte.RESET;
      Projekte.SETFILTER("No.",'%1',Aufgaben."Campaign No.");
      Projekte.SETFILTER("Betreuer Innendienst",filter_betreuer);
      Projekte.SETFILTER("Salesperson Code",filter_verk„ufer);
      Projekte.SETFILTER(Teams,filter_teams);
      Projekte.SETFILTER("Territory Code",filter_gebiet);
      IF Projekte.FINDFIRST THEN BEGIN
        Berichtstabelle.INIT;
        Berichtstabelle.Index := Projekte."No.";
        Berichtstabelle.Tabelle := 'PROJEKT';
        Berichtstabelle."Belegnr." := Aufgaben."No.";
        Berichtstabelle."Feld 1" := Projekte.Description;
        IF (Projekte.W„hrungscode = '') OR (Projekte.W„hrungscode = 'EUR') THEN
          Berichtstabelle."Feld 2" :=   '°'
        ELSE
          Berichtstabelle."Feld 2" := Projekte.W„hrungscode;
        Berichtstabelle."Feld 4" := Projekte.Projektvolumen;
        Berichtstabelle."Feld 5" := Projekte.Projektwert;
        Berichtstabelle."Feld 6" := Projekte."Betreuer Innendienst";
        Berichtstabelle."Feld 7" := Projekte."Salesperson Code";
        Berichtstabelle."Feld 8" := Projekte.Projektstatus;
        Berichtstabelle."Feld 9" := Projekte.Projektklasse;
        //*******************************************************************************************************
        //Fhrungsrolle
        ansprechpartner.SETRANGE("Kampagnennr.",Projekte."No.");
        ansprechpartner.SETRANGE(Fhrungsrolle,TRUE);
        IF ansprechpartner.FINDFIRST THEN BEGIN
          ansprechpartner.CALCFIELDS(Mandantenname);
          Berichtstabelle."Feld 10" := ansprechpartner.Mandantenname;
        END;
        Berichtstabelle.Uhrzeit := CURRENTDATETIME;
        Berichtstabelle.User := USERID;
        Berichtstabelle.INSERT;
        IF option = option::"FU's d.l. Wo. - Projekt Aufgaben" THEN
          Aufgabe_fllen;
      END;
    END;

    PROCEDURE Zusatz_Projekte_fllen_v2@1140011(Campaign@1140000 : Code[20];bearbeiter_modus@1140001 : Boolean);
    BEGIN
      Projekte.RESET;
      Projekte.SETFILTER("No.",'%1',Campaign);
      IF NOT bearbeiter_modus THEN BEGIN
        Projekte.SETFILTER("Betreuer Innendienst",filter_betreuer);
        Projekte.SETFILTER("Salesperson Code",filter_verk„ufer);
        Projekte.SETFILTER(Teams,filter_teams);
        Projekte.SETFILTER("Territory Code",filter_gebiet);
      END;
      IF Projekte.FINDFIRST THEN BEGIN
        IF option = option::"FU's d.l. Wo. - Projekt Aufgaben" THEN
          Aufgabe_fllen;
        //Wenn Aufgabe mit Projekt und Beleg verknpft ist und der Beleg nicht die
        //Kriterienfilter erfllt, darf die Aufgabe nun auch nicht gefllt werden
        //WICHTIG: Akt. und Arch. Belege fllen muss zuerst gelaufen sein, ansonsten steigt
        //der Bericht fr die Aufgabe an dieser Stelle immer aus, auch wenn der Beleg passt
        IF (Aufgaben."Campaign No." <> '') AND ((Aufgaben."Belegnr." <> '')
        OR (Aufgaben."Arch. Belegnr." <> '')) THEN BEGIN
          Berichtstabelle.RESET;
          IF Aufgaben."Belegnr." <> '' THEN
            Berichtstabelle.SETFILTER(Index,'%1',Aufgaben."Belegnr.");
          IF Aufgaben."Arch. Belegnr." <> '' THEN
            Berichtstabelle.SETFILTER(Index,'%1',Aufgaben."Arch. Belegnr.");
          IF NOT Berichtstabelle.FINDFIRST THEN
            EXIT;
        END;
        IF filter_hersteller <> '' THEN BEGIN
          Linien.RESET;
          Linien.SETFILTER("Kampagnennr.",'%1',Projekte."No.");
          Linien.SETFILTER(Linienkrzel,filter_hersteller);
          IF Linien.FINDFIRST THEN
            Aufgabe_fllen_v2(FALSE);
        END ELSE
          Aufgabe_fllen_v2(FALSE);
        Berichtstabelle.INIT;
        Berichtstabelle.Index := Projekte."No.";
        Berichtstabelle.Tabelle := 'PROJEKT';
        Berichtstabelle."Belegnr." := Aufgaben."No.";
        Berichtstabelle."Feld 1" := Projekte.Description;
        IF (Projekte.W„hrungscode = '') OR (Projekte.W„hrungscode = 'EUR') THEN
          Berichtstabelle."Feld 2" :=   '°'
        ELSE
          Berichtstabelle."Feld 2" := Projekte.W„hrungscode;
        Berichtstabelle."Feld 4" := Projekte.Projektvolumen;
        Berichtstabelle."Feld 5" := Projekte.Projektwert;
        Berichtstabelle."Feld 6" := Projekte."Betreuer Innendienst";
        Berichtstabelle."Feld 7" := Projekte."Salesperson Code";
        Berichtstabelle."Feld 8" := Projekte.Projektstatus;
        Berichtstabelle."Feld 9" := Projekte.Projektklasse;
        //*******************************************************************************************************
        //Fhrungsrolle
        ansprechpartner.SETRANGE("Kampagnennr.",Projekte."No.");
        ansprechpartner.SETRANGE(Fhrungsrolle,TRUE);
        IF ansprechpartner.FINDFIRST THEN BEGIN
            ansprechpartner.CALCFIELDS(Mandantenname);
            Berichtstabelle."Feld 10" := ansprechpartner.Mandantenname;
          END;
        //*******************************************************************************************************
        //Linien
        Linien.RESET;
        Linien.SETFILTER("Kampagnennr.",'%1',Projekte."No.");
        IF Linien.FINDFIRST THEN
          REPEAT
            IF Manufac.GET(Linien.Linienkrzel) THEN
              Berichtstabelle."Feld 11" := Berichtstabelle."Feld 11" + Manufac.Herstellerkurzname + ' '
            ELSE
              Berichtstabelle."Feld 11" := Berichtstabelle."Feld 11" + Linien.Linienkrzel + '(?) '
          UNTIL Linien.NEXT = 0;
        Berichtstabelle.Uhrzeit := CURRENTDATETIME;
        Berichtstabelle.User := USERID;
        Berichtstabelle.INSERT;
      END;
    END;

    PROCEDURE Zusatz_Arch_Belege_fllen@1140002();
    VAR
      "Arch-Kopf"@1140001 : Record 5107;
      "Arch-Zeile"@1140000 : Record 5108;
      "arch-vkzeile"@1140002 : Record 5108;
      arch_beleg_doppelt@1140003 : Boolean;
      aufgabe_eingetragen@1140004 : Boolean;
    BEGIN
      aufgabe_eingetragen := FALSE;
      kontakt.RESET;
      kontakt.SETFILTER(kontakt."No.",Aufgaben."Contact No.");
      kontakt.FINDFIRST;
      IF (filter_gebiet = 'OST') AND (kontakt."Territory Code" = 'NORDOST') THEN BEGIN
      END ELSE BEGIN
        "Arch-Kopf".RESET;
        "Arch-Kopf".SETFILTER("No.",'%1',Aufgaben."Arch. Belegnr.");
        "Arch-Kopf".SETFILTER("Betreuer Innendienst",filter_betreuer);
        "Arch-Kopf".SETFILTER("Salesperson Code",filter_verk„ufer);
        "Arch-Kopf".SETFILTER(Teams,filter_teams);
        "Arch-Kopf".SETFILTER("Territory Code",filter_gebiet);
        IF "Arch-Kopf".FINDLAST THEN BEGIN
          "Arch-Zeile".RESET;
          "Arch-Zeile".SETFILTER("Document No.",'%1',"Arch-Kopf"."No.");
          "Arch-Zeile".SETFILTER("Version No.",'%1',"Arch-Kopf"."Version No.");
          "Arch-Zeile".SETFILTER(Type,'%1',"Arch-Zeile".Type::Item);
          "Arch-Zeile".SETFILTER("Manufacturer Code",filter_hersteller);
          IF "Arch-Zeile".FINDFIRST THEN BEGIN
            Berichtstabelle.RESET;
            Berichtstabelle.SETFILTER(Index,'%1',"Arch-Kopf"."No.");
            Berichtstabelle.SETFILTER(Tabelle,'%1','BELEGKOPF');
            IF Berichtstabelle.FINDFIRST THEN
              arch_beleg_doppelt := TRUE
            ELSE
              arch_beleg_doppelt := FALSE;
            //*******************************************************************************************************
            ////Belegkopf fllen, Arch. Auftragskopf
            IF arch_beleg_doppelt = FALSE THEN BEGIN
              Berichtstabelle.INIT;
              Berichtstabelle.Index := "Arch-Kopf"."No.";
              Berichtstabelle.Tabelle := 'BELEGKOPF';
              Berichtstabelle.Datum := "Arch-Kopf"."Document Date";
              Berichtstabelle."Belegnr." := Aufgaben."No.";
              Berichtstabelle."Feld 2" := "Arch-Kopf"."Sell-to Customer No.";
              Berichtstabelle."Feld 6" := "Arch-Kopf"."Betreuer Innendienst";
              Berichtstabelle."Feld 7" := "Arch-Kopf"."Salesperson Code";
              Berichtstabelle."Feld 9" := "Arch-Kopf"."Territory Code";
              Berichtstabelle."Feld 10" := "Arch-Kopf"."Sell-to Customer Name";
              Berichtstabelle."Feld 12" := "Arch-Kopf".Kontaktperson;
              //*******************************************************************************************************
              /////Verbindung Mš - Aufgaben\\\\\
              IF Aufgaben."Campaign No." = '' THEN BEGIN
                Mšwach.RESET;
                Mšwach.SETFILTER(Aufgabennr,'%1',Aufgaben."No.");
                IF Mšwach.FINDFIRST THEN
                  Berichtstabelle."Feld 17" := TRUE
                ELSE
                  Berichtstabelle."Feld 17" := FALSE;
              END;
              Berichtstabelle.Uhrzeit := CURRENTDATETIME;
              Berichtstabelle.User := USERID;
              Berichtstabelle.INSERT;
            END;
            IF arch_beleg_doppelt = FALSE THEN
              REPEAT
                //*******************************************************************************************************
                ////Arch. Auftragszeile
                Berichtstabelle.INIT;
                Berichtstabelle.Index := "Arch-Zeile"."Document No.";
                Berichtstabelle.Tabelle := 'BELEGZEILE';
                Berichtstabelle."Belegnr." := "Arch-Kopf"."No.";
                Berichtstabelle."Zeilennr." := "Arch-Zeile"."Line No.";
                Berichtstabelle."Feld 1" := "Arch-Zeile"."System Projektinfos";
                Berichtstabelle."Feld 3" := "Arch-Zeile"."Artikelnr. 2";
                Berichtstabelle."Feld 4" := "Arch-Zeile".Quantity;
                Berichtstabelle."Feld 5" := "Arch-Zeile"."DC-Preis (EKW)";
                IF Artikel.GET("Arch-Zeile"."No.") THEN BEGIN
                  Berichtstabelle."Feld 6" := Artikel.Herstellerkurzname;
                  IF "Arch-Zeile".Einkaufsw„hrungscode = '' THEN
                    Berichtstabelle."Feld 7" := '°'
                  ELSE
                    Berichtstabelle."Feld 7" := "Arch-Zeile".Einkaufsw„hrungscode;
                  Berichtstabelle."Feld 17" := Artikel.Registrierbar;
                  "Ek-Preis".RESET;
                  "Ek-Preis".SETFILTER("Item No.",'%1',Artikel."No.");
                  "Ek-Preis".SETFILTER("Vendor No.",'%1',Artikel."Vendor No.");
                  IF "Ek-Preis".FINDLAST THEN
                    Berichtstabelle."Feld 14" := FORMAT("Ek-Preis"."Direct Unit Cost");
                END;
                Berichtstabelle."Feld 10" := "Arch-Zeile"."Unit of Measure";
                Berichtstabelle."Feld 11" := "Arch-Zeile".Endkunde;
                Berichtstabelle."Feld 12" := FORMAT(ROUND("Arch-Zeile"."Profit %",0.01));
                Berichtstabelle."Feld 13" := FORMAT("Arch-Zeile"."Unit Price");
                Berichtstabelle."Feld 15" := FORMAT("Arch-Zeile"."Unit Price" * "Arch-Zeile".Quantity);
                gesamt_betrag:=0;
                "arch-vkzeile".SETFILTER("Document No.",'%1',"Arch-Zeile"."Document No.");
                IF "arch-vkzeile".FINDFIRST THEN
                  REPEAT
                    gesamt_betrag := gesamt_betrag + ("arch-vkzeile".Quantity * "arch-vkzeile"."DC-Preis (MW)");
                  UNTIL "arch-vkzeile".NEXT=0;
                Berichtstabelle."Feld 16" := FORMAT(gesamt_betrag);
                IF "Arch-Zeile"."Currency Code" = '' THEN
                  Berichtstabelle."Feld 19" := '°'
                ELSE
                  Berichtstabelle."Feld 19" := "Arch-Zeile"."Currency Code";
                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                Berichtstabelle.User := USERID;
                Berichtstabelle.INSERT;
              UNTIL "Arch-Zeile".NEXT = 0;
            //*******************************************************************************************************
            /////Verbindung Mš - Aufgaben\\\\\
            IF Aufgaben."Campaign No." = '' THEN BEGIN
              Mšwach.RESET;
              Mšwach.SETFILTER(Aufgabennr,Aufgaben."No.");
              IF Mšwach.FINDFIRST THEN BEGIN
                Berichtstabelle.INIT;
                Berichtstabelle.Index := Mšwach.Nr;
                Berichtstabelle.Tabelle := 'MšWACH';
                Berichtstabelle."Belegnr." := Aufgaben."No.";
                Berichtstabelle."Feld 4" := Mšwach."Anzahl pro System";
                Berichtstabelle."Feld 10" := Mšwach.Applikation;
                Berichtstabelle."Feld 12" := Mšwach.Potenzial;
                Berichtstabelle."Feld 13" := FORMAT(Mšwach.Status);
                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                Berichtstabelle.User := USERID;
                Berichtstabelle.INSERT;
              END;
            END;
            IF ((option = option::"FU's d.l. Wo. - Angebote") OR (option = option::"FU's d.l. Wo. - Muster"))
            AND (aufgabe_eingetragen = FALSE) THEN BEGIN
              Aufgabe_fllen;
              aufgabe_eingetragen := TRUE;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE Zusatz_Arch_Belege_fllen_v2@1140012(Belegnr@1140005 : Code[20];bearbeiter_modus@1140006 : Boolean);
    VAR
      "Arch-Kopf"@1140001 : Record 5107;
      "Arch-Zeile"@1140000 : Record 5108;
      "arch-vkzeile"@1000000003 : Record 5108;
      Beleghistorie@1000000000 : Record 50008;
      Beleghistorie_holen@1000000001 : Record 50008;
      Beleghistorie_zeilen_werte@1000000002 : Record 50008;
      arch_beleg_doppelt@1140003 : Boolean;
      aufgabe_eingetragen@1140004 : Boolean;
    BEGIN
      aufgabe_eingetragen := FALSE;
      kontakt.RESET;
      kontakt.SETFILTER(kontakt."No.",Aufgaben."Contact No.");
      kontakt.FINDFIRST;
      IF (filter_gebiet = 'OST') AND (kontakt."Territory Code" = 'NORDOST') THEN BEGIN
      END ELSE BEGIN
        "Arch-Kopf".RESET;
        "Arch-Kopf".SETFILTER("No.",'%1',Belegnr);
        IF NOT bearbeiter_modus THEN BEGIN
          "Arch-Kopf".SETFILTER("Betreuer Innendienst",filter_betreuer);
          "Arch-Kopf".SETFILTER("Salesperson Code",filter_verk„ufer);
          "Arch-Kopf".SETFILTER(Teams,filter_teams);
          "Arch-Kopf".SETFILTER("Territory Code",filter_gebiet);
        END;
        IF "Arch-Kopf".FINDLAST THEN BEGIN
          "Arch-Zeile".RESET;
          "Arch-Zeile".SETFILTER("Document No.",'%1',"Arch-Kopf"."No.");
          "Arch-Zeile".SETFILTER("Version No.",'%1',"Arch-Kopf"."Version No.");
          "Arch-Zeile".SETFILTER(Type,'%1',"Arch-Zeile".Type::Item);
          "Arch-Zeile".SETFILTER("Manufacturer Code",filter_hersteller);
          IF "Arch-Zeile".FINDFIRST THEN BEGIN
            Berichtstabelle.RESET;
            Berichtstabelle.SETFILTER(Index,'%1',"Arch-Kopf"."No.");
            Berichtstabelle.SETFILTER(Tabelle,'%1','BELEGKOPF');
            IF Berichtstabelle.FINDFIRST THEN
              arch_beleg_doppelt := TRUE
            ELSE
              arch_beleg_doppelt := FALSE;
            //*******************************************************************************************************
            ////Belegkopf fllen, Arch. Auftragskopf
            IF arch_beleg_doppelt = FALSE THEN BEGIN
              Aufgabe_fllen_v2(FALSE);
              Berichtstabelle.INIT;
              Berichtstabelle.Index := "Arch-Kopf"."No.";
              Berichtstabelle.Tabelle := 'BELEGKOPF';
              Berichtstabelle.Datum := "Arch-Kopf"."Document Date";
              Berichtstabelle."Belegnr." := Aufgaben."No.";
              Berichtstabelle."Feld 2" := "Arch-Kopf"."Sell-to Customer No.";
              Berichtstabelle."Feld 6" := "Arch-Kopf"."Betreuer Innendienst";
              Berichtstabelle."Feld 7" := "Arch-Kopf"."Salesperson Code";
              Berichtstabelle."Feld 9" := "Arch-Kopf"."Territory Code";
              Berichtstabelle."Feld 10" := "Arch-Kopf"."Sell-to Customer Name";
              Berichtstabelle."Feld 12" := "Arch-Kopf".Kontaktperson;
              //*******************************************************************************************************
              /////Verbindung Mš - Aufgaben\\\\\
              IF Aufgaben."Campaign No." = '' THEN BEGIN
                Mšwach.RESET;
                Mšwach.SETRANGE(Aufgabennr,Aufgaben."No.");
                IF Mšwach.FINDFIRST THEN
                  Berichtstabelle."Feld 17" := TRUE
                ELSE
                  Berichtstabelle."Feld 17" := FALSE;
              END;
              Berichtstabelle.Uhrzeit := CURRENTDATETIME;
              Berichtstabelle.User := USERID;
              Berichtstabelle.INSERT;
            END;
            IF arch_beleg_doppelt = FALSE THEN
              REPEAT
                //*******************************************************************************************************
                ////Arch. Auftragszeile
                Berichtstabelle.INIT;
                Berichtstabelle.Index := "Arch-Zeile"."Document No.";
                Berichtstabelle.Tabelle := 'BELEGZEILE';
                Berichtstabelle."Belegnr." := "Arch-Kopf"."No.";
                Berichtstabelle."Zeilennr." := "Arch-Zeile"."Line No.";
                Berichtstabelle."Feld 1" := "Arch-Zeile"."System Projektinfos";
                Berichtstabelle."Feld 3" := "Arch-Zeile"."Artikelnr. 2";
                Berichtstabelle."Feld 4" := "Arch-Zeile".Quantity;
                Berichtstabelle."Feld 5" := "Arch-Zeile"."DC-Preis (EKW)";
                IF Artikel.GET("Arch-Zeile"."No.") THEN BEGIN
                  Berichtstabelle."Feld 6" := Artikel.Herstellerkurzname;
                  IF "Arch-Zeile".Einkaufsw„hrungscode = '' THEN
                    Berichtstabelle."Feld 7" := '°'
                  ELSE
                    Berichtstabelle."Feld 7" := "Arch-Zeile".Einkaufsw„hrungscode;
                  Berichtstabelle."Feld 17" := Artikel.Registrierbar;
                  "Ek-Preis".RESET;
                  "Ek-Preis".SETRANGE("Item No.",Artikel."No.");
                  "Ek-Preis".SETRANGE("Vendor No.",Artikel."Vendor No.");
                  IF "Ek-Preis".FINDLAST THEN
                    Berichtstabelle."Feld 14" := FORMAT("Ek-Preis"."Direct Unit Cost");
                END;
                Berichtstabelle."Feld 10" := "Arch-Zeile"."Unit of Measure";
                Berichtstabelle."Feld 11" := "Arch-Zeile".Endkunde;
                Berichtstabelle."Feld 12" := FORMAT(ROUND("Arch-Zeile"."Profit %",0.01));
                Berichtstabelle."Feld 13" := FORMAT("Arch-Zeile"."Unit Price");
                Berichtstabelle."Feld 15" := FORMAT("Arch-Zeile"."Unit Price" * "Arch-Zeile".Quantity);
                gesamt_betrag := 0;
                "arch-vkzeile".SETFILTER("Document No.",'%1',"Arch-Zeile"."Document No.");
                IF "arch-vkzeile".FINDFIRST THEN
                  REPEAT
                    gesamt_betrag := gesamt_betrag + ("arch-vkzeile".Quantity * "arch-vkzeile"."DC-Preis (MW)");
                  UNTIL "arch-vkzeile".NEXT=0;
                Berichtstabelle."Feld 16" := FORMAT(gesamt_betrag);
                IF "Arch-Zeile"."Currency Code" = '' THEN
                  Berichtstabelle."Feld 19" := '°'
                ELSE
                  Berichtstabelle."Feld 19" := "Arch-Zeile"."Currency Code";
                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                Berichtstabelle.User := USERID;
              Berichtstabelle.INSERT;
            UNTIL "Arch-Zeile".NEXT = 0;
            //*******************************************************************************************************
            /////Verbindung Mš - Aufgaben\\\\\
            IF Aufgaben."Campaign No." = '' THEN BEGIN
              Mšwach.RESET;
              Mšwach.SETRANGE(Aufgabennr,Aufgaben."No.");
              IF Mšwach.FINDFIRST THEN BEGIN
                Berichtstabelle.INIT;
                Berichtstabelle.Index := Mšwach.Nr;
                Berichtstabelle.Tabelle := 'MšWACH';
                Berichtstabelle."Belegnr." := Aufgaben."No.";
                Berichtstabelle."Feld 4" := Mšwach."Anzahl pro System";
                Berichtstabelle."Feld 10" := Mšwach.Applikation;
                Berichtstabelle."Feld 12" := Mšwach.Potenzial;
                Berichtstabelle."Feld 13" := FORMAT(Mšwach.Status);
                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                Berichtstabelle.User := USERID;
                Berichtstabelle.INSERT;
              END;
            END;
            IF ((option = option::"FU's d.l. Wo. - Angebote") OR (option = option::"FU's d.l. Wo. - Muster"))
            AND (aufgabe_eingetragen = FALSE) THEN BEGIN
              Aufgabe_fllen;
              aufgabe_eingetragen := TRUE;
            END;
          END;
        END ELSE BEGIN
          //Weg ber die Beleghistorie
          Beleghistorie.RESET;
          Beleghistorie.SETFILTER(Belegart,'%1',Beleghistorie.Belegart::Invoice);
          Beleghistorie.SETFILTER("Auftragsnr.",'%1',Belegnr);
          IF NOT bearbeiter_modus THEN BEGIN
            Beleghistorie.SETFILTER("Betreuer Innendienst",filter_betreuer);
            Beleghistorie.SETFILTER(Verk„ufercode,filter_verk„ufer);
            Beleghistorie.SETFILTER(Teams,filter_teams);
            Beleghistorie.SETFILTER(Gebiet,filter_gebiet);
          END;
          IF Beleghistorie.FINDLAST THEN BEGIN
            Beleghistorie_holen.RESET;
            Beleghistorie_holen.SETFILTER(Belegart,'%1',Beleghistorie.Belegart::Invoice);
            Beleghistorie_holen.SETFILTER("Belegnr.",'%1',Beleghistorie."Belegnr."); //er da findet nur die letzte Rechnung, vorherige Rechnungen mit weiteren AU-Pos. k”nnten dadurch aber fehlen!
            Beleghistorie_holen.SETFILTER(Menge,'>%1',0);
            IF Beleghistorie_holen.FINDFIRST THEN BEGIN
              Berichtstabelle.RESET;
              Berichtstabelle.SETFILTER(Index,'%1',Beleghistorie_holen."Auftragsnr.");
              Berichtstabelle.SETFILTER(Tabelle,'%1','BELEGKOPF');
              IF Berichtstabelle.FINDFIRST THEN
                arch_beleg_doppelt := TRUE
              ELSE
                arch_beleg_doppelt := FALSE;
              //*******************************************************************************************************
              ////Belegkopf fllen, Beleghistorie
              IF arch_beleg_doppelt = FALSE THEN BEGIN
                Aufgabe_fllen_v2(FALSE);
                Berichtstabelle.INIT;
                Berichtstabelle.Index := Beleghistorie_holen."Auftragsnr.";
                Berichtstabelle.Tabelle := 'BELEGKOPF';
                Berichtstabelle.Datum := Beleghistorie_holen.Belegdatum;
                Berichtstabelle."Belegnr." := Aufgaben."No.";
                Berichtstabelle."Feld 2" := Beleghistorie_holen."Debitornr.";
                Berichtstabelle."Feld 6" := Beleghistorie_holen."Betreuer Innendienst";
                Berichtstabelle."Feld 7" := Beleghistorie_holen.Verk„ufercode;
                Berichtstabelle."Feld 9" := Beleghistorie_holen.Gebiet;
                IF Customer.GET(Beleghistorie_holen."Debitornr.") THEN
                  Berichtstabelle."Feld 10" := Customer.Name;
                //Berichtstabelle."Feld 12" := Beleghistorie_holen.Kontaktperson;
                //*******************************************************************************************************
                /////Verbindung Mš - Aufgaben\\\\\
                IF Aufgaben."Campaign No." = '' THEN BEGIN
                  Mšwach.RESET;
                  Mšwach.SETRANGE(Aufgabennr,Aufgaben."No.");
                  IF Mšwach.FINDFIRST THEN
                    Berichtstabelle."Feld 17" := TRUE
                  ELSE
                    Berichtstabelle."Feld 17" := FALSE;
                END;
                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                Berichtstabelle.User := USERID;
                Berichtstabelle.INSERT;
              END;
              IF arch_beleg_doppelt = FALSE THEN
                REPEAT
                  //*******************************************************************************************************
                  ////Arch. Auftragszeile
                  Berichtstabelle.INIT;
                  Berichtstabelle.Index := Beleghistorie_holen."Auftragsnr.";
                  Berichtstabelle.Tabelle := 'BELEGZEILE';
                  Berichtstabelle."Belegnr." := Beleghistorie_holen."Auftragsnr.";
                  Berichtstabelle."Zeilennr." := Beleghistorie_holen."Zeilennr.";
                  Berichtstabelle."Feld 1" := Beleghistorie_holen."ACS Projektinfos";
                  Berichtstabelle."Feld 4" := Beleghistorie_holen.Menge;
                  Berichtstabelle."Feld 5" := Beleghistorie_holen."EK-Preis";
                  IF Artikel.GET(Beleghistorie_holen."Artikelnr.") THEN BEGIN
                    Berichtstabelle."Feld 3" := Artikel."No. 2";
                    Berichtstabelle."Feld 6" := Artikel.Herstellerkurzname;
                    IF Beleghistorie_holen."EK-W„hrung" = '' THEN
                      Berichtstabelle."Feld 7" := '°'
                    ELSE
                      Berichtstabelle."Feld 7" := Beleghistorie_holen."EK-W„hrung";
                    Berichtstabelle."Feld 17" := Artikel.Registrierbar;
                    "Ek-Preis".RESET;
                    "Ek-Preis".SETRANGE("Item No.",Artikel."No.");
                    "Ek-Preis".SETRANGE("Vendor No.",Artikel."Vendor No.");
                    IF "Ek-Preis".FINDLAST THEN
                      Berichtstabelle."Feld 14" := FORMAT("Ek-Preis"."Direct Unit Cost");
                  END;
                  //Berichtstabelle."Feld 10" := Beleghistorie_holen."Unit of Measure";
                  Berichtstabelle."Feld 11" := Beleghistorie_holen.Endkunde;
                  Berichtstabelle."Feld 12" := FORMAT(ROUND(Beleghistorie_holen."DB %",0.01));
                  Berichtstabelle."Feld 13" := FORMAT(Beleghistorie_holen.Menge);
                  Berichtstabelle."Feld 15" := FORMAT(Beleghistorie_holen."VK-Preis" * Beleghistorie_holen.Menge);
                  gesamt_betrag := 0;
                  Beleghistorie_zeilen_werte.SETFILTER("Auftragsnr.",'%1',Beleghistorie_holen."Auftragsnr.");
                  IF Beleghistorie_zeilen_werte.FINDFIRST THEN
                    REPEAT
                      gesamt_betrag := gesamt_betrag + (Beleghistorie_zeilen_werte.Menge * Beleghistorie_zeilen_werte."Einstandspreis MW");
                    UNTIL Beleghistorie_zeilen_werte.NEXT = 0;
                  Berichtstabelle."Feld 16" := FORMAT(gesamt_betrag);
                  IF Beleghistorie_holen."VK-W„hrung" = '' THEN
                    Berichtstabelle."Feld 19" := '°'
                  ELSE
                    Berichtstabelle."Feld 19" := Beleghistorie_holen."VK-W„hrung";
                  Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                  Berichtstabelle.User := USERID;
                Berichtstabelle.INSERT;
              UNTIL Beleghistorie_holen.NEXT = 0;
              //*******************************************************************************************************
              /////Verbindung Mš - Aufgaben\\\\\
              IF Aufgaben."Campaign No." = '' THEN BEGIN
                Mšwach.RESET;
                Mšwach.SETRANGE(Aufgabennr,Aufgaben."No.");
                IF Mšwach.FINDFIRST THEN BEGIN
                  Berichtstabelle.INIT;
                  Berichtstabelle.Index := Mšwach.Nr;
                  Berichtstabelle.Tabelle := 'MšWACH';
                  Berichtstabelle."Belegnr." := Aufgaben."No.";
                  Berichtstabelle."Feld 4" := Mšwach."Anzahl pro System";
                  Berichtstabelle."Feld 10" := Mšwach.Applikation;
                  Berichtstabelle."Feld 12" := Mšwach.Potenzial;
                  Berichtstabelle."Feld 13" := FORMAT(Mšwach.Status);
                  Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                  Berichtstabelle.User := USERID;
                  Berichtstabelle.INSERT;
                END;
              END;
              IF ((option = option::"FU's d.l. Wo. - Angebote") OR (option = option::"FU's d.l. Wo. - Muster"))
              AND (aufgabe_eingetragen = FALSE) THEN BEGIN
                Aufgabe_fllen;
                aufgabe_eingetragen := TRUE;
              END;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE Zusatz_Akt_Belege_fllen@1140003();
    VAR
      Auftragskopf@1140001 : Record 36;
      Auftragszeile@1140000 : Record 37;
      vkzeile@1140002 : Record 37;
      akt_beleg_doppelt@1140003 : Boolean;
      aufgabe_eingetragen@1140004 : Boolean;
    BEGIN
      aufgabe_eingetragen := FALSE;
      kontakt.RESET;
      kontakt.SETRANGE(kontakt."No.",Aufgaben."Contact No.");
      kontakt.FINDFIRST;
      IF (filter_gebiet = 'OST') AND (kontakt."Territory Code" = 'NORDOST') THEN BEGIN
      END ELSE BEGIN
        Auftragskopf.RESET;
        Auftragskopf.SETFILTER("No.",'%1',Aufgaben."Belegnr.");
        Auftragskopf.SETFILTER("Betreuer Innendienst",filter_betreuer);
        Auftragskopf.SETFILTER("Salesperson Code",filter_verk„ufer);
        Auftragskopf.SETFILTER(Teams,filter_teams);
        Auftragskopf.SETFILTER("Territory Code",filter_gebiet);
        IF Auftragskopf.FINDFIRST THEN BEGIN
          Auftragszeile.RESET;
          Auftragszeile.SETFILTER("Document No.",'%1',Auftragskopf."No.");
          Auftragszeile.SETFILTER(Type,'%1',Auftragszeile.Type::Item);
          Auftragszeile.SETFILTER("Manufacturer Code",filter_hersteller);
          IF Auftragszeile.FINDFIRST THEN BEGIN
            Berichtstabelle.RESET;
            Berichtstabelle.SETFILTER(Index,'%1',Auftragskopf."No.");
            Berichtstabelle.SETFILTER(Tabelle,'%1','BELEGKOPF');
            IF Berichtstabelle.FINDFIRST THEN
              akt_beleg_doppelt := TRUE
            ELSE
              akt_beleg_doppelt := FALSE;
            //*******************************************************************************************************
            ////Belegkopf fllen, Auftragskopf
            IF akt_beleg_doppelt = FALSE THEN BEGIN
              Berichtstabelle.INIT;
              Berichtstabelle.Index := Auftragskopf."No.";
              Berichtstabelle.Tabelle := 'BELEGKOPF';
              Berichtstabelle.Datum := Auftragskopf."Document Date";
              Berichtstabelle."Belegnr." := Aufgaben."No.";
              Berichtstabelle."Feld 2" := Auftragskopf."Sell-to Customer No.";
              Berichtstabelle."Feld 6" := Auftragskopf."Betreuer Innendienst";
              Berichtstabelle."Feld 7" := Auftragskopf."Salesperson Code";
              Berichtstabelle."Feld 9" := Auftragskopf."Territory Code";
              Berichtstabelle."Feld 10" := Auftragskopf."Sell-to Customer Name";
              Berichtstabelle."Feld 12" := Auftragskopf.Kontaktperson;
              //*******************************************************************************************************
              /////Verbindung Mš - Aufgaben\\\\\
              IF Aufgaben."Campaign No." = '' THEN BEGIN
                Mšwach.RESET;
                Mšwach.SETRANGE(Aufgabennr,Aufgaben."No.");
                IF Mšwach.FINDFIRST THEN
                  Berichtstabelle."Feld 17" := TRUE
                ELSE
                  Berichtstabelle."Feld 17" := FALSE;
              END;
              Berichtstabelle.Uhrzeit := CURRENTDATETIME;
              Berichtstabelle.User := USERID;
              Berichtstabelle.INSERT;
          END;
          IF akt_beleg_doppelt = FALSE THEN
            REPEAT
              //*******************************************************************************************************
              ////Auftragszeile
              Berichtstabelle.INIT;
                Berichtstabelle.Index := Auftragszeile."Document No.";
                Berichtstabelle.Tabelle := 'BELEGZEILE';
                Berichtstabelle."Belegnr." := Auftragskopf."No.";
                Berichtstabelle."Zeilennr." := Auftragszeile."Line No.";
                Berichtstabelle."Feld 1" := Auftragszeile."System Projektinfos";
                Berichtstabelle."Feld 3" := Auftragszeile."Artikelnr. 2";
                Berichtstabelle."Feld 4" := Auftragszeile.Quantity;
                Berichtstabelle."Feld 5" := Auftragszeile."DC-Preis (EKW)";
                IF Artikel.GET(Auftragszeile."No.") THEN BEGIN
                  Berichtstabelle."Feld 6" := Artikel.Herstellerkurzname;
                  IF Auftragszeile.Einkaufsw„hrungscode = '' THEN
                    Berichtstabelle."Feld 7" := '°'
                  ELSE
                    Berichtstabelle."Feld 7" := Auftragszeile.Einkaufsw„hrungscode;
                  Berichtstabelle."Feld 17" := Artikel.Registrierbar;
                  "Ek-Preis".RESET;
                  "Ek-Preis".SETRANGE("Item No.",Artikel."No.");
                  "Ek-Preis".SETRANGE("Vendor No.",Artikel."Vendor No.");
                  IF "Ek-Preis".FINDLAST THEN
                    Berichtstabelle."Feld 14" := FORMAT("Ek-Preis"."Direct Unit Cost");
                END;
                Berichtstabelle."Feld 10" := Auftragszeile."Unit of Measure";
                Berichtstabelle."Feld 11" := Auftragszeile.Endkunde;
                Berichtstabelle."Feld 12" := FORMAT(ROUND(Auftragszeile."Profit %",0.01));
                Berichtstabelle."Feld 13" := FORMAT(Auftragszeile."Unit Price");
                Berichtstabelle."Feld 15" := FORMAT(Auftragszeile."Unit Price" * Auftragszeile.Quantity);
                gesamt_betrag := 0;
                vkzeile.SETFILTER("Document No.",'%1',Auftragszeile."Document No.");
                IF vkzeile.FINDFIRST THEN
                  REPEAT
                    gesamt_betrag := gesamt_betrag + (vkzeile.Quantity * vkzeile."DC-Preis (MW)");
                  UNTIL vkzeile.NEXT=0;
                Berichtstabelle."Feld 16" := FORMAT(gesamt_betrag);
                IF Auftragszeile."Currency Code" = '' THEN
                  Berichtstabelle."Feld 19" := '°'
                ELSE
                  Berichtstabelle."Feld 19" := Auftragszeile."Currency Code";
                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                Berichtstabelle.User := USERID;
                Berichtstabelle.INSERT;
              UNTIL Auftragszeile.NEXT = 0;
            //*******************************************************************************************************
            /////Verbindung Mš - Aufgaben\\\\\
            IF Aufgaben."Campaign No." = '' THEN BEGIN
              Mšwach.RESET;
              Mšwach.SETRANGE(Aufgabennr,Aufgaben."No.");
              IF Mšwach.FINDFIRST THEN BEGIN
                Berichtstabelle.INIT;
                Berichtstabelle.Index := Mšwach.Nr;
                Berichtstabelle.Tabelle := 'MšWACH';
                Berichtstabelle."Belegnr." := Aufgaben."No.";
                Berichtstabelle."Feld 4" := Mšwach."Anzahl pro System";
                Berichtstabelle."Feld 10" := Mšwach.Applikation;
                Berichtstabelle."Feld 12" := Mšwach.Potenzial;
                Berichtstabelle."Feld 13" := FORMAT(Mšwach.Status);
                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                Berichtstabelle.User := USERID;
                Berichtstabelle.INSERT;
              END;
            END;
            IF ((option = option::"FU's d.l. Wo. - Angebote") OR (option = option::"FU's d.l. Wo. - Muster"))
            AND (aufgabe_eingetragen = FALSE) THEN BEGIN
              Aufgabe_fllen;
              aufgabe_eingetragen := TRUE;
            END;
          END;
        END;
      END;
    END;

    PROCEDURE Zusatz_Akt_Belege_fllen_v2@1140013(Belegnr@1140005 : Code[20];bearbeiter_modus@1140006 : Boolean);
    VAR
      Auftragskopf@1140001 : Record 36;
      Auftragszeile@1140000 : Record 37;
      vkzeile@1140002 : Record 37;
      akt_beleg_doppelt@1140003 : Boolean;
      aufgabe_eingetragen@1140004 : Boolean;
    BEGIN
      aufgabe_eingetragen := FALSE;
      kontakt.RESET;
      kontakt.SETFILTER(kontakt."No.",Aufgaben."Contact No.");
      kontakt.FINDFIRST;
      IF (filter_gebiet = 'OST') AND (kontakt."Territory Code" = 'NORDOST') THEN BEGIN
      END ELSE BEGIN
        Auftragskopf.RESET;
        Auftragskopf.SETRANGE("No.",Belegnr);
        IF NOT bearbeiter_modus THEN BEGIN
          Auftragskopf.SETFILTER("Betreuer Innendienst",filter_betreuer);
          Auftragskopf.SETFILTER("Salesperson Code",filter_verk„ufer);
          Auftragskopf.SETFILTER(Teams,filter_teams);
          Auftragskopf.SETFILTER("Territory Code",filter_gebiet);
        END;
        IF Auftragskopf.FINDFIRST THEN BEGIN
          Auftragszeile.RESET;
          Auftragszeile.SETFILTER("Document No.",'%1',Auftragskopf."No.");
          Auftragszeile.SETFILTER(Type,'%1',Auftragszeile.Type::Item);
          Auftragszeile.SETFILTER("Manufacturer Code",filter_hersteller);
          IF Auftragszeile.FINDFIRST THEN BEGIN
            Berichtstabelle.RESET;
            Berichtstabelle.SETFILTER(Index,'%1',Auftragskopf."No.");
            Berichtstabelle.SETFILTER(Tabelle,'%1','BELEGKOPF');
            IF Berichtstabelle.FINDFIRST THEN
              akt_beleg_doppelt := TRUE
            ELSE
              akt_beleg_doppelt := FALSE;
            //*******************************************************************************************************
            ////Belegkopf fllen, Auftragskopf
            IF akt_beleg_doppelt = FALSE THEN BEGIN
              Aufgabe_fllen_v2(FALSE);
              Berichtstabelle.INIT;
              Berichtstabelle.Index := Auftragskopf."No.";
              Berichtstabelle.Tabelle := 'BELEGKOPF';
              Berichtstabelle.Datum := Auftragskopf."Document Date";
              Berichtstabelle."Belegnr." := Aufgaben."No.";
              Berichtstabelle."Feld 2" := Auftragskopf."Sell-to Customer No.";
              Berichtstabelle."Feld 6" := Auftragskopf."Betreuer Innendienst";
              Berichtstabelle."Feld 7" := Auftragskopf."Salesperson Code";
              Berichtstabelle."Feld 9" := Auftragskopf."Territory Code";
              Berichtstabelle."Feld 10" := Auftragskopf."Sell-to Customer Name";
              Berichtstabelle."Feld 12" := Auftragskopf.Kontaktperson;
              //*******************************************************************************************************
              /////Verbindung Mš - Aufgaben\\\\\
              IF Aufgaben."Campaign No."='' THEN BEGIN
                Mšwach.RESET;
                Mšwach.SETRANGE(Aufgabennr,Aufgaben."No.");
                IF Mšwach.FINDFIRST THEN
                  Berichtstabelle."Feld 17" := TRUE
                ELSE
                  Berichtstabelle."Feld 17" := FALSE;
              END;
              Berichtstabelle.Uhrzeit := CURRENTDATETIME;
              Berichtstabelle.User := USERID;
              Berichtstabelle.INSERT;
            END;
            IF akt_beleg_doppelt = FALSE THEN
              REPEAT
                //*******************************************************************************************************
                ////Auftragszeile
                Berichtstabelle.INIT;
                Berichtstabelle.Index := Auftragszeile."Document No.";
                Berichtstabelle.Tabelle := 'BELEGZEILE';
                Berichtstabelle."Belegnr." := Auftragskopf."No.";
                Berichtstabelle."Zeilennr." := Auftragszeile."Line No.";
                Berichtstabelle."Feld 1" := Auftragszeile."System Projektinfos";
                Berichtstabelle."Feld 3" := Auftragszeile."Artikelnr. 2";
                Berichtstabelle."Feld 4" := Auftragszeile.Quantity;
                Berichtstabelle."Feld 5" := Auftragszeile."DC-Preis (EKW)";
                IF Artikel.GET(Auftragszeile."No.") THEN BEGIN
                  Berichtstabelle."Feld 6" := Artikel.Herstellerkurzname;
                  IF Auftragszeile.Einkaufsw„hrungscode = '' THEN
                    Berichtstabelle."Feld 7" := '°'
                  ELSE
                    Berichtstabelle."Feld 7" := Auftragszeile.Einkaufsw„hrungscode;
                  Berichtstabelle."Feld 17" := Artikel.Registrierbar;
                  "Ek-Preis".RESET;
                  "Ek-Preis".SETFILTER("Item No.",'%1',Artikel."No.");
                  "Ek-Preis".SETFILTER("Vendor No.",'%1',Artikel."Vendor No.");
                  IF "Ek-Preis".FINDLAST THEN
                    Berichtstabelle."Feld 14" := FORMAT("Ek-Preis"."Direct Unit Cost");
                END;
                Berichtstabelle."Feld 10" := Auftragszeile."Unit of Measure";
                Berichtstabelle."Feld 11" := Auftragszeile.Endkunde;
                Berichtstabelle."Feld 12" := FORMAT(ROUND(Auftragszeile."Profit %",0.01));
                Berichtstabelle."Feld 13" := FORMAT(Auftragszeile."Unit Price");
                Berichtstabelle."Feld 15" := FORMAT(Auftragszeile."Unit Price" * Auftragszeile.Quantity);
                gesamt_betrag := 0;
                vkzeile.SETFILTER("Document No.",'%1',Auftragszeile."Document No.");
                IF vkzeile.FINDFIRST THEN
                  REPEAT
                    gesamt_betrag := gesamt_betrag + (vkzeile.Quantity * vkzeile."DC-Preis (MW)");
                  UNTIL vkzeile.NEXT=0;
                Berichtstabelle."Feld 16" := FORMAT(gesamt_betrag);
                IF Auftragszeile."Currency Code" = '' THEN
                  Berichtstabelle."Feld 19" := '°'
                ELSE
                  Berichtstabelle."Feld 19" := Auftragszeile."Currency Code";
                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                Berichtstabelle.User := USERID;
                Berichtstabelle.INSERT;
              UNTIL Auftragszeile.NEXT = 0;
            //*******************************************************************************************************
            /////Verbindung Mš - Aufgaben\\\\\
            IF Aufgaben."Campaign No." = '' THEN BEGIN
              Mšwach.RESET;
              Mšwach.SETFILTER(Aufgabennr,Aufgaben."No.");
              IF Mšwach.FINDFIRST THEN BEGIN
                Berichtstabelle.INIT;
                Berichtstabelle.Index := Mšwach.Nr;
                Berichtstabelle.Tabelle := 'MšWACH';
                Berichtstabelle."Belegnr." := Aufgaben."No.";
                Berichtstabelle."Feld 4" := Mšwach."Anzahl pro System";
                Berichtstabelle."Feld 10" := Mšwach.Applikation;
                Berichtstabelle."Feld 12" := Mšwach.Potenzial;
                Berichtstabelle."Feld 13" := FORMAT(Mšwach.Status);
                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                Berichtstabelle.User := USERID;
                Berichtstabelle.INSERT;
              END;
            END;
            IF ((option = option::"FU's d.l. Wo. - Angebote") OR (option = option::"FU's d.l. Wo. - Muster"))
            AND (aufgabe_eingetragen = FALSE) THEN BEGIN
              Aufgabe_fllen;
              aufgabe_eingetragen := TRUE;
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyToDo_Header1@5010(VAR ToDo@1000000000 : Record 50037);
    BEGIN
      WITH ToDo DO BEGIN
        //ReportForNav.ShowOutput(ReportForNav.PageNo = 1);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyToDo_Header2@5011(VAR ToDo@1000000000 : Record 50037);
    BEGIN
      WITH ToDo DO BEGIN
        ReportForNav.ShowOutput(ReportForNav.PageNo > 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyToDo_Body3@5012(VAR ToDo@1000000000 : Record 50037);
    BEGIN
      WITH ToDo DO BEGIN
        ReportForNav.ShowOutput((zusatz_kontakt = TRUE) OR (option = option::"šbersicht - Aufgaben"));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyToDo_Body4@5013(VAR ToDo@1000000000 : Record 50037);
    BEGIN
      WITH ToDo DO BEGIN
        //ReportForNav.ShowOutput(anzeigen_aufgabe = TRUE);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyBemerkung_Body5@5014(VAR Bemerkung@1000000000 : Record 50037);
    BEGIN
      WITH Bemerkung DO BEGIN
        //ReportForNav.ShowOutput(anzeigen_aufgabe = TRUE);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyProjekt_Body7@5015(VAR Projekt@1000000000 : Record 50037);
    BEGIN
      WITH Projekt DO BEGIN
        /////Zus„tzliche Informationen zum Projekt\\\\\
        //ReportForNav.ShowOutput((zusatz_projekt = TRUE) AND (anzeigen_projekt = TRUE));
        ReportForNav.ShowOutput((zusatz_projekt = TRUE) OR (option = option::"šbersicht - Aufgaben"));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyBelegzeile_Header10@5016(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        /////Zus„tzliche Informationen zu Belegszeilen\\\\\
        //ReportForNav.ShowOutput((zusatz_beleg = TRUE) AND (anzeigen_beleg_archiv = TRUE));
        ReportForNav.ShowOutput((zusatz_beleg = TRUE) OR (option = option::"šbersicht - Aufgaben"));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyBelegzeile_Header11@5017(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        /////Zus„tzliche Informationen zu Belegszeilen\\\\\
        //ReportForNav.ShowOutput((zusatz_beleg = TRUE) AND (anzeigen_beleg_archiv = TRUE));
        ReportForNav.ShowOutput(((zusatz_beleg = TRUE) OR (option = option::"šbersicht - Aufgaben")) AND (Berichtstabelle_Belegkopf."Feld 17" = TRUE));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyBelegzeile_Header12@5018(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        /////Zus„tzliche Informationen zu Belegszeilen, wenn Beleg mit Aufgabe verknpft ist\\\\\
        //ReportForNav.ShowOutput((zusatz_beleg = TRUE) AND (anzeigen_belege = TRUE));
        ReportForNav.ShowOutput(((zusatz_beleg = TRUE) OR (option = option::"šbersicht - Aufgaben")) AND (Berichtstabelle_Belegkopf."Feld 17" = FALSE));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyBelegzeile_Body13@5019(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        /////Zus„tzliche Informationen zu Belegszeilen\\\\\
        ReportForNav.ShowOutput(("Feld 17" = FALSE) AND (Berichtstabelle_Belegkopf."Feld 17" = TRUE)
        AND ((zusatz_beleg = TRUE) OR (option = option::"šbersicht - Aufgaben")));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyBelegzeile_Body14@5020(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        /////Zus„tzliche Informationen zu Belegszeilen\\\\\
        ReportForNav.ShowOutput(("Feld 17" = TRUE) AND (Berichtstabelle_Belegkopf."Feld 17" = TRUE)
        AND ((zusatz_beleg = TRUE) OR (option = option::"šbersicht - Aufgaben")));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyBelegzeile_Body15@5021(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        /////Zus„tzliche Informationen zu Belegszeilen, wenn Beleg direkt mit Aufgabe verknpft ist\\\\\
        ReportForNav.ShowOutput(("Feld 17" = FALSE) AND (Berichtstabelle_Belegkopf."Feld 17" = FALSE)
        AND ((zusatz_beleg = TRUE) OR (option = option::"šbersicht - Aufgaben")));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyBelegzeile_Body16@5022(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        /////Zus„tzliche Informationen zu Belegszeilen, wenn Beleg direkt mit Aufgabe verknpft ist\\\\\
        ReportForNav.ShowOutput(("Feld 17" = TRUE) AND (Berichtstabelle_Belegkopf."Feld 17" = FALSE)
        AND ((zusatz_beleg = TRUE) OR (option = option::"šbersicht - Aufgaben")));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyBelegzeile_Body17@5023(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        /////Zus„tzliche Informationen zu Belegszeilen\\\\\
        ReportForNav.ShowOutput(("Feld 11" <> '') AND ((zusatz_beleg = TRUE) OR (option = option::"šbersicht - Aufgaben")));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyBelegzeile_Body18@5024(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        /////Zus„tzliche Informationen zu Belegszeilen\\\\\
        ReportForNav.ShowOutput(("Feld 1" <> '') AND ((zusatz_beleg = TRUE) OR (option = option::"šbersicht - Aufgaben")));
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'CopyToDo': CASE SectionId OF
          'Header1': OnPreSectionCopyToDo_Header1(Berichtstabelle);
          'Header2': OnPreSectionCopyToDo_Header2(Berichtstabelle);
          'Body3': OnPreSectionCopyToDo_Body3(Berichtstabelle);
          'Body4': OnPreSectionCopyToDo_Body4(Berichtstabelle);
        END;
        'CopyBemerkung': CASE SectionId OF
          'Body5': OnPreSectionCopyBemerkung_Body5(Berichtstabelle_Bemerkung);
        END;
        'CopyProjekt': CASE SectionId OF
          'Body7': OnPreSectionCopyProjekt_Body7(Berichtstabelle_Projekt);
        END;
        'CopyBelegzeile': CASE SectionId OF
          'Header10': OnPreSectionCopyBelegzeile_Header10(Berichtstabelle_Belegzeilen);
          'Header11': OnPreSectionCopyBelegzeile_Header11(Berichtstabelle_Belegzeilen);
          'Header12': OnPreSectionCopyBelegzeile_Header12(Berichtstabelle_Belegzeilen);
          'Body13': OnPreSectionCopyBelegzeile_Body13(Berichtstabelle_Belegzeilen);
          'Body14': OnPreSectionCopyBelegzeile_Body14(Berichtstabelle_Belegzeilen);
          'Body15': OnPreSectionCopyBelegzeile_Body15(Berichtstabelle_Belegzeilen);
          'Body16': OnPreSectionCopyBelegzeile_Body16(Berichtstabelle_Belegzeilen);
          'Body17': OnPreSectionCopyBelegzeile_Body17(Berichtstabelle_Belegzeilen);
          'Body18': OnPreSectionCopyBelegzeile_Body18(Berichtstabelle_Belegzeilen);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
frnJT7JigW/2KVv99f8A</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

