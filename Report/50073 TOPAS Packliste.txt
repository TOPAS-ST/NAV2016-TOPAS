OBJECT Report 50073 TOPAS Packliste
{
  OBJECT-PROPERTIES
  {
    Date=18.10.21;
    Time=09:35:58;
    Modified=Yes;
    Version List=Beleg,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Sell-to Customer No.,External Document No.)
                                 WHERE(Document Type=CONST(Order));
               OnAfterGetRecord=BEGIN
                                  FormatAdr.SalesHeaderShipTo(LieferAnAdr,"Sales Header");
                                  FormatAdr.SalesHeaderSellTo(DebAdr,"Sales Header");
                                  verfolgung.RESET;
                                  verfolgung.SETRANGE ("Source ID","Sales Header"."No.");
                                  IF NOT verfolgung.FINDFIRST THEN
                                    drucken := FALSE
                                  ELSE
                                    drucken := TRUE;
                                  // TOPAS 09.09.09 UB - Anfang Konsignationslager anzeigen
                                  Konsi := '';
                                  IF "Location Code"='KONSI' THEN
                                    Konsi := 'Konsignationslager';
                                  // TOPAS ENDE
                                END;

               ReqFilterFields=Posting Date }

    { 2   ;1   ;Column  ;Spediteuraccount_SalesHeader;
               SourceExpr=Spediteuraccount }

    { 3   ;1   ;Column  ;Konsi               ;
               SourceExpr=Konsi }

    { 4   ;1   ;Column  ;ShippingAgentCode_SalesHeader;
               SourceExpr="Shipping Agent Code" }

    { 5   ;1   ;Column  ;vAusland            ;
               SourceExpr=vAusland }

    { 6   ;1   ;Column  ;Sell_toCustomerName_SalesHeader;
               SourceExpr="Sales Header"."Sell-to Customer Name" }

    { 7   ;1   ;Column  ;No_SalesHeader      ;
               SourceExpr="No." }

    { 8   ;1   ;Column  ;Sell_toCustomerNo_SalesHeader;
               SourceExpr="Sales Header"."Sell-to Customer No." }

    { 9   ;1   ;Column  ;PostingDate_SalesHeader;
               SourceExpr="Posting Date" }

    { 10  ;1   ;DataItem;                    ;
               DataItemTable=Table37;
               DataItemTableView=WHERE(Type=CONST(Item));
               DataItemLink=Document No.=FIELD(No.) }

    { 11  ;2   ;DataItem;                    ;
               DataItemTable=Table27;
               DataItemLink=No.=FIELD(No.) }

    { 12  ;3   ;Column  ;LineNo_SalesLine    ;
               SourceExpr="Sales Line"."Line No." }

    { 13  ;3   ;Column  ;SearchDescription_Item;
               SourceExpr="Search Description" }

    { 14  ;3   ;Column  ;Description_SalesLine;
               SourceExpr="Sales Line".Description }

    { 15  ;3   ;Column  ;Artikelnr2_SalesLine;
               SourceExpr="Sales Line"."Artikelnr. 2" }

    { 16  ;3   ;Column  ;QtytoShip_SalesLine ;
               SourceExpr="Sales Line"."Qty. to Ship" }

    { 17  ;3   ;Column  ;UnitofMeasure_SalesLine;
               SourceExpr="Sales Line"."Unit of Measure" }

    { 18  ;3   ;DataItem;                    ;
               DataItemTable=Table9;
               DataItemLink=Code=FIELD(Country/Region of Origin Code) }

    { 19  ;2   ;DataItem;                    ;
               DataItemTable=Table337;
               DataItemTableView=SORTING(Expiration Date,Entry No.);
               DataItemLink=Source ID=FIELD(Document No.),
                            Source Ref. No.=FIELD(Line No.) }

    { 20  ;3   ;Column  ;Ursprungsland_ReservationEntry;
               SourceExpr=Ursprungsland }

    { 21  ;3   ;Column  ;LotNo_ReservationEntry;
               SourceExpr="Lot No." }

    { 22  ;3   ;Column  ;ReservationEntryQuantity_Base__1;
               DecimalPlaces=0:0;
               SourceExpr="Reservation Entry"."Quantity (Base)"*-1 }

    { 23  ;3   ;Column  ;SerialNo_ReservationEntry;
               SourceExpr="Serial No." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1   ;2   ;Field     ;
                  CaptionML=DEU=Anzahl Kopien;
                  SourceExpr=AnzKopien }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      titel@1140000 : Text[30];
      lief@1140001 : Text[30];
      debart@1140002 : Text[80];
      vk_zeile@1140003 : Record 37;
      art1@1140005 : Record 27;
      Verk_debitor@1140006 : Record 18;
      VerkEinkPerson@1140007 : Record 13;
      Firmendaten@1140008 : Record 79;
      LiefDruckZ„hler@1140009 : Codeunit 314;
      DebAdr@1140010 : ARRAY [8] OF Text[50];
      LieferAnAdr@1140011 : ARRAY [8] OF Text[50];
      FirmaAdr@1140012 : ARRAY [8] OF Text[50];
      Verk„uferText@1140013 : Text[20];
      ReferenzText@1140014 : Text[30];
      MehrZeilen@1140015 : Boolean;
      AnzKopien@1140016 : Integer;
      AnzSchleifen@1140017 : Integer;
      KopieText@1140018 : Text[30];
      DebAdrZeigen@1140019 : Boolean;
      i@1140020 : Integer;
      FormatAdr@1140021 : Codeunit 365;
      lead_free_text0@1140022 : Text[80];
      lead_free_text1@1140023 : Text[80];
      leadfree_symbol@1140024 : Text[3];
      leadfree_artikel@1140025 : Record 27;
      lead_free_text2@1140026 : Text[80];
      ansp@1140030 : Text[40];
      tel@1140031 : Text[40];
      fax@1140032 : Text[40];
      seite@1140033 : Text[30];
      einheiten_text@1140034 : Text[30];
      VerkAdr@1140041 : Text[50];
      Anschrift@1140042 : ARRAY [9] OF Text[50];
      Account@1140027 : Text[90];
      Account2@1140028 : Text[30];
      verfolgung@1140029 : Record 337;
      drucken@1140035 : Boolean;
      vAusland@1140036 : Text[30];
      Konsi@1140037 : Text[20];
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Body1@5010(VAR "Sales Header"@1000000000 : Record 36);
    BEGIN
      WITH "Sales Header" DO BEGIN
        ReportForNav.ShowOutput(("Sales Header"."Posting Date" = WORKDATE) AND (drucken = TRUE));
        IF "Sales Header"."Ship-to Country/Region Code" = 'DE' THEN BEGIN
          vAusland := '';
        END ELSE BEGIN
          vAusland := 'AUSLAND';
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Header2@5011(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      WITH "Sales Line" DO BEGIN
        ReportForNav.ShowOutput (("Sales Header"."Posting Date" = WORKDATE)
        AND (drucken = TRUE));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body3@5012(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput (("Sales Line".Quantity <> 0)
        AND ("Sales Line"."Qty. to Ship" <> 0)
        AND ("Sales Header"."Posting Date" = WORKDATE)
        AND (drucken = TRUE));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionReservationEntry_Header4@5013(VAR "Reservation Entry"@1000000000 : Record 337);
    BEGIN
      WITH "Reservation Entry" DO BEGIN
        ReportForNav.ShowOutput (("Sales Line".Quantity <> 0)
        AND ("Sales Line"."Qty. to Ship" <> 0)
        AND ("Reservation Entry"."Quantity (Base)" <> 0)
        AND ("Sales Header"."Posting Date" = WORKDATE)
        AND (drucken = TRUE));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionReservationEntry_Body5@5014(VAR "Reservation Entry"@1000000000 : Record 337);
    BEGIN
      WITH "Reservation Entry" DO BEGIN
        ReportForNav.ShowOutput (("Sales Line".Quantity <> 0)
        AND ("Sales Line"."Qty. to Ship" <> 0)
        AND ("Reservation Entry"."Quantity (Base)" <> 0)
        AND ("Reservation Entry"."Lot No." <> '')
        AND ("Sales Header"."Posting Date"=WORKDATE)
        AND (drucken=TRUE));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionReservationEntry_Body6@5015(VAR "Reservation Entry"@1000000000 : Record 337);
    BEGIN
      WITH "Reservation Entry" DO BEGIN
        ReportForNav.ShowOutput (("Sales Line".Quantity <> 0)
        AND ("Sales Line"."Qty. to Ship" <> 0)
        AND ("Reservation Entry"."Quantity (Base)" <> 0)
        AND ("Reservation Entry"."Serial No." <> '')
        AND ("Sales Header"."Posting Date" = WORKDATE)
        AND (drucken = TRUE));
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'SalesHeader': CASE SectionId OF
          'Body1': OnPreSectionSalesHeader_Body1("Sales Header");
        END;
        'SalesLine': CASE SectionId OF
          'Header2': OnPreSectionSalesLine_Header2("Sales Line");
        END;
        'Item': CASE SectionId OF
          'Body3': OnPreSectionItem_Body3(Item);
        END;
        'ReservationEntry': CASE SectionId OF
          'Header4': OnPreSectionReservationEntry_Header4("Reservation Entry");
          'Body5': OnPreSectionReservationEntry_Body5("Reservation Entry");
          'Body6': OnPreSectionReservationEntry_Body6("Reservation Entry");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
WNDmO/Ng1PI/d/jl/w==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

