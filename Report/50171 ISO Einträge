OBJECT Report 50171 ISO Eintr„ge
{
  OBJECT-PROPERTIES
  {
    Date=18.01.18;
    Time=11:54:27;
    Modified=Yes;
    Version List=TOPAS,FORNAV2.0.0.1189/1189;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  Memokopf.RESET;
                  Memokopf.SETFILTER(ISO,'%1',TRUE);
                  Memokopf.SETFILTER("Kampagnennr.",'<>%1','');
                  IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1',Startdatum);
                  IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memodatum,'<=%1',Enddatum);
                  IF Memokopf.FINDFIRST THEN BEGIN
                    REPEAT
                      Berichtstabelle.INIT;
                      Berichtstabelle.Tabelle := 'PROJEKTMEMO';
                      Berichtstabelle.Index := Memokopf."Memonr.";
                      Berichtstabelle.Datum := Memokopf.Anlagedatum;
                      Berichtstabelle."Belegnr." := Memokopf."Memonr.";
                      Berichtstabelle."Feld 1" := Memokopf.Memokurztext;
                      Berichtstabelle."Feld 2" := Memokopf."Kampagnennr.";
                      Berichtstabelle."Feld 6" := Memokopf."Angelegt von";
                      Berichtstabelle."Feld 18" := Memokopf.Memodatum;
                      Projekt.SETFILTER(Projekt."No.",Memokopf."Kampagnennr.");
                      IF Projekt.FINDFIRST THEN BEGIN
                        Berichtstabelle."Feld 11" := Projekt.Description;
                        Ansprech.SETRANGE(Ansprech."Kampagnennr.",Projekt."No.");
                        Ansprech.SETRANGE(Fhrungsrolle,TRUE);
                        IF Ansprech.FINDFIRST THEN BEGIN
                          Ansprech.CALCFIELDS(Mandantenname);
                          Berichtstabelle."Feld 10" := Ansprech.Mandantenname;
                        END;
                      END;
                      Berichtstabelle.INSERT;
                      Memozeile.RESET;
                      Memozeile.SETRANGE("Memonr.",Memokopf."Memonr.");
                      IF Memozeile.FINDFIRST THEN BEGIN
                        REPEAT
                          Berichtstabelle.INIT;
                          Berichtstabelle.Tabelle := 'MEMOZEILE';
                          Berichtstabelle.Index := Memozeile."Memonr.";
                          Berichtstabelle."Belegnr." := Memozeile."Memonr.";
                          Berichtstabelle."Zeilennr." := Memozeile."Zeilennr.";
                          Berichtstabelle."Feld 1" := Memozeile.Bemerkung;
                          Berichtstabelle.INSERT;
                        UNTIL Memozeile.NEXT = 0;
                      END;
                    UNTIL Memokopf.NEXT = 0;
                  END;

                  Memokopf.RESET;
                  Memokopf.SETFILTER(ISO,'%1',TRUE);
                  Memokopf.SETFILTER("Mandantennr.",'<>%1','');
                  IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1',Startdatum);
                  IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memodatum,'<=%1',Enddatum);
                  IF Memokopf.FINDFIRST THEN BEGIN
                    REPEAT
                      Berichtstabelle.INIT;
                      Berichtstabelle.Tabelle := 'KONTAKTMEMO';
                      Berichtstabelle.Index := Memokopf."Memonr.";
                      Berichtstabelle.Datum := Memokopf.Anlagedatum;
                      Berichtstabelle."Belegnr." := Memokopf."Memonr.";
                      Berichtstabelle."Feld 1" := Memokopf.Memokurztext;
                      Berichtstabelle."Feld 2" := Memokopf."Mandantennr.";
                      Berichtstabelle."Feld 6" := Memokopf."Angelegt von";
                      Berichtstabelle."Feld 18" := Memokopf.Memodatum;
                      Cont.SETFILTER(Cont."No.",'%1',Memokopf."Mandantennr.");
                      IF Cont.FINDFIRST THEN
                        Berichtstabelle."Feld 10" := Cont.Name;
                      Berichtstabelle.INSERT;
                      Memozeile.RESET;
                      Memozeile.SETRANGE("Memonr.",Memokopf."Memonr.");
                      IF Memozeile.FINDFIRST THEN BEGIN
                        REPEAT
                          Berichtstabelle.INIT;
                          Berichtstabelle.Tabelle := 'MEMOZEILE';
                          Berichtstabelle.Index := Memozeile."Memonr.";
                          Berichtstabelle."Belegnr." := Memozeile."Memonr.";
                          Berichtstabelle."Zeilennr." := Memozeile."Zeilennr.";
                          Berichtstabelle."Feld 1" := Memozeile.Bemerkung;
                          Berichtstabelle.INSERT;
                        UNTIL Memozeile.NEXT = 0;
                      END;
                    UNTIL Memokopf.NEXT = 0;
                  END;

                  Aufgabe.RESET;
                  Aufgabe.SETFILTER("System To-do Type",'%1',Aufgabe."System To-do Type"::Organizer);
                  Aufgabe.SETFILTER(ISO,'%1',TRUE);
                  IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                    Aufgabe.SETFILTER("Erstellt am",'>=%1',Startdatum);
                  IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                    Aufgabe.SETFILTER("Erstellt am",'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                    Aufgabe.SETFILTER("Erstellt am",'<=%1',Enddatum);
                  IF Aufgabe.FINDFIRST THEN BEGIN
                    REPEAT
                      Berichtstabelle.INIT;
                      Berichtstabelle.Tabelle := 'AUFGABE';
                      Berichtstabelle.Index := Aufgabe."No.";
                      IF Aufgabe."Erstellt am" <> 0D THEN
                        Berichtstabelle.Datum := Aufgabe."Erstellt am"
                      ELSE
                        Berichtstabelle.Datum := Aufgabe.Date;
                      Berichtstabelle."Belegnr." := Aufgabe."No.";
                      Berichtstabelle."Feld 1" := Aufgabe.Description;
                      Berichtstabelle."Feld 2" := Aufgabe."Contact Company No.";
                      Berichtstabelle."Feld 6" := Aufgabe.Ersteller;
                      Aufgabe.CALCFIELDS("Contact Company Name");
                      Berichtstabelle."Feld 10" := Aufgabe."Contact Company Name";
                      Berichtstabelle."Feld 18" := Aufgabe.Date;
                      Berichtstabelle.INSERT;
                      Bemerkung.RESET;
                      Bemerkung.SETRANGE("Table Name",Bemerkung."Table Name"::"To-do");
                      Bemerkung.SETRANGE("No.",Aufgabe."No.");
                      IF Bemerkung.FINDFIRST THEN BEGIN
                        REPEAT
                          Berichtstabelle.INIT;
                          Berichtstabelle.Tabelle := 'BEMERKUNG';
                          Berichtstabelle.Index := Bemerkung."No.";
                          Berichtstabelle."Belegnr." := Bemerkung."No.";
                          Berichtstabelle."Zeilennr." := Bemerkung."Line No.";
                          Berichtstabelle.Datum := Bemerkung.Date;
                          Berichtstabelle."Feld 1" := Bemerkung.Comment;
                          Berichtstabelle.INSERT;
                        UNTIL Bemerkung.NEXT = 0;
                      END;
                    UNTIL Aufgabe.NEXT = 0;
                  END;
                  z„hler := 0;
                  Berichtstabelle_zeilen.COPY(Berichtstabelle,TRUE);

                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   IF Berichtstabelle.TABLECAPTION = 'Berichtstabelle' THEN
                     Berichtstabelle.DELETEALL;
                   ;ReportForNav.Post;
                 END;

    UseRequestPage=Yes;
  }
  DATASET
  {
    { 1   ;    ;DataItem;Textkopf            ;
               DataItemTable=Table50037;
               DataItemTableView=SORTING(Datum,Index)
                                 WHERE(Tabelle=FILTER(PROJEKTMEMO|KONTAKTMEMO|AUFGABE)) }

    { 1000000000;;DataItem;CopyHeader        ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Berichtstabelle.RESET;
                               Berichtstabelle.SETCURRENTKEY(Datum,Index);
                               Berichtstabelle.SETFILTER(Tabelle,'%1|%2|%3','PROJEKTMEMO','KONTAKTMEMO','AUFGABE');
                               SETRANGE(Number,1,Berichtstabelle.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  z„hler := z„hler + 1;

                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle.NEXT;
                                  END;
                                END;
                                 }

    { 2   ;1   ;Column  ;Startdatum          ;
               SourceExpr=Startdatum }

    { 3   ;1   ;Column  ;Enddatum            ;
               SourceExpr=Enddatum }

    { 4   ;1   ;Column  ;USERID              ;
               SourceExpr=USERID }

    { 5   ;1   ;Column  ;WORKDATE            ;
               SourceExpr=WORKDATE }

    { 6   ;1   ;Column  ;ReportForNavPageNo  ;
               SourceExpr=ReportForNav.PageNo }

    { 7   ;1   ;Column  ;Index_Textkopf      ;
               SourceExpr=Berichtstabelle.Index }

    { 8   ;1   ;Column  ;Feld2_Textkopf      ;
               SourceExpr=Berichtstabelle."Feld 2" }

    { 9   ;1   ;Column  ;Feld1_Textkopf      ;
               SourceExpr=Berichtstabelle."Feld 1" }

    { 10  ;1   ;Column  ;Feld11_Feld2_Textkopf;
               SourceExpr=Berichtstabelle."Feld 11"+' (Nr. '+Berichtstabelle."Feld 2"+')' }

    { 11  ;1   ;Column  ;Feld18_Textkopf     ;
               SourceExpr=Berichtstabelle."Feld 18" }

    { 12  ;1   ;Column  ;Feld10_Textkopf     ;
               SourceExpr=Berichtstabelle."Feld 10" }

    { 13  ;1   ;Column  ;Feld6_Textkopf      ;
               SourceExpr=Berichtstabelle."Feld 6" }

    { 14  ;1   ;Column  ;zahler              ;
               SourceExpr=z„hler }

    { 15  ;1   ;DataItem;Textzeile           ;
               DataItemTable=Table50037;
               DataItemTableView=SORTING(Tabelle,Index,Belegnr.,Zeilennr.)
                                 WHERE(Tabelle=FILTER(MEMOZEILE|BEMERKUNG));
               DataItemLinkReference=Textkopf;
               DataItemLink=Index=FIELD(Index) }

    { 1000000001;1;DataItem;CopyLine         ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Berichtstabelle_zeilen.RESET;
                               Berichtstabelle_zeilen.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_zeilen.SETFILTER(Tabelle,'%1|%2','MEMOZEILE','BEMERKUNG');
                               Berichtstabelle_zeilen.SETFILTER(Index,'%1',Berichtstabelle.Index);
                               SETRANGE(Number,1,Berichtstabelle_zeilen.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_zeilen.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_zeilen.NEXT;
                                  END;
                                END;
                                 }

    { 16  ;2   ;Column  ;Feld1_Textzeile     ;
               SourceExpr=Berichtstabelle_zeilen."Feld 1" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1140004;2;Field     ;
                  CaptionML=DEU=Datum von:;
                  SourceExpr=Startdatum }

      { 1140006;2;Field     ;
                  CaptionML=DEU=bis;
                  SourceExpr=Enddatum }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Projekt@1140001 : Record 5071;
      Ansprech@1140002 : Record 50005;
      Cont@1140004 : Record 5050;
      Aufgabe@1140011 : Record 5080;
      Bemerkung@1140012 : Record 5061;
      Memokopf@1140006 : Record 50003;
      Memozeile@1140009 : Record 50004;
      Berichtstabelle@1140010 : TEMPORARY Record 50037;
      Berichtstabelle_zeilen@1000000000 : TEMPORARY Record 50037;
      Projektname@1140003 : Text[50];
      Fhrungsname@1140005 : Text[50];
      Startdatum@1140000 : Date;
      Enddatum@1140008 : Date;
      z„hler@1140007 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionCopyHeader_Body1@5082(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        ReportForNav.ShowOutput(Textkopf.Tabelle = 'PROJEKTMEMO');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyHeader_Body2@5083(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        ReportForNav.ShowOutput(Textkopf.Tabelle = 'KONTAKTMEMO');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyHeader_Body3@5084(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        ReportForNav.ShowOutput(Textkopf.Tabelle = 'AUFGABE');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyHeader_Footer1@5085(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        IF Enddatum = 0D THEN
          Enddatum := WORKDATE;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Integer': CASE SectionId OF
          'Body1': OnPreSectionCopyHeader_Body1(Berichtstabelle);
          'Body2': OnPreSectionCopyHeader_Body2(Berichtstabelle);
          'Body3': OnPreSectionCopyHeader_Body3(Berichtstabelle);
          'Footer1': OnPreSectionCopyHeader_Footer1(Berichtstabelle);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>82e182fe-5e91-4a0a-82be-7e00cebe9476</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>177c9c34-80b7-44fb-a9ff-4a548f9ee9a8</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="Startdatum">
          <DataField>Startdatum</DataField>
        </Field>
        <Field Name="Enddatum">
          <DataField>Enddatum</DataField>
        </Field>
        <Field Name="USERID">
          <DataField>USERID</DataField>
        </Field>
        <Field Name="WORKDATE">
          <DataField>WORKDATE</DataField>
        </Field>
        <Field Name="ReportForNavPageNo">
          <DataField>ReportForNavPageNo</DataField>
        </Field>
        <Field Name="Index_Textkopf">
          <DataField>Index_Textkopf</DataField>
        </Field>
        <Field Name="Feld2_Textkopf">
          <DataField>Feld2_Textkopf</DataField>
        </Field>
        <Field Name="Feld1_Textkopf">
          <DataField>Feld1_Textkopf</DataField>
        </Field>
        <Field Name="Feld11_Feld2_Textkopf">
          <DataField>Feld11_Feld2_Textkopf</DataField>
        </Field>
        <Field Name="Feld18_Textkopf">
          <DataField>Feld18_Textkopf</DataField>
        </Field>
        <Field Name="Feld10_Textkopf">
          <DataField>Feld10_Textkopf</DataField>
        </Field>
        <Field Name="Feld6_Textkopf">
          <DataField>Feld6_Textkopf</DataField>
        </Field>
        <Field Name="zahler">
          <DataField>zahler</DataField>
        </Field>
        <Field Name="Feld1_Textzeile">
          <DataField>Feld1_Textzeile</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

