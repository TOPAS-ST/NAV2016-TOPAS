OBJECT Report 50063 TOPAS Support Kontingente
{
  OBJECT-PROPERTIES
  {
    Date=18.10.21;
    Time=09:35:58;
    Modified=Yes;
    Version List=fertig,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table50012;
               OnPreDataItem=BEGIN
                               CompanyInformation.GET;
                               CompanyInformation.CALCFIELDS("Systeme Logo");
                             END;

               OnAfterGetRecord=BEGIN
                                  header_text := 'Support Kontingente';
                                END;

               ReqFilterFields=Nr. }

    { 1000000000;1;Column;SystemLogo_Firmendaten;
               SourceExpr=CompanyInformation."Systeme Logo" }

    { 1000000001;1;Column;CompanyHomepage    ;
               SourceExpr=CompanyInformation."Home Page" }

    { 2   ;1   ;Column  ;header_text         ;
               SourceExpr=header_text }

    { 3   ;1   ;Column  ;Kunde_Support       ;
               SourceExpr=Kunde }

    { 4   ;1   ;Column  ;OffenesKontingent_Support;
               SourceExpr="Offenes Kontingent";
               AutoCalcField=Yes }

    { 5   ;1   ;DataItem;                    ;
               DataItemTable=Table50013;
               DataItemTableView=WHERE(Art=FILTER(Support));
               DataItemLink=Gruppen-Nr.=FIELD(Nr.) }

    { 6   ;2   ;Column  ;Endkunde_AP_SupportKontingente;
               SourceExpr="Endkunde/AP" }

    { 7   ;2   ;Column  ;Zeitraum_SupportKontingente;
               SourceExpr=Zeitraum }

    { 8   ;2   ;Column  ;Durchgefuhrtvon_SupportKontingente;
               SourceExpr="Durchgef¬Åhrt von" }

    { 9   ;2   ;Column  ;Aktion_SupportKontingente;
               SourceExpr=Aktion }

    { 10  ;2   ;Column  ;Menge_SupportKontingente;
               SourceExpr=Menge }

    { 11  ;2   ;Column  ;Auftragvon_SupportKontingente;
               SourceExpr="Auftrag von" }

    { 12  ;2   ;Column  ;Datum_SupportKontingente;
               SourceExpr=Datum }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      CompanyInformation@1000000000 : Record 79;
      header_text@1140000 : Text[50];
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

