OBJECT Report 50081 TOPAS-Lagerware
{
  OBJECT-PROPERTIES
  {
    Date=25.02.20;
    Time=15:17:47;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV3.1.0.1460/1460;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  //ArtikelFilter := Item.GETFILTERS;
                  VerkZeileFilter := "Sales Line".GETFILTERS;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.);
               PrintOnlyIfDetail=Yes;
               OnAfterGetRecord=BEGIN
                                  hinweis := '';
                                  adresse := '';
                                END;
                                 }

    { 2   ;1   ;Column  ;USERID              ;
               IncludeCaption=No;
               SourceExpr=USERID }

    { 3   ;1   ;Column  ;ReportForNavPageNo  ;
               IncludeCaption=No;
               SourceExpr=ReportForNav.PageNo }

    { 4   ;1   ;Column  ;COMPANYNAME         ;
               IncludeCaption=No;
               SourceExpr=COMPANYNAME }

    { 5   ;1   ;Column  ;TODAY_0_4           ;
               IncludeCaption=No;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 6   ;1   ;Column  ;STRSUBSTNO_Auftragszeile_Pct1_VerkZeileFilter;
               IncludeCaption=No;
               SourceExpr=STRSUBSTNO('Auftragszeile: %1',VerkZeileFilter) }

    { 7   ;1   ;Column  ;No_Customer         ;
               IncludeCaption=No;
               SourceExpr="No." }

    { 8   ;1   ;Column  ;Name_Customer       ;
               IncludeCaption=No;
               SourceExpr=Name }

    { 9   ;1   ;Column  ;OutstandingAmount_SalesLine;
               IncludeCaption=No;
               SourceExpr="Sales Line"."Outstanding Amount" }

    { 10  ;1   ;DataItem;                    ;
               DataItemTable=Table37;
               DataItemTableView=WHERE(Document Type=CONST(Order),
                                       Type=CONST(Item),
                                       Outstanding Quantity=FILTER(<>0));
               ReqFilterHeadingML=DEU=Verkaufszeile;
               OnAfterGetRecord=BEGIN
                                  VerkKopf.GET("Document Type","Document No.");
                                  IF (adresse <> '') AND (VerkKopf."Ship-to Address" <> adresse) THEN
                                    hinweis := 'Achtung: Unterschiedliche Lief. an Adressen !!!';
                                  adresse := VerkKopf."Ship-to Address";
                                  auftragsdatum := VerkKopf."Order Date";
                                  IF VerkKopf."Currency Factor" <> 0 THEN
                                    "Outstanding Amount" :=
                                      ROUND(
                                        W・rungWechKurs.ExchangeAmtFCYToLCY(
                                          WORKDATE,VerkKopf."Currency Code","Outstanding Amount",
                                          VerkKopf."Currency Factor"));
                                  IF "Shipment Date" < WORKDATE THEN
                                    R…kstandMenge := "Outstanding Quantity"
                                  ELSE
                                    R…kstandMenge := 0;
                                  lagerbe.GET("No.");
                                  lagerbe.CALCFIELDS(Inventory);
                                END;

               ReqFilterFields=Manufacturer Code,Promised Delivery Date,Location Code;
               DataItemLink=Sell-to Customer No.=FIELD(No.) }

    { 11  ;2   ;Column  ;auftragsdatum       ;
               IncludeCaption=No;
               SourceExpr=auftragsdatum }

    { 12  ;2   ;Column  ;lagerbeInventory_OutstandingQuantity;
               IncludeCaption=No;
               SourceExpr=lagerbe.Inventory-"Outstanding Quantity" }

    { 13  ;2   ;Column  ;Inventory_lagerbe   ;
               IncludeCaption=No;
               SourceExpr=lagerbe.Inventory }

    { 14  ;2   ;Column  ;RequestedDeliveryDate_SalesLine;
               IncludeCaption=No;
               SourceExpr="Requested Delivery Date" }

    { 15  ;2   ;Column  ;DocumentNo_SalesLine;
               IncludeCaption=No;
               SourceExpr="Document No." }

    { 16  ;2   ;Column  ;No_SalesLine        ;
               IncludeCaption=No;
               SourceExpr="No." }

    { 17  ;2   ;Column  ;PromisedDeliveryDate_SalesLine;
               IncludeCaption=No;
               SourceExpr="Promised Delivery Date" }

    { 18  ;2   ;Column  ;Quantity_SalesLine  ;
               IncludeCaption=No;
               SourceExpr=Quantity }

    { 19  ;2   ;Column  ;OutstandingQuantity_SalesLine;
               IncludeCaption=No;
               SourceExpr="Outstanding Quantity" }

    { 20  ;2   ;Column  ;RuckstandMenge      ;
               DecimalPlaces=0:5;
               IncludeCaption=No;
               SourceExpr=R…kstandMenge }

    { 21  ;2   ;Column  ;UnitPrice_SalesLine ;
               IncludeCaption=No;
               SourceExpr="Unit Price" }

    { 22  ;2   ;Column  ;OutstandingAmount_SalesLine2;
               IncludeCaption=No;
               SourceExpr="Outstanding Amount" }

    { 23  ;2   ;Column  ;PaymentTermsCode_SalesHeader;
               IncludeCaption=No;
               SourceExpr="Sales Header"."Payment Terms Code" }

    { 24  ;2   ;Column  ;hinweis             ;
               IncludeCaption=No;
               SourceExpr=hinweis }

    { 25  ;2   ;DataItem;                    ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.);
               DataItemLink=No.=FIELD(Document No.) }

    { 1000000000;3;DataItem;                 ;
               DataItemTable=Table44;
               DataItemTableView=WHERE(Line No.=FILTER(10000));
               DataItemLink=No.=FIELD(No.) }

    { 1000000001;4;Column;Comment_SalesCommentLine;
               IncludeCaption=No;
               SourceExpr=Comment }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      W・rungWechKurs@1140000 : Record 330;
      VerkKopf@1140001 : Record 36;
      R…kstandMenge@1140002 : Decimal;
      ArtikelFilter@1140003 : Text[250];
      VerkZeileFilter@1140004 : Text[250];
      lagerbe@1140005 : Record 27;
      adresse@1140007 : Text[50];
      hinweis@1140006 : Text[80];
      auftragsdatum@1140008 : Date;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionCustomer_Header2@5010(VAR Customer@1000000000 : Record 18);
    BEGIN
      WITH Customer DO BEGIN
        ReportForNav.ShowOutput((ReportForNav.PageNo = 1) AND (VerkZeileFilter <> ''));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Footer7@5011(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      WITH "Sales Line" DO BEGIN
        ReportForNav.ShowOutput(("Sales Header"."Payment Terms Code"='BBL') OR
        ("Sales Header"."Payment Terms Code"='VORK') OR ("Sales Header"."Payment Terms Code"='ADV') OR
        ("Sales Header"."Payment Terms Code"='VORK-E') OR ("Sales Header"."Payment Terms Code"='TT') OR
        ("Sales Header"."Payment Terms Code"='VK-1%') OR ("Sales Header"."Payment Terms Code"='VK-2%'));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Body9@5012(VAR "Sales Header"@1000000000 : Record 36);
    BEGIN
      WITH "Sales Header" DO BEGIN
          ReportForNav.ShowOutput(("Sales Header"."Payment Terms Code"='BBL') OR
          ("Sales Header"."Payment Terms Code"='VORK') OR ("Sales Header"."Payment Terms Code"='ADV') OR
          ("Sales Header"."Payment Terms Code"='VORK-E') OR ("Sales Header"."Payment Terms Code"='TT') OR
          ("Sales Header"."Payment Terms Code"='VK-1%') OR ("Sales Header"."Payment Terms Code"='VK-2%'));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Body10@1000000005(VAR "Sales Comment Line"@1000000000 : Record 44);
    BEGIN
      WITH "Sales Comment Line" DO BEGIN
          ReportForNav.ShowOutput("Sales Comment Line".Comment<>'')
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Customer': CASE SectionId OF
          'Header2': OnPreSectionCustomer_Header2(Customer);
        END;
        'SalesLine': CASE SectionId OF
          'Footer7': OnPreSectionSalesLine_Footer7("Sales Line");
        END;
        'SalesHeader': CASE SectionId OF
          'Body9': OnPreSectionSalesHeader_Body9("Sales Header");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      CASE DataItemId OF
        'Customer': WITH Customer DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Sales Line"."Outstanding Amount");
              END;
           'Restore': BEGIN
                 "Sales Line"."Outstanding Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'SalesLine': WITH "Sales Line" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Outstanding Amount");
                ReportForNav.AddTotal(DataItemId,1,R…kstandMenge);
                ReportForNav.AddTotal(DataItemId,2,"Outstanding Quantity");
              END;
           'Restore': BEGIN
                 "Outstanding Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 R…kstandMenge := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Outstanding Quantity" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="USERID">
          <DataField>USERID</DataField>
        </Field>
        <Field Name="ReportForNavPageNo">
          <DataField>ReportForNavPageNo</DataField>
        </Field>
        <Field Name="COMPANYNAME">
          <DataField>COMPANYNAME</DataField>
        </Field>
        <Field Name="TODAY_0_4">
          <DataField>TODAY_0_4</DataField>
        </Field>
        <Field Name="STRSUBSTNO_Auftragszeile_Pct1_VerkZeileFilter">
          <DataField>STRSUBSTNO_Auftragszeile_Pct1_VerkZeileFilter</DataField>
        </Field>
        <Field Name="No_Customer">
          <DataField>No_Customer</DataField>
        </Field>
        <Field Name="Name_Customer">
          <DataField>Name_Customer</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLine">
          <DataField>OutstandingAmount_SalesLine</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLineFormat">
          <DataField>OutstandingAmount_SalesLineFormat</DataField>
        </Field>
        <Field Name="auftragsdatum">
          <DataField>auftragsdatum</DataField>
        </Field>
        <Field Name="lagerbeInventory_OutstandingQuantity">
          <DataField>lagerbeInventory_OutstandingQuantity</DataField>
        </Field>
        <Field Name="lagerbeInventory_OutstandingQuantityFormat">
          <DataField>lagerbeInventory_OutstandingQuantityFormat</DataField>
        </Field>
        <Field Name="Inventory_lagerbe">
          <DataField>Inventory_lagerbe</DataField>
        </Field>
        <Field Name="Inventory_lagerbeFormat">
          <DataField>Inventory_lagerbeFormat</DataField>
        </Field>
        <Field Name="RequestedDeliveryDate_SalesLine">
          <DataField>RequestedDeliveryDate_SalesLine</DataField>
        </Field>
        <Field Name="DocumentNo_SalesLine">
          <DataField>DocumentNo_SalesLine</DataField>
        </Field>
        <Field Name="No_SalesLine">
          <DataField>No_SalesLine</DataField>
        </Field>
        <Field Name="PromisedDeliveryDate_SalesLine">
          <DataField>PromisedDeliveryDate_SalesLine</DataField>
        </Field>
        <Field Name="Quantity_SalesLine">
          <DataField>Quantity_SalesLine</DataField>
        </Field>
        <Field Name="Quantity_SalesLineFormat">
          <DataField>Quantity_SalesLineFormat</DataField>
        </Field>
        <Field Name="OutstandingQuantity_SalesLine">
          <DataField>OutstandingQuantity_SalesLine</DataField>
        </Field>
        <Field Name="OutstandingQuantity_SalesLineFormat">
          <DataField>OutstandingQuantity_SalesLineFormat</DataField>
        </Field>
        <Field Name="RuckstandMenge">
          <DataField>RuckstandMenge</DataField>
        </Field>
        <Field Name="RuckstandMengeFormat">
          <DataField>RuckstandMengeFormat</DataField>
        </Field>
        <Field Name="UnitPrice_SalesLine">
          <DataField>UnitPrice_SalesLine</DataField>
        </Field>
        <Field Name="UnitPrice_SalesLineFormat">
          <DataField>UnitPrice_SalesLineFormat</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLine2">
          <DataField>OutstandingAmount_SalesLine2</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLine2Format">
          <DataField>OutstandingAmount_SalesLine2Format</DataField>
        </Field>
        <Field Name="PaymentTermsCode_SalesHeader">
          <DataField>PaymentTermsCode_SalesHeader</DataField>
        </Field>
        <Field Name="hinweis">
          <DataField>hinweis</DataField>
        </Field>
        <Field Name="Comment_SalesCommentLine">
          <DataField>Comment_SalesCommentLine</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

