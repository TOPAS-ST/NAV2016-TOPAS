OBJECT Report 50081 TOPAS-Lagerware
{
  OBJECT-PROPERTIES
  {
    Date=21.04.20;
    Time=10:38:24;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV3.1.0.1460/1460;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  //ArtikelFilter := Item.GETFILTERS;
                  VerkZeileFilter := "Sales Line".GETFILTERS;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.);
               PrintOnlyIfDetail=Yes;
               OnAfterGetRecord=BEGIN
                                  hinweis := '';
                                  adresse := '';
                                END;
                                 }

    { 2   ;1   ;Column  ;USERID              ;
               IncludeCaption=No;
               SourceExpr=USERID }

    { 3   ;1   ;Column  ;ReportForNavPageNo  ;
               IncludeCaption=No;
               SourceExpr=ReportForNav.PageNo }

    { 4   ;1   ;Column  ;COMPANYNAME         ;
               IncludeCaption=No;
               SourceExpr=COMPANYNAME }

    { 5   ;1   ;Column  ;TODAY_0_4           ;
               IncludeCaption=No;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 6   ;1   ;Column  ;STRSUBSTNO_Auftragszeile_Pct1_VerkZeileFilter;
               IncludeCaption=No;
               SourceExpr=STRSUBSTNO('Auftragszeile: %1',VerkZeileFilter) }

    { 7   ;1   ;Column  ;No_Customer         ;
               IncludeCaption=No;
               SourceExpr="No." }

    { 8   ;1   ;Column  ;Name_Customer       ;
               IncludeCaption=No;
               SourceExpr=Name }

    { 9   ;1   ;Column  ;OutstandingAmount_SalesLine;
               IncludeCaption=No;
               SourceExpr="Sales Line"."Outstanding Amount" }

    { 10  ;1   ;DataItem;                    ;
               DataItemTable=Table37;
               DataItemTableView=WHERE(Document Type=CONST(Order),
                                       Type=CONST(Item),
                                       Outstanding Quantity=FILTER(<>0));
               ReqFilterHeadingML=DEU=Verkaufszeile;
               OnAfterGetRecord=BEGIN
                                  VerkKopf.GET("Document Type","Document No.");
                                  IF (adresse <> '') AND (VerkKopf."Ship-to Address" <> adresse) THEN
                                    hinweis := 'Achtung: Unterschiedliche Lief. an Adressen !!!';
                                  adresse := VerkKopf."Ship-to Address";
                                  belegdatum := VerkKopf."Document Date";
                                  IF VerkKopf."Currency Factor" <> 0 THEN
                                    "Outstanding Amount" :=
                                      ROUND(
                                        W・rungWechKurs.ExchangeAmtFCYToLCY(
                                          WORKDATE,VerkKopf."Currency Code","Outstanding Amount",
                                          VerkKopf."Currency Factor"));
                                  IF "Shipment Date" < WORKDATE THEN
                                    R…kstandMenge := "Outstanding Quantity"
                                  ELSE
                                    R…kstandMenge := 0;
                                  lagerbe.GET("No.");
                                  lagerbe.CALCFIELDS(Inventory);
                                END;

               ReqFilterFields=Manufacturer Code,Promised Delivery Date,Location Code;
               DataItemLink=Sell-to Customer No.=FIELD(No.) }

    { 11  ;2   ;Column  ;belegdatum          ;
               SourceExpr=belegdatum }

    { 12  ;2   ;Column  ;lagerbeInventory_OutstandingQuantity;
               IncludeCaption=No;
               SourceExpr=lagerbe.Inventory-"Outstanding Quantity" }

    { 13  ;2   ;Column  ;Inventory_lagerbe   ;
               IncludeCaption=No;
               SourceExpr=lagerbe.Inventory }

    { 14  ;2   ;Column  ;RequestedDeliveryDate_SalesLine;
               IncludeCaption=No;
               SourceExpr="Requested Delivery Date" }

    { 15  ;2   ;Column  ;DocumentNo_SalesLine;
               IncludeCaption=No;
               SourceExpr="Document No." }

    { 16  ;2   ;Column  ;No_SalesLine        ;
               IncludeCaption=No;
               SourceExpr="No." }

    { 17  ;2   ;Column  ;PromisedDeliveryDate_SalesLine;
               IncludeCaption=No;
               SourceExpr="Promised Delivery Date" }

    { 18  ;2   ;Column  ;Quantity_SalesLine  ;
               IncludeCaption=No;
               SourceExpr=Quantity }

    { 19  ;2   ;Column  ;OutstandingQuantity_SalesLine;
               IncludeCaption=No;
               SourceExpr="Outstanding Quantity" }

    { 20  ;2   ;Column  ;RuckstandMenge      ;
               DecimalPlaces=0:5;
               IncludeCaption=No;
               SourceExpr=R…kstandMenge }

    { 21  ;2   ;Column  ;UnitPrice_SalesLine ;
               IncludeCaption=No;
               SourceExpr="Unit Price" }

    { 22  ;2   ;Column  ;OutstandingAmount_SalesLine2;
               IncludeCaption=No;
               SourceExpr="Outstanding Amount" }

    { 23  ;2   ;Column  ;PaymentTermsCode_SalesHeader;
               IncludeCaption=No;
               SourceExpr="Sales Header"."Payment Terms Code" }

    { 24  ;2   ;Column  ;hinweis             ;
               IncludeCaption=No;
               SourceExpr=hinweis }

    { 25  ;2   ;DataItem;                    ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.);
               DataItemLink=No.=FIELD(Document No.) }

    { 1000000000;3;DataItem;                 ;
               DataItemTable=Table44;
               DataItemTableView=WHERE(Line No.=FILTER(10000));
               DataItemLink=No.=FIELD(No.) }

    { 1000000001;4;Column;Comment_SalesCommentLine;
               IncludeCaption=No;
               SourceExpr=Comment }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      W・rungWechKurs@1140000 : Record 330;
      VerkKopf@1140001 : Record 36;
      R…kstandMenge@1140002 : Decimal;
      ArtikelFilter@1140003 : Text[250];
      VerkZeileFilter@1140004 : Text[250];
      lagerbe@1140005 : Record 27;
      adresse@1140007 : Text[50];
      hinweis@1140006 : Text[80];
      belegdatum@1140008 : Date;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionCustomer_Header2@5010(VAR Customer@1000000000 : Record 18);
    BEGIN
      WITH Customer DO BEGIN
        ReportForNav.ShowOutput((ReportForNav.PageNo = 1) AND (VerkZeileFilter <> ''));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Footer7@5011(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      WITH "Sales Line" DO BEGIN
        ReportForNav.ShowOutput(("Sales Header"."Payment Terms Code"='BBL') OR
        ("Sales Header"."Payment Terms Code"='VORK') OR ("Sales Header"."Payment Terms Code"='ADV') OR
        ("Sales Header"."Payment Terms Code"='VORK-E') OR ("Sales Header"."Payment Terms Code"='TT') OR
        ("Sales Header"."Payment Terms Code"='VK-1%') OR ("Sales Header"."Payment Terms Code"='VK-2%'));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Body9@5012(VAR "Sales Header"@1000000000 : Record 36);
    BEGIN
      WITH "Sales Header" DO BEGIN
          ReportForNav.ShowOutput(("Sales Header"."Payment Terms Code"='BBL') OR
          ("Sales Header"."Payment Terms Code"='VORK') OR ("Sales Header"."Payment Terms Code"='ADV') OR
          ("Sales Header"."Payment Terms Code"='VORK-E') OR ("Sales Header"."Payment Terms Code"='TT') OR
          ("Sales Header"."Payment Terms Code"='VK-1%') OR ("Sales Header"."Payment Terms Code"='VK-2%'));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Body10@1000000005(VAR "Sales Comment Line"@1000000000 : Record 44);
    BEGIN
      WITH "Sales Comment Line" DO BEGIN
          ReportForNav.ShowOutput("Sales Comment Line".Comment<>'')
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Customer': CASE SectionId OF
          'Header2': OnPreSectionCustomer_Header2(Customer);
        END;
        'SalesLine': CASE SectionId OF
          'Footer7': OnPreSectionSalesLine_Footer7("Sales Line");
        END;
        'SalesHeader': CASE SectionId OF
          'Body9': OnPreSectionSalesHeader_Body9("Sales Header");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      CASE DataItemId OF
        'Customer': WITH Customer DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Sales Line"."Outstanding Amount");
              END;
           'Restore': BEGIN
                 "Sales Line"."Outstanding Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'SalesLine': WITH "Sales Line" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Outstanding Amount");
                ReportForNav.AddTotal(DataItemId,1,R…kstandMenge);
                ReportForNav.AddTotal(DataItemId,2,"Outstanding Quantity");
              END;
           'Restore': BEGIN
                 "Outstanding Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 R…kstandMenge := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Outstanding Quantity" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="USERID">
          <DataField>USERID</DataField>
        </Field>
        <Field Name="ReportForNavPageNo">
          <DataField>ReportForNavPageNo</DataField>
        </Field>
        <Field Name="COMPANYNAME">
          <DataField>COMPANYNAME</DataField>
        </Field>
        <Field Name="TODAY_0_4">
          <DataField>TODAY_0_4</DataField>
        </Field>
        <Field Name="STRSUBSTNO_Auftragszeile_Pct1_VerkZeileFilter">
          <DataField>STRSUBSTNO_Auftragszeile_Pct1_VerkZeileFilter</DataField>
        </Field>
        <Field Name="No_Customer">
          <DataField>No_Customer</DataField>
        </Field>
        <Field Name="Name_Customer">
          <DataField>Name_Customer</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLine">
          <DataField>OutstandingAmount_SalesLine</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLineFormat">
          <DataField>OutstandingAmount_SalesLineFormat</DataField>
        </Field>
        <Field Name="belegdatum">
          <DataField>belegdatum</DataField>
        </Field>
        <Field Name="lagerbeInventory_OutstandingQuantity">
          <DataField>lagerbeInventory_OutstandingQuantity</DataField>
        </Field>
        <Field Name="lagerbeInventory_OutstandingQuantityFormat">
          <DataField>lagerbeInventory_OutstandingQuantityFormat</DataField>
        </Field>
        <Field Name="Inventory_lagerbe">
          <DataField>Inventory_lagerbe</DataField>
        </Field>
        <Field Name="Inventory_lagerbeFormat">
          <DataField>Inventory_lagerbeFormat</DataField>
        </Field>
        <Field Name="RequestedDeliveryDate_SalesLine">
          <DataField>RequestedDeliveryDate_SalesLine</DataField>
        </Field>
        <Field Name="DocumentNo_SalesLine">
          <DataField>DocumentNo_SalesLine</DataField>
        </Field>
        <Field Name="No_SalesLine">
          <DataField>No_SalesLine</DataField>
        </Field>
        <Field Name="PromisedDeliveryDate_SalesLine">
          <DataField>PromisedDeliveryDate_SalesLine</DataField>
        </Field>
        <Field Name="Quantity_SalesLine">
          <DataField>Quantity_SalesLine</DataField>
        </Field>
        <Field Name="Quantity_SalesLineFormat">
          <DataField>Quantity_SalesLineFormat</DataField>
        </Field>
        <Field Name="OutstandingQuantity_SalesLine">
          <DataField>OutstandingQuantity_SalesLine</DataField>
        </Field>
        <Field Name="OutstandingQuantity_SalesLineFormat">
          <DataField>OutstandingQuantity_SalesLineFormat</DataField>
        </Field>
        <Field Name="RuckstandMenge">
          <DataField>RuckstandMenge</DataField>
        </Field>
        <Field Name="RuckstandMengeFormat">
          <DataField>RuckstandMengeFormat</DataField>
        </Field>
        <Field Name="UnitPrice_SalesLine">
          <DataField>UnitPrice_SalesLine</DataField>
        </Field>
        <Field Name="UnitPrice_SalesLineFormat">
          <DataField>UnitPrice_SalesLineFormat</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLine2">
          <DataField>OutstandingAmount_SalesLine2</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLine2Format">
          <DataField>OutstandingAmount_SalesLine2Format</DataField>
        </Field>
        <Field Name="PaymentTermsCode_SalesHeader">
          <DataField>PaymentTermsCode_SalesHeader</DataField>
        </Field>
        <Field Name="hinweis">
          <DataField>hinweis</DataField>
        </Field>
        <Field Name="Comment_SalesCommentLine">
          <DataField>Comment_SalesCommentLine</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

