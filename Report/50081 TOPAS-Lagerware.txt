OBJECT Report 50081 TOPAS-Lagerware
{
  OBJECT-PROPERTIES
  {
    Date=26.07.17;
    Time=11:46:29;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV2.0.0.1189/1189;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  //ArtikelFilter := Item.GETFILTERS;
                  VerkZeileFilter := "Sales Line".GETFILTERS;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.);
               PrintOnlyIfDetail=Yes;
               OnAfterGetRecord=BEGIN
                                  hinweis := '';
                                  adresse := '';
                                END;
                                 }

    { 2   ;1   ;Column  ;USERID              ;
               SourceExpr=USERID }

    { 3   ;1   ;Column  ;ReportForNavPageNo  ;
               SourceExpr=ReportForNav.PageNo }

    { 4   ;1   ;Column  ;COMPANYNAME         ;
               SourceExpr=COMPANYNAME }

    { 5   ;1   ;Column  ;TODAY_0_4           ;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 6   ;1   ;Column  ;STRSUBSTNO_Auftragszeile_Pct1_VerkZeileFilter;
               SourceExpr=STRSUBSTNO('Auftragszeile: %1',VerkZeileFilter) }

    { 7   ;1   ;Column  ;No_Customer         ;
               SourceExpr="No." }

    { 8   ;1   ;Column  ;Name_Customer       ;
               SourceExpr=Name }

    { 9   ;1   ;Column  ;OutstandingAmount_SalesLine;
               SourceExpr="Sales Line"."Outstanding Amount" }

    { 10  ;1   ;DataItem;                    ;
               DataItemTable=Table37;
               DataItemTableView=WHERE(Document Type=CONST(Order),
                                       Type=CONST(Item),
                                       Outstanding Quantity=FILTER(<>0));
               ReqFilterHeadingML=DEU=Verkaufszeile;
               OnAfterGetRecord=BEGIN
                                  VerkKopf.GET("Document Type","Document No.");
                                  IF (adresse <> '') AND (VerkKopf."Ship-to Address" <> adresse) THEN
                                    hinweis := 'Achtung: Unterschiedliche Lief. an Adressen !!!';
                                  adresse := VerkKopf."Ship-to Address";
                                  auftragsdatum := VerkKopf."Order Date";
                                  IF VerkKopf."Currency Factor" <> 0 THEN
                                    "Outstanding Amount" :=
                                      ROUND(
                                        W・rungWechKurs.ExchangeAmtFCYToLCY(
                                          WORKDATE,VerkKopf."Currency Code","Outstanding Amount",
                                          VerkKopf."Currency Factor"));
                                  IF "Shipment Date" < WORKDATE THEN
                                    R…kstandMenge := "Outstanding Quantity"
                                  ELSE
                                    R…kstandMenge := 0;
                                  lagerbe.GET("No.");
                                  lagerbe.CALCFIELDS(Inventory);
                                END;

               ReqFilterFields=Manufacturer Code,Promised Delivery Date,Location Code;
               DataItemLink=Sell-to Customer No.=FIELD(No.) }

    { 11  ;2   ;Column  ;auftragsdatum       ;
               SourceExpr=auftragsdatum }

    { 12  ;2   ;Column  ;lagerbeInventory_OutstandingQuantity;
               SourceExpr=lagerbe.Inventory-"Outstanding Quantity" }

    { 13  ;2   ;Column  ;Inventory_lagerbe   ;
               SourceExpr=lagerbe.Inventory }

    { 14  ;2   ;Column  ;RequestedDeliveryDate_SalesLine;
               SourceExpr="Requested Delivery Date" }

    { 15  ;2   ;Column  ;DocumentNo_SalesLine;
               SourceExpr="Document No." }

    { 16  ;2   ;Column  ;No_SalesLine        ;
               SourceExpr="No." }

    { 17  ;2   ;Column  ;PromisedDeliveryDate_SalesLine;
               SourceExpr="Promised Delivery Date" }

    { 18  ;2   ;Column  ;Quantity_SalesLine  ;
               SourceExpr=Quantity }

    { 19  ;2   ;Column  ;OutstandingQuantity_SalesLine;
               SourceExpr="Outstanding Quantity" }

    { 20  ;2   ;Column  ;RuckstandMenge      ;
               DecimalPlaces=0:5;
               SourceExpr=R…kstandMenge }

    { 21  ;2   ;Column  ;UnitPrice_SalesLine ;
               SourceExpr="Unit Price" }

    { 22  ;2   ;Column  ;OutstandingAmount_SalesLine2;
               SourceExpr="Outstanding Amount" }

    { 23  ;2   ;Column  ;PaymentTermsCode_SalesHeader;
               SourceExpr="Sales Header"."Payment Terms Code" }

    { 24  ;2   ;Column  ;hinweis             ;
               SourceExpr=hinweis }

    { 25  ;2   ;DataItem;                    ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.);
               DataItemLink=No.=FIELD(Document No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      W・rungWechKurs@1140000 : Record 330;
      VerkKopf@1140001 : Record 36;
      R…kstandMenge@1140002 : Decimal;
      ArtikelFilter@1140003 : Text[250];
      VerkZeileFilter@1140004 : Text[250];
      lagerbe@1140005 : Record 27;
      adresse@1140007 : Text[50];
      hinweis@1140006 : Text[80];
      auftragsdatum@1140008 : Date;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionCustomer_Header2@5010(VAR Customer@1000000000 : Record 18);
    BEGIN
      WITH Customer DO BEGIN
        ReportForNav.ShowOutput((ReportForNav.PageNo = 1) AND (VerkZeileFilter <> ''));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Footer7@5011(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      WITH "Sales Line" DO BEGIN
        ReportForNav.ShowOutput(("Sales Header"."Payment Terms Code"='BBL') OR
        ("Sales Header"."Payment Terms Code"='VORK') OR ("Sales Header"."Payment Terms Code"='ADV') OR
        ("Sales Header"."Payment Terms Code"='VORK-E') OR ("Sales Header"."Payment Terms Code"='TT') OR
        ("Sales Header"."Payment Terms Code"='VK-1%') OR ("Sales Header"."Payment Terms Code"='VK-2%'));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Body9@5012(VAR "Sales Header"@1000000000 : Record 36);
    BEGIN
      WITH "Sales Header" DO BEGIN
          ReportForNav.ShowOutput(("Sales Header"."Payment Terms Code"='BBL') OR
          ("Sales Header"."Payment Terms Code"='VORK') OR ("Sales Header"."Payment Terms Code"='ADV') OR
          ("Sales Header"."Payment Terms Code"='VORK-E') OR ("Sales Header"."Payment Terms Code"='TT') OR
          ("Sales Header"."Payment Terms Code"='VK-1%') OR ("Sales Header"."Payment Terms Code"='VK-2%'));
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Customer': CASE SectionId OF
          'Header2': OnPreSectionCustomer_Header2(Customer);
        END;
        'SalesLine': CASE SectionId OF
          'Footer7': OnPreSectionSalesLine_Footer7("Sales Line");
        END;
        'SalesHeader': CASE SectionId OF
          'Body9': OnPreSectionSalesHeader_Body9("Sales Header");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Customer': WITH Customer DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Sales Line"."Outstanding Amount");
              END;
           'Restore': BEGIN
                 "Sales Line"."Outstanding Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'SalesLine': WITH "Sales Line" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Outstanding Amount");
                ReportForNav.AddTotal(DataItemId,1,R…kstandMenge);
                ReportForNav.AddTotal(DataItemId,2,"Outstanding Quantity");
              END;
           'Restore': BEGIN
                 "Outstanding Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 R…kstandMenge := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Outstanding Quantity" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>lkoAAMVcW3PbuBV+70z/A4c7zSYzssL7ZWPtjm3ZjRtZci056fbFQ0uQzQ1FKiTlRHnoH2tn+tAf1L9QgAApkDy8iNJOZycrCwDBcz4cnBsO9N9//vv0l28rT3hBYeQG/kCU+5IoIH8eLFz/aSBu4uWJJf7y8x//cPq3OHTu0DoI42jkbINNPEWh63judxQKuz8/ZhNpfaWvk9nu0BJ/FYWxs0IDkU1xFYRj50UULgI/DgNvtl3jviF6ufy2DlEU9bm39e+vua89oWLUC3ljT0gJSN/fEy42XrwJ0cBHGzzc6wm3m0fPnX9A21nwGfkD+1GXHeXRWGrK4/JRn4vCjRM+uX6Eqdbx8zL+Rz41zEuOPVG4dZ7Qe+Q+PccDUbFNibZ8chfxM26QpaRhjcIPrr8YiGeaKFxhfvFfBK6eYK5jURiuXTxWx31DJ3amwSacYyh+wKidJOAR7u59Fz81Q378HE2WZzeu57krFKMQP+RGa8/ZUnBnk9uz6ckI0xB+dUIkCpPH39A8HgcDUZckS07nY/Bn3Ch9Cf8ny5Yt4qUWhNNzx19EyZ/4y3WMVjJdRqWwYnQeQjgZRJ5K1/liE8XBKqEwxyAZN3MePfTRRV8H4nRyN7se//n1OOi/KQzA7JAP2cLvDJETo1kQOx5elVdfNkH8bup4KBJGro/o9z79mGziKMZ0YPEVzlbBxo9puyhcLxIxvA1dP5743vZ6OUSx43oDMQ43aPdyPOXngUig+nLlehjk98gh092MSOsIvSD8iCQydApgFQFTQcDIjCjk4aItMo9WQuiN823iz9EtColkDcQlRgDTeuH40+cwIZS1TPE647UszEaF8wozrnAUJ0QysqJca554DSR+hr7F58G3lPJcoyxrkiQZmBysDPBrVVPqK6ZkmVpPxdI8CuYOofLKC5yYbC9N65uKrZo9wdL6um3bpm7wGJBpzzz3yV8hsm9u3MXCQ3eEJ8xbEH5P+rBSoS1k9EC8n17eXQ/ZdkLxlYu8BSU17XkL8axQnnWQ55HziLw8x0kT5VfP+DX1nqb01TKnpq1jDZJ07bi7cNZkDBGs4eX9YIrcGKVcsC8gqSol1ei4PFpGrlZFrmVKZXIpYVSD0GmJTI4DCGpoFMiLRnkxO/KictBLMDOVnFxMbm7Pxr+Oz24uIRZy3SDtOqXd6ki7UtwmdDUksoPs2s0iHbpHZpPh2a8P0oMGMc51gmwblG27w06RWy1Xjr2cxZSlNfYAoniLzcN54C1Ke4izfZTTXUOBFczMlMyD1WwQuvGW+Sn43fcRoi9lqrUEwtsEhbw6fQvoUzpQLpoGpmlkeS/boPCgMCtENLwTTfzbEDH9nxqzg42HwhmPZJ32th4y7CzU7QsrEw/Zkit0U1E+mLqc3U3vz6ez8eThbLPEft5T9B25Hnq4ncfyA3Z0Pv+dfKUGHRL6PSd423b1leLqM+Ut7+cZqMDqK0dYZpVbZruDiyDDPkKtFlB2WkBWpR62/EZZ22m1esAsqoEb7OS7xBlMN0BBL6RrekIYWDjxZpU48zFTjudBjL3Vki6lzX/Brqy73KaiBkzVTrXobVWLXOOfyLDVrwdc2gGOjQwIuGnpRwX808aP5s/7Qj1Cy8xG5WfgLFkyqB3kZlvIlRo/S4YNfC3ksr2DXKmUcfW4Qj50l0sUIv97e8BzXgH3fMlxaIe33RZvtcYXJOK6N95WC52iGMeV8XOUhJod0c6e7oY10aLtsNZqfFcFNtL1WJucma7C2jyybKda9yuGWsBGzesLN5+mcUfsK2fruBZq27XQaxxqpYMtlXexNklWwWuhH1nuP344wR6nG3UEf/d4R7RbG1IDQttks3QwpLLebEjxwOOifYP8JyS4K+HuP/+af+6IeXGSjsi3tqcmhLzFZuliT7UWyEvKcZG/wxoa0+5QZdER+eIkHZFvbVktCHmbZSO7WFa1GXlb+h1E/hBJ7wqz2tqo2mBQJLFpulhVpdljNPTjGtWRi7DDR8g/LCQqztMO69ZGU5ZAsNMUexezKXO5twqhVowje+fo0Y2DsDPI6fPtwG0fbILRpszCTbWLleTCTa1Cko8L7Tny0JMf9jtjm03QDtzWZlDOx5U1eSI+IOKDIRU2lufBYstnich3DcgRqQfliNisWYZI75QIVOFMcWOCXOU0InlzZT5Q3kOUwGw5TTsUUwxMNsbBA3eYWUoc8t2tpEdrnWKuywNpch646bOzRhQ2OK+cDNgBamMbI5eP5Ir78jwIFyiMMJ4e3u/JHHRSAhbZkSlKu+/TOETx/Dndqmf+EznLLSYXKTpkPsaPwqanTNGp9s/VaHBatVnWdjpLN7UqWZON31/aMIH18pYb0E7itG5pGVBd4eZEHV8E3mblsxfo+QnLeQc+56DBNuUqCOJ86pu26DzcOfWU9ZfVWJ3SY6pRO/iEQ+t6asklq4yKYzDZ2NP9oOLDlT/Q6oeHpE6CbqeyMNUNbyda1lGUWZezRDOX+dj/LLGEYMGpSMpNsgPT5EsrSPTW+r21c6AXdxLLGOmwqofqcXgxaFOQMwzmG6K0BDJxL/nfOOj3PjoYPNx6ESxQbxgGa6y03TUZ2Euxp31pM3kHeiN8en95d5mfdHAxGU9nryfEwLzpMe64DkJY1s6X9fx1gynAcA+urkezy7vXr7z43aun+J30pqKEiPhrUAlRVa1QL0mSJF1JNNkrD09pyBUXScUioinyvJM4EFJ1LWAIMdWXoyEreMpqjJI9iQm7DYOVG6GFMESe+4LCbYJfHlu4NClJzKHws7NZ0pNLqFYpEaBivVJRrelw9Aq5nLlinQMdTYPXx5C3UKGRS+R3dAEULtGh6j0NqFeS4cNnltuJWBBdVrOFAUVtUFSHesfCK03JBV4QB5oCs+CRMolHdO2/4O0ZhNsHTthTWYc4a/dcJcPMa9PhqqvmJbMbGVZMmOEdxYwFiDtgUCUrLF7TO1ZlaflDcYCV8gltmmD8skFRjBapyiAao97sNz5SySVz4fSOno8mNXEJr1ZqOHCwVcsYPK6Sm9SMdqzgUu1cFgngpkr6mvhoST87ytC7BthWk8YzSmcZlP7UTLUXuaYnKnlkhwYGnLpu5tHMpa8BHu3SqQHlMVVf9XxBoyp5YWl4A3bbmnkxmniRpYoFA9Ry68hgLxbTFLixf/UX5VFv5FEuRUZMEW54pw3Ue4UR1VwwX8Lomk7QGg2TXqHOSa0/9qTmDfsJHFbND/MsjI6ehcr5RibMj1k6m2iMSJU9Q1IF4rAiSZF0lRIVht4lPDX2S1iYDQkLc9+ERUWNJ1cEegy/2eiazZDygTggG6X6A2ZFnC0x1jMUriIS2NCVpoWJoA2pHb+HaDTnEQ3YJaiMrDOi94+tq6++EH1PAktS8JAPLHdxZDZXIaBsuLSS8QwFgyXJgP0LKCC0eQiOX5vMXpHJO8ARvPHJ3SxQO4Kbn7SDUXJj7ZoJm/YqVWE1qAqrY26TL+s1DtAJZkcrLu08Y0vT+wqkFXTTJBf29k5xPrv+16R6qKwg0i5YKIBcndniDLpOTPJ2wuxoXRWr0bqWT/7/z9YVKi2ENs0p3YV1+SZTZ/kzuUXuhF6QJBdAS13X/tzbLBBL42brSaZk90udyitV6QoyjSuD4LVLdvAUsif62SMnLVKJTWzc+wu0xAu2qL8eZpqMF7VlaqOW8Dbworm7Iinz2oteFqMKvHrUmJjgaaSAZY/kU6at0awRCpbsMG1Gst4+5VCmkzfUrYmj6d66W1iWxIgzmvMIZaKORAvLQ5ALxgktZpcMQJk6OBl+jJVlSQVLYQRbbUN7nsjdlj9wa7C0gKUyauwOAXkZvYN0TD3BaZBvacxBldpE2zyJhROWaoooHbeeM0cR9vd+0vegktkXi9kXBbQvYCBdRpMME5Jxx8KQmRwrdfI72Ov6RS9cfz+QXGZVLGZVFNCq1EdoZXLpJX7an7vGzyYSkpmSU69j6CmZGSGLGSEFNEKZg8nTmzU2vp84ZtAFwaIbVCxRL3pPgOfEe00Ws0qg2KQ33XkO0rau/gXvJ9nM6oBCAN39zu19rr+fDjiIKiabNrM/4KrmrnPz5OQ6DiKDSZfNrAroLnCXq3kiriZ3N2ez10lvD4cAbw4khbkuNjMpoHOw55VXntzdo69/zD37k/An+cde4dlDmUkvnDNrA3oXuSq9Yzs6vJNjM2sCugyF6i2eDtLVSXvwDovNjEWTh1Cu/anSvfv8gEoHC1JUfPlAOqdSzDRAjoM1/QUeog+L+ZQZ35lLNmVFqlyqJ6cdrPQFj0kJcPU7zgv94Gu07DW84j4dosh98lE4SUCK2KtJOuQ5+JpkbjCwn5zQxx/RLsmFO/HaYLVY6mLvoL/kM8WhGFaYPHcy+5Gf2p9QSn+gKckp9HNzXfvLoP5HldhPOLEDuKSQ8R9k0A/j+9FIpCU74nSLY7BVnwhDn4nmDp8i8adva35N6uf/AQ==</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>26eee7bd-dc90-46a5-aeb6-6ef5d9de49bf</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>cb44debb-42ff-4419-9baf-9159373bf2a8</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="USERID">
          <DataField>USERID</DataField>
        </Field>
        <Field Name="ReportForNavPageNo">
          <DataField>ReportForNavPageNo</DataField>
        </Field>
        <Field Name="COMPANYNAME">
          <DataField>COMPANYNAME</DataField>
        </Field>
        <Field Name="TODAY_0_4">
          <DataField>TODAY_0_4</DataField>
        </Field>
        <Field Name="STRSUBSTNO_Auftragszeile_Pct1_VerkZeileFilter">
          <DataField>STRSUBSTNO_Auftragszeile_Pct1_VerkZeileFilter</DataField>
        </Field>
        <Field Name="No_Customer">
          <DataField>No_Customer</DataField>
        </Field>
        <Field Name="Name_Customer">
          <DataField>Name_Customer</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLine">
          <DataField>OutstandingAmount_SalesLine</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLineFormat">
          <DataField>OutstandingAmount_SalesLineFormat</DataField>
        </Field>
        <Field Name="auftragsdatum">
          <DataField>auftragsdatum</DataField>
        </Field>
        <Field Name="lagerbeInventory_OutstandingQuantity">
          <DataField>lagerbeInventory_OutstandingQuantity</DataField>
        </Field>
        <Field Name="lagerbeInventory_OutstandingQuantityFormat">
          <DataField>lagerbeInventory_OutstandingQuantityFormat</DataField>
        </Field>
        <Field Name="Inventory_lagerbe">
          <DataField>Inventory_lagerbe</DataField>
        </Field>
        <Field Name="Inventory_lagerbeFormat">
          <DataField>Inventory_lagerbeFormat</DataField>
        </Field>
        <Field Name="RequestedDeliveryDate_SalesLine">
          <DataField>RequestedDeliveryDate_SalesLine</DataField>
        </Field>
        <Field Name="DocumentNo_SalesLine">
          <DataField>DocumentNo_SalesLine</DataField>
        </Field>
        <Field Name="No_SalesLine">
          <DataField>No_SalesLine</DataField>
        </Field>
        <Field Name="PromisedDeliveryDate_SalesLine">
          <DataField>PromisedDeliveryDate_SalesLine</DataField>
        </Field>
        <Field Name="Quantity_SalesLine">
          <DataField>Quantity_SalesLine</DataField>
        </Field>
        <Field Name="Quantity_SalesLineFormat">
          <DataField>Quantity_SalesLineFormat</DataField>
        </Field>
        <Field Name="OutstandingQuantity_SalesLine">
          <DataField>OutstandingQuantity_SalesLine</DataField>
        </Field>
        <Field Name="OutstandingQuantity_SalesLineFormat">
          <DataField>OutstandingQuantity_SalesLineFormat</DataField>
        </Field>
        <Field Name="RuckstandMenge">
          <DataField>RuckstandMenge</DataField>
        </Field>
        <Field Name="RuckstandMengeFormat">
          <DataField>RuckstandMengeFormat</DataField>
        </Field>
        <Field Name="UnitPrice_SalesLine">
          <DataField>UnitPrice_SalesLine</DataField>
        </Field>
        <Field Name="UnitPrice_SalesLineFormat">
          <DataField>UnitPrice_SalesLineFormat</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLine2">
          <DataField>OutstandingAmount_SalesLine2</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLine2Format">
          <DataField>OutstandingAmount_SalesLine2Format</DataField>
        </Field>
        <Field Name="PaymentTermsCode_SalesHeader">
          <DataField>PaymentTermsCode_SalesHeader</DataField>
        </Field>
        <Field Name="hinweis">
          <DataField>hinweis</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

