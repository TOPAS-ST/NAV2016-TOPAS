OBJECT Report 50081 TOPAS-Lagerware
{
  OBJECT-PROPERTIES
  {
    Date=05.07.22;
    Time=15:08:53;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  //ArtikelFilter := Item.GETFILTERS;
                  VerkZeileFilter := "Sales Line".GETFILTERS;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;

                  IF excel_ausgabe THEN BEGIN
                    CreateExcel;
                    RowNo := 1;
                    ColumnNo := 1;

                    EnterCell(RowNo,ColumnNo,'Belegnr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    ColumnNo += 1;
                    EnterCell(RowNo,ColumnNo,'Belegdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    ColumnNo += 1;
                    EnterCell(RowNo,ColumnNo,'Debitornr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                    ColumnNo += 1;
                    EnterCell(RowNo,ColumnNo,'Debitorname','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                    ColumnNo += 1;
                    EnterCell(RowNo,ColumnNo,'Artikelnr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    ColumnNo += 1;
                    EnterCell(RowNo,ColumnNo,'Lieferdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    ColumnNo += 1;
                    EnterCell(RowNo,ColumnNo,'Wunschdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    ColumnNo += 1;
                    EnterCell(RowNo,ColumnNo,'Menge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    ColumnNo += 1;
                    EnterCell(RowNo,ColumnNo,'Restauftrag','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    ColumnNo += 1;
                    EnterCell(RowNo,ColumnNo,'Bestand','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    ColumnNo += 1;
                    EnterCell(RowNo,ColumnNo,'Differenz','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    ColumnNo += 1;
                    EnterCell(RowNo,ColumnNo,'VK-Preis','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    ColumnNo += 1;
                    EnterCell(RowNo,ColumnNo,'Rest Auftragswert','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

                    RowNo := 2;
                  END;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;

                   IF excel_ausgabe THEN
                     CloseExcel('Lagerware','','');
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.);
               PrintOnlyIfDetail=Yes;
               OnAfterGetRecord=BEGIN
                                  hinweis := '';
                                  adresse := '';
                                END;
                                 }

    { 2   ;1   ;Column  ;USERID              ;
               IncludeCaption=No;
               SourceExpr=USERID }

    { 3   ;1   ;Column  ;ReportForNavPageNo  ;
               IncludeCaption=No;
               SourceExpr=ReportForNav.PageNo }

    { 4   ;1   ;Column  ;COMPANYNAME         ;
               IncludeCaption=No;
               SourceExpr=COMPANYNAME }

    { 5   ;1   ;Column  ;TODAY_0_4           ;
               IncludeCaption=No;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 6   ;1   ;Column  ;STRSUBSTNO_Auftragszeile_Pct1_VerkZeileFilter;
               IncludeCaption=No;
               SourceExpr=STRSUBSTNO('Auftragszeile: %1',VerkZeileFilter) }

    { 7   ;1   ;Column  ;No_Customer         ;
               IncludeCaption=No;
               SourceExpr="No." }

    { 8   ;1   ;Column  ;Name_Customer       ;
               IncludeCaption=No;
               SourceExpr=Name }

    { 9   ;1   ;Column  ;OutstandingAmount_SalesLine;
               IncludeCaption=No;
               SourceExpr="Sales Line"."Outstanding Amount" }

    { 10  ;1   ;DataItem;                    ;
               DataItemTable=Table37;
               DataItemTableView=WHERE(Document Type=CONST(Order),
                                       Type=CONST(Item),
                                       Outstanding Quantity=FILTER(<>0));
               ReqFilterHeadingML=DEU=Verkaufszeile;
               OnAfterGetRecord=BEGIN
                                  VerkKopf.GET("Document Type","Document No.");
                                  IF (adresse <> '') AND (VerkKopf."Ship-to Address" <> adresse) THEN
                                    hinweis := 'Achtung: Unterschiedliche Lief. an Adressen !!!';
                                  adresse := VerkKopf."Ship-to Address";
                                  belegdatum := VerkKopf."Document Date";
                                  IF VerkKopf."Currency Factor" <> 0 THEN
                                    "Outstanding Amount" :=
                                      ROUND(
                                        W・rungWechKurs.ExchangeAmtFCYToLCY(
                                          WORKDATE,VerkKopf."Currency Code","Outstanding Amount",
                                          VerkKopf."Currency Factor"));
                                  IF "Shipment Date" < WORKDATE THEN
                                    R…kstandMenge := "Outstanding Quantity"
                                  ELSE
                                    R…kstandMenge := 0;
                                  lagerbe.GET("No.");
                                  lagerbe.CALCFIELDS(Inventory);

                                  IF excel_ausgabe THEN BEGIN
                                    ColumnNo := 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Line"."Document No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo += 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT(belegdatum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                    ColumnNo += 1;
                                    EnterCell(RowNo,ColumnNo,Customer."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo += 1;
                                    EnterCell(RowNo,ColumnNo,Customer.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo += 1;
                                    EnterCell(RowNo,ColumnNo,"Sales Line"."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo += 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Line"."Shipment Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                    ColumnNo += 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Line"."Requested Delivery Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                    ColumnNo += 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Line".Quantity),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo += 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Line"."Outstanding Quantity"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo += 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT(lagerbe.Inventory),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo += 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT(lagerbe.Inventory - "Sales Line"."Outstanding Quantity"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo += 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Line"."Unit Price"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo += 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Sales Line"."Outstanding Amount"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);

                                    RowNo := RowNo +1;

                                  END;
                                END;

               ReqFilterFields=Manufacturer Code,Promised Delivery Date,Location Code;
               DataItemLink=Sell-to Customer No.=FIELD(No.) }

    { 11  ;2   ;Column  ;belegdatum          ;
               SourceExpr=belegdatum }

    { 12  ;2   ;Column  ;lagerbeInventory_OutstandingQuantity;
               IncludeCaption=No;
               SourceExpr=lagerbe.Inventory-"Outstanding Quantity" }

    { 13  ;2   ;Column  ;Inventory_lagerbe   ;
               IncludeCaption=No;
               SourceExpr=lagerbe.Inventory }

    { 14  ;2   ;Column  ;RequestedDeliveryDate_SalesLine;
               IncludeCaption=No;
               SourceExpr="Requested Delivery Date" }

    { 15  ;2   ;Column  ;DocumentNo_SalesLine;
               IncludeCaption=No;
               SourceExpr="Document No." }

    { 16  ;2   ;Column  ;No_SalesLine        ;
               IncludeCaption=No;
               SourceExpr="No." }

    { 17  ;2   ;Column  ;PromisedDeliveryDate_SalesLine;
               IncludeCaption=No;
               SourceExpr="Promised Delivery Date" }

    { 18  ;2   ;Column  ;Quantity_SalesLine  ;
               IncludeCaption=No;
               SourceExpr=Quantity }

    { 19  ;2   ;Column  ;OutstandingQuantity_SalesLine;
               IncludeCaption=No;
               SourceExpr="Outstanding Quantity" }

    { 20  ;2   ;Column  ;RuckstandMenge      ;
               DecimalPlaces=0:5;
               IncludeCaption=No;
               SourceExpr=R…kstandMenge }

    { 21  ;2   ;Column  ;UnitPrice_SalesLine ;
               IncludeCaption=No;
               SourceExpr="Unit Price" }

    { 22  ;2   ;Column  ;OutstandingAmount_SalesLine2;
               IncludeCaption=No;
               SourceExpr="Outstanding Amount" }

    { 23  ;2   ;Column  ;PaymentTermsCode_SalesHeader;
               IncludeCaption=No;
               SourceExpr="Sales Header"."Payment Terms Code" }

    { 24  ;2   ;Column  ;hinweis             ;
               IncludeCaption=No;
               SourceExpr=hinweis }

    { 25  ;2   ;DataItem;                    ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.);
               DataItemLink=No.=FIELD(Document No.) }

    { 1000000000;3;DataItem;                 ;
               DataItemTable=Table44;
               DataItemTableView=WHERE(Line No.=FILTER(10000));
               DataItemLink=No.=FIELD(No.) }

    { 1000000001;4;Column;Comment_SalesCommentLine;
               IncludeCaption=No;
               SourceExpr=Comment }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1000000000;2;Field  ;
                  CaptionML=DEU=Ausgabe nach Excel;
                  SourceExpr=excel_ausgabe }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      W・rungWechKurs@1140000 : Record 330;
      VerkKopf@1140001 : Record 36;
      R…kstandMenge@1140002 : Decimal;
      ArtikelFilter@1140003 : Text[250];
      VerkZeileFilter@1140004 : Text[250];
      lagerbe@1140005 : Record 27;
      adresse@1140007 : Text[50];
      hinweis@1140006 : Text[80];
      belegdatum@1140008 : Date;
      TempExcelBuffer@1000000013 : TEMPORARY Record 370;
      FileMgt@1000000012 : Codeunit 419;
      ServerFileName@1000000011 : Text;
      DoUpdateExistingWorksheet@1000000009 : Boolean;
      Testmode@1000000008 : Boolean;
      Window@1000000007 : Dialog;
      RecNo@1000000006 : Integer;
      TotalRecNo@1000000005 : Integer;
      RowNo@1000000004 : Integer;
      ColumnNo@1000000003 : Integer;
      excel_ausgabe@1000000000 : Boolean;
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;
      Text000@1000000001 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      ExcelFileExtensionTok@1000000002 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';

    LOCAL PROCEDURE CreateExcel@1000000010();
    VAR
      ServerFileName@1000000000 : Text;
      SheetName@1000000002 : Text;
    BEGIN
      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile('Lagerware',ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;

      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');

      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);
    END;

    LOCAL PROCEDURE CloseExcel@1000000009(Sheetname@1000000000 : Text;FileName@1000000001 : Text;FilePath@1000000002 : Text);
    BEGIN
      Window.CLOSE;

      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,Sheetname);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,Sheetname);
        TempExcelBuffer.WriteSheet(Sheetname,COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          IF (FileName = '') OR (FilePath = '') THEN
            TempExcelBuffer.OpenExcel //hat Autofit drin der die Spaltenbreite wieder ｜erschreibt, deshalb neue Fkt. nachfolgend
        ELSE
            TempExcelBuffer.OpenExcelWithoutAutoFit(Sheetname,FileName + ExcelFileExtensionTok,FilePath,TRUE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;
    END;

    LOCAL PROCEDURE EnterCell@1000000008(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text[250];Formular@1000000008 : Text[250];Bold@1000000003 : Boolean;Italic@1000000004 : Boolean;UnderLine@1000000005 : Boolean;NumberFormat@1000000006 : Text[30];CellType@1000000007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE UpdateCell@1000000013(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text[250]);
    BEGIN
      IF TempExcelBuffer.GET(RowNo,ColumnNo)  THEN BEGIN
        TempExcelBuffer."Cell Value as Text" := CellValue;
        TempExcelBuffer.MODIFY;
      END;
    END;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionCustomer_Header2@5010(VAR Customer@1000000000 : Record 18);
    BEGIN
      WITH Customer DO BEGIN
        ReportForNav.ShowOutput((ReportForNav.PageNo = 1) AND (VerkZeileFilter <> ''));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Footer7@5011(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      WITH "Sales Line" DO BEGIN
        ReportForNav.ShowOutput(("Sales Header"."Payment Terms Code"='BBL') OR
        ("Sales Header"."Payment Terms Code"='VORK') OR ("Sales Header"."Payment Terms Code"='ADV') OR
        ("Sales Header"."Payment Terms Code"='VORK-E') OR ("Sales Header"."Payment Terms Code"='TT') OR
        ("Sales Header"."Payment Terms Code"='VK-1%') OR ("Sales Header"."Payment Terms Code"='VK-2%'));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Body9@5012(VAR "Sales Header"@1000000000 : Record 36);
    BEGIN
      WITH "Sales Header" DO BEGIN
          ReportForNav.ShowOutput(("Sales Header"."Payment Terms Code"='BBL') OR
          ("Sales Header"."Payment Terms Code"='VORK') OR ("Sales Header"."Payment Terms Code"='ADV') OR
          ("Sales Header"."Payment Terms Code"='VORK-E') OR ("Sales Header"."Payment Terms Code"='TT') OR
          ("Sales Header"."Payment Terms Code"='VK-1%') OR ("Sales Header"."Payment Terms Code"='VK-2%'));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Body10@1000000005(VAR "Sales Comment Line"@1000000000 : Record 44);
    BEGIN
      WITH "Sales Comment Line" DO BEGIN
          ReportForNav.ShowOutput("Sales Comment Line".Comment<>'')
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Customer': CASE SectionId OF
          'Header2': OnPreSectionCustomer_Header2(Customer);
        END;
        'SalesLine': CASE SectionId OF
          'Footer7': OnPreSectionSalesLine_Footer7("Sales Line");
        END;
        'SalesHeader': CASE SectionId OF
          'Body9': OnPreSectionSalesHeader_Body9("Sales Header");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
      ForNavOperation@1000000009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Customer': WITH Customer DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Sales Line"."Outstanding Amount");
              END;
           'Restore': BEGIN
                 "Sales Line"."Outstanding Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'SalesLine': WITH "Sales Line" DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Outstanding Amount");
                ReportForNav.AddTotal(DataItemId,1,R…kstandMenge);
                ReportForNav.AddTotal(DataItemId,2,"Outstanding Quantity");
              END;
           'Restore': BEGIN
                 "Outstanding Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 R…kstandMenge := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Outstanding Quantity" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
x6Rti0Gd+OPXLd/F+vl/</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="USERID">
          <DataField>USERID</DataField>
        </Field>
        <Field Name="ReportForNavPageNo">
          <DataField>ReportForNavPageNo</DataField>
        </Field>
        <Field Name="COMPANYNAME">
          <DataField>COMPANYNAME</DataField>
        </Field>
        <Field Name="TODAY_0_4">
          <DataField>TODAY_0_4</DataField>
        </Field>
        <Field Name="STRSUBSTNO_Auftragszeile_Pct1_VerkZeileFilter">
          <DataField>STRSUBSTNO_Auftragszeile_Pct1_VerkZeileFilter</DataField>
        </Field>
        <Field Name="No_Customer">
          <DataField>No_Customer</DataField>
        </Field>
        <Field Name="Name_Customer">
          <DataField>Name_Customer</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLine">
          <DataField>OutstandingAmount_SalesLine</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLineFormat">
          <DataField>OutstandingAmount_SalesLineFormat</DataField>
        </Field>
        <Field Name="belegdatum">
          <DataField>belegdatum</DataField>
        </Field>
        <Field Name="lagerbeInventory_OutstandingQuantity">
          <DataField>lagerbeInventory_OutstandingQuantity</DataField>
        </Field>
        <Field Name="lagerbeInventory_OutstandingQuantityFormat">
          <DataField>lagerbeInventory_OutstandingQuantityFormat</DataField>
        </Field>
        <Field Name="Inventory_lagerbe">
          <DataField>Inventory_lagerbe</DataField>
        </Field>
        <Field Name="Inventory_lagerbeFormat">
          <DataField>Inventory_lagerbeFormat</DataField>
        </Field>
        <Field Name="RequestedDeliveryDate_SalesLine">
          <DataField>RequestedDeliveryDate_SalesLine</DataField>
        </Field>
        <Field Name="DocumentNo_SalesLine">
          <DataField>DocumentNo_SalesLine</DataField>
        </Field>
        <Field Name="No_SalesLine">
          <DataField>No_SalesLine</DataField>
        </Field>
        <Field Name="PromisedDeliveryDate_SalesLine">
          <DataField>PromisedDeliveryDate_SalesLine</DataField>
        </Field>
        <Field Name="Quantity_SalesLine">
          <DataField>Quantity_SalesLine</DataField>
        </Field>
        <Field Name="Quantity_SalesLineFormat">
          <DataField>Quantity_SalesLineFormat</DataField>
        </Field>
        <Field Name="OutstandingQuantity_SalesLine">
          <DataField>OutstandingQuantity_SalesLine</DataField>
        </Field>
        <Field Name="OutstandingQuantity_SalesLineFormat">
          <DataField>OutstandingQuantity_SalesLineFormat</DataField>
        </Field>
        <Field Name="RuckstandMenge">
          <DataField>RuckstandMenge</DataField>
        </Field>
        <Field Name="RuckstandMengeFormat">
          <DataField>RuckstandMengeFormat</DataField>
        </Field>
        <Field Name="UnitPrice_SalesLine">
          <DataField>UnitPrice_SalesLine</DataField>
        </Field>
        <Field Name="UnitPrice_SalesLineFormat">
          <DataField>UnitPrice_SalesLineFormat</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLine2">
          <DataField>OutstandingAmount_SalesLine2</DataField>
        </Field>
        <Field Name="OutstandingAmount_SalesLine2Format">
          <DataField>OutstandingAmount_SalesLine2Format</DataField>
        </Field>
        <Field Name="PaymentTermsCode_SalesHeader">
          <DataField>PaymentTermsCode_SalesHeader</DataField>
        </Field>
        <Field Name="hinweis">
          <DataField>hinweis</DataField>
        </Field>
        <Field Name="Comment_SalesCommentLine">
          <DataField>Comment_SalesCommentLine</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

