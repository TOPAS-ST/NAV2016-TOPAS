OBJECT Report 50085 TOPAS Auftragsbestand
{
  OBJECT-PROPERTIES
  {
    Date=31.01.23;
    Time=08:34:59;
    Modified=Yes;
    Version List=TOPAS, BT šbergabe Fkt.! ,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  //*******************************************************************************************************
                  //                                 Akt. Auftr„ge werden durchsucht
                  //*******************************************************************************************************

                  SalesHeader.RESET;
                  IF (Startdatum <> 0D) AND (Enddatum = 0D) THEN
                    SalesHeader.SETFILTER("Order Date",'>=%1',Startdatum);
                  IF (Startdatum <> 0D) AND (Enddatum <> 0D) THEN
                    SalesHeader.SETFILTER("Order Date",'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum = 0D) AND (Enddatum <> 0D) THEN
                    SalesHeader.SETFILTER("Order Date",'<=%1',Enddatum);
                  SalesHeader.SETFILTER("Betreuer Innendienst",betreuer);
                  SalesHeader.SETFILTER("Salesperson Code",verk„ufer);
                  SalesHeader.SETFILTER(Teams,teams);
                  SalesHeader.SETFILTER("Territory Code",gebietscode);
                  SalesHeader.SETFILTER("Document Type",'%1',SalesHeader."Document Type"::Order);
                  IF SalesHeader.FIND('-') THEN
                    REPEAT
                      belegzeilen_vorhanden := FALSE;
                      SalesLine.RESET;
                      SalesLine.SETFILTER("Document No.",SalesHeader."No.");
                      SalesLine.SETFILTER(Type,'%1',SalesLine.Type::Item);
                      SalesLine.SETFILTER("Outstanding Quantity",'>%1',0);
                      SalesLine.SETFILTER("Manufacturer Code",hersteller);
                      IF (zugesagtes_startdatum <> 0D) AND (zugesagtes_enddatum = 0D) THEN
                        SalesLine.SETFILTER("Promised Delivery Date",'>=%1',zugesagtes_startdatum);
                      IF (zugesagtes_startdatum <> 0D) AND (zugesagtes_enddatum <> 0D) THEN
                        SalesLine.SETFILTER("Promised Delivery Date",'>=%1&<=%2',zugesagtes_startdatum,zugesagtes_enddatum);
                      IF (zugesagtes_startdatum = 0D) AND (zugesagtes_enddatum <> 0D) THEN
                        SalesLine.SETFILTER("Promised Delivery Date",'<=%1',zugesagtes_enddatum);
                      IF SalesLine.FINDFIRST THEN BEGIN
                        belegzeilen_vorhanden := TRUE;
                        Berichtstabelle.RESET;
                        Berichtstabelle.SETFILTER(Tabelle,'%1','DEBITOR');
                        Berichtstabelle.SETFILTER(Index,'%1',SalesHeader."Sell-to Customer No.");
                        IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
                          //*******************************************************************************************************
                          //                                     Debitor Daten schreiben
                          //*******************************************************************************************************
                          Berichtstabelle.INIT;
                          Berichtstabelle.Tabelle := 'DEBITOR';
                          Berichtstabelle.Index := SalesHeader."Sell-to Customer No.";
                          Berichtstabelle."Feld 10" := SalesHeader."Sell-to Customer Name";
                          Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                          Berichtstabelle.User := USERID;
                          Berichtstabelle.INSERT;
                        END;
                        REPEAT
                          //*******************************************************************************************************
                          //                                      Auftragszeilen schreiben
                          //*******************************************************************************************************
                          Berichtstabelle.INIT;
                          Berichtstabelle.Tabelle := 'BELEGZEILE';
                          Berichtstabelle.Index := SalesLine."Document No.";
                          Berichtstabelle.Datum := SalesLine."Promised Delivery Date";
                          Berichtstabelle."Belegnr." := SalesLine."Document No.";
                          Berichtstabelle."Zeilennr." := SalesLine."Line No.";
                          Berichtstabelle."Feld 3" := SalesLine."Artikelnr. 2";
                          Berichtstabelle."Feld 4" := SalesLine."Outstanding Quantity";
                          Berichtstabelle."Feld 5" := SalesLine."Unit Price";
                          IF SalesHeader."Currency Code" = '' THEN
                            Berichtstabelle."Feld 7" := '°'
                          ELSE
                            Berichtstabelle."Feld 7" := SalesHeader."Currency Code";
                          Berichtstabelle."Feld 10" := FORMAT(SalesLine."Outstanding Quantity" * SalesLine."Unit Price");
                          Berichtstabelle."Feld 11" := FORMAT(SalesLine."Requested Delivery Date");
                          Berichtstabelle."Feld 12" := FORMAT(ROUND(SalesLine."Profit %",0.01));
                          Berichtstabelle."Feld 13" := FORMAT(ROUND(SalesLine."Unit Cost (LCY)",0.01));
                          Berichtstabelle."Feld 14" := FORMAT(SalesLine.Quantity);
                          Berichtstabelle."Feld 15" := FORMAT(RckstandMenge);
                          Berichtstabelle."Feld 16" := FORMAT(SalesHeader."Currency Factor");
                          Berichtstabelle."Feld 18" := SalesLine."Shipment Date";
                          Berichtstabelle."Feld 20" := SalesLine."DC-Preis (EKW)";
                          IF Quotedaten.GET(SalesLine."Quotenr.") THEN
                            Berichtstabelle."Feld 22" := Quotedaten."Quotenr. Hersteller";
                          Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                          Berichtstabelle.User := USERID;
                          Berichtstabelle.INSERT;
                        UNTIL SalesLine.NEXT = 0;
                      END;
                      //*******************************************************************************************************
                      //     Nachtr„glich alle anderen Daten schreiben, wenn auch wirklich Auftragszeilen vorhanden sind
                      //*******************************************************************************************************
                      IF belegzeilen_vorhanden THEN BEGIN
                        //Auftragskopf
                        Berichtstabelle.INIT;
                        Berichtstabelle.Tabelle := 'BELEGKOPF';
                        Berichtstabelle.Index := SalesHeader."No.";
                        Berichtstabelle.Datum := SalesHeader."Order Date";
                        Berichtstabelle."Belegnr." := SalesHeader."No.";
                        Berichtstabelle."Feld 2" := SalesHeader."Sell-to Customer No.";
                        SalesHeader.CALCFIELDS(Amount);
                        Berichtstabelle."Feld 4" := SalesHeader.Amount;
                        Berichtstabelle."Feld 6" := SalesHeader."Betreuer Innendienst";
                        Berichtstabelle."Feld 7" := SalesHeader."Salesperson Code";
                        Berichtstabelle."Feld 8" := SalesHeader.Teams;
                        Berichtstabelle."Feld 9" := SalesHeader."Territory Code";
                        IF SalesHeader."Currency Code" <> '' THEN
                          Berichtstabelle."Feld 12" := SalesHeader."Currency Code"
                        ELSE
                          Berichtstabelle."Feld 12" := '°';
                        Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                        Berichtstabelle.User := USERID;
                        Berichtstabelle.INSERT;
                      END;
                    UNTIL SalesHeader.NEXT = 0;

                  IF (zugesagtes_startdatum = 0D) AND (zugesagtes_enddatum = 0D) THEN BEGIN
                    //*******************************************************************************************************
                    //                                 Archivierte Auftr„ge werden durchsucht
                    //*******************************************************************************************************
                    IF ohne_archiv = FALSE THEN BEGIN
                      ArchSalesHeader.RESET;
                      IF (Startdatum <> 0D) AND (Enddatum = 0D) THEN
                        ArchSalesHeader.SETFILTER("Order Date",'>=%1',Startdatum);
                      IF (Startdatum <> 0D) AND (Enddatum <> 0D) THEN
                        ArchSalesHeader.SETFILTER("Order Date",'>=%1&<=%2',Startdatum,Enddatum);
                      IF (Startdatum = 0D) AND (Enddatum <> 0D) THEN
                        ArchSalesHeader.SETFILTER("Order Date",'<=%1',Enddatum);
                      ArchSalesHeader.SETFILTER("Betreuer Innendienst",betreuer);
                      ArchSalesHeader.SETFILTER("Salesperson Code",verk„ufer);
                      ArchSalesHeader.SETFILTER(Teams,teams);
                      ArchSalesHeader.SETFILTER("Territory Code",gebietscode);
                      ArchSalesHeader.SETFILTER("Document Type",'%1',ArchSalesHeader."Document Type"::Order);
                      IF ArchSalesHeader.FIND('-') THEN
                        REPEAT
                          ArchivHeaderVersion.RESET;
                          ArchivHeaderVersion.SETRANGE("No.",ArchSalesHeader."No.");
                          ArchivHeaderVersion.FINDLAST;
                          //ArchSalesHeader.SETFILTER("Version No.",'%1',ArchivHeaderVersion."Version No.");
                          //ArchSalesHeader.FINDLAST;
                          arch_belegzeilen_vorhanden := FALSE;
                          ArchSalesLine.RESET;
                          ArchSalesLine.SETFILTER("Document No.",ArchSalesHeader."No.");
                          ArchSalesLine.SETFILTER(Type,'%1',ArchSalesLine.Type::Item);
                          //ArchSalesLine.SETFILTER("Outstanding Quantity",'>%1',0);
                          ArchSalesLine.SETFILTER("Qty. to Invoice",'>%1',0);
                          ArchSalesLine.SETFILTER("Manufacturer Code",hersteller);
                          ArchSalesLine.SETFILTER("Version No.",'%1',ArchivHeaderVersion."Version No.");
                          IF ArchSalesLine.FINDFIRST THEN BEGIN
                            Berichtstabelle.RESET;
                            Berichtstabelle.SETFILTER(Tabelle,'%1','ARCH_BELEGZEILE');
                            Berichtstabelle.SETFILTER(Index,'%1',ArchSalesLine."Document No.");
                            Berichtstabelle.SETFILTER("Zeilennr.",'%1',ArchSalesLine."Line No.");
                            IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
                              arch_belegzeilen_vorhanden := TRUE;
                              Berichtstabelle.RESET;
                              Berichtstabelle.SETFILTER(Tabelle,'%1','ARCH_DEBITOR');
                              Berichtstabelle.SETFILTER(Index,'%1',ArchSalesHeader."Sell-to Customer No.");
                              IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
                                //*******************************************************************************************************
                                //                                     Debitor Daten schreiben
                                //*******************************************************************************************************
                                Berichtstabelle.INIT;
                                Berichtstabelle.Tabelle := 'ARCH_DEBITOR';
                                Berichtstabelle.Index := ArchSalesHeader."Sell-to Customer No.";
                                Berichtstabelle."Feld 10" := ArchSalesHeader."Sell-to Customer Name";
                                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                                Berichtstabelle.User := USERID;
                                Berichtstabelle.INSERT;
                              END;
                              REPEAT
                                //*******************************************************************************************************
                                //                                 Archivierte Auftragszeilen schreiben
                                //*******************************************************************************************************
                                Berichtstabelle.INIT;
                                Berichtstabelle.Tabelle := 'ARCH_BELEGZEILE';
                                Berichtstabelle.Index := ArchSalesLine."Document No.";
                                Berichtstabelle.Datum := ArchSalesLine."Promised Delivery Date";
                                Berichtstabelle."Belegnr." := ArchSalesLine."Document No.";
                                Berichtstabelle."Zeilennr." := ArchSalesLine."Line No.";
                                Berichtstabelle."Feld 3" := ArchSalesLine."Artikelnr. 2";
                                Berichtstabelle."Feld 4" := ArchSalesLine."Qty. to Invoice";
                                Berichtstabelle."Feld 5" := ArchSalesLine."Unit Price";
                                IF ArchSalesHeader."Currency Code" = '' THEN
                                  Berichtstabelle."Feld 7" := '°'
                                ELSE
                                  Berichtstabelle."Feld 7" := ArchSalesHeader."Currency Code";
                                Berichtstabelle."Feld 10" := FORMAT(ArchSalesLine."Qty. to Invoice" * ArchSalesLine."Unit Price");
                                Berichtstabelle."Feld 11" := FORMAT(ArchSalesLine."Requested Delivery Date");
                                Berichtstabelle."Feld 12" := FORMAT(ROUND(ArchSalesLine."Profit %",0.01));
                                Berichtstabelle."Feld 13" := FORMAT(ROUND(ArchSalesLine."Unit Cost (LCY)",0.01));
                                Berichtstabelle."Feld 16" := FORMAT(ArchSalesHeader."Currency Factor");
                                Berichtstabelle."Feld 18" := ArchSalesLine."Shipment Date";
                                Berichtstabelle."Feld 20" := ArchSalesLine."DC-Preis (EKW)";
                                IF Quotedaten.GET(ArchSalesLine."Quotenr.") THEN
                                  Berichtstabelle."Feld 22" := Quotedaten."Quotenr. Hersteller";
                                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                                Berichtstabelle.User := USERID;
                                Berichtstabelle.INSERT;
                              UNTIL ArchSalesLine.NEXT = 0;
                            END;
                          END;
                          //*******************************************************************************************************
                          //     Nachtr„glich alle anderen Daten schreiben, wenn auch wirklich Auftragszeilen vorhanden sind
                          //*******************************************************************************************************
                          IF arch_belegzeilen_vorhanden THEN BEGIN
                            Berichtstabelle.RESET;
                            Berichtstabelle.SETFILTER(Tabelle,'%1','ARCH_BELEGKOPF');
                            Berichtstabelle.SETFILTER(Index,'%1',ArchSalesHeader."No.");
                            IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
                              //Auftragskopf
                              Berichtstabelle.INIT;
                              Berichtstabelle.Tabelle := 'ARCH_BELEGKOPF';
                              Berichtstabelle.Index := ArchSalesHeader."No.";
                              Berichtstabelle.Datum := ArchSalesHeader."Order Date";
                              Berichtstabelle."Belegnr." := ArchSalesHeader."No.";
                              Berichtstabelle."Feld 2" := ArchSalesHeader."Sell-to Customer No.";
                              ArchSalesHeader.CALCFIELDS(Amount);
                              Berichtstabelle."Feld 4" := ArchSalesHeader.Amount;
                              Berichtstabelle."Feld 6" := ArchSalesHeader."Betreuer Innendienst";
                              Berichtstabelle."Feld 7" := ArchSalesHeader."Salesperson Code";
                              Berichtstabelle."Feld 8" := ArchSalesHeader.Teams;
                              Berichtstabelle."Feld 9" := ArchSalesHeader."Territory Code";
                              IF ArchSalesHeader."Currency Code" <> '' THEN
                                Berichtstabelle."Feld 12" := ArchSalesHeader."Currency Code"
                              ELSE
                                Berichtstabelle."Feld 12" := '°';
                              Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                              Berichtstabelle.User := USERID;
                              Berichtstabelle.INSERT;
                            END;
                          END;
                        UNTIL ArchSalesHeader.NEXT = 0;
                    END;
                  END;

                  Berichtstabelle_Belegkopf.COPY(Berichtstabelle,TRUE);
                  Berichtstabelle_Belegzeile.COPY(Berichtstabelle_Belegkopf,TRUE);

                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;CopyCustomer      ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle.RESET;
                               IF sort = sort::Nr THEN
                                 Berichtstabelle.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               IF sort = sort::Name THEN
                                 Berichtstabelle.SETCURRENTKEY("Feld 10",Datum,Index);
                               Berichtstabelle.SETFILTER(Tabelle,'%1','DEBITOR');
                               SETRANGE(Number,1,Berichtstabelle.COUNT);
                               ReportForNav.GetDataItem('CopyCustomer').NewPagePerRecord := NurEinProSeiteDrucken;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle.NEXT;
                                  END;
                                END;
                                 }

    { 2   ;1   ;Column  ;USERID              ;
               IncludeCaption=No;
               SourceExpr=USERID }

    { 3   ;1   ;Column  ;ReportForNavPageNo  ;
               IncludeCaption=No;
               SourceExpr=ReportForNav.PageNo }

    { 4   ;1   ;Column  ;TODAY_0_4           ;
               IncludeCaption=No;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 5   ;1   ;Column  ;Verkaufercode__verkaufer_BetreuerInnendienst__betreuer_Teams;
               IncludeCaption=No;
               SourceExpr='Verk„ufercode: '+verk„ufer+' Betreuer Innendienst: ' + betreuer + ' Teams: ' + teams + ' Gebietscode: ' + gebietscode + ' Hersteller: ' + hersteller + '  Auftragsdatum: ' + FORMAT(Startdatum) + '..' + FORMAT(Enddatum) }

    { 6   ;1   ;Column  ;Feld10_Debitor      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 10" }

    { 7   ;1   ;Column  ;Index_Debitor       ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle.Index }

    { 8   ;1   ;Column  ;Euro                ;
               IncludeCaption=No;
               SourceExpr='Euro' }

    { 9   ;1   ;Column  ;AuftragBetrag_EURO  ;
               IncludeCaption=No;
               SourceExpr=AuftragBetrag_EURO;
               AutoFormatType=1 }

    { 10  ;1   ;Column  ;USD                 ;
               IncludeCaption=No;
               SourceExpr='USD' }

    { 11  ;1   ;Column  ;AuftragBetrag_USD   ;
               IncludeCaption=No;
               SourceExpr=AuftragBetrag_USD;
               AutoFormatType=1 }

    { 12  ;1   ;Column  ;JPY                 ;
               IncludeCaption=No;
               SourceExpr='JPY' }

    { 13  ;1   ;Column  ;AuftragBetrag_JPY   ;
               IncludeCaption=No;
               SourceExpr=AuftragBetrag_JPY;
               AutoFormatType=1 }

    { 14  ;1   ;Column  ;AuftragBetrag_USD_WechselkursExchangeRateAmount;
               IncludeCaption=No;
               SourceExpr=AuftragBetrag_USD/Wechselkurs."Exchange Rate Amount";
               AutoFormatType=1 }

    { 15  ;1   ;Column  ;ExchangeRateAmount_Wechselkurs;
               DecimalPlaces=4:4;
               IncludeCaption=No;
               SourceExpr=Wechselkurs."Exchange Rate Amount" }

    { 16  ;1   ;Column  ;AuftragBetrag_JPY_WechselkursExchangeRateAmount;
               IncludeCaption=No;
               SourceExpr=AuftragBetrag_JPY/Wechselkurs."Exchange Rate Amount";
               AutoFormatType=1 }

    { 17  ;1   ;Column  ;Gesamt_AU_EK        ;
               IncludeCaption=No;
               SourceExpr=Gesamt_AU_EK }

    { 18  ;1   ;Column  ;summe1_summe2       ;
               IncludeCaption=No;
               SourceExpr=summe[1]+summe[2];
               AutoFormatType=1 }

    { 19  ;1   ;Column  ;AuftragBetragMW     ;
               IncludeCaption=No;
               SourceExpr=AuftragBetragMW;
               AutoFormatType=1 }

    { 1000000001;1;DataItem;CopyHeader       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_Belegkopf.RESET;
                               Berichtstabelle_Belegkopf.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_Belegkopf.SETFILTER(Tabelle,'%1','BELEGKOPF');
                               Berichtstabelle_Belegkopf.SETFILTER("Feld 2",'%1',Berichtstabelle.Index);
                               SETRANGE(Number,1,Berichtstabelle_Belegkopf.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_Belegkopf.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_Belegkopf.NEXT;
                                  END;
                                END;
                                 }

    { 21  ;2   ;Column  ;waehrung            ;
               IncludeCaption=No;
               SourceExpr=waehrung }

    { 22  ;2   ;Column  ;AuftragBetrag       ;
               IncludeCaption=No;
               SourceExpr=AuftragBetrag;
               AutoFormatType=1 }

    { 1000000002;2;DataItem;CopyLine         ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_Belegzeile.RESET;
                               Berichtstabelle_Belegzeile.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_Belegzeile.SETFILTER(Tabelle,'%1','BELEGZEILE');
                               Berichtstabelle_Belegzeile.SETFILTER(Index,'%1',Berichtstabelle_Belegkopf.Index);
                               SETRANGE(Number,1,Berichtstabelle_Belegzeile.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_Belegzeile.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_Belegzeile.NEXT;
                                  END;

                                  NeuerAuftrag := Berichtstabelle_Belegzeile.Index <> Auftragkopf."No.";
                                  IF NeuerAuftrag THEN
                                    Auftragkopf.GET(1,Berichtstabelle_Belegzeile.Index);
                                  IF Berichtstabelle_Belegzeile."Feld 18" <= WORKDATE THEN
                                    RckstandMenge := Berichtstabelle_Belegzeile."Feld 14"
                                  ELSE
                                    RckstandMenge := '0';
                                  AuftragBetrag := Berichtstabelle_Belegzeile."Feld 4" * Berichtstabelle_Belegzeile."Feld 5";
                                  IF NOT Betr„geDruckInMW THEN BEGIN
                                    IF Auftragkopf."Currency Code" = 'USD' THEN
                                      AuftragBetrag_USD := AuftragBetrag;
                                    IF Auftragkopf."Currency Code" = 'JPY' THEN
                                    AuftragBetrag_JPY := AuftragBetrag;
                                    IF Auftragkopf."Currency Code" = '' THEN
                                      AuftragBetrag_EURO := AuftragBetrag;
                                  END;
                                  //AuftragBetrag := ROUND("Outstanding Quantity" * "Sales Line"."Line Amount" / Quantity);
                                  AuftragBetragMW := AuftragBetrag;
                                  IF Betr„geDruckInMW THEN
                                    AuftragBetrag_EURO := AuftragBetragMW;
                                  IF Auftragkopf."Currency Code" <> '' THEN BEGIN
                                    IF Auftragkopf."Currency Factor" <> 0 THEN
                                      AuftragBetragMW :=
                                        ROUND(
                                          W„hrungWechKurs.ExchangeAmtFCYToLCY(
                                            WORKDATE,Auftragkopf."Currency Code",
                                            AuftragBetragMW,Auftragkopf."Currency Factor"));
                                    IF Betr„geDruckInMW THEN BEGIN
                                      AuftragBetrag := AuftragBetragMW;
                                      AuftragBetrag_EURO := AuftragBetragMW;
                                    END;
                                  END;
                                  waehrung := Berichtstabelle_Belegzeile."Feld 7";
                                  IF Betr„geDruckInMW = TRUE THEN
                                    waehrung := 'EUR';
                                END;
                                 }

    { 24  ;3   ;Column  ;Feld11_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 11" }

    { 25  ;3   ;Column  ;Feld16_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 16" }

    { 26  ;3   ;Column  ;waehrung2           ;
               IncludeCaption=No;
               SourceExpr=waehrung }

    { 27  ;3   ;Column  ;Feld7_Belegzeile    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 7" }

    { 28  ;3   ;Column  ;Feld13_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 13" }

    { 29  ;3   ;Column  ;Feld12_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 12" }

    { 30  ;3   ;Column  ;AuftragBetrag2      ;
               IncludeCaption=No;
               SourceExpr=AuftragBetrag;
               AutoFormatType=1 }

    { 31  ;3   ;Column  ;Feld5_Belegzeile    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 5";
               AutoFormatType=2 }

    { 32  ;3   ;Column  ;RuckstandMenge      ;
               DecimalPlaces=0:5;
               IncludeCaption=No;
               SourceExpr=RckstandMenge }

    { 33  ;3   ;Column  ;Feld4_Belegzeile    ;
               DecimalPlaces=0:0;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 4" }

    { 34  ;3   ;Column  ;Feld14_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 14" }

    { 35  ;3   ;Column  ;Datum_Belegzeile    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile.Datum }

    { 36  ;3   ;Column  ;Feld3_Belegzeile    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 3" }

    { 37  ;3   ;Column  ;Index_Belegkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf.Index }

    { 38  ;3   ;Column  ;Datum_Belegkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf.Datum }

    { 1000000006;3;Column;DC_Belegzeile      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 20" }

    { 39  ;3   ;Column  ;Feld6_Belegzeile    ;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 22" }

    { 1000000003;;DataItem;CopyArchCustomer  ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle.RESET;
                               IF sort = sort::Nr THEN
                                 Berichtstabelle.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               IF sort = sort::Name THEN
                                 Berichtstabelle.SETCURRENTKEY("Feld 10",Datum,Index);
                               Berichtstabelle.SETFILTER(Tabelle,'%1','ARCH_DEBITOR');
                               SETRANGE(Number,1,Berichtstabelle.COUNT);

                               //****************** Damit ist der Rest des Berichtes deaktiviert da arch. Auftr„ge in einem Auftragsbestand wenig Sinn ergeben!!!! ************************
                               CurrReport.BREAK;

                               ReportForNav.GetDataItem('CopyArchCustomer').NewPagePerRecord := NurEinProSeiteDrucken;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle.FIND('-');
                                    ReportForNav.NewPage;
                                  END ELSE BEGIN
                                    Berichtstabelle.NEXT;
                                  END;
                                END;
                                 }

    { 42  ;1   ;Column  ;USERID2             ;
               IncludeCaption=No;
               SourceExpr=USERID }

    { 43  ;1   ;Column  ;ReportForNavPageNo2 ;
               IncludeCaption=No;
               SourceExpr=ReportForNav.PageNo }

    { 44  ;1   ;Column  ;TODAY_0_42          ;
               IncludeCaption=No;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 45  ;1   ;Column  ;Verkaufercode__verkaufer_BetreuerInnendienst__betreuer_Team2;
               IncludeCaption=No;
               SourceExpr='Verk„ufercode: '+verk„ufer+' Betreuer Innendienst: ' + betreuer + ' Teams: ' + teams + ' Gebietscode: ' + gebietscode + '  Auftragsdatum: ' + FORMAT(Startdatum) + '..' + FORMAT(Enddatum) }

    { 46  ;1   ;Column  ;Feld10_Arch_Debitor ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 10" }

    { 47  ;1   ;Column  ;Index_Arch_Debitor  ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle.Index }

    { 48  ;1   ;Column  ;Euro7               ;
               IncludeCaption=No;
               SourceExpr='Euro' }

    { 49  ;1   ;Column  ;ArchAuftragBetrag_EURO;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetrag_EURO;
               AutoFormatType=1 }

    { 50  ;1   ;Column  ;USD2                ;
               IncludeCaption=No;
               SourceExpr='USD' }

    { 51  ;1   ;Column  ;ArchAuftragBetrag_USD;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetrag_USD;
               AutoFormatType=1 }

    { 52  ;1   ;Column  ;JPY2                ;
               IncludeCaption=No;
               SourceExpr='JPY' }

    { 53  ;1   ;Column  ;ArchAuftragBetrag_JPY;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetrag_JPY;
               AutoFormatType=1 }

    { 54  ;1   ;Column  ;ArchAuftragBetrag_USD_WechselkursExchangeRateAmount;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetrag_USD/Wechselkurs."Exchange Rate Amount";
               AutoFormatType=1 }

    { 55  ;1   ;Column  ;ExchangeRateAmount_Wechselkurs3;
               DecimalPlaces=4:4;
               IncludeCaption=No;
               SourceExpr=Wechselkurs."Exchange Rate Amount" }

    { 56  ;1   ;Column  ;ArchAuftragBetrag_JPY_WechselkursExchangeRateAmount;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetrag_JPY/Wechselkurs."Exchange Rate Amount";
               AutoFormatType=1 }

    { 57  ;1   ;Column  ;summe1_summe22      ;
               IncludeCaption=No;
               SourceExpr=summe[1]+summe[2];
               AutoFormatType=1 }

    { 58  ;1   ;Column  ;ArchAuftragBetragMW ;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetragMW;
               AutoFormatType=1 }

    { 1000000004;1;DataItem;CopyArchHeader   ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_Belegkopf.RESET;
                               Berichtstabelle_Belegkopf.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_Belegkopf.SETFILTER(Tabelle,'%1','ARCH_BELEGKOPF');
                               Berichtstabelle_Belegkopf.SETFILTER("Feld 2",'%1',Berichtstabelle.Index);
                               SETRANGE(Number,1,Berichtstabelle_Belegkopf.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_Belegkopf.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_Belegkopf.NEXT;
                                  END;
                                END;
                                 }

    { 60  ;2   ;Column  ;waehrung4           ;
               IncludeCaption=No;
               SourceExpr=waehrung }

    { 61  ;2   ;Column  ;ArchAuftragBetrag   ;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetrag;
               AutoFormatType=1 }

    { 1000000005;2;DataItem;CopyArchLine     ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_Belegzeile.RESET;
                               Berichtstabelle_Belegzeile.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_Belegzeile.SETFILTER(Tabelle,'%1','ARCH_BELEGZEILE');
                               Berichtstabelle_Belegzeile.SETFILTER(Index,'%1',Berichtstabelle_Belegkopf.Index);
                               SETRANGE(Number,1,Berichtstabelle_Belegzeile.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_Belegzeile.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_Belegzeile.NEXT;
                                  END;

                                  NeuerAuftrag := Berichtstabelle_Belegzeile.Index <> ArchAuftragkopf."No.";
                                  IF NeuerAuftrag THEN BEGIN
                                    ArchAuftragkopf.RESET;
                                    ArchAuftragkopf.SETRANGE("No.",Berichtstabelle_Belegzeile.Index);
                                    ArchAuftragkopf.SETRANGE("Document Type",ArchAuftragkopf."Document Type"::Order);
                                    ArchAuftragkopf.FINDLAST;
                                  END;
                                  ArchAuftragBetrag := Berichtstabelle_Belegzeile."Feld 4" * Berichtstabelle_Belegzeile."Feld 5";
                                  IF NOT Betr„geDruckInMW THEN BEGIN
                                    IF ArchAuftragkopf."Currency Code" = 'USD' THEN
                                      ArchAuftragBetrag_USD := ArchAuftragBetrag;
                                    IF ArchAuftragkopf."Currency Code" = 'JPY' THEN
                                    ArchAuftragBetrag_JPY := ArchAuftragBetrag;
                                    IF ArchAuftragkopf."Currency Code" = '' THEN
                                      ArchAuftragBetrag_EURO := ArchAuftragBetrag;
                                  END;
                                  ArchAuftragBetragMW := ArchAuftragBetrag;
                                  IF Betr„geDruckInMW THEN
                                    ArchAuftragBetrag_EURO := ArchAuftragBetragMW;
                                  IF ArchAuftragkopf."Currency Code" <> '' THEN BEGIN
                                    IF ArchAuftragkopf."Currency Factor" <> 0 THEN
                                      ArchAuftragBetragMW :=
                                        ROUND(
                                          W„hrungWechKurs.ExchangeAmtFCYToLCY(
                                            WORKDATE,ArchAuftragkopf."Currency Code",
                                            ArchAuftragBetragMW,ArchAuftragkopf."Currency Factor"));
                                    IF Betr„geDruckInMW THEN BEGIN
                                      ArchAuftragBetrag := ArchAuftragBetragMW;
                                      ArchAuftragBetrag_EURO := ArchAuftragBetragMW;
                                    END;
                                  END;
                                  waehrung := Berichtstabelle_Belegzeile."Feld 7";
                                  IF Betr„geDruckInMW = TRUE THEN
                                    waehrung := 'EUR'
                                END;
                                 }

    { 63  ;3   ;Column  ;Feld11_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 11" }

    { 64  ;3   ;Column  ;Feld16_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 16" }

    { 65  ;3   ;Column  ;waehrung5           ;
               IncludeCaption=No;
               SourceExpr=waehrung }

    { 66  ;3   ;Column  ;Feld7_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 7" }

    { 67  ;3   ;Column  ;Feld13_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 13" }

    { 68  ;3   ;Column  ;Feld12_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 12" }

    { 69  ;3   ;Column  ;ArchAuftragBetrag2  ;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetrag;
               AutoFormatType=1 }

    { 70  ;3   ;Column  ;Feld5_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 5";
               AutoFormatType=2 }

    { 71  ;3   ;Column  ;Feld4_Arch_Belegzeile;
               DecimalPlaces=0:0;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 4" }

    { 72  ;3   ;Column  ;Datum_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile.Datum }

    { 73  ;3   ;Column  ;Feld3_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 3" }

    { 74  ;3   ;Column  ;Index_Arch_Belegkopf;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf.Index }

    { 75  ;3   ;Column  ;Datum_Arch_Belegkopf;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf.Datum }

    { 1000000007;3;Column;DC_Arch_Belegzeile ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 20" }

    { 76  ;3   ;Column  ;Feld6_Arch_Belegzeile;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 22" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1140002;2;Field     ;
                  CaptionML=DEU=Auftragsdatum von;
                  SourceExpr=Startdatum }

      { 1140000;2;Field     ;
                  CaptionML=DEU=bis;
                  SourceExpr=Enddatum }

      { 1140029;2;Field     ;
                  CaptionML=DEU=Ohne Archiv;
                  SourceExpr=ohne_archiv;
                  Visible=FALSE }

      { 1140003;2;Field     ;
                  CaptionML=DEU=Betreuer Innendienst;
                  SourceExpr=betreuer }

      { 1140006;2;Field     ;
                  CaptionML=DEU=Verk„ufercode;
                  SourceExpr=verk„ufer }

      { 1140009;2;Field     ;
                  CaptionML=DEU=Teams;
                  SourceExpr=teams }

      { 1140011;2;Field     ;
                  CaptionML=DEU=Gebietscode;
                  SourceExpr=gebietscode }

      { 1140015;2;Field     ;
                  CaptionML=DEU=Herstellercode;
                  SourceExpr=hersteller;
                  TableRelation=Manufacturer }

      { 1140023;2;Field     ;
                  CaptionML=DEU=Zug. Lieferdatum von;
                  SourceExpr=zugesagtes_startdatum }

      { 1140025;2;Field     ;
                  CaptionML=DEU=bis;
                  SourceExpr=zugesagtes_enddatum }

      { 1140020;2;Field     ;
                  CaptionML=DEU=Betr„ge in MW anzeigen;
                  SourceExpr=Betr„geDruckInMW }

      { 1140013;2;Field     ;
                  CaptionML=DEU=Neue Seite pro Debitor;
                  SourceExpr=NurEinProSeiteDrucken }

      { 1140018;2;Field     ;
                  CaptionML=DEU=Berichtssortierung;
                  OptionCaptionML=DEU=Debitornr.,Debitorname;
                  SourceExpr=sort }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Berichtstabelle@1140000 : TEMPORARY Record 50037;
      Berichtstabelle_Belegkopf@1140012 : TEMPORARY Record 50037;
      Berichtstabelle_Belegzeile@1000000002 : TEMPORARY Record 50037;
      W„hrungWechKurs@1140022 : Record 330;
      Wechselkurs@1140025 : Record 330;
      Auftragkopf@1000000001 : Record 36;
      ArchAuftragkopf@1140037 : Record 5107;
      SalesHeader@1140002 : Record 36;
      SalesLine@1140003 : Record 37;
      ArchSalesHeader@1140029 : Record 5107;
      ArchivHeaderVersion@1000000000 : Record 5107;
      ArchSalesLine@1140030 : Record 5108;
      Quotedaten@1140013 : Record 50014;
      Startdatum@1140004 : Date;
      Enddatum@1140005 : Date;
      zugesagtes_startdatum@1140038 : Date;
      zugesagtes_enddatum@1140039 : Date;
      betreuer@1140006 : Code[40];
      verk„ufer@1140007 : Code[40];
      teams@1140008 : Code[40];
      gebietscode@1140009 : Code[40];
      hersteller@1140011 : Code[40];
      belegzeilen_vorhanden@1140010 : Boolean;
      arch_belegzeilen_vorhanden@1140036 : Boolean;
      Betr„geDruckInMW@1140014 : Boolean;
      NurEinProSeiteDrucken@1140021 : Boolean;
      NeuerAuftrag@1140017 : Boolean;
      ohne_archiv@1140040 : Boolean;
      RckstandMenge@1140015 : Text[30];
      summe@1140027 : ARRAY [3] OF Decimal;
      waehrung@1140028 : Code[10];
      AuftragBetrag@1140018 : Decimal;
      AuftragBetrag_EURO@1140026 : Decimal;
      AuftragBetrag_USD@1140023 : Decimal;
      AuftragBetrag_JPY@1140024 : Decimal;
      AuftragBetragMW@1140020 : Decimal;
      ArchAuftragBetrag@1140031 : Decimal;
      ArchAuftragBetrag_EURO@1140032 : Decimal;
      ArchAuftragBetrag_USD@1140033 : Decimal;
      ArchAuftragBetrag_JPY@1140034 : Decimal;
      ArchAuftragBetragMW@1140035 : Decimal;
      sort@1140016 : 'Nr,Name';
      counter@1140001 : Integer;
      Gesamt_AU_EK@1140041 : Decimal;
      artzeile_ek@1140042 : Decimal;
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionCopyCustomer_Header2@5010(VAR Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Debitor DO BEGIN
        ReportForNav.ShowOutput(Betr„geDruckInMW);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyCustomer_Footer7@5011(VAR Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Debitor DO BEGIN
        ReportForNav.ShowOutput(AuftragBetrag_EURO <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyCustomer_Footer8@5012(VAR Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Debitor DO BEGIN
        ReportForNav.ShowOutput(AuftragBetrag_USD <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyCustomer_Footer9@5013(VAR Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Debitor DO BEGIN
        ReportForNav.ShowOutput(AuftragBetrag_JPY <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyCustomer_Footer10@5014(VAR Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Debitor DO BEGIN
        Wechselkurs.SETFILTER(Wechselkurs."Currency Code",'%1','USD');
        Wechselkurs.FINDLAST;
        summe[1] := AuftragBetrag_USD/Wechselkurs."Exchange Rate Amount";
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyCustomer_Footer11@5015(VAR Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Debitor DO BEGIN
        Wechselkurs.SETFILTER(Wechselkurs."Currency Code",'%1','JPY');
        Wechselkurs.FINDLAST;
        summe[2] := AuftragBetrag_JPY/Wechselkurs."Exchange Rate Amount";
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyLine_Body14@5016(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        IF ReportForNav.ShowOutput(NeuerAuftrag) THEN BEGIN
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyLine_Body15@5017(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        IF ReportForNav.ShowOutput(NOT NeuerAuftrag) THEN BEGIN
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyLine_Body16@5018(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        ReportForNav.ShowOutput("Feld 6" <> '');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionNewPage_Body17@5019(VAR NewPage@1000000000 : Record 50037);
    BEGIN
      WITH NewPage DO BEGIN
        ReportForNav.NewPageWithoutTransportTotals;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchCustomer_Header19@5020(VAR Arch_Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Debitor DO BEGIN
        ReportForNav.ShowOutput(Betr„geDruckInMW);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchCustomer_Footer24@5021(VAR Arch_Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Debitor DO BEGIN
        ReportForNav.ShowOutput(ArchAuftragBetrag_EURO <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchCustomer_Footer25@5022(VAR Arch_Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Debitor DO BEGIN
        ReportForNav.ShowOutput(ArchAuftragBetrag_USD <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchCustomer_Footer26@5023(VAR Arch_Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Debitor DO BEGIN
        ReportForNav.ShowOutput(ArchAuftragBetrag_JPY <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchCustomer_Footer27@5024(VAR Arch_Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Debitor DO BEGIN
        Wechselkurs.SETFILTER(Wechselkurs."Currency Code",'%1','USD');
        Wechselkurs.FINDLAST;
        summe[1] := ArchAuftragBetrag_USD/Wechselkurs."Exchange Rate Amount";
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchCustomer_Footer28@5025(VAR Arch_Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Debitor DO BEGIN
        Wechselkurs.SETFILTER(Wechselkurs."Currency Code",'%1','JPY');
        Wechselkurs.FINDLAST;
        summe[2] := ArchAuftragBetrag_JPY/Wechselkurs."Exchange Rate Amount";
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchLine_Body31@5026(VAR Arch_Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Belegzeile DO BEGIN
        ReportForNav.ShowOutput(NeuerAuftrag);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchLine_Body32@5027(VAR Arch_Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Belegzeile DO BEGIN
        ReportForNav.ShowOutput(NOT NeuerAuftrag);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchLine_Body33@5028(VAR Arch_Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Belegzeile DO BEGIN
        ReportForNav.ShowOutput("Feld 6" <> '');
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'CopyCustomer': CASE SectionId OF
          'Header2': OnPreSectionCopyCustomer_Header2(Berichtstabelle);
          'Footer7': OnPreSectionCopyCustomer_Footer7(Berichtstabelle);
          'Footer8': OnPreSectionCopyCustomer_Footer8(Berichtstabelle);
          'Footer9': OnPreSectionCopyCustomer_Footer9(Berichtstabelle);
          'Footer10': OnPreSectionCopyCustomer_Footer10(Berichtstabelle);
          'Footer11': OnPreSectionCopyCustomer_Footer11(Berichtstabelle);
        END;
        'CopyLine': CASE SectionId OF
          'Body14': OnPreSectionCopyLine_Body14(Berichtstabelle_Belegzeile);
          'Body15': OnPreSectionCopyLine_Body15(Berichtstabelle_Belegzeile);
          'Body16': OnPreSectionCopyLine_Body16(Berichtstabelle_Belegzeile);
        END;
        'CopyArchCustomer': CASE SectionId OF
          'Header19': OnPreSectionCopyArchCustomer_Header19(Berichtstabelle);
          'Footer24': OnPreSectionCopyArchCustomer_Footer24(Berichtstabelle);
          'Footer25': OnPreSectionCopyArchCustomer_Footer25(Berichtstabelle);
          'Footer26': OnPreSectionCopyArchCustomer_Footer26(Berichtstabelle);
          'Footer27': OnPreSectionCopyArchCustomer_Footer27(Berichtstabelle);
          'Footer28': OnPreSectionCopyArchCustomer_Footer28(Berichtstabelle);
        END;
        'CopyArchLine': CASE SectionId OF
          'Body31': OnPreSectionCopyArchLine_Body31(Berichtstabelle_Belegzeile);
          'Body32': OnPreSectionCopyArchLine_Body32(Berichtstabelle_Belegzeile);
          'Body33': OnPreSectionCopyArchLine_Body33(Berichtstabelle_Belegzeile);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
      ForNavOperation@1000000009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'CopyCustomer': WITH CopyCustomer DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,AuftragBetrag);
                ReportForNav.AddTotal(DataItemId,1,AuftragBetragMW);
                ReportForNav.AddTotal(DataItemId,2,AuftragBetrag_USD);
                ReportForNav.AddTotal(DataItemId,3,AuftragBetrag_JPY);
                ReportForNav.AddTotal(DataItemId,4,AuftragBetragMW);
                ReportForNav.AddTotal(DataItemId,5,AuftragBetrag_USD);
                ReportForNav.AddTotal(DataItemId,6,AuftragBetrag_JPY);
                ReportForNav.AddTotal(DataItemId,7,AuftragBetrag_EURO);
              END;
           'Restore': BEGIN
                 AuftragBetrag := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 AuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 AuftragBetrag_USD := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 AuftragBetrag_JPY := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 AuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
                 AuftragBetrag_USD := ReportForNav.RestoreTotal(DataItemId,5,GroupTotalFieldNo);
                 AuftragBetrag_JPY := ReportForNav.RestoreTotal(DataItemId,6,GroupTotalFieldNo);
                 AuftragBetrag_EURO := ReportForNav.RestoreTotal(DataItemId,7,GroupTotalFieldNo);
              END;
        END;  'CopyHeader': WITH CopyHeader DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,AuftragBetrag);
                ReportForNav.AddTotal(DataItemId,1,AuftragBetragMW);
                ReportForNav.AddTotal(DataItemId,2,AuftragBetrag_USD);
                ReportForNav.AddTotal(DataItemId,3,AuftragBetrag_JPY);
                ReportForNav.AddTotal(DataItemId,4,AuftragBetrag_EURO);
              END;
           'Restore': BEGIN
                 AuftragBetrag := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 AuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 AuftragBetrag_USD := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 AuftragBetrag_JPY := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 AuftragBetrag_EURO := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
              END;
        END;  'CopyLine': WITH CopyLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,AuftragBetrag);
                ReportForNav.AddTotal(DataItemId,1,AuftragBetragMW);
                ReportForNav.AddTotal(DataItemId,2,AuftragBetrag_USD);
                ReportForNav.AddTotal(DataItemId,3,AuftragBetrag_JPY);
                ReportForNav.AddTotal(DataItemId,4,AuftragBetrag_EURO);
              END;
           'Restore': BEGIN
                 AuftragBetrag := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 AuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 AuftragBetrag_USD := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 AuftragBetrag_JPY := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 AuftragBetrag_EURO := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
              END;
        END;  'CopyArchCustomer': WITH CopyArchCustomer DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,ArchAuftragBetrag);
                ReportForNav.AddTotal(DataItemId,1,ArchAuftragBetragMW);
                ReportForNav.AddTotal(DataItemId,2,ArchAuftragBetrag_USD);
                ReportForNav.AddTotal(DataItemId,3,ArchAuftragBetrag_JPY);
                ReportForNav.AddTotal(DataItemId,4,ArchAuftragBetrag_EURO);
              END;
           'Restore': BEGIN
                 ArchAuftragBetrag := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 ArchAuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 ArchAuftragBetrag_USD := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 ArchAuftragBetrag_JPY := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 ArchAuftragBetrag_EURO := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
              END;
        END;  'CopyArchHeader': WITH CopyArchHeader DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,ArchAuftragBetrag);
                ReportForNav.AddTotal(DataItemId,1,ArchAuftragBetragMW);
                ReportForNav.AddTotal(DataItemId,2,ArchAuftragBetrag_USD);
                ReportForNav.AddTotal(DataItemId,3,ArchAuftragBetrag_JPY);
                ReportForNav.AddTotal(DataItemId,4,ArchAuftragBetrag_EURO);
              END;
           'Restore': BEGIN
                 ArchAuftragBetrag := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 ArchAuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 ArchAuftragBetrag_USD := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 ArchAuftragBetrag_JPY := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 ArchAuftragBetrag_EURO := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
              END;
        END;  'CopyArchLine': WITH CopyArchLine DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,ArchAuftragBetrag);
                ReportForNav.AddTotal(DataItemId,1,ArchAuftragBetragMW);
                ReportForNav.AddTotal(DataItemId,2,ArchAuftragBetrag_USD);
                ReportForNav.AddTotal(DataItemId,3,ArchAuftragBetrag_JPY);
                ReportForNav.AddTotal(DataItemId,4,ArchAuftragBetrag_EURO);
              END;
           'Restore': BEGIN
                 ArchAuftragBetrag := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 ArchAuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 ArchAuftragBetrag_USD := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 ArchAuftragBetrag_JPY := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 ArchAuftragBetrag_EURO := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      ******************************************
      TOPAS 14.08.17 ST
      In Arch_Debitor - OnPreDataItem() wurde ein CurrReport.BREAK eingebaut, damit die Auftragsarchive nicht mehr angezeigt werden
      u.a. weil die Archive verschiedene Versionen enthalten (wurde nun aber bedacht) und der Bericht eigentlich den Auftragsbestand
      und nicht den Auftragseingang zeigen soll
      TOPAS 18.01.18 ST
      Umstellung der Berichtstabellen Records auf Temporary = YES, damit stabiler und User k”nnen gleichzeitig ohne Verz”gerung den Bericht abrufen
      ******************************************
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>oxABAN1dbXPcNpL+flX3H1i62nNclscEwFcn2i3ZkhPHtuy1/HKprZRqLFHSnEcz2hmOE+XD/Zr8
jP3mP3YAQXJIsBtsDqmXtaoSzxAkB3gA9NPdALp/+NvvF1PnS7JYTuaznS02crecZHY8P5nMzna2
Vunpw2jrb3/9z//44X/SxfhtcjlfpMuX46v5Kj1MFpPxdPJHsnDWHz+UL/JGfOSrt9UubTkH44tk
Z+vd6ze7h87u6lS+9Wz5KVmm49nJlvN0PksX8+m7q0t5z17yZf/3y0WyXI4qPz56/7zylW87yG1f
1M9tF7/u7DhFjbadp6tpulok8tosWclHptvOm9Wn6eT4RXL1bv45UXefhMfjKIm4G556iefKduxN
lpfT8ZW1/vmPP5svDsZfyoYHIwnriDPP33Jef/rf5Dg9mO9s+a4brS/Y3vpskkxPPiafJMxfJsfJ
+8V0Z+s8TS8fP3p0sPvhcP/th4fcZcHoN/55lM4vx8vRSfI4dL3o0d7VbHwxOV7K22L30eu9cTp+
9HR+cTmeXX13L/u1e/e3nDfjs+SnZHJ2nu5s8Th09ZWPk5P0XF5gqvGvxouzyWwpOzGSALLsP/k/
zy3a/H42kU+/S2bp+fL16e6ryXQ6uUjSZKFedpksXkxmJztbu57E8XIi3+rLT89kb8trauxsO+Fl
uiXHmeP88EQ2epl9lF+ep8kFywfN0/nl1dPVMp1fqNfWxopGXLVPPfBED6ZFMk6Td/N0PJUVz1F9
kqj/b9e+vfpY/370/nDPuPLzm1/6P3O0//7tawlAXssP4wXUrqL43fjTVI0J9Q939R8PjPIPk+S3
na3D12/fPT/48buD1cWnZHHf+fjT/tv9/NvOs+cv3+2//e6/z9Lv3fv3VX/989lkKnvmp2SsZvmr
lztb/6dmzn8dvH/5cst5LvuJucXfVt4RRr9U+uZtcrqzJcD+UL+QLHRv6KbqK6w6Cg7l8JfTxCh/
s5jM0tezfSmZrtRo3NlKF6tky9Hj9JmsIotGXM4hwbYqdZK1yuuxrF2t19YrqqOr+S75PX0y/50x
Oc9dD2xJfousrZRy8teF540C+ecH2yIeeUx+9GStX86Px6oxz6bzcaokXuiOhPwL5fiORpH6VG26
6srDJM3mt67Qezmbn+9tOer31t9+mi/+2J1OzqQseauanwnVNL/yZJ7KkaMfyS5dJGpa6cv6dgMK
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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

