OBJECT Report 50085 TOPAS Auftragsbestand
{
  OBJECT-PROPERTIES
  {
    Date=09.10.19;
    Time=15:01:40;
    Modified=Yes;
    Version List=TOPAS, BT šbergabe Fkt.! ,FORNAV3.1.0.1460/1460;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                               ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  //*******************************************************************************************************
                  //                                 Akt. Auftr„ge werden durchsucht
                  //*******************************************************************************************************

                  SalesHeader.RESET;
                  IF (Startdatum <> 0D) AND (Enddatum = 0D) THEN
                    SalesHeader.SETFILTER("Order Date",'>=%1',Startdatum);
                  IF (Startdatum <> 0D) AND (Enddatum <> 0D) THEN
                    SalesHeader.SETFILTER("Order Date",'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum = 0D) AND (Enddatum <> 0D) THEN
                    SalesHeader.SETFILTER("Order Date",'<=%1',Enddatum);
                  SalesHeader.SETFILTER("Betreuer Innendienst",betreuer);
                  SalesHeader.SETFILTER("Salesperson Code",verk„ufer);
                  SalesHeader.SETFILTER(Teams,teams);
                  SalesHeader.SETFILTER("Territory Code",gebietscode);
                  SalesHeader.SETFILTER("Document Type",'%1',SalesHeader."Document Type"::Order);
                  IF SalesHeader.FIND('-') THEN
                    REPEAT
                      belegzeilen_vorhanden := FALSE;
                      SalesLine.RESET;
                      SalesLine.SETFILTER("Document No.",SalesHeader."No.");
                      SalesLine.SETFILTER(Type,'%1',SalesLine.Type::Item);
                      SalesLine.SETFILTER("Outstanding Quantity",'>%1',0);
                      SalesLine.SETFILTER("Manufacturer Code",hersteller);
                      IF (zugesagtes_startdatum <> 0D) AND (zugesagtes_enddatum = 0D) THEN
                        SalesLine.SETFILTER("Promised Delivery Date",'>=%1',zugesagtes_startdatum);
                      IF (zugesagtes_startdatum <> 0D) AND (zugesagtes_enddatum <> 0D) THEN
                        SalesLine.SETFILTER("Promised Delivery Date",'>=%1&<=%2',zugesagtes_startdatum,zugesagtes_enddatum);
                      IF (zugesagtes_startdatum = 0D) AND (zugesagtes_enddatum <> 0D) THEN
                        SalesLine.SETFILTER("Promised Delivery Date",'<=%1',zugesagtes_enddatum);
                      IF SalesLine.FINDFIRST THEN BEGIN
                        belegzeilen_vorhanden := TRUE;
                        Berichtstabelle.RESET;
                        Berichtstabelle.SETFILTER(Tabelle,'%1','DEBITOR');
                        Berichtstabelle.SETFILTER(Index,'%1',SalesHeader."Sell-to Customer No.");
                        IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
                          //*******************************************************************************************************
                          //                                     Debitor Daten schreiben
                          //*******************************************************************************************************
                          Berichtstabelle.INIT;
                          Berichtstabelle.Tabelle := 'DEBITOR';
                          Berichtstabelle.Index := SalesHeader."Sell-to Customer No.";
                          Berichtstabelle."Feld 10" := SalesHeader."Sell-to Customer Name";
                          Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                          Berichtstabelle.User := USERID;
                          Berichtstabelle.INSERT;
                        END;
                        REPEAT
                          //*******************************************************************************************************
                          //                                      Auftragszeilen schreiben
                          //*******************************************************************************************************
                          Berichtstabelle.INIT;
                          Berichtstabelle.Tabelle := 'BELEGZEILE';
                          Berichtstabelle.Index := SalesLine."Document No.";
                          Berichtstabelle.Datum := SalesLine."Promised Delivery Date";
                          Berichtstabelle."Belegnr." := SalesLine."Document No.";
                          Berichtstabelle."Zeilennr." := SalesLine."Line No.";
                          Berichtstabelle."Feld 3" := SalesLine."Artikelnr. 2";
                          Berichtstabelle."Feld 4" := SalesLine."Outstanding Quantity";
                          Berichtstabelle."Feld 5" := SalesLine."Unit Price";
                          IF Quotedaten.GET(SalesLine."Quotenr.") THEN
                            Berichtstabelle."Feld 6" := Quotedaten."Quotenr. Hersteller";
                          IF SalesHeader."Currency Code" = '' THEN
                            Berichtstabelle."Feld 7" := '°'
                          ELSE
                            Berichtstabelle."Feld 7" := SalesHeader."Currency Code";
                          Berichtstabelle."Feld 10" := FORMAT(SalesLine."Outstanding Quantity" * SalesLine."Unit Price");
                          Berichtstabelle."Feld 11" := FORMAT(SalesLine."Requested Delivery Date");
                          Berichtstabelle."Feld 12" := FORMAT(ROUND(SalesLine."Profit %",0.01));
                          Berichtstabelle."Feld 13" := FORMAT(ROUND(SalesLine."Unit Cost (LCY)",0.01));
                            Berichtstabelle."Feld 14" := FORMAT(SalesLine.Quantity);
                          Berichtstabelle."Feld 15" := FORMAT(RckstandMenge);
                          Berichtstabelle."Feld 16" := FORMAT(SalesHeader."Currency Factor");
                          Berichtstabelle."Feld 18" := SalesLine."Shipment Date";
                          Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                          Berichtstabelle.User := USERID;
                          Berichtstabelle.INSERT;
                        UNTIL SalesLine.NEXT = 0;
                      END;
                      //*******************************************************************************************************
                      //     Nachtr„glich alle anderen Daten schreiben, wenn auch wirklich Auftragszeilen vorhanden sind
                      //*******************************************************************************************************
                      IF belegzeilen_vorhanden THEN BEGIN
                        //Auftragskopf
                        Berichtstabelle.INIT;
                        Berichtstabelle.Tabelle := 'BELEGKOPF';
                        Berichtstabelle.Index := SalesHeader."No.";
                        Berichtstabelle.Datum := SalesHeader."Order Date";
                        Berichtstabelle."Belegnr." := SalesHeader."No.";
                        Berichtstabelle."Feld 2" := SalesHeader."Sell-to Customer No.";
                        SalesHeader.CALCFIELDS(Amount);
                        Berichtstabelle."Feld 4" := SalesHeader.Amount;
                        Berichtstabelle."Feld 6" := SalesHeader."Betreuer Innendienst";
                        Berichtstabelle."Feld 7" := SalesHeader."Salesperson Code";
                        Berichtstabelle."Feld 8" := SalesHeader.Teams;
                        Berichtstabelle."Feld 9" := SalesHeader."Territory Code";
                        IF SalesHeader."Currency Code" <> '' THEN
                          Berichtstabelle."Feld 12" := SalesHeader."Currency Code"
                        ELSE
                          Berichtstabelle."Feld 12" := '°';
                        Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                        Berichtstabelle.User := USERID;
                        Berichtstabelle.INSERT;
                      END;
                    UNTIL SalesHeader.NEXT = 0;

                  IF (zugesagtes_startdatum = 0D) AND (zugesagtes_enddatum = 0D) THEN BEGIN
                    //*******************************************************************************************************
                    //                                 Archivierte Auftr„ge werden durchsucht
                    //*******************************************************************************************************
                    IF ohne_archiv = FALSE THEN BEGIN
                      ArchSalesHeader.RESET;
                      IF (Startdatum <> 0D) AND (Enddatum = 0D) THEN
                        ArchSalesHeader.SETFILTER("Order Date",'>=%1',Startdatum);
                      IF (Startdatum <> 0D) AND (Enddatum <> 0D) THEN
                        ArchSalesHeader.SETFILTER("Order Date",'>=%1&<=%2',Startdatum,Enddatum);
                      IF (Startdatum = 0D) AND (Enddatum <> 0D) THEN
                        ArchSalesHeader.SETFILTER("Order Date",'<=%1',Enddatum);
                      ArchSalesHeader.SETFILTER("Betreuer Innendienst",betreuer);
                      ArchSalesHeader.SETFILTER("Salesperson Code",verk„ufer);
                      ArchSalesHeader.SETFILTER(Teams,teams);
                      ArchSalesHeader.SETFILTER("Territory Code",gebietscode);
                      ArchSalesHeader.SETFILTER("Document Type",'%1',ArchSalesHeader."Document Type"::Order);
                      IF ArchSalesHeader.FIND('-') THEN
                        REPEAT
                          ArchivHeaderVersion.RESET;
                          ArchivHeaderVersion.SETRANGE("No.",ArchSalesHeader."No.");
                          ArchivHeaderVersion.FINDLAST;
                          //ArchSalesHeader.SETFILTER("Version No.",'%1',ArchivHeaderVersion."Version No.");
                          //ArchSalesHeader.FINDLAST;
                          arch_belegzeilen_vorhanden := FALSE;
                          ArchSalesLine.RESET;
                          ArchSalesLine.SETFILTER("Document No.",ArchSalesHeader."No.");
                          ArchSalesLine.SETFILTER(Type,'%1',ArchSalesLine.Type::Item);
                          //ArchSalesLine.SETFILTER("Outstanding Quantity",'>%1',0);
                          ArchSalesLine.SETFILTER("Qty. to Invoice",'>%1',0);
                          ArchSalesLine.SETFILTER("Manufacturer Code",hersteller);
                          ArchSalesLine.SETFILTER("Version No.",'%1',ArchivHeaderVersion."Version No.");
                          IF ArchSalesLine.FINDFIRST THEN BEGIN
                            Berichtstabelle.RESET;
                            Berichtstabelle.SETFILTER(Tabelle,'%1','ARCH_BELEGZEILE');
                            Berichtstabelle.SETFILTER(Index,'%1',ArchSalesLine."Document No.");
                            Berichtstabelle.SETFILTER("Zeilennr.",'%1',ArchSalesLine."Line No.");
                            IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
                              arch_belegzeilen_vorhanden := TRUE;
                              Berichtstabelle.RESET;
                              Berichtstabelle.SETFILTER(Tabelle,'%1','ARCH_DEBITOR');
                              Berichtstabelle.SETFILTER(Index,'%1',ArchSalesHeader."Sell-to Customer No.");
                              IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
                                //*******************************************************************************************************
                                //                                     Debitor Daten schreiben
                                //*******************************************************************************************************
                                Berichtstabelle.INIT;
                                Berichtstabelle.Tabelle := 'ARCH_DEBITOR';
                                Berichtstabelle.Index := ArchSalesHeader."Sell-to Customer No.";
                                Berichtstabelle."Feld 10" := ArchSalesHeader."Sell-to Customer Name";
                                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                                Berichtstabelle.User := USERID;
                                Berichtstabelle.INSERT;
                              END;
                              REPEAT
                                //*******************************************************************************************************
                                //                                 Archivierte Auftragszeilen schreiben
                                //*******************************************************************************************************
                                Berichtstabelle.INIT;
                                Berichtstabelle.Tabelle := 'ARCH_BELEGZEILE';
                                Berichtstabelle.Index := ArchSalesLine."Document No.";
                                Berichtstabelle.Datum := ArchSalesLine."Promised Delivery Date";
                                Berichtstabelle."Belegnr." := ArchSalesLine."Document No.";
                                Berichtstabelle."Zeilennr." := ArchSalesLine."Line No.";
                                Berichtstabelle."Feld 3" := ArchSalesLine."Artikelnr. 2";
                                Berichtstabelle."Feld 4" := ArchSalesLine."Qty. to Invoice";
                                Berichtstabelle."Feld 5" := ArchSalesLine."Unit Price";
                                IF Quotedaten.GET(ArchSalesLine."Quotenr.") THEN
                                  Berichtstabelle."Feld 6" := Quotedaten."Quotenr. Hersteller";
                                IF ArchSalesHeader."Currency Code" = '' THEN
                                  Berichtstabelle."Feld 7" := '°'
                                ELSE
                                  Berichtstabelle."Feld 7" := ArchSalesHeader."Currency Code";
                                Berichtstabelle."Feld 10" := FORMAT(ArchSalesLine."Qty. to Invoice" * ArchSalesLine."Unit Price");
                                Berichtstabelle."Feld 11" := FORMAT(ArchSalesLine."Requested Delivery Date");
                                Berichtstabelle."Feld 12" := FORMAT(ROUND(ArchSalesLine."Profit %",0.01));
                                Berichtstabelle."Feld 13" := FORMAT(ROUND(ArchSalesLine."Unit Cost (LCY)",0.01));
                                Berichtstabelle."Feld 16" := FORMAT(ArchSalesHeader."Currency Factor");
                                Berichtstabelle."Feld 18" := ArchSalesLine."Shipment Date";
                                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                                Berichtstabelle.User := USERID;
                                Berichtstabelle.INSERT;
                              UNTIL ArchSalesLine.NEXT = 0;
                            END;
                          END;
                          //*******************************************************************************************************
                          //     Nachtr„glich alle anderen Daten schreiben, wenn auch wirklich Auftragszeilen vorhanden sind
                          //*******************************************************************************************************
                          IF arch_belegzeilen_vorhanden THEN BEGIN
                            Berichtstabelle.RESET;
                            Berichtstabelle.SETFILTER(Tabelle,'%1','ARCH_BELEGKOPF');
                            Berichtstabelle.SETFILTER(Index,'%1',ArchSalesHeader."No.");
                            IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
                              //Auftragskopf
                              Berichtstabelle.INIT;
                              Berichtstabelle.Tabelle := 'ARCH_BELEGKOPF';
                              Berichtstabelle.Index := ArchSalesHeader."No.";
                              Berichtstabelle.Datum := ArchSalesHeader."Order Date";
                              Berichtstabelle."Belegnr." := ArchSalesHeader."No.";
                              Berichtstabelle."Feld 2" := ArchSalesHeader."Sell-to Customer No.";
                              ArchSalesHeader.CALCFIELDS(Amount);
                              Berichtstabelle."Feld 4" := ArchSalesHeader.Amount;
                              Berichtstabelle."Feld 6" := ArchSalesHeader."Betreuer Innendienst";
                              Berichtstabelle."Feld 7" := ArchSalesHeader."Salesperson Code";
                              Berichtstabelle."Feld 8" := ArchSalesHeader.Teams;
                              Berichtstabelle."Feld 9" := ArchSalesHeader."Territory Code";
                              IF ArchSalesHeader."Currency Code" <> '' THEN
                                Berichtstabelle."Feld 12" := ArchSalesHeader."Currency Code"
                              ELSE
                                Berichtstabelle."Feld 12" := '°';
                              Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                              Berichtstabelle.User := USERID;
                              Berichtstabelle.INSERT;
                            END;
                          END;
                        UNTIL ArchSalesHeader.NEXT = 0;
                    END;
                  END;

                  Berichtstabelle_Belegkopf.COPY(Berichtstabelle,TRUE);
                  Berichtstabelle_Belegzeile.COPY(Berichtstabelle_Belegkopf,TRUE);

                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;CopyCustomer      ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle.RESET;
                               IF sort = sort::Nr THEN
                                 Berichtstabelle.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               IF sort = sort::Name THEN
                                 Berichtstabelle.SETCURRENTKEY("Feld 10",Datum,Index);
                               Berichtstabelle.SETFILTER(Tabelle,'%1','DEBITOR');
                               SETRANGE(Number,1,Berichtstabelle.COUNT);
                               ReportForNav.GetDataItem('CopyCustomer').NewPagePerRecord := NurEinProSeiteDrucken;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle.NEXT;
                                  END;
                                END;
                                 }

    { 2   ;1   ;Column  ;USERID              ;
               IncludeCaption=No;
               SourceExpr=USERID }

    { 3   ;1   ;Column  ;ReportForNavPageNo  ;
               IncludeCaption=No;
               SourceExpr=ReportForNav.PageNo }

    { 4   ;1   ;Column  ;TODAY_0_4           ;
               IncludeCaption=No;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 5   ;1   ;Column  ;Verkaufercode__verkaufer_BetreuerInnendienst__betreuer_Teams;
               IncludeCaption=No;
               SourceExpr='Verk„ufercode: '+verk„ufer+' Betreuer Innendienst: ' + betreuer + ' Teams: ' + teams + ' Gebietscode: ' + gebietscode + ' Hersteller: ' + hersteller + '  Auftragsdatum: ' + FORMAT(Startdatum) + '..' + FORMAT(Enddatum) }

    { 6   ;1   ;Column  ;Feld10_Debitor      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 10" }

    { 7   ;1   ;Column  ;Index_Debitor       ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle.Index }

    { 8   ;1   ;Column  ;Euro                ;
               IncludeCaption=No;
               SourceExpr='Euro' }

    { 9   ;1   ;Column  ;AuftragBetrag_EURO  ;
               IncludeCaption=No;
               SourceExpr=AuftragBetrag_EURO;
               AutoFormatType=1 }

    { 10  ;1   ;Column  ;USD                 ;
               IncludeCaption=No;
               SourceExpr='USD' }

    { 11  ;1   ;Column  ;AuftragBetrag_USD   ;
               IncludeCaption=No;
               SourceExpr=AuftragBetrag_USD;
               AutoFormatType=1 }

    { 12  ;1   ;Column  ;JPY                 ;
               IncludeCaption=No;
               SourceExpr='JPY' }

    { 13  ;1   ;Column  ;AuftragBetrag_JPY   ;
               IncludeCaption=No;
               SourceExpr=AuftragBetrag_JPY;
               AutoFormatType=1 }

    { 14  ;1   ;Column  ;AuftragBetrag_USD_WechselkursExchangeRateAmount;
               IncludeCaption=No;
               SourceExpr=AuftragBetrag_USD/Wechselkurs."Exchange Rate Amount";
               AutoFormatType=1 }

    { 15  ;1   ;Column  ;ExchangeRateAmount_Wechselkurs;
               DecimalPlaces=4:4;
               IncludeCaption=No;
               SourceExpr=Wechselkurs."Exchange Rate Amount" }

    { 16  ;1   ;Column  ;AuftragBetrag_JPY_WechselkursExchangeRateAmount;
               IncludeCaption=No;
               SourceExpr=AuftragBetrag_JPY/Wechselkurs."Exchange Rate Amount";
               AutoFormatType=1 }

    { 17  ;1   ;Column  ;Gesamt_AU_EK        ;
               IncludeCaption=No;
               SourceExpr=Gesamt_AU_EK }

    { 18  ;1   ;Column  ;summe1_summe2       ;
               IncludeCaption=No;
               SourceExpr=summe[1]+summe[2];
               AutoFormatType=1 }

    { 19  ;1   ;Column  ;AuftragBetragMW     ;
               IncludeCaption=No;
               SourceExpr=AuftragBetragMW;
               AutoFormatType=1 }

    { 1000000001;1;DataItem;CopyHeader       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_Belegkopf.RESET;
                               Berichtstabelle_Belegkopf.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_Belegkopf.SETFILTER(Tabelle,'%1','BELEGKOPF');
                               Berichtstabelle_Belegkopf.SETFILTER("Feld 2",'%1',Berichtstabelle.Index);
                               SETRANGE(Number,1,Berichtstabelle_Belegkopf.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_Belegkopf.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_Belegkopf.NEXT;
                                  END;
                                END;
                                 }

    { 21  ;2   ;Column  ;waehrung            ;
               IncludeCaption=No;
               SourceExpr=waehrung }

    { 22  ;2   ;Column  ;AuftragBetrag       ;
               IncludeCaption=No;
               SourceExpr=AuftragBetrag;
               AutoFormatType=1 }

    { 1000000002;2;DataItem;CopyLine         ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_Belegzeile.RESET;
                               Berichtstabelle_Belegzeile.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_Belegzeile.SETFILTER(Tabelle,'%1','BELEGZEILE');
                               Berichtstabelle_Belegzeile.SETFILTER(Index,'%1',Berichtstabelle_Belegkopf.Index);
                               SETRANGE(Number,1,Berichtstabelle_Belegzeile.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_Belegzeile.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_Belegzeile.NEXT;
                                  END;

                                  NeuerAuftrag := Berichtstabelle_Belegzeile.Index <> Auftragkopf."No.";
                                  IF NeuerAuftrag THEN
                                    Auftragkopf.GET(1,Berichtstabelle_Belegzeile.Index);
                                  IF Berichtstabelle_Belegzeile."Feld 18" <= WORKDATE THEN
                                    RckstandMenge := Berichtstabelle_Belegzeile."Feld 14"
                                  ELSE
                                    RckstandMenge := '0';
                                  AuftragBetrag := Berichtstabelle_Belegzeile."Feld 4" * Berichtstabelle_Belegzeile."Feld 5";
                                  IF NOT Betr„geDruckInMW THEN BEGIN
                                    IF Auftragkopf."Currency Code" = 'USD' THEN
                                      AuftragBetrag_USD := AuftragBetrag;
                                    IF Auftragkopf."Currency Code" = 'JPY' THEN
                                    AuftragBetrag_JPY := AuftragBetrag;
                                    IF Auftragkopf."Currency Code" = '' THEN
                                      AuftragBetrag_EURO := AuftragBetrag;
                                  END;
                                  //AuftragBetrag := ROUND("Outstanding Quantity" * "Sales Line"."Line Amount" / Quantity);
                                  AuftragBetragMW := AuftragBetrag;
                                  IF Betr„geDruckInMW THEN
                                    AuftragBetrag_EURO := AuftragBetragMW;
                                  IF Auftragkopf."Currency Code" <> '' THEN BEGIN
                                    IF Auftragkopf."Currency Factor" <> 0 THEN
                                      AuftragBetragMW :=
                                        ROUND(
                                          W„hrungWechKurs.ExchangeAmtFCYToLCY(
                                            WORKDATE,Auftragkopf."Currency Code",
                                            AuftragBetragMW,Auftragkopf."Currency Factor"));
                                    IF Betr„geDruckInMW THEN BEGIN
                                      AuftragBetrag := AuftragBetragMW;
                                      AuftragBetrag_EURO := AuftragBetragMW;
                                    END;
                                  END;
                                  waehrung := Berichtstabelle_Belegzeile."Feld 7";
                                  IF Betr„geDruckInMW = TRUE THEN
                                    waehrung := 'EUR';
                                END;
                                 }

    { 24  ;3   ;Column  ;Feld11_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 11" }

    { 25  ;3   ;Column  ;Feld16_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 16" }

    { 26  ;3   ;Column  ;waehrung2           ;
               IncludeCaption=No;
               SourceExpr=waehrung }

    { 27  ;3   ;Column  ;Feld7_Belegzeile    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 7" }

    { 28  ;3   ;Column  ;Feld13_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 13" }

    { 29  ;3   ;Column  ;Feld12_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 12" }

    { 30  ;3   ;Column  ;AuftragBetrag2      ;
               IncludeCaption=No;
               SourceExpr=AuftragBetrag;
               AutoFormatType=1 }

    { 31  ;3   ;Column  ;Feld5_Belegzeile    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 5";
               AutoFormatType=2 }

    { 32  ;3   ;Column  ;RuckstandMenge      ;
               DecimalPlaces=0:5;
               IncludeCaption=No;
               SourceExpr=RckstandMenge }

    { 33  ;3   ;Column  ;Feld4_Belegzeile    ;
               DecimalPlaces=0:0;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 4" }

    { 34  ;3   ;Column  ;Feld14_Belegzeile   ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 14" }

    { 35  ;3   ;Column  ;Datum_Belegzeile    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile.Datum }

    { 36  ;3   ;Column  ;Feld3_Belegzeile    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 3" }

    { 37  ;3   ;Column  ;Index_Belegkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf.Index }

    { 38  ;3   ;Column  ;Datum_Belegkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf.Datum }

    { 39  ;3   ;Column  ;Feld6_Belegzeile    ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 6" }

    { 1000000003;;DataItem;CopyArchCustomer  ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle.RESET;
                               IF sort = sort::Nr THEN
                                 Berichtstabelle.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               IF sort = sort::Name THEN
                                 Berichtstabelle.SETCURRENTKEY("Feld 10",Datum,Index);
                               Berichtstabelle.SETFILTER(Tabelle,'%1','ARCH_DEBITOR');
                               SETRANGE(Number,1,Berichtstabelle.COUNT);

                               //****************** Damit ist der Rest des Berichtes deaktiviert da arch. Auftr„ge in einem Auftragsbestand wenig Sinn ergeben!!!! ************************
                               CurrReport.BREAK;

                               ReportForNav.GetDataItem('CopyArchCustomer').NewPagePerRecord := NurEinProSeiteDrucken;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle.FIND('-');
                                    ReportForNav.NewPage;
                                  END ELSE BEGIN
                                    Berichtstabelle.NEXT;
                                  END;
                                END;
                                 }

    { 42  ;1   ;Column  ;USERID2             ;
               IncludeCaption=No;
               SourceExpr=USERID }

    { 43  ;1   ;Column  ;ReportForNavPageNo2 ;
               IncludeCaption=No;
               SourceExpr=ReportForNav.PageNo }

    { 44  ;1   ;Column  ;TODAY_0_42          ;
               IncludeCaption=No;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 45  ;1   ;Column  ;Verkaufercode__verkaufer_BetreuerInnendienst__betreuer_Team2;
               IncludeCaption=No;
               SourceExpr='Verk„ufercode: '+verk„ufer+' Betreuer Innendienst: ' + betreuer + ' Teams: ' + teams + ' Gebietscode: ' + gebietscode + '  Auftragsdatum: ' + FORMAT(Startdatum) + '..' + FORMAT(Enddatum) }

    { 46  ;1   ;Column  ;Feld10_Arch_Debitor ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 10" }

    { 47  ;1   ;Column  ;Index_Arch_Debitor  ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle.Index }

    { 48  ;1   ;Column  ;Euro7               ;
               IncludeCaption=No;
               SourceExpr='Euro' }

    { 49  ;1   ;Column  ;ArchAuftragBetrag_EURO;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetrag_EURO;
               AutoFormatType=1 }

    { 50  ;1   ;Column  ;USD2                ;
               IncludeCaption=No;
               SourceExpr='USD' }

    { 51  ;1   ;Column  ;ArchAuftragBetrag_USD;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetrag_USD;
               AutoFormatType=1 }

    { 52  ;1   ;Column  ;JPY2                ;
               IncludeCaption=No;
               SourceExpr='JPY' }

    { 53  ;1   ;Column  ;ArchAuftragBetrag_JPY;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetrag_JPY;
               AutoFormatType=1 }

    { 54  ;1   ;Column  ;ArchAuftragBetrag_USD_WechselkursExchangeRateAmount;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetrag_USD/Wechselkurs."Exchange Rate Amount";
               AutoFormatType=1 }

    { 55  ;1   ;Column  ;ExchangeRateAmount_Wechselkurs3;
               DecimalPlaces=4:4;
               IncludeCaption=No;
               SourceExpr=Wechselkurs."Exchange Rate Amount" }

    { 56  ;1   ;Column  ;ArchAuftragBetrag_JPY_WechselkursExchangeRateAmount;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetrag_JPY/Wechselkurs."Exchange Rate Amount";
               AutoFormatType=1 }

    { 57  ;1   ;Column  ;summe1_summe22      ;
               IncludeCaption=No;
               SourceExpr=summe[1]+summe[2];
               AutoFormatType=1 }

    { 58  ;1   ;Column  ;ArchAuftragBetragMW ;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetragMW;
               AutoFormatType=1 }

    { 1000000004;1;DataItem;CopyArchHeader   ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_Belegkopf.RESET;
                               Berichtstabelle_Belegkopf.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_Belegkopf.SETFILTER(Tabelle,'%1','ARCH_BELEGKOPF');
                               Berichtstabelle_Belegkopf.SETFILTER("Feld 2",'%1',Berichtstabelle.Index);
                               SETRANGE(Number,1,Berichtstabelle_Belegkopf.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_Belegkopf.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_Belegkopf.NEXT;
                                  END;
                                END;
                                 }

    { 60  ;2   ;Column  ;waehrung4           ;
               IncludeCaption=No;
               SourceExpr=waehrung }

    { 61  ;2   ;Column  ;ArchAuftragBetrag   ;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetrag;
               AutoFormatType=1 }

    { 1000000005;2;DataItem;CopyArchLine     ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_Belegzeile.RESET;
                               Berichtstabelle_Belegzeile.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_Belegzeile.SETFILTER(Tabelle,'%1','ARCH_BELEGZEILE');
                               Berichtstabelle_Belegzeile.SETFILTER(Index,'%1',Berichtstabelle_Belegkopf.Index);
                               SETRANGE(Number,1,Berichtstabelle_Belegzeile.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_Belegzeile.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_Belegzeile.NEXT;
                                  END;

                                  NeuerAuftrag := Berichtstabelle_Belegzeile.Index <> ArchAuftragkopf."No.";
                                  IF NeuerAuftrag THEN BEGIN
                                    ArchAuftragkopf.RESET;
                                    ArchAuftragkopf.SETRANGE("No.",Berichtstabelle_Belegzeile.Index);
                                    ArchAuftragkopf.SETRANGE("Document Type",ArchAuftragkopf."Document Type"::Order);
                                    ArchAuftragkopf.FINDLAST;
                                  END;
                                  ArchAuftragBetrag := Berichtstabelle_Belegzeile."Feld 4" * Berichtstabelle_Belegzeile."Feld 5";
                                  IF NOT Betr„geDruckInMW THEN BEGIN
                                    IF ArchAuftragkopf."Currency Code" = 'USD' THEN
                                      ArchAuftragBetrag_USD := ArchAuftragBetrag;
                                    IF ArchAuftragkopf."Currency Code" = 'JPY' THEN
                                    ArchAuftragBetrag_JPY := ArchAuftragBetrag;
                                    IF ArchAuftragkopf."Currency Code" = '' THEN
                                      ArchAuftragBetrag_EURO := ArchAuftragBetrag;
                                  END;
                                  ArchAuftragBetragMW := ArchAuftragBetrag;
                                  IF Betr„geDruckInMW THEN
                                    ArchAuftragBetrag_EURO := ArchAuftragBetragMW;
                                  IF ArchAuftragkopf."Currency Code" <> '' THEN BEGIN
                                    IF ArchAuftragkopf."Currency Factor" <> 0 THEN
                                      ArchAuftragBetragMW :=
                                        ROUND(
                                          W„hrungWechKurs.ExchangeAmtFCYToLCY(
                                            WORKDATE,ArchAuftragkopf."Currency Code",
                                            ArchAuftragBetragMW,ArchAuftragkopf."Currency Factor"));
                                    IF Betr„geDruckInMW THEN BEGIN
                                      ArchAuftragBetrag := ArchAuftragBetragMW;
                                      ArchAuftragBetrag_EURO := ArchAuftragBetragMW;
                                    END;
                                  END;
                                  waehrung := Berichtstabelle_Belegzeile."Feld 7";
                                  IF Betr„geDruckInMW = TRUE THEN
                                    waehrung := 'EUR'
                                END;
                                 }

    { 63  ;3   ;Column  ;Feld11_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 11" }

    { 64  ;3   ;Column  ;Feld16_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 16" }

    { 65  ;3   ;Column  ;waehrung5           ;
               IncludeCaption=No;
               SourceExpr=waehrung }

    { 66  ;3   ;Column  ;Feld7_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 7" }

    { 67  ;3   ;Column  ;Feld13_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 13" }

    { 68  ;3   ;Column  ;Feld12_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 12" }

    { 69  ;3   ;Column  ;ArchAuftragBetrag2  ;
               IncludeCaption=No;
               SourceExpr=ArchAuftragBetrag;
               AutoFormatType=1 }

    { 70  ;3   ;Column  ;Feld5_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 5";
               AutoFormatType=2 }

    { 71  ;3   ;Column  ;Feld4_Arch_Belegzeile;
               DecimalPlaces=0:0;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 4" }

    { 72  ;3   ;Column  ;Datum_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile.Datum }

    { 73  ;3   ;Column  ;Feld3_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 3" }

    { 74  ;3   ;Column  ;Index_Arch_Belegkopf;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf.Index }

    { 75  ;3   ;Column  ;Datum_Arch_Belegkopf;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegkopf.Datum }

    { 76  ;3   ;Column  ;Feld6_Arch_Belegzeile;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Belegzeile."Feld 6" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1140002;2;Field     ;
                  CaptionML=DEU=Auftragsdatum von;
                  SourceExpr=Startdatum }

      { 1140000;2;Field     ;
                  CaptionML=DEU=bis;
                  SourceExpr=Enddatum }

      { 1140029;2;Field     ;
                  CaptionML=DEU=Ohne Archiv;
                  SourceExpr=ohne_archiv;
                  Visible=FALSE }

      { 1140003;2;Field     ;
                  CaptionML=DEU=Betreuer Innendienst;
                  SourceExpr=betreuer }

      { 1140006;2;Field     ;
                  CaptionML=DEU=Verk„ufercode;
                  SourceExpr=verk„ufer }

      { 1140009;2;Field     ;
                  CaptionML=DEU=Teams;
                  SourceExpr=teams }

      { 1140011;2;Field     ;
                  CaptionML=DEU=Gebietscode;
                  SourceExpr=gebietscode }

      { 1140015;2;Field     ;
                  CaptionML=DEU=Herstellercode;
                  SourceExpr=hersteller;
                  TableRelation=Manufacturer }

      { 1140023;2;Field     ;
                  CaptionML=DEU=Zug. Lieferdatum von;
                  SourceExpr=zugesagtes_startdatum }

      { 1140025;2;Field     ;
                  CaptionML=DEU=bis;
                  SourceExpr=zugesagtes_enddatum }

      { 1140020;2;Field     ;
                  CaptionML=DEU=Betr„ge in MW anzeigen;
                  SourceExpr=Betr„geDruckInMW }

      { 1140013;2;Field     ;
                  CaptionML=DEU=Neue Seite pro Debitor;
                  SourceExpr=NurEinProSeiteDrucken }

      { 1140018;2;Field     ;
                  CaptionML=DEU=Berichtssortierung;
                  OptionCaptionML=DEU=Debitornr.,Debitorname;
                  SourceExpr=sort }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Berichtstabelle@1140000 : TEMPORARY Record 50037;
      Berichtstabelle_Belegkopf@1140012 : TEMPORARY Record 50037;
      Berichtstabelle_Belegzeile@1000000002 : TEMPORARY Record 50037;
      W„hrungWechKurs@1140022 : Record 330;
      Wechselkurs@1140025 : Record 330;
      Auftragkopf@1000000001 : Record 36;
      ArchAuftragkopf@1140037 : Record 5107;
      SalesHeader@1140002 : Record 36;
      SalesLine@1140003 : Record 37;
      ArchSalesHeader@1140029 : Record 5107;
      ArchivHeaderVersion@1000000000 : Record 5107;
      ArchSalesLine@1140030 : Record 5108;
      Quotedaten@1140013 : Record 50014;
      Startdatum@1140004 : Date;
      Enddatum@1140005 : Date;
      zugesagtes_startdatum@1140038 : Date;
      zugesagtes_enddatum@1140039 : Date;
      betreuer@1140006 : Code[40];
      verk„ufer@1140007 : Code[40];
      teams@1140008 : Code[40];
      gebietscode@1140009 : Code[40];
      hersteller@1140011 : Code[40];
      belegzeilen_vorhanden@1140010 : Boolean;
      arch_belegzeilen_vorhanden@1140036 : Boolean;
      Betr„geDruckInMW@1140014 : Boolean;
      NurEinProSeiteDrucken@1140021 : Boolean;
      NeuerAuftrag@1140017 : Boolean;
      ohne_archiv@1140040 : Boolean;
      RckstandMenge@1140015 : Text[30];
      summe@1140027 : ARRAY [3] OF Decimal;
      waehrung@1140028 : Code[10];
      AuftragBetrag@1140018 : Decimal;
      AuftragBetrag_EURO@1140026 : Decimal;
      AuftragBetrag_USD@1140023 : Decimal;
      AuftragBetrag_JPY@1140024 : Decimal;
      AuftragBetragMW@1140020 : Decimal;
      ArchAuftragBetrag@1140031 : Decimal;
      ArchAuftragBetrag_EURO@1140032 : Decimal;
      ArchAuftragBetrag_USD@1140033 : Decimal;
      ArchAuftragBetrag_JPY@1140034 : Decimal;
      ArchAuftragBetragMW@1140035 : Decimal;
      sort@1140016 : 'Nr,Name';
      counter@1140001 : Integer;
      Gesamt_AU_EK@1140041 : Decimal;
      artzeile_ek@1140042 : Decimal;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionCopyCustomer_Header2@5010(VAR Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Debitor DO BEGIN
        ReportForNav.ShowOutput(Betr„geDruckInMW);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyCustomer_Footer7@5011(VAR Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Debitor DO BEGIN
        ReportForNav.ShowOutput(AuftragBetrag_EURO <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyCustomer_Footer8@5012(VAR Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Debitor DO BEGIN
        ReportForNav.ShowOutput(AuftragBetrag_USD <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyCustomer_Footer9@5013(VAR Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Debitor DO BEGIN
        ReportForNav.ShowOutput(AuftragBetrag_JPY <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyCustomer_Footer10@5014(VAR Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Debitor DO BEGIN
        Wechselkurs.SETFILTER(Wechselkurs."Currency Code",'%1','USD');
        Wechselkurs.FINDLAST;
        summe[1] := AuftragBetrag_USD/Wechselkurs."Exchange Rate Amount";
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyCustomer_Footer11@5015(VAR Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Debitor DO BEGIN
        Wechselkurs.SETFILTER(Wechselkurs."Currency Code",'%1','JPY');
        Wechselkurs.FINDLAST;
        summe[2] := AuftragBetrag_JPY/Wechselkurs."Exchange Rate Amount";
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyLine_Body14@5016(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        IF ReportForNav.ShowOutput(NeuerAuftrag) THEN BEGIN
          EVALUATE(artzeile_ek,"Feld 13");
          Gesamt_AU_EK := Gesamt_AU_EK + (artzeile_ek * "Feld 4");
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyLine_Body15@5017(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        IF ReportForNav.ShowOutput(NOT NeuerAuftrag) THEN BEGIN
          EVALUATE(artzeile_ek,"Feld 13");
          Gesamt_AU_EK := Gesamt_AU_EK + (artzeile_ek * "Feld 4");
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyLine_Body16@5018(VAR Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Belegzeile DO BEGIN
        ReportForNav.ShowOutput("Feld 6" <> '');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionNewPage_Body17@5019(VAR NewPage@1000000000 : Record 50037);
    BEGIN
      WITH NewPage DO BEGIN
        ReportForNav.NewPageWithoutTransportTotals;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchCustomer_Header19@5020(VAR Arch_Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Debitor DO BEGIN
        ReportForNav.ShowOutput(Betr„geDruckInMW);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchCustomer_Footer24@5021(VAR Arch_Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Debitor DO BEGIN
        ReportForNav.ShowOutput(ArchAuftragBetrag_EURO <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchCustomer_Footer25@5022(VAR Arch_Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Debitor DO BEGIN
        ReportForNav.ShowOutput(ArchAuftragBetrag_USD <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchCustomer_Footer26@5023(VAR Arch_Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Debitor DO BEGIN
        ReportForNav.ShowOutput(ArchAuftragBetrag_JPY <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchCustomer_Footer27@5024(VAR Arch_Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Debitor DO BEGIN
        Wechselkurs.SETFILTER(Wechselkurs."Currency Code",'%1','USD');
        Wechselkurs.FINDLAST;
        summe[1] := ArchAuftragBetrag_USD/Wechselkurs."Exchange Rate Amount";
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchCustomer_Footer28@5025(VAR Arch_Debitor@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Debitor DO BEGIN
        Wechselkurs.SETFILTER(Wechselkurs."Currency Code",'%1','JPY');
        Wechselkurs.FINDLAST;
        summe[2] := ArchAuftragBetrag_JPY/Wechselkurs."Exchange Rate Amount";
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchLine_Body31@5026(VAR Arch_Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Belegzeile DO BEGIN
        ReportForNav.ShowOutput(NeuerAuftrag);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchLine_Body32@5027(VAR Arch_Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Belegzeile DO BEGIN
        ReportForNav.ShowOutput(NOT NeuerAuftrag);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyArchLine_Body33@5028(VAR Arch_Belegzeile@1000000000 : Record 50037);
    BEGIN
      WITH Arch_Belegzeile DO BEGIN
        ReportForNav.ShowOutput("Feld 6" <> '');
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'CopyCustomer': CASE SectionId OF
          'Header2': OnPreSectionCopyCustomer_Header2(Berichtstabelle);
          'Footer7': OnPreSectionCopyCustomer_Footer7(Berichtstabelle);
          'Footer8': OnPreSectionCopyCustomer_Footer8(Berichtstabelle);
          'Footer9': OnPreSectionCopyCustomer_Footer9(Berichtstabelle);
          'Footer10': OnPreSectionCopyCustomer_Footer10(Berichtstabelle);
          'Footer11': OnPreSectionCopyCustomer_Footer11(Berichtstabelle);
        END;
        'CopyLine': CASE SectionId OF
          'Body14': OnPreSectionCopyLine_Body14(Berichtstabelle_Belegzeile);
          'Body15': OnPreSectionCopyLine_Body15(Berichtstabelle_Belegzeile);
          'Body16': OnPreSectionCopyLine_Body16(Berichtstabelle_Belegzeile);
        END;
        'CopyArchCustomer': CASE SectionId OF
          'Header19': OnPreSectionCopyArchCustomer_Header19(Berichtstabelle);
          'Footer24': OnPreSectionCopyArchCustomer_Footer24(Berichtstabelle);
          'Footer25': OnPreSectionCopyArchCustomer_Footer25(Berichtstabelle);
          'Footer26': OnPreSectionCopyArchCustomer_Footer26(Berichtstabelle);
          'Footer27': OnPreSectionCopyArchCustomer_Footer27(Berichtstabelle);
          'Footer28': OnPreSectionCopyArchCustomer_Footer28(Berichtstabelle);
        END;
        'CopyArchLine': CASE SectionId OF
          'Body31': OnPreSectionCopyArchLine_Body31(Berichtstabelle_Belegzeile);
          'Body32': OnPreSectionCopyArchLine_Body32(Berichtstabelle_Belegzeile);
          'Body33': OnPreSectionCopyArchLine_Body33(Berichtstabelle_Belegzeile);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      CASE DataItemId OF
        'CopyCustomer': WITH CopyCustomer DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,AuftragBetrag);
                ReportForNav.AddTotal(DataItemId,1,AuftragBetragMW);
                ReportForNav.AddTotal(DataItemId,2,AuftragBetrag_USD);
                ReportForNav.AddTotal(DataItemId,3,AuftragBetrag_JPY);
                ReportForNav.AddTotal(DataItemId,4,AuftragBetrag_EURO);
              END;
           'Restore': BEGIN
                 AuftragBetrag := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 AuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 AuftragBetrag_USD := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 AuftragBetrag_JPY := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 AuftragBetrag_EURO := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
              END;
        END; 'CopyHeader': WITH CopyHeader DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,AuftragBetrag);
                ReportForNav.AddTotal(DataItemId,1,AuftragBetragMW);
                ReportForNav.AddTotal(DataItemId,2,AuftragBetrag_USD);
                ReportForNav.AddTotal(DataItemId,3,AuftragBetrag_JPY);
                ReportForNav.AddTotal(DataItemId,4,AuftragBetrag_EURO);
              END;
           'Restore': BEGIN
                 AuftragBetrag := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 AuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 AuftragBetrag_USD := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 AuftragBetrag_JPY := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 AuftragBetrag_EURO := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
              END;
        END;  'CopyLine': WITH CopyLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,AuftragBetrag);
                ReportForNav.AddTotal(DataItemId,1,AuftragBetragMW);
                ReportForNav.AddTotal(DataItemId,2,AuftragBetrag_USD);
                ReportForNav.AddTotal(DataItemId,3,AuftragBetrag_JPY);
                ReportForNav.AddTotal(DataItemId,4,AuftragBetrag_EURO);
              END;
           'Restore': BEGIN
                 AuftragBetrag := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 AuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 AuftragBetrag_USD := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 AuftragBetrag_JPY := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 AuftragBetrag_EURO := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
              END;
        END;  'CopyArchCustomer': WITH CopyArchCustomer DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,ArchAuftragBetrag);
                ReportForNav.AddTotal(DataItemId,1,ArchAuftragBetragMW);
                ReportForNav.AddTotal(DataItemId,2,ArchAuftragBetrag_USD);
                ReportForNav.AddTotal(DataItemId,3,ArchAuftragBetrag_JPY);
                ReportForNav.AddTotal(DataItemId,4,ArchAuftragBetrag_EURO);
              END;
           'Restore': BEGIN
                 ArchAuftragBetrag := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 ArchAuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 ArchAuftragBetrag_USD := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 ArchAuftragBetrag_JPY := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 ArchAuftragBetrag_EURO := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
              END;
        END;  'CopyArchHeader': WITH CopyArchHeader DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,ArchAuftragBetrag);
                ReportForNav.AddTotal(DataItemId,1,ArchAuftragBetragMW);
                ReportForNav.AddTotal(DataItemId,2,ArchAuftragBetrag_USD);
                ReportForNav.AddTotal(DataItemId,3,ArchAuftragBetrag_JPY);
                ReportForNav.AddTotal(DataItemId,4,ArchAuftragBetrag_EURO);
              END;
           'Restore': BEGIN
                 ArchAuftragBetrag := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 ArchAuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 ArchAuftragBetrag_USD := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 ArchAuftragBetrag_JPY := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 ArchAuftragBetrag_EURO := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
              END;
        END;  'CopyArchLine': WITH CopyArchLine DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,ArchAuftragBetrag);
                ReportForNav.AddTotal(DataItemId,1,ArchAuftragBetragMW);
                ReportForNav.AddTotal(DataItemId,2,ArchAuftragBetrag_USD);
                ReportForNav.AddTotal(DataItemId,3,ArchAuftragBetrag_JPY);
                ReportForNav.AddTotal(DataItemId,4,ArchAuftragBetrag_EURO);
              END;
           'Restore': BEGIN
                 ArchAuftragBetrag := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 ArchAuftragBetragMW := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 ArchAuftragBetrag_USD := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
                 ArchAuftragBetrag_JPY := ReportForNav.RestoreTotal(DataItemId,3,GroupTotalFieldNo);
                 ArchAuftragBetrag_EURO := ReportForNav.RestoreTotal(DataItemId,4,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      ******************************************
      TOPAS 14.08.17 ST
      In Arch_Debitor - OnPreDataItem() wurde ein CurrReport.BREAK eingebaut, damit die Auftragsarchive nicht mehr angezeigt werden
      u.a. weil die Archive verschiedene Versionen enthalten (wurde nun aber bedacht) und der Bericht eigentlich den Auftragsbestand
      und nicht den Auftragseingang zeigen soll
      TOPAS 18.01.18 ST
      Umstellung der Berichtstabellen Records auf Temporary = YES, damit stabiler und User k”nnen gleichzeitig ohne Verz”gerung den Bericht abrufen
      ******************************************
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description></Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

