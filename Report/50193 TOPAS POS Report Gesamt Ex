OBJECT Report 50193 TOPAS POS Report Gesamt Ex
{
  OBJECT-PROPERTIES
  {
    Date=12.01.18;
    Time=13:42:36;
    Modified=Yes;
    Version List=fs_v.2.0 5.9.03,FORNAV2.0.0.1189/1189;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  vkrk := "Sales Invoice Header".GETFILTERS;
                  vkrz := "Sales Invoice Line".GETFILTERS;
                  vkgk := "Sales Cr.Memo Header".GETFILTERS;
                  vkgz := "Sales Cr.Memo Line".GETFILTERS;
                  artre:=Item.GETFILTERS;
                  artgu:="<Artikel1>".GETFILTERS;
                  //ArtDatumFilter := Artikel.GETFILTER(Datumsfilter);
                  CREATE (Excel,FALSE,TRUE);                                              //erzeugt excel
                  Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
                  Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
                  Sheet.Range('L:M').NumberFormat:='###.###,####';
                  Sheet.Range('A1').Value := 'Disti Name';                          // definiert die beschriftung der ¬Åberschriftszeile
                  Sheet.Range('B1').Value := 'Customer Name';
                  Sheet.Range('C1').Value := 'Disti Invoice #';
                  Sheet.Range('D1').Value := 'Part Number';
                  Sheet.Range('E1').Value := 'Qty Sold';
                  Sheet.Range('F1').Value := 'Resale Price';
                  Sheet.Range('G1').Value := 'Currency of Resale Price';
                  Sheet.Range('H1').Value := 'Date of Sale';
                  Sheet.Range('I1').Value := 'Total Resale ';
                  Sheet.Range('J1').Value := 'Endcustomer';
                  Sheet.Range('K1').Value := 'EK';
                  Sheet.Range('L1').Value := 'Quotepreis';
                  Sheet.Range('M1').Value := 'AUCD Quote';
                  Sheet.Range('N1').Value := 'Information';
                  Sheet.Range('O1').Value := 'Validationcode';
                  //Sheet.Range('B1').Value := 'Disti Branch';
                  //Sheet.Range('C1').Value := 'Disti Customer #';
                  //Sheet.Range('D1').Value := 'Customer Name';
                  //Sheet.Range('E1').Value := 'Customer Adress';
                  //Sheet.Range('F1').Value := 'Customer Zip Code';
                  //Sheet.Range('G1').Value := 'Part Number';
                  //Sheet.Range('H1').Value := 'Qty Sold';
                  //Sheet.Range('I1').Value := 'IDT Book Price';
                  //Sheet.Range('J1').Value := 'Currency of IDT Book Price';
                  //Sheet.Range('K1').Value := 'Special Buy Price';
                  //Sheet.Range('L1').Value := 'Currency of SBP';
                  //Sheet.Range('M1').Value := 'Resale Price';
                  //Sheet.Range('N1').Value := 'Currency of Resale Price';
                  //Sheet.Range('O1').Value := 'Date of Sale';
                  //Sheet.Range('P1').Value := 'Disti Invoice #';
                  //Sheet.Range('Q1').Value := 'Disti Invoice Line Item #';
                  //Sheet.Range('R1').Value := 'Transaction Code';
                  //Sheet.Range('S1').Value := 'S&C Authorisation #';
                  //Sheet.Range('T1').Value := 'Location Code';
                  //Sheet.Range('U1').Value := 'Credit Memo #';
                  //Sheet.Range('V1').Value := 'Credit Memo Line Item #';
                  //Sheet.Range('W1').Value := ' ';
                  //Sheet.Range('X1').Value := ' ';
                  //Sheet.Range('Y1').Value := 'KZ Endkunde';
                  //Sheet.Range('Z1').Value := 'Endkunde';
                  //Sheet.Range('AA1').Value := 'Endkundennr';
                  j := '2';                                                    // <- Import in excel ab Zeile 2
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table112;
               ReqFilterFields=Posting Date }

    { 2   ;1   ;Column  ;STRSUBSTNO_artgu    ;
               SourceExpr=STRSUBSTNO(artgu) }

    { 3   ;1   ;Column  ;STRSUBSTNO_artre    ;
               SourceExpr=STRSUBSTNO(artre) }

    { 4   ;1   ;Column  ;STRSUBSTNO_vkrz     ;
               SourceExpr=STRSUBSTNO(vkrz) }

    { 5   ;1   ;Column  ;STRSUBSTNO_vkgk     ;
               SourceExpr=STRSUBSTNO(vkgk) }

    { 6   ;1   ;Column  ;STRSUBSTNO_vkgz     ;
               SourceExpr=STRSUBSTNO(vkgz) }

    { 7   ;1   ;Column  ;STRSUBSTNO_vkrk     ;
               SourceExpr=STRSUBSTNO(vkrk) }

    { 8   ;1   ;Column  ;TODAY_0_4           ;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 9   ;1   ;Column  ;USERID              ;
               SourceExpr=USERID }

    { 10  ;1   ;Column  ;ReportForNavPageNo  ;
               SourceExpr=ReportForNav.PageNo }

    { 11  ;1   ;Column  ;betragmw2           ;
               DecimalPlaces=2:2;
               SourceExpr=betragmw2 }

    { 12  ;1   ;DataItem;                    ;
               DataItemTable=Table113;
               ReqFilterFields=Manufacturer Code;
               DataItemLink=Document No.=FIELD(No.) }

    { 13  ;2   ;DataItem;                    ;
               DataItemTable=Table27;
               OnAfterGetRecord=BEGIN
                                  v_endkunde:=' ';
                                  IF "Sales Invoice Header"."Currency Factor"<>0 THEN
                                  BEGIN
                                  betragmw:=("Sales Invoice Line".Amount)/("Sales Invoice Header"."Currency Factor");
                                  betragmw2:=("Sales Invoice Line".Amount)/("Sales Invoice Header"."Currency Factor");
                                  END ELSE
                                  BEGIN
                                  betragmw:="Sales Invoice Line".Amount;
                                  betragmw2:="Sales Invoice Line".Amount;
                                  END;
                                  IF "Sales Invoice Header"."Currency Code" = '' THEN
                                  BEGIN
                                  waehrung:='EUR';
                                  END
                                  ELSE
                                  BEGIN
                                  waehrung:="Sales Invoice Header"."Currency Code";
                                  END;
                                  Item.CALCFIELDS("DC-Preis");
                                  // IF (Verkaufsrechnungszeile.lagerortcode ='ZENT' ) THEN
                                  //BEGIN
                                  IF (("Sales Invoice Line".Quantity>0) AND (("Sales Invoice Line"."Location Code" ='ZENT') OR
                                     ("Sales Invoice Line"."Location Code" ='KONSI'))) THEN
                                  BEGIN
                                  Sheet.Range('A'+j).Value := 'TOPAS electronic Vetriebs-GmbH';           //text
                                  Sheet.Range('B'+j).Value := COPYSTR("Sales Invoice Header"."Bill-to Name",1,29); //verkaufsrechnungskopf
                                  Sheet.Range('C'+j).Value := "Sales Invoice Header"."No.";                 //verkaufsrechnungskopf
                                  Sheet.Range('D'+j).Value := "Sales Invoice Line"."No.";                 //verkaufsrechnungszeile
                                  Sheet.Range('E'+j).Value := "Sales Invoice Line".Quantity;                 //verkaufsrechnungszeile
                                  Sheet.Range('E'+j).NumberFormat := '@';                                   //zellenformatierung excel
                                  Sheet.Range('F'+j).Value := FORMAT("Sales Invoice Line"."Unit Price");           //verkaufsrechnungszeile
                                  Sheet.Range('F'+j).NumberFormat := '0,00';                                  //zellenformatierung excel
                                  Sheet.Range('G'+j).Value := waehrung;                                    //variable waehrung
                                  Sheet.Range('H'+j).Value := "Sales Invoice Header"."Posting Date";         //verkaufsrechnungskopf
                                  Sheet.Range('H'+j).NumberFormat := 'JJJJMMTT';                          //zellenformatierung excel
                                  Sheet.Range('I'+j).Value := betragmw;               //verkaufsrechnungszeile
                                  Sheet.Range('J'+j).Value := COPYSTR("Sales Invoice Line".Endkunde,1,29);
                                  "Ek-Preise".RESET;
                                  "Ek-Preise".SETFILTER("Item No.",'%1',Item."No.");
                                  IF "Ek-Preise".FINDLAST THEN
                                    Sheet.Range('K'+j).Value := FORMAT("Ek-Preise"."Direct Unit Cost")        //'IDTBOOKPRICE'
                                  ELSE
                                    Sheet.Range('K'+j).Value := FORMAT(0);
                                  quotedaten.SETFILTER("Quotenr.",'%1',"Sales Invoice Line"."Quotenr.");        //Spezial Buy Price
                                  IF quotedaten.FINDFIRST THEN
                                   BEGIN
                                     Sheet.Range('L'+j).Value := FORMAT(quotedaten.Quotepreis);
                                     Sheet.Range('M'+j).Value := (quotedaten."Quotenr. Hersteller");
                                     Sheet.Range('N'+j).Value := FORMAT(quotedaten.Genehmigungstext);
                                     Sheet.Range('O'+j).Value := FORMAT(quotedaten.Validationcode);
                                   END;
                                  {
                                  Sheet.Range('B'+j).Value := 'DE';           //text
                                  Sheet.Range('C'+j).Value := "Sales Invoice Header"."Sell-to Customer No.";    //verkaufsrechnungskopf
                                  Sheet.Range('D'+j).Value := COPYSTR("Sales Invoice Header"."Bill-to Name",1,29); //verkaufsrechnungskopf
                                  Sheet.Range('E'+j).Value := COPYSTR("Sales Invoice Header"."Bill-to City",1,29); //verkaufsrechnungskopf
                                  Sheet.Range('F'+j).Value := "Sales Invoice Header"."Bill-to Post Code";    //verkaufsrechnungskopf
                                  Sheet.Range('G'+j).Value := "Sales Invoice Line"."No.";                 //verkaufsrechnungszeile
                                  Sheet.Range('H'+j).Value := "Sales Invoice Line".Quantity;                 //verkaufsrechnungszeile
                                  Sheet.Range('H'+j).NumberFormat := '@';                                   //zellenformatierung excel
                                  "Ek-Preise".RESET;
                                  "Ek-Preise".SETFILTER("Item No.",'%1',Item."No.");
                                  IF "Ek-Preise".FINDLAST THEN
                                    Sheet.Range('I'+j).Value := FORMAT("Ek-Preise"."Direct Unit Cost")        //'IDTBOOKPRICE' verkaufsrechnungskopf
                                  ELSE
                                    Sheet.Range('I'+j).Value := FORMAT(0);
                                  Sheet.Range('I'+j).NumberFormat := '0,0000';                                   //zellenformatierung excel
                                  Sheet.Range('J'+j).Value := "Sales Invoice Line".Einkaufsw‚Äûhrungscode;  //verkaufsrechnungszeile
                                    IF "Sales Invoice Line"."Quotenr."='' THEN
                                    BEGIN
                                    END ELSE BEGIN
                                    Sheet.Range('K'+j).Value := FORMAT("Sales Invoice Line"."DC-Preis (EKW)");     //verkaufsrechnungskopf
                                    Sheet.Range('K'+j).NumberFormat := '0,0000';                                  //zellenformatierung excel
                                    Sheet.Range('L'+j).Value := "Sales Invoice Line".Einkaufsw‚Äûhrungscode;   //verkaufsrechnungskopf
                                    END;
                                  Sheet.Range('M'+j).Value := FORMAT("Sales Invoice Line"."Unit Price");           //verkaufsrechnungszeile
                                  Sheet.Range('M'+j).NumberFormat := '0,0000';                                  //zellenformatierung excel
                                  Sheet.Range('N'+j).Value := waehrung;                                    //variable waehrung
                                  Sheet.Range('O'+j).Value := "Sales Invoice Header"."Posting Date";         //verkaufsrechnungskopf
                                  Sheet.Range('O'+j).NumberFormat := 'JJJJMMTT';                          //zellenformatierung excel
                                  Sheet.Range('P'+j).Value := "Sales Invoice Header"."No.";                 //verkaufsrechnungskopf
                                  Sheet.Range('Q'+j).Value := "Sales Invoice Line"."Line No.";          //verkaufsrechnungszeile
                                  Sheet.Range('R'+j).Value := 'MSST';                                      //Transaction Type
                                  //Sheet.Range('S'+j).Value := Quotedaten."Quotenr. Hersteller";            //S&C Authorisation
                                  //Sheet.Range('T'+j).Value := Quotedaten.Fremdpositionsnummer;             //Location Code
                                   quotedaten.SETFILTER("Quotenr.",'%1',"Sales Invoice Line"."Quotenr.");
                                     IF quotedaten.FIND('-') THEN
                                      BEGIN
                                  //   Anfang  alte SAP-Nr benutzen, wenn vorhanden
                                        IF  quotedaten."IDT SAP Nr"='' THEN
                                          BEGIN
                                             Sheet.Range('S'+j).Value := quotedaten."Quotenr. Hersteller";          //S&C Authorisation
                                          END
                                          ELSE
                                          BEGIN
                                             Sheet.Range('S'+j).Value := quotedaten."IDT SAP Nr";       //S&C Authorisation
                                          END;
                                  //   Ende  alte SAP-Nr benutzen, wenn vorhanden
                                       Sheet.Range('T'+j).Value := quotedaten.Fremdpositionsnummer;             //Location Code
                                      END;
                                  Sheet.Range('U'+j).Value := '';                                          //Credit Memo #            Not currently required
                                  Sheet.Range('V'+j).Value := '';                                          //Credit Memo line Item #  Not currently required
                                  //Sheet.Range('W'+j).Value := Verkaufsrechnungszeile.Betrag;               //verkaufsrechnungszeile
                                  Sheet.Range('W'+j).Value := betragmw;               //verkaufsrechnungszeile
                                  Sheet.Range('X'+j).Value := "Sales Invoice Line"."Quotenr.";           //verkaufskopfkopf
                                     Debitor.SETFILTER("No.",'%1',"Sales Invoice Line"."Sell-to Customer No.");
                                        IF Debitor.FIND('-') THEN
                                           BEGIN
                                            IF Debitor."Endkunde w/Best¬Åcker"=TRUE THEN
                                             BEGIN
                                             Sheet.Range('Y'+j).Value := Debitor."Endkunde w/Best¬Åcker";
                                             END
                                           END;
                                  Sheet.Range('Z'+j).Value := COPYSTR("Sales Invoice Line".Endkunde,1,29);
                                  Sheet.Range('AA'+j).Value := "Sales Invoice Line"."Endkundennr.";
                                  }
                                  Sheet.Range('R'+j).Value :="Sales Invoice Line"."DC-Preis (EKW)";
                                  Sheet.Range('S'+j).Value :="Sales Invoice Line".Einkaufsw‚Äûhrungscode;
                                  j := INCSTR (j);
                                  END ELSE BEGIN
                                  END;
                                  // END ELSE BEGIN
                                  // END;
                                END;

               OnPostDataItem=BEGIN
                                Excel.Visible (TRUE);
                              END;

               DataItemLink=No.=FIELD(No.) }

    { 14  ;3   ;Column  ;betragmw            ;
               DecimalPlaces=2:2;
               SourceExpr=betragmw }

    { 15  ;3   ;Column  ;PostingDate_SalesInvoiceHeader;
               SourceExpr="Sales Invoice Header"."Posting Date" }

    { 16  ;3   ;Column  ;waehrung            ;
               SourceExpr=waehrung }

    { 17  ;3   ;Column  ;Amount_SalesInvoiceLine;
               DecimalPlaces=2:2;
               SourceExpr="Sales Invoice Line".Amount }

    { 18  ;3   ;Column  ;UnitPrice_SalesInvoiceLine;
               DecimalPlaces=2:5;
               SourceExpr="Sales Invoice Line"."Unit Price" }

    { 19  ;3   ;Column  ;No_SalesInvoiceHeader;
               SourceExpr="Sales Invoice Header"."No." }

    { 20  ;3   ;Column  ;No_SalesInvoiceLine ;
               SourceExpr="Sales Invoice Line"."No." }

    { 21  ;3   ;Column  ;Quantity_SalesInvoiceLine;
               SourceExpr="Sales Invoice Line".Quantity }

    { 22  ;3   ;Column  ;Bill_toName_SalesInvoiceHeader;
               SourceExpr="Sales Invoice Header"."Bill-to Name" }

    { 23  ;3   ;Column  ;Sell_toCustomerNo_SalesInvoiceHeader;
               SourceExpr="Sales Invoice Header"."Sell-to Customer No." }

    { 24  ;    ;DataItem;                    ;
               DataItemTable=Table114;
               ReqFilterFields=Posting Date }

    { 25  ;1   ;Column  ;betragmw22          ;
               DecimalPlaces=2:2;
               SourceExpr=betragmw2 }

    { 26  ;1   ;DataItem;                    ;
               DataItemTable=Table115;
               ReqFilterFields=Manufacturer Code;
               DataItemLink=Document No.=FIELD(No.) }

    { 27  ;2   ;DataItem;<Artikel1>          ;
               DataItemTable=Table27;
               OnAfterGetRecord=BEGIN
                                  v_endkunde:=' ';
                                  IF "Sales Cr.Memo Header"."Currency Factor"<>0 THEN
                                  BEGIN
                                  betragmw:=("Sales Cr.Memo Line".Amount)/("Sales Cr.Memo Header"."Currency Factor");
                                  betragmw2:=("Sales Cr.Memo Line".Amount)/("Sales Cr.Memo Header"."Currency Factor");
                                  END ELSE
                                  BEGIN
                                  betragmw:="Sales Cr.Memo Line".Amount;
                                  betragmw2:="Sales Cr.Memo Line".Amount;
                                  END;
                                  IF "Sales Cr.Memo Header"."Currency Code" = '' THEN
                                  BEGIN
                                  waehrung:='EUR';
                                  END
                                  ELSE
                                  BEGIN
                                  waehrung:="Sales Cr.Memo Header"."Currency Code";
                                  END;
                                  Item.CALCFIELDS("DC-Preis");
                                  // IF (Verkaufsgutschriftszeile.lagerortcode ='ZENT' ) THEN
                                  //BEGIN
                                  IF (("Sales Cr.Memo Line".Quantity>1) AND (("Sales Cr.Memo Line"."Location Code" ='ZENT') OR
                                      ("Sales Cr.Memo Line"."Location Code" ='ZENT'))) THEN
                                  BEGIN
                                  Sheet.Range('A'+j).Value := 'TOPAS electronic Vertriebs-GmbH';           //text
                                  Sheet.Range('B'+j).Value := COPYSTR("Sales Cr.Memo Header"."Bill-to Name",1,29); //verkaufsgutschriftskopf
                                  Sheet.Range('C'+j).Value := "Sales Cr.Memo Header"."No.";                 //verkaufsgutschriftskopf
                                  Sheet.Range('D'+j).Value := "Sales Cr.Memo Line"."No.";                 //verkaufsgutschriftszeile
                                  Sheet.Range('E'+j).Value := "Sales Cr.Memo Line".Quantity;                 //verkaufsgutschriftszeile
                                  Sheet.Range('E'+j).NumberFormat := '@';                                   //zellenformatierung excel
                                  Sheet.Range('F'+j).Value := FORMAT("Sales Cr.Memo Line"."Unit Price");           //verkaufsgutschriftszeile
                                  Sheet.Range('F'+j).NumberFormat := '0,00';                                  //zellenformatierung excel
                                  Sheet.Range('G'+j).Value := waehrung;                                    //variable waehrung
                                  Sheet.Range('H'+j).Value := "Sales Cr.Memo Header"."Posting Date";         //verkaufsgutschriftskopf
                                  Sheet.Range('H'+j).NumberFormat := 'JJJJMMTT';                          //zellenformatierung excel
                                  Sheet.Range('I'+j).Value := (betragmw * (-1));                    //verkaufsgutschriftszeile
                                  Sheet.Range('J'+j).Value := COPYSTR( "Sales Cr.Memo Line".Endkunde,1,29);
                                  "Ek-Preise".RESET;
                                  "Ek-Preise".SETFILTER("Item No.",'%1',Item."No.");
                                  IF "Ek-Preise".FINDLAST THEN
                                    Sheet.Range('K'+j).Value := FORMAT("Ek-Preise"."Direct Unit Cost")        //'IDTBOOKPRICE'
                                  ELSE
                                    Sheet.Range('K'+j).Value := FORMAT(0);
                                  Sheet.Range('K'+j).NumberFormat := '0,0000';                                   //zellenformatierung excel
                                  quotedaten.SETFILTER("Quotenr.",'%1',"Sales Cr.Memo Line"."Quotenr.");        //Spezial Buy Price
                                  IF quotedaten.FINDFIRST THEN
                                   BEGIN
                                     Sheet.Range('L'+j).Value := quotedaten.Quotepreis;
                                     Sheet.Range('L'+j).NumberFormat := '0,0000';                               //zellenformatierung excel
                                     Sheet.Range('M'+j).Value := (quotedaten."Quotenr. Hersteller");
                                     Sheet.Range('N'+j).Value := FORMAT(quotedaten.Genehmigungstext);
                                     Sheet.Range('O'+j).Value := FORMAT(quotedaten.Validationcode);
                                   END;
                                  {
                                  Sheet.Range('B'+j).Value := 'DE';           //text
                                  Sheet.Range('C'+j).Value := "Sales Cr.Memo Header"."Sell-to Customer No.";    //verkaufsgutschriftskopf
                                  Sheet.Range('D'+j).Value := COPYSTR("Sales Cr.Memo Header"."Bill-to Name",1,29); //verkaufsgutschriftskopf
                                  Sheet.Range('E'+j).Value := COPYSTR("Sales Cr.Memo Header"."Bill-to City",1,29); //verkaufsgutschriftskopf
                                  Sheet.Range('F'+j).Value := "Sales Cr.Memo Header"."Bill-to Post Code";    //verkaufsgutschriftskopf
                                  Sheet.Range('G'+j).Value := "Sales Cr.Memo Line"."No.";                 //verkaufsgutschriftszeile
                                  Sheet.Range('H'+j).Value := "Sales Cr.Memo Line".Quantity;                 //verkaufsgutschriftszeile
                                  Sheet.Range('H'+j).NumberFormat := '@';                                   //zellenformatierung excel
                                  "Ek-Preise".RESET;
                                  "Ek-Preise".SETFILTER("Item No.",'%1',"<Artikel1>"."No.");
                                  IF "Ek-Preise".FINDLAST THEN
                                    Sheet.Range('I'+j).Value := FORMAT("Ek-Preise"."Direct Unit Cost")        //'IDTBOOKPRICE' verkaufsrechnungskopf
                                  ELSE
                                    Sheet.Range('I'+j).Value := FORMAT(0);
                                  Sheet.Range('I'+j).NumberFormat := '0,0000';                                   //zellenformatierung excel
                                  Sheet.Range('J'+j).Value := "Sales Cr.Memo Line".Einkaufsw‚Äûhrungscode;  //verkaufsgutschriftskopf
                                    IF "Sales Cr.Memo Line"."Quotenr."='' THEN
                                    BEGIN
                                    END ELSE BEGIN
                                    Sheet.Range('K'+j).Value := FORMAT("Sales Cr.Memo Line"."DC-Preis (EKW)");     //verkaufsgutschriftskopf
                                    Sheet.Range('K'+j).NumberFormat := '0,0000';                                  //zellenformatierung excel
                                    Sheet.Range('L'+j).Value := "Sales Cr.Memo Line".Einkaufsw‚Äûhrungscode;   //verkaufsgutschriftskopf
                                    END;
                                  Sheet.Range('M'+j).Value := FORMAT("Sales Cr.Memo Line"."Unit Price");           //verkaufsgutschriftszeile
                                  Sheet.Range('M'+j).NumberFormat := '0,0000';                                  //zellenformatierung excel
                                  Sheet.Range('N'+j).Value := waehrung;                                    //variable waehrung
                                  Sheet.Range('O'+j).Value := "Sales Cr.Memo Header"."Posting Date";         //verkaufsgutschriftskopf
                                  Sheet.Range('O'+j).NumberFormat := 'JJJJMMTT';                          //zellenformatierung excel
                                  Sheet.Range('P'+j).Value := "Sales Cr.Memo Header"."No.";                 //verkaufsgutschriftskopf
                                  Sheet.Range('Q'+j).Value := "Sales Cr.Memo Line"."Line No.";          //verkaufsgutschriftszeile
                                  Sheet.Range('R'+j).Value := 'MERT';                                      //Transaction Type
                                  //Sheet.Range('S'+j).Value := Quotedaten."Quotenr. Hersteller";            //S&C Authorisation
                                  //Sheet.Range('T'+j).Value := Quotedaten.Fremdpositionsnummer;             //Location Code
                                   quotedaten.SETFILTER("Quotenr.",'%1',"Sales Cr.Memo Line"."Quotenr.");
                                     IF quotedaten.FIND('-') THEN
                                      BEGIN
                                  //   Anfang  alte SAP-Nr benutzen, wenn vorhanden
                                        IF  quotedaten."IDT SAP Nr"='' THEN
                                          BEGIN
                                             Sheet.Range('S'+j).Value := quotedaten."Quotenr. Hersteller";          //S&C Authorisation
                                          END
                                          ELSE
                                          BEGIN
                                             Sheet.Range('S'+j).Value := quotedaten."IDT SAP Nr";       //S&C Authorisation
                                          END;
                                  //   Ende  alte SAP-Nr benutzen, wenn vorhanden
                                       Sheet.Range('T'+j).Value := quotedaten.Fremdpositionsnummer;             //Location Code
                                      END;
                                  Sheet.Range('U'+j).Value := '';                                          //Credit Memo #            Not currently required
                                  Sheet.Range('V'+j).Value := '';                                          //Credit Memo line Item #  Not currently required
                                  //Sheet.Range('W'+j).Value := Verkaufsgutschriftszeile.Betrag;               //verkaufsgutschriftszeile
                                  Sheet.Range('W'+j).Value := (betragmw * (-1));
                                  Sheet.Range('X'+j).Value := "Sales Cr.Memo Line"."Quotenr.";
                                  //Sheet.Range('Y'+j).Value := Verkaufsgutschriftszeile."Quotenr.";
                                     Debitor.SETFILTER("No.",'%1',"Sales Cr.Memo Line"."Sell-to Customer No.");
                                        IF Debitor.FIND('-') THEN
                                           BEGIN
                                             Sheet.Range('Y'+j).Value := Debitor."Endkunde w/Best¬Åcker";
                                           END;
                                  Sheet.Range('Z'+j).Value := COPYSTR( "Sales Cr.Memo Line".Endkunde,1,29);
                                  Sheet.Range('AA'+j).Value := "Sales Cr.Memo Line"."Endkundennr.";
                                  }
                                  Sheet.Range('R'+j).Value := "Sales Cr.Memo Line"."DC-Preis (EKW)";
                                  Sheet.Range('S'+j).Value := "Sales Cr.Memo Line".Einkaufsw‚Äûhrungscode;
                                  j := INCSTR (j);
                                  END ELSE BEGIN
                                  END;
                                  // END ELSE BEGIN
                                  // END;
                                END;

               OnPostDataItem=BEGIN
                                Excel.Visible (TRUE);
                              END;

               DataItemLink=No.=FIELD(No.) }

    { 28  ;3   ;Column  ;betragmw3           ;
               DecimalPlaces=2:2;
               SourceExpr=betragmw }

    { 29  ;3   ;Column  ;PostingDate_SalesCrMemoHeader;
               SourceExpr="Sales Cr.Memo Header"."Posting Date" }

    { 30  ;3   ;Column  ;waehrung3           ;
               SourceExpr=waehrung }

    { 31  ;3   ;Column  ;Amount_SalesCrMemoLine;
               DecimalPlaces=2:2;
               SourceExpr="Sales Cr.Memo Line".Amount }

    { 32  ;3   ;Column  ;UnitPrice_SalesCrMemoLine;
               DecimalPlaces=2:5;
               SourceExpr="Sales Cr.Memo Line"."Unit Price" }

    { 33  ;3   ;Column  ;No_SalesCrMemoHeader;
               SourceExpr="Sales Cr.Memo Header"."No." }

    { 34  ;3   ;Column  ;No_SalesCrMemoLine  ;
               SourceExpr="Sales Cr.Memo Line"."No." }

    { 35  ;3   ;Column  ;Quantity_SalesCrMemoLine;
               SourceExpr="Sales Cr.Memo Line".Quantity }

    { 36  ;3   ;Column  ;Bill_toName_SalesCrMemoHeader;
               SourceExpr="Sales Cr.Memo Header"."Bill-to Name" }

    { 37  ;3   ;Column  ;Sell_toCustomerNo_SalesCrMemoHeader;
               SourceExpr="Sales Cr.Memo Header"."Sell-to Customer No." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Excel@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      Book@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      Range@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      Sheet@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      j@1140004 : Text[30];
      Word@1140006 : Integer;
      betragmw@1140007 : Decimal;
      waehrung@1140008 : Text[30];
      waecode@1140009 : Text[30];
      betragmw2@1140010 : Decimal;
      waehrung2@1140011 : Text[30];
      vkrk@1140012 : Text[90];
      vkrz@1140013 : Text[30];
      vkgk@1140014 : Text[90];
      vkgz@1140015 : Text[30];
      Debitor@1140016 : Record 18;
      quotedaten@1140017 : Record 50014;
      "Ek-Preise"@1140019 : Record 7012;
      v_endkunde@1140018 : Text[30];
      artre@1140020 : Text[30];
      artgu@1140021 : Text[30];
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionSalesInvoiceHeader_Body3@5030(VAR "Sales Invoice Header"@1000000000 : Record 112);
    BEGIN
      WITH "Sales Invoice Header" DO BEGIN
        // ReportForNav.ShowOutput((Verkaufsrechnungszeile.Menge>0) AND (Verkaufsrechnungszeile."VK-Preis">0));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body8@5031(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput(("Sales Invoice Line".Quantity>0) AND ("Sales Invoice Line"."Unit Price">0));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionArtikel1_Body12@5032(VAR "<Artikel1>"@1000000000 : Record 27);
    BEGIN
      WITH "<Artikel1>" DO BEGIN
        ReportForNav.ShowOutput(("Sales Cr.Memo Line".Quantity>0) AND ("Sales Cr.Memo Line"."Unit Price">0));
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'SalesInvoiceHeader': CASE SectionId OF
          'Body3': OnPreSectionSalesInvoiceHeader_Body3("Sales Invoice Header");
        END;
        'Item': CASE SectionId OF
          'Body8': OnPreSectionItem_Body8(Item);
        END;
        'Artikel1': CASE SectionId OF
          'Body12': OnPreSectionArtikel1_Body12("<Artikel1>");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'SalesInvoiceHeader': WITH "Sales Invoice Header" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,betragmw);
                ReportForNav.AddTotal(DataItemId,1,betragmw2);
              END;
           'Restore': BEGIN
                 betragmw := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 betragmw2 := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'SalesInvoiceLine': WITH "Sales Invoice Line" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,betragmw);
                ReportForNav.AddTotal(DataItemId,1,betragmw2);
              END;
           'Restore': BEGIN
                 betragmw := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 betragmw2 := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Item': WITH Item DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,betragmw);
                ReportForNav.AddTotal(DataItemId,1,betragmw2);
              END;
           'Restore': BEGIN
                 betragmw := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 betragmw2 := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'SalesCrMemoHeader': WITH "Sales Cr.Memo Header" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,betragmw);
                ReportForNav.AddTotal(DataItemId,1,betragmw2);
              END;
           'Restore': BEGIN
                 betragmw := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 betragmw2 := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'SalesCrMemoLine': WITH "Sales Cr.Memo Line" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,betragmw);
                ReportForNav.AddTotal(DataItemId,1,betragmw2);
              END;
           'Restore': BEGIN
                 betragmw := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 betragmw2 := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'Artikel1': WITH "<Artikel1>" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,betragmw);
                ReportForNav.AddTotal(DataItemId,1,betragmw2);
              END;
           'Restore': BEGIN
                 betragmw := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 betragmw2 := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>3e0942d6-25cd-4863-b55a-a72f5d0ec7d1</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>d1b04a55-f715-4795-b471-819708ca53ee</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="STRSUBSTNO_artgu">
          <DataField>STRSUBSTNO_artgu</DataField>
        </Field>
        <Field Name="STRSUBSTNO_artre">
          <DataField>STRSUBSTNO_artre</DataField>
        </Field>
        <Field Name="STRSUBSTNO_vkrz">
          <DataField>STRSUBSTNO_vkrz</DataField>
        </Field>
        <Field Name="STRSUBSTNO_vkgk">
          <DataField>STRSUBSTNO_vkgk</DataField>
        </Field>
        <Field Name="STRSUBSTNO_vkgz">
          <DataField>STRSUBSTNO_vkgz</DataField>
        </Field>
        <Field Name="STRSUBSTNO_vkrk">
          <DataField>STRSUBSTNO_vkrk</DataField>
        </Field>
        <Field Name="TODAY_0_4">
          <DataField>TODAY_0_4</DataField>
        </Field>
        <Field Name="USERID">
          <DataField>USERID</DataField>
        </Field>
        <Field Name="ReportForNavPageNo">
          <DataField>ReportForNavPageNo</DataField>
        </Field>
        <Field Name="betragmw2">
          <DataField>betragmw2</DataField>
        </Field>
        <Field Name="betragmw2Format">
          <DataField>betragmw2Format</DataField>
        </Field>
        <Field Name="betragmw">
          <DataField>betragmw</DataField>
        </Field>
        <Field Name="betragmwFormat">
          <DataField>betragmwFormat</DataField>
        </Field>
        <Field Name="PostingDate_SalesInvoiceHeader">
          <DataField>PostingDate_SalesInvoiceHeader</DataField>
        </Field>
        <Field Name="waehrung">
          <DataField>waehrung</DataField>
        </Field>
        <Field Name="Amount_SalesInvoiceLine">
          <DataField>Amount_SalesInvoiceLine</DataField>
        </Field>
        <Field Name="Amount_SalesInvoiceLineFormat">
          <DataField>Amount_SalesInvoiceLineFormat</DataField>
        </Field>
        <Field Name="UnitPrice_SalesInvoiceLine">
          <DataField>UnitPrice_SalesInvoiceLine</DataField>
        </Field>
        <Field Name="UnitPrice_SalesInvoiceLineFormat">
          <DataField>UnitPrice_SalesInvoiceLineFormat</DataField>
        </Field>
        <Field Name="No_SalesInvoiceHeader">
          <DataField>No_SalesInvoiceHeader</DataField>
        </Field>
        <Field Name="No_SalesInvoiceLine">
          <DataField>No_SalesInvoiceLine</DataField>
        </Field>
        <Field Name="Quantity_SalesInvoiceLine">
          <DataField>Quantity_SalesInvoiceLine</DataField>
        </Field>
        <Field Name="Quantity_SalesInvoiceLineFormat">
          <DataField>Quantity_SalesInvoiceLineFormat</DataField>
        </Field>
        <Field Name="Bill_toName_SalesInvoiceHeader">
          <DataField>Bill_toName_SalesInvoiceHeader</DataField>
        </Field>
        <Field Name="Sell_toCustomerNo_SalesInvoiceHeader">
          <DataField>Sell_toCustomerNo_SalesInvoiceHeader</DataField>
        </Field>
        <Field Name="betragmw22">
          <DataField>betragmw22</DataField>
        </Field>
        <Field Name="betragmw22Format">
          <DataField>betragmw22Format</DataField>
        </Field>
        <Field Name="betragmw3">
          <DataField>betragmw3</DataField>
        </Field>
        <Field Name="betragmw3Format">
          <DataField>betragmw3Format</DataField>
        </Field>
        <Field Name="PostingDate_SalesCrMemoHeader">
          <DataField>PostingDate_SalesCrMemoHeader</DataField>
        </Field>
        <Field Name="waehrung3">
          <DataField>waehrung3</DataField>
        </Field>
        <Field Name="Amount_SalesCrMemoLine">
          <DataField>Amount_SalesCrMemoLine</DataField>
        </Field>
        <Field Name="Amount_SalesCrMemoLineFormat">
          <DataField>Amount_SalesCrMemoLineFormat</DataField>
        </Field>
        <Field Name="UnitPrice_SalesCrMemoLine">
          <DataField>UnitPrice_SalesCrMemoLine</DataField>
        </Field>
        <Field Name="UnitPrice_SalesCrMemoLineFormat">
          <DataField>UnitPrice_SalesCrMemoLineFormat</DataField>
        </Field>
        <Field Name="No_SalesCrMemoHeader">
          <DataField>No_SalesCrMemoHeader</DataField>
        </Field>
        <Field Name="No_SalesCrMemoLine">
          <DataField>No_SalesCrMemoLine</DataField>
        </Field>
        <Field Name="Quantity_SalesCrMemoLine">
          <DataField>Quantity_SalesCrMemoLine</DataField>
        </Field>
        <Field Name="Quantity_SalesCrMemoLineFormat">
          <DataField>Quantity_SalesCrMemoLineFormat</DataField>
        </Field>
        <Field Name="Bill_toName_SalesCrMemoHeader">
          <DataField>Bill_toName_SalesCrMemoHeader</DataField>
        </Field>
        <Field Name="Sell_toCustomerNo_SalesCrMemoHeader">
          <DataField>Sell_toCustomerNo_SalesCrMemoHeader</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

