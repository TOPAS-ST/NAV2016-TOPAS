OBJECT Report 50095 Auslaufende Vertr„ge manuell
{
  OBJECT-PROPERTIES
  {
    Date=27.11.20;
    Time=10:03:17;
    Modified=Yes;
    Version List=TOPAS;
  }
  PROPERTIES
  {
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  IF Auswahl = Auswahl::ausgelaufene THEN BEGIN
                    vertraege_abgelaufen := TRUE;
                  END ELSE BEGIN
                    vertraege_abgelaufen := FALSE;
                  END;

                  ExcelHeader;
                END;

    OnPostReport=BEGIN
                   IF vertraege_abgelaufen = TRUE THEN
                     EnterCell(2,1,'Gesamt ausgelaufene Vertr„ge:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text)
                   ELSE
                     EnterCell(2,1,'Gesamt auslaufende Vertr„ge:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                   EnterCell(2,3,FORMAT(Wartungsvertrag.COUNT),'',TRUE,FALSE,FALSE,'[red]',TempExcelBuffer."Cell Type"::Number);

                   FinishExcel;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table50011;
               DataItemTableView=SORTING(Debitornr.,Vertragsablaufdatum,Wartungsvertragsnr.)
                                 WHERE(Status=FILTER(Auftrag|ACTS|ACHAT|Champs Partner));
               OnPreDataItem=BEGIN
                               TotalRecNo := Wartungsvertrag.COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  ColumnNo := 1;
                                  EnterCell(RowNo,ColumnNo,Wartungsvertrag."Wartungsvertragsnr.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Wartungsvertrag.TABLENAME,1,50015,
                                                           Wartungsvertrag."Wartungsvertragsnr."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,Wartungsvertrag."Auftragsnr. Service",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,Wartungsvertrag."Debitornr.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Debitor.TABLENAME,1,21,Wartungsvertrag."Debitornr."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,Wartungsvertrag.Debitorname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,FORMAT(Wartungsvertrag.Startdatum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,FORMAT(Wartungsvertrag.Vertragsablaufdatum),'',FALSE,FALSE,FALSE,'DD.MM.YYYY[red]',TempExcelBuffer."Cell Type"::Date);
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,Wartungsvertrag.Endkunde,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

                                  SystemPos.RESET;
                                  SystemPos.SETRANGE(Art,SystemPos.Art::System);
                                  SystemPos.SETRANGE(Inaktiv,FALSE);
                                  SystemPos.SETRANGE("Wartungsvertragsnr.","Wartungsvertragsnr.");
                                  SystemPos.SETRANGE("Artikelnr.",Basisger„t);
                                  SystemPos.SETRANGE(Basisger„t,TRUE);
                                  IF SystemPos.FINDLAST THEN BEGIN
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,SystemPos."Artikelnr. 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,SystemPos."Seriennr.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(SystemPos.TABLENAME,1,50096,SystemPos."Seriennr."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT(SystemPos."Board ini"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,SystemPos."Nr.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Lieferschein.TABLENAME,1,130,SystemPos."Nr."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                  END ELSE
                                    ColumnNo := ColumnNo + 4;

                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,Wartungsvertrag."Lieferscheinnr. Service",
                                            TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Lieferschein.TABLENAME,1,130,Wartungsvertrag."Lieferscheinnr. Service"),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);

                                  ColumnNo := ColumnNo + 1;
                                  IF Debitor.GET( Wartungsvertrag."Debitornr.") THEN
                                    EnterCell(RowNo,ColumnNo,Debitor."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

                                  AN_liegt_vor := FALSE;
                                  v_datum := 0D;
                                  v_belegnr := '';
                                  ServicePos.RESET;
                                  ServicePos.ASCENDING(FALSE);
                                  ServicePos.SETRANGE("Wartungsvertragsnr.",Wartungsvertrag."Wartungsvertragsnr.");
                                  ServicePos.SETRANGE(Art,ServicePos.Art :: Service);
                                  ServicePos.SETRANGE(Basisger„t,TRUE);
                                  //ServicePos.SETRANGE(Inaktiv,FALSE);
                                  IF ServicePos.FINDFIRST THEN BEGIN
                                    ServiceZuordnung.RESET;
                                    ServiceZuordnung.SETRANGE("Belegnr.",ServicePos."Urspr. Lieferscheinnr.");
                                    ServiceZuordnung.SETRANGE("Belegzeilennr.",ServicePos."Urspr. Lieferscheinzeilennr.");
                                    IF NOT ServiceZuordnung.FINDFIRST THEN BEGIN
                                      CLEAR(ServiceZuordnung);
                                      ServiceZuordnung.SETRANGE("Belegnr.",ServicePos."Urspr. Auftragsnr.");
                                      ServiceZuordnung.SETRANGE("Belegzeilennr.",ServicePos."Urspr. Auftragszeilennr.");
                                      IF ServiceZuordnung.FINDFIRST THEN ;
                                    END;
                                    REPEAT
                                      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type" :: Quote);
                                      SalesHeader.SETRANGE("No.",ServiceZuordnung."Nr.");
                                      IF SalesHeader.FINDFIRST THEN
                                        IF v_datum < SalesHeader."Document Date" THEN BEGIN
                                          AN_liegt_vor := TRUE;
                                          v_datum := SalesHeader."Document Date";
                                          v_belegnr := SalesHeader."No.";
                                        END;
                                      ArchSalesHeader.SETRANGE("Document Type",ArchSalesHeader."Document Type"::Quote);
                                      ArchSalesHeader.SETRANGE("No.",ServiceZuordnung."Nr.");
                                      IF ArchSalesHeader.FINDLAST THEN
                                        IF v_datum < ArchSalesHeader."Document Date" THEN BEGIN
                                          AN_liegt_vor := TRUE;
                                          v_datum := ArchSalesHeader."Document Date";
                                          v_belegnr := ArchSalesHeader."No.";
                                        END;
                                    UNTIL ServiceZuordnung.NEXT = 0;
                                  END;
                                  ColumnNo := ColumnNo + 1;
                                  IF AN_liegt_vor THEN BEGIN
                                    EnterCell(RowNo,ColumnNo,'Ja','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,v_belegnr + ' (' + FORMAT(v_datum) + ')','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                  END ELSE BEGIN
                                    EnterCell(RowNo,ColumnNo,'Nein','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                  END;
                                  ColumnNo := ColumnNo + 1;
                                  EnterCell(RowNo,ColumnNo,FORMAT(Wartungsvertrag.Inaktiv),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

                                  RowNo := RowNo + 1;
                                  RecNo := RecNo + 1;
                                  Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                END;

               ReqFilterFields=Vertragsablaufdatum,Inaktiv,Debitornr. }

    { 2   ;1   ;Column  ;WartungsvertragFIELDCAPTION_Auftragsnr;
               SourceExpr=Wartungsvertrag.FIELDCAPTION("Auftragsnr.") }

    { 3   ;1   ;Column  ;WartungsvertragFIELDCAPTION_Wartungsvertragsnr;
               SourceExpr=Wartungsvertrag.FIELDCAPTION("Wartungsvertragsnr.") }

    { 4   ;1   ;Column  ;Debitornr_Wartungsvertrag;
               SourceExpr="Debitornr." }

    { 5   ;1   ;Column  ;Debitorname_Wartungsvertrag;
               SourceExpr=Debitorname;
               AutoCalcField=Yes }

    { 6   ;1   ;Column  ;Vertragsablaufdatum_Wartungsvertrag;
               SourceExpr=Vertragsablaufdatum }

    { 7   ;1   ;Column  ;Startdatum_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Startdatum) }

    { 8   ;1   ;Column  ;Startdatum_Wartungsvertrag;
               SourceExpr=Startdatum }

    { 9   ;1   ;Column  ;Status_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Status) }

    { 10  ;1   ;Column  ;Status_Wartungsvertrag;
               SourceExpr=Status }

    { 11  ;1   ;Column  ;Endkunde_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Endkunde) }

    { 12  ;1   ;Column  ;Endkunde_Wartungsvertrag;
               SourceExpr=Endkunde }

    { 13  ;1   ;Column  ;Auftragsnr_Wartungsvertrag;
               SourceExpr="Auftragsnr." }

    { 14  ;1   ;Column  ;Wartungsvertragsnr_Wartungsvertrag;
               SourceExpr="Wartungsvertragsnr." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      SystemPos@1000000009 : Record 50024;
      ServicePos@1000000008 : Record 50024;
      Lieferschein@1000000010 : Record 110;
      TempWartungsvertrag@1000000016 : Record 50011;
      lieferscheinzeile@1000000015 : Record 111;
      Debitor@1000000014 : Record 18;
      ServiceZuordnung@1000000013 : Record 50027;
      SalesHeader@1000000012 : Record 36;
      ArchSalesHeader@1000000011 : Record 5107;
      TempExcelBuffer@1000000007 : TEMPORARY Record 370;
      TOPAS_API@1140019 : Codeunit 50001;
      FileMgt@1000000000 : Codeunit 419;
      ServerFileName@1000000025 : Text;
      SheetName@1000000024 : Text[250];
      DoUpdateExistingWorksheet@1000000023 : Boolean;
      Testmode@1000000022 : Boolean;
      Window@1000000021 : Dialog;
      RecNo@1000000020 : Integer;
      TotalRecNo@1000000019 : Integer;
      RowNo@1000000018 : Integer;
      ColumnNo@1000000017 : Integer;
      PrintToExcel@1140012 : Boolean;
      artikel2@1140001 : Code[60];
      endkundezeile@1140002 : Text[80];
      FileName@1140018 : Text[250];
      FilePath@1000000001 : Text[250];
      board_ini@1140011 : Code[20];
      monat_ablaufdatum_ab@1140020 : Integer;
      jahr_ablaufdatum_ab@1140022 : Integer;
      vertragsablaufdatum_ab@1140023 : Date;
      ablaufdatum_ab@1000000003 : Date;
      ablaufdatum_bis@1000000004 : Date;
      vertraege_abgelaufen@1140021 : Boolean;
      mail_subject@1000000005 : Text;
      mail_body@1000000006 : Text;
      Auswahl@1000000002 : 'auslaufende,ausgelaufene';
      AN_liegt_vor@1140025 : Boolean;
      v_datum@1140030 : Date;
      v_belegnr@1140031 : Code[20];
      Text000@1000000029 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000028 : TextConst 'DEU=Servicevertr„ge';
      Text002@1000000027 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text020@1000000030 : TextConst 'DEU=Vertragsnr.;ENU=Contract No.';
      Text021@1000000031 : TextConst 'DEU=Auftragsnr.;ENU=Order No.';
      Text022@1000000032 : TextConst 'DEU=Debitornr.;ENU=Customer No.';
      Text023@1000000033 : TextConst 'DEU=Debitorname;ENU=Customer Name';
      Text024@1000000034 : TextConst 'DEU=Startdatum;ENU=Start Date';
      Text025@1000000035 : TextConst 'DEU=Ablaufdatum;ENU=End Date';
      Text026@1000000036 : TextConst 'DEU=Endkunde;ENU=End Customer';
      Text027@1000000037 : TextConst 'DEU=Artikelnr.;ENU=Item No.';
      Text028@1000000038 : TextConst 'DEU=SN Chassis;ENU=SN Chassis';
      Text029@1000000039 : TextConst 'DEU=Board ini;ENU=Board ini';
      Text030@1000000040 : TextConst 'DEU=Lieferscheinnr. Chassis;ENU=Shipment No. Chassis';
      Text031@1000000045 : TextConst 'DEU=Lieferschein Service';
      Text032@1000000041 : TextConst 'DEU=Betreuer Innendienst;ENU=Salesperson';
      Text033@1000000042 : TextConst 'DEU=Letztes Angebot;ENU=Quotes last 3 Months';
      Text034@1000000043 : TextConst 'DEU=Angebotsnr.;ENU=Quote No.';
      Text035@1000000044 : TextConst 'DEU=Inaktiv;ENU=Inactive';
      ExcelFileExtensionTok@1000000026 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';

    PROCEDURE ExcelHeader@1140002();
    BEGIN
      IF vertraege_abgelaufen = TRUE THEN
        FileName := 'Ausgelaufene Wartungsvertraege KJ - Uebersicht'
      ELSE
        FileName := 'Auslaufende Wartungsvertraege KJ - Uebersicht ';
      FilePath := 'F:\Daten NEU\Gemeinsame Ordner\Navision\EMailVersand\';

      //********************************************************************************************
      //                               Definiert die Protokolldatei
      //********************************************************************************************

      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;

      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');

      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);

      //Header

      IF vertraege_abgelaufen = TRUE THEN
        EnterCell(1,1,'Ausgelaufene Vertr„ge im Zeitraum:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text)
      ELSE
        EnterCell(1,1,'Auslaufende Vertr„ge im Zeitraum:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      EnterCell(1,3,Wartungsvertrag.GETFILTER(Vertragsablaufdatum),'',TRUE,FALSE,FALSE,'[red]',TempExcelBuffer."Cell Type"::Text);

      RecNo := 0;
      RowNo := 4;
      ColumnNo := 1;
      EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text025,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text026,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text027,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text028,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text029,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text030,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text031,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text032,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text033,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text034,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text035,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE FinishExcel@1000000000();
    BEGIN
      Window.CLOSE;
      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN
          TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,Text001);
        TempExcelBuffer.WriteSheet(
          PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
          TempExcelBuffer.SetWidth(1,'A',16);
          TempExcelBuffer.SetWidth(1,'B',16);
          TempExcelBuffer.SetWidth(1,'C',16);
          TempExcelBuffer.SetWidth(1,'D',35);
          TempExcelBuffer.SetWidth(1,'E',16);
          TempExcelBuffer.SetWidth(1,'F',16);
          TempExcelBuffer.SetWidth(1,'G',40);
          TempExcelBuffer.SetWidth(1,'H',30);
          TempExcelBuffer.SetWidth(1,'I',16);
          TempExcelBuffer.SetWidth(1,'K',30);
          TempExcelBuffer.SetWidth(1,'M',30);
          TempExcelBuffer.SetWidth(1,'N',30);
          TempExcelBuffer.SetWidth(1,'O',30);

        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
          //TempExcelBuffer.OpenExcelWithoutAutoFit(Text001,FileName + ExcelFileExtensionTok,FilePath,TRUE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

