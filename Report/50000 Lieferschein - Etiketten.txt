OBJECT Report 50000 Lieferschein - Etiketten
{
  OBJECT-PROPERTIES
  {
    Date=18.10.21;
    Time=09:35:57;
    Modified=Yes;
    Version List=Version: 1, Status: Fertig,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  Firmendaten.GET;
                  Firmendaten.CALCFIELDS(Picture);
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table110;
               OnAfterGetRecord=BEGIN
                                  CurrReport.LANGUAGE := Language.GetLanguageID("Language Code");
                                END;
                                 }

    { 2   ;1   ;DataItem;                    ;
               DataItemTable=Table111;
               DataItemTableView=WHERE(Type=CONST(Item));
               PrintOnlyIfDetail=No;
               OnAfterGetRecord=BEGIN
                                  IF Item.GET("No.") THEN
                                    IF (Item."Manufacturer Code" = '20') OR (Item."Manufacturer Code" = '52')
                                    OR (Item."Manufacturer Code" = '53') OR (Item."Manufacturer Code" = '57')
                                    OR (Item."Manufacturer Code" = '59') OR (Item."Manufacturer Code" = '5710')
                                    OR (Item."Manufacturer Code" = '5720') OR (Item."Manufacturer Code" = '5730')
                                    OR (Item."Manufacturer Code" = '85') OR (Item."Manufacturer Code" = '86')
                                    OR (Item."Manufacturer Code" = '87')
                                    OR (Item."Manufacturer Code" = '96') OR (Item."Manufacturer Code" = '9610')
                                    OR (Item."Manufacturer Code" = '99')
                                    OR (Item."No." = 'REPARATURKOSTEN') OR (Item."No." = 'REISEKOSTEN') THEN
                                    //Nicht mehr n”tig, da generell alle AudioCodes Artikel mit Hst.code 59 unterdrckt werden k”nnen
                                    //AND ((Item.Serviceklassifizierung = 'SOFTWARE') OR (Item.Serviceklassifizierung = 'LIZENZEN'))) THEN
                                      CurrReport.SKIP;

                                  Cross_ReferenceNo := "Sales Shipment Line"."Cross-Reference No.";
                                END;

               DataItemLink=Document No.=FIELD(No.) }

    { 3   ;2   ;DataItem;                    ;
               DataItemTable=Table32;
               DataItemTableView=SORTING(Entry No.)
                                 WHERE(Document Type=CONST(Sales Shipment));
               PrintOnlyIfDetail=No;
               OnAfterGetRecord=BEGIN
                                  {
                                  barcode_deb:='';
                                  barcode_datecode:='';
                                  barcode_serien:='';
                                  barcode_orderno:=barcode.EncodeBarcode128("Sales Shipment Header"."External Document No.");
                                  barcode_nr:=barcode.EncodeBarcode128("Sales Shipment Line"."Artikelnr. 2");
                                  barcode_deb:=barcode.EncodeBarcode128("Sales Shipment Line"."Cross-Reference No.");
                                  barcode_menge:=barcode.EncodeBarcode128(DELCHR(FORMAT("Item Ledger Entry".Quantity*(-1)),'=','.'));
                                  barcode_datecode:=barcode.EncodeBarcode128("Item Ledger Entry"."Lot No.");
                                  barcode_serien:=barcode.EncodeBarcode128("Item Ledger Entry"."Serial No.");
                                  }
                                END;

               DataItemLink=Document No.=FIELD(Document No.),
                            Document Line No.=FIELD(Line No.) }

    { 1000000000;3;Column;Picture_Firmendaten;
               SourceExpr=Firmendaten.Picture }

    { 5   ;3   ;Column  ;DocumentDate_SalesShipmentHeader;
               SourceExpr="Sales Shipment Header"."Document Date" }

    { 6   ;3   ;Column  ;No_SalesShipmentHeader;
               SourceExpr="Sales Shipment Header"."No." }

    { 7   ;3   ;Column  ;ExternalDocumentNo_SalesShipmentHeader;
               SourceExpr="Sales Shipment Header"."External Document No." }

    { 8   ;3   ;Column  ;Ship_toName_SalesShipmentHeader;
               SourceExpr="Sales Shipment Header"."Ship-to Name" }

    { 10  ;3   ;Column  ;Artikelnr2_SalesShipmentLine;
               SourceExpr="Sales Shipment Line"."Artikelnr. 2" }

    { 12  ;3   ;Column  ;Cross_ReferenceNo   ;
               SourceExpr=Cross_ReferenceNo }

    { 13  ;3   ;Column  ;Quantity_1          ;
               DecimalPlaces=0:0;
               SourceExpr=Quantity*(-1) }

    { 1000000001;3;Column;Quantity_1_text    ;
               SourceExpr=FORMAT(Quantity*(-1),0,'<Integer>') }

    { 14  ;3   ;Column  ;leadfreetext1       ;
               SourceExpr="lead free text1" }

    { 15  ;3   ;Column  ;leadfreetext2       ;
               SourceExpr="lead free text2" }

    { 17  ;3   ;Column  ;text1               ;
               SourceExpr=text1 }

    { 19  ;3   ;Column  ;date_or_sn          ;
               SourceExpr=date_or_sn }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Language@1000000002 : Record 8;
      Item@1000000003 : Record 27;
      Firmendaten@1000000000 : Record 79;
      "lead free text1"@1140007 : Text[30];
      "lead free text2"@1140008 : Text[30];
      text1@1140010 : Text[30];
      date_or_sn@1140011 : Text[60];
      Cross_ReferenceNo@1000000001 : Code[40];
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionItemLedgerEntry_Body3@5010(VAR "Item Ledger Entry"@1000000000 : Record 32);
    BEGIN
      WITH "Item Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput("Sales Shipment Line"."Cross-Reference No."<> '');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItemLedgerEntry_Body4@5011(VAR "Item Ledger Entry"@1000000000 : Record 32);
    BEGIN
      WITH "Item Ledger Entry" DO BEGIN
        "lead free text1"  := '';
        "lead free text2"  := '';
        IF Item.GET("Sales Shipment Line"."No.") THEN BEGIN
          IF Item."Lead Free" = TRUE THEN BEGIN
            "lead free text1"  := 'lt. Angabe des Herstellers';
            "lead free text2"  := 'Lead Free';
          END;
          IF (Item."Lead Free" = TRUE) AND
             ((Item.Herstellerkurzname = 'HAL') OR
             (Item.Herstellerkurzname = 'ISS') OR
             (Item.Herstellerkurzname = 'IDT') OR
             (Item.Herstellerkurzname = 'PLX') OR
             (Item.Herstellerkurzname = 'TDK') OR
             (Item.Herstellerkurzname = 'TSC') OR
             (Item.Herstellerkurzname = 'WML') OR
             (Item.Herstellerkurzname = 'SIM') OR
             (Item.Herstellerkurzname = 'NEX') OR
             (Item.Herstellerkurzname = 'LSI') OR
             (Item.Herstellerkurzname = 'WML') OR
             (Item.Herstellerkurzname = 'SIW') OR
             (Item.Herstellerkurzname = 'ACL') OR
             (Item.Herstellerkurzname = 'ICP') OR
             (Item.Herstellerkurzname = 'RIC') OR
             (Item.Herstellerkurzname = 'ICSA') OR
             (Item.Herstellerkurzname = 'ICS')) THEN BEGIN
               IF CurrReport.LANGUAGE = 1033 THEN BEGIN
                 "lead free text1" := 'according to the manufacturer';
                 "lead free text2" := 'ROHS compliant';
               END ELSE BEGIN
                 "lead free text2" := 'ROHS konform';
               END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItemLedgerEntry_Body5@5012(VAR "Item Ledger Entry"@1000000000 : Record 32);
    BEGIN
      WITH "Item Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput(("Item Ledger Entry"."Item Tracking" = "Item Ledger Entry"."Item Tracking"::"Serial No.") OR
        ("Item Ledger Entry"."Item Tracking" = "Item Ledger Entry"."Item Tracking"::"Lot No."));
        IF "Item Ledger Entry"."Item Tracking" = "Item Ledger Entry"."Item Tracking"::"Lot No." THEN BEGIN
          text1 := 'Datecode:';
          date_or_sn := "Item Ledger Entry"."Lot No.";
          //date_or_sn_bar := barcode_datecode;
        END;
        IF "Item Ledger Entry"."Item Tracking" = "Item Ledger Entry"."Item Tracking"::"Serial No." THEN BEGIN
          text1 := 'Seriennr.:';
          IF CurrReport.LANGUAGE() = 1033 THEN    text1 := 'Serialno:';
          date_or_sn := "Item Ledger Entry"."Serial No.";
          //date_or_sn_bar := barcode_serien;
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'ItemLedgerEntry': CASE SectionId OF
          'Body3': OnPreSectionItemLedgerEntry_Body3("Item Ledger Entry");
          'Body4': OnPreSectionItemLedgerEntry_Body4("Item Ledger Entry");
          'Body5': OnPreSectionItemLedgerEntry_Body5("Item Ledger Entry");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>gjQAAMVb23LbOBJ936r5BxYfJvaWTJHg3bFmyhc5cY0taSwn2doXFy3BEjcUoSUhx8rXb4MX8SKQ
FGU5O5mqiCDYaJxunEY3kLM/Xxee8IKD0CV+T1QkWRSwPyFT15/1xBV9PrHEP//47R9n/6KBc4+X
JKDhrbMmKzrGget47k8cCNnPrxtBmoQknUkrNInCwFngnnjr4mdon8yx6wsnQp+63zGl2BeFS+LT
gHgP6yV0u8Iv/ddlgMNQyo0vfbnJPaKOUNHthY3YSRUQekKqVEe4XHl0FWBo8/EKPvE6wmj15LmT
v/D6gXzHrPfUnDgWtpBsPmtYk2EqV2649Jx10xSS8a9JMHBeNtNXJQBXUjQDBA2f/oMndEB6oi7L
ctbQIPjaxd70G34CvF/cCf4SeD1xTunytNsdnH8d9++/niBZMaQf6LtEydIJpSk+NWXN6l6tfWfh
TkLoZsvd4ZVDne4lWSwdf3304WE4Oh9/OBaFkTPDn7E7m9OeaOly3PDNndI5WC/Sc+QscfCX6097
4uUqpGQhCndOMHP9sCfaHQGQVfSOgOQUhC++C7IesE/n4fD5/M71PHeBKQ4AzKXbE5GuwbTA5D3x
nPlQRzCXVAR/E4SzC8efhtFPeLiheKEkzjN2PByO5+5yAXI/Y2fKxBX8JoaezZJ9xwSB4+EfbDoj
HNzjCQlgBjRY4Xz7p4Cslmlz+vGD8+SBxOgvRYGJ3cCXipjoVVKzXtVb18eHV3QUuD4d+t765vkK
U8cFn3h2vLByCkrpxVcX/+iJ3z737/tHkVKXw8H44Yi9Pz7O+oLy32FBksmKTUUYEKl3fdO/vTqC
X8cxKoj5RwBv029YI89YObQ4AG6BGA2PpzMc9AG69f8bQhVxERwP7x9uBp+OIh0ZPsdCDOoGsxy6
ESpCCstOOOebjoHz0kfmVblu6eOxEBtFbTRK5JYl/CvMkjPNPX4G9uLa4oJM14kdIvuxZyW/4MfA
dcCJhbcx71xDD0WV1G19oqGTwXhqlVUzNqM7wSWZYoWvavwSVILoBYOrSJZ0rWPC17dk4jAtrz3i
UKaWhAykK8BwqgkK5qYzcqZxuER6B/6X4U/Ufr6i5I5MV8xzMlIZYxrxeKxd/xXI0He81JwD8sil
twf8CkqATH8yJ8FnErg/YTYOeOotfqag/5z8iPsknpsODOHO4qMZITZeL56IR2brGDUzRS2CDFkA
2twJnAkoCXpDMzyFmF6IQrdGJl17GNYUKEkTuSDoS4g3QCU6Vsk460aGrLMyiuXaXKuO3AmL7hfk
NZ1OuV1RIKCb8paVdU2WINCBleWCw8beoWm2ZNu2pZgdBUU/bUtPbZMIf7x2AzDc1IkiNnwYTfjf
hCxuFkA9PB/gflmJDZu9Gs+ehSPO9G+dJ+wVZx41RZNm/J9Ox9DZZGVD6WhIUtlPVdmGBFxaiCJf
IU4r8pJ2hJCZundBvGkerktnyQTc3QKR9b/0sAfrPSC+OxHOP8FKJ8HPc8+dwZ7onq35GMCohXl8
T7xzp1MP5971xKKIVq7HJgy+Fyu/k+OpddBriVTEhZ5pu+V2SWMEv2xv4FeQXIe7JkeMo1mwhYVu
iDmbaZWsYMFuKQd8DtqYFmL0UnIB18PV9LJlgVjEtr82imtnH7WtfbQ6++iJVG1P+1iZfVS9zj6K
eTD71JH+zlapENLOFnpbW+h1tjASqcaetjCzuKzpkgHkpdudPNZlk9iyZECQVk1AXpN06Gbqxl4m
aROXdzbRjkLbmcxsazKjzmRmItVqH1lkY2Muu3blqLLReuWUQgpgu1qcfuwPop/4dMN00UM7AO22
AJp1AFqxVLRHaJbVjHvMWgTlvYHLFxcS/LDnvmBIWXySB7LY2gpR1DriWnWI2olUfsStRxRliNqa
pAJghlrHIPLuxFEC9gKHFHueH0gxrMMAlrLgrxZPONigWmxsB2rrMGnXZklyInbfOClvkNWVeB/D
A7O8a7SLGMaoMPp7pIQNxSfZbSZt+qQdtK2jniLz89NubYJ6drfyqHtJvNXCT0Y2+CNVJ0D55AeZ
O6ffKI/6LX7BHitibSfiKJeIK0iNCMi0356Ns0yykI7zF3M5HYeQz83FISPRzEg5S0WHSsXPA1Zp
hRWMHjllu1+UgCP7nTJwVX6nFFzlV1aaGSRLRC22u+NziKJqktYR9HoeqdjENVt0561brah2hkBt
2QbtUApQ1T1KAbnoGMFcxeIN6JciYQLVqRDFwZET0BOfSJsYmDW0g007TBrfmqNVvY6jebYp2IWf
+/A4WuVwNONjJxz6owAnXJ3y1xZ1q3nqVqyIHQ3t7dStmiXq5nvaNnWrktlQSU12uAZEmANx+GVA
wvDxnu1xsT/BA5IR94EIWrW2CPoAHMqvYzZyqJLVJk1ZrlrByLSBXpv2YhUcWoHozsS5/X2rZa/J
78GWGj9m1bNllp3FgO655y2x5c08wMIF/pmkDfGpKiQJW7zJedMOydZx50AEqql1BMobJF9o1fgJ
Co9ANQ6BqrsTqFbY+2qS8Xbu1PQSd1ZMpsSdSIVtL+Jse6NyvWwa70Gdf68cn4K3PCqPFBzul+14
NePNO97diVbjp0zNRJuVIhHE1gqiVTRjf6LN8G/JsLkP2xGC9S7UumcoQ1n1ULMMCfER1iHKGawm
Zu5YW/CwM30OMGYurfDQK3ZoBaDeOjbtcrKk75lPsSpGCqAZM4WqdCzGY1tHS3Z8eGnYQCRbB3tW
E46oCUfUcHyZnNHoe1T0lMxN2GrTDxSF77A/w0nGkq6n0/LKbBlw9dYVO/5hSuuAy+ZXHXB5p2cF
q+x+qUPnBFxt94Crv1PGopfvflTMqHz3w9Ari00Hj7bslP+RBI+h/8sCrf72yx27B1qdf4DUHGhz
5+Owy64IA83ruyLIJmGgVXzdJzK0PlPaJbQa/DOl5siQ1epNrQJRxWRkuieqZWfeGdrch63wNQ50
p6M1tRoVoa2Kv8+6/Gt0Z7HQmvt1Y7IKJphdawaTZheDpOSyUHIPVU7/e9O9omTh5of8/b8rQj8W
rykK8eFK/EqK/9pcQ2Qnr3FTrJq+182RavXUvdQbECmvlNHi4kS1KtpeqqSH/0L+ImdeOfMt9wMr
ldX3Upa9O6EkopS8jtY+h3HVyhnNyrECe0G1TSVeElBeNYW7BuqPACoVMwuKcWpg0YjcjTCnc+Uw
lnCFJ+7C8UaeM8EhBLZTxtW5odO95z+PTpTkmjUrRNVmgdXj2UVaGd7fnT8cFYaAPcyH3z368can
eAZOMaMfPxyXyIabR22VDyqVUGSO1Vn6ILD8QYjCbcGwWnPeVjOa0jha0Y24xLVDdhOPVmTRRLlI
Lnd5N2pfpL18oI2E2k17y23JLObxYg9vb7cdvsq9ij3yb7M3Z92afzz0x/8A</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

