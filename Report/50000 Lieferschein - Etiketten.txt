OBJECT Report 50000 Lieferschein - Etiketten
{
  OBJECT-PROPERTIES
  {
    Date=14.03.19;
    Time=10:19:34;
    Modified=Yes;
    Version List=Version: 1, Status: Fertig,FORNAV3.1.0.1460/1460;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                  Firmendaten.GET;
                  Firmendaten.CALCFIELDS(Picture);
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table110;
               OnAfterGetRecord=BEGIN
                                  CurrReport.LANGUAGE := Language.GetLanguageID("Language Code");
                                END;
                                 }

    { 2   ;1   ;DataItem;                    ;
               DataItemTable=Table111;
               DataItemTableView=WHERE(Type=CONST(Item));
               PrintOnlyIfDetail=No;
               OnAfterGetRecord=BEGIN
                                  IF Item.GET("No.") THEN
                                    IF (Item."Manufacturer Code" = '20') OR (Item."Manufacturer Code" = '52')
                                    OR (Item."Manufacturer Code" = '53') OR (Item."Manufacturer Code" = '57')
                                    OR (Item."Manufacturer Code" = '59') OR (Item."Manufacturer Code" = '5710')
                                    OR (Item."Manufacturer Code" = '5720') OR (Item."Manufacturer Code" = '5730')
                                    OR (Item."Manufacturer Code" = '85') OR (Item."Manufacturer Code" = '86')
                                    OR (Item."Manufacturer Code" = '87')
                                    OR (Item."Manufacturer Code" = '96') OR (Item."Manufacturer Code" = '9610')
                                    OR (Item."Manufacturer Code" = '99')
                                    OR (Item."No." = 'REPARATURKOSTEN') OR (Item."No." = 'REISEKOSTEN') THEN
                                    //Nicht mehr n”tig, da generell alle AudioCodes Artikel mit Hst.code 59 unterdrckt werden k”nnen
                                    //AND ((Item.Serviceklassifizierung = 'SOFTWARE') OR (Item.Serviceklassifizierung = 'LIZENZEN'))) THEN
                                      CurrReport.SKIP;

                                  Cross_ReferenceNo := "Sales Shipment Line"."Cross-Reference No.";
                                END;

               DataItemLink=Document No.=FIELD(No.) }

    { 3   ;2   ;DataItem;                    ;
               DataItemTable=Table32;
               DataItemTableView=SORTING(Entry No.)
                                 WHERE(Document Type=CONST(Sales Shipment));
               PrintOnlyIfDetail=No;
               OnAfterGetRecord=BEGIN
                                  {
                                  barcode_deb:='';
                                  barcode_datecode:='';
                                  barcode_serien:='';
                                  barcode_orderno:=barcode.EncodeBarcode128("Sales Shipment Header"."External Document No.");
                                  barcode_nr:=barcode.EncodeBarcode128("Sales Shipment Line"."Artikelnr. 2");
                                  barcode_deb:=barcode.EncodeBarcode128("Sales Shipment Line"."Cross-Reference No.");
                                  barcode_menge:=barcode.EncodeBarcode128(DELCHR(FORMAT("Item Ledger Entry".Quantity*(-1)),'=','.'));
                                  barcode_datecode:=barcode.EncodeBarcode128("Item Ledger Entry"."Lot No.");
                                  barcode_serien:=barcode.EncodeBarcode128("Item Ledger Entry"."Serial No.");
                                  }
                                END;

               DataItemLink=Document No.=FIELD(Document No.),
                            Document Line No.=FIELD(Line No.) }

    { 1000000000;3;Column;Picture_Firmendaten;
               SourceExpr=Firmendaten.Picture }

    { 5   ;3   ;Column  ;DocumentDate_SalesShipmentHeader;
               SourceExpr="Sales Shipment Header"."Document Date" }

    { 6   ;3   ;Column  ;No_SalesShipmentHeader;
               SourceExpr="Sales Shipment Header"."No." }

    { 7   ;3   ;Column  ;ExternalDocumentNo_SalesShipmentHeader;
               SourceExpr="Sales Shipment Header"."External Document No." }

    { 8   ;3   ;Column  ;Ship_toName_SalesShipmentHeader;
               SourceExpr="Sales Shipment Header"."Ship-to Name" }

    { 10  ;3   ;Column  ;Artikelnr2_SalesShipmentLine;
               SourceExpr="Sales Shipment Line"."Artikelnr. 2" }

    { 12  ;3   ;Column  ;Cross_ReferenceNo   ;
               SourceExpr=Cross_ReferenceNo }

    { 13  ;3   ;Column  ;Quantity_1          ;
               DecimalPlaces=0:0;
               SourceExpr=Quantity*(-1) }

    { 14  ;3   ;Column  ;leadfreetext1       ;
               SourceExpr="lead free text1" }

    { 15  ;3   ;Column  ;leadfreetext2       ;
               SourceExpr="lead free text2" }

    { 17  ;3   ;Column  ;text1               ;
               SourceExpr=text1 }

    { 19  ;3   ;Column  ;date_or_sn          ;
               SourceExpr=date_or_sn }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Language@1000000002 : Record 8;
      Item@1000000003 : Record 27;
      Firmendaten@1000000000 : Record 79;
      "lead free text1"@1140007 : Text[30];
      "lead free text2"@1140008 : Text[30];
      text1@1140010 : Text[30];
      date_or_sn@1140011 : Text[60];
      Cross_ReferenceNo@1000000001 : Code[40];
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionItemLedgerEntry_Body3@5010(VAR "Item Ledger Entry"@1000000000 : Record 32);
    BEGIN
      WITH "Item Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput("Sales Shipment Line"."Cross-Reference No."<> '');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItemLedgerEntry_Body4@5011(VAR "Item Ledger Entry"@1000000000 : Record 32);
    BEGIN
      WITH "Item Ledger Entry" DO BEGIN
        "lead free text1"  := '';
        "lead free text2"  := '';
        IF Item.GET("Sales Shipment Line"."No.") THEN BEGIN
          IF Item."Lead Free" = TRUE THEN BEGIN
            "lead free text1"  := 'lt. Angabe des Herstellers';
            "lead free text2"  := 'Lead Free';
          END;
          IF (Item."Lead Free" = TRUE) AND
             ((Item.Herstellerkurzname = 'HAL') OR
             (Item.Herstellerkurzname = 'ISS') OR
             (Item.Herstellerkurzname = 'IDT') OR
             (Item.Herstellerkurzname = 'PLX') OR
             (Item.Herstellerkurzname = 'TDK') OR
             (Item.Herstellerkurzname = 'TSC') OR
             (Item.Herstellerkurzname = 'WML') OR
             (Item.Herstellerkurzname = 'SIM') OR
             (Item.Herstellerkurzname = 'NEX') OR
             (Item.Herstellerkurzname = 'LSI') OR
             (Item.Herstellerkurzname = 'WML') OR
             (Item.Herstellerkurzname = 'SIW') OR
             (Item.Herstellerkurzname = 'ACL') OR
             (Item.Herstellerkurzname = 'ICP') OR
             (Item.Herstellerkurzname = 'RIC') OR
             (Item.Herstellerkurzname = 'ICSA') OR
             (Item.Herstellerkurzname = 'ICS')) THEN BEGIN
               IF CurrReport.LANGUAGE = 1033 THEN BEGIN
                 "lead free text1" := 'according to the manufacturer';
                 "lead free text2" := 'ROHS compliant';
               END ELSE BEGIN
                 "lead free text2" := 'ROHS konform';
               END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItemLedgerEntry_Body5@5012(VAR "Item Ledger Entry"@1000000000 : Record 32);
    BEGIN
      WITH "Item Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput(("Item Ledger Entry"."Item Tracking" = "Item Ledger Entry"."Item Tracking"::"Serial No.") OR
        ("Item Ledger Entry"."Item Tracking" = "Item Ledger Entry"."Item Tracking"::"Lot No."));
        IF "Item Ledger Entry"."Item Tracking" = "Item Ledger Entry"."Item Tracking"::"Lot No." THEN BEGIN
          text1 := 'Datecode:';
          date_or_sn := "Item Ledger Entry"."Lot No.";
          //date_or_sn_bar := barcode_datecode;
        END;
        IF "Item Ledger Entry"."Item Tracking" = "Item Ledger Entry"."Item Tracking"::"Serial No." THEN BEGIN
          text1 := 'Seriennr.:';
          IF CurrReport.LANGUAGE() = 1033 THEN    text1 := 'Serialno:';
          date_or_sn := "Item Ledger Entry"."Serial No.";
          //date_or_sn_bar := barcode_serien;
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'ItemLedgerEntry': CASE SectionId OF
          'Body3': OnPreSectionItemLedgerEntry_Body3("Item Ledger Entry");
          'Body4': OnPreSectionItemLedgerEntry_Body4("Item Ledger Entry");
          'Body5': OnPreSectionItemLedgerEntry_Body5("Item Ledger Entry");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

