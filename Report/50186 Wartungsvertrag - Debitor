OBJECT Report 50186 Wartungsvertrag - Debitor
{
  OBJECT-PROPERTIES
  {
    Date=29.06.17;
    Time=08:58:31;
    Modified=Yes;
    Version List=FORNAV2.0.0.1189/1189;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  EVALUATE(filter_startdatum,Wartungsvertrag.GETFILTER(Startdatum));
                  EVALUATE(filter_ablaufdatum,Wartungsvertrag.GETFILTER(Vertragsablaufdatum));
                  filter := Wartungsvertrag.GETFILTERS;
                  IF PrintToExcel THEN
                    ExcelKopf;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   IF PrintToExcel THEN BEGIN
                     Excel.Visible(TRUE);
                     CLEAR(Excel);
                     REPEAT
                     UNTIL ISCLEAR(Excel);
                   END;
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table18;
               OnAfterGetRecord=BEGIN
                                  IF show_only_hw_repl THEN BEGIN
                                    hw_repl := FALSE;
                                    ServicePos.RESET;
                                    ServicePos.SETFILTER(Art,'%1',ServicePos.Art::Service);
                                    ServicePos.SETFILTER(Inaktiv,'%1',FALSE);
                                    ServicePos.SETFILTER("Debitornr.",'%1',"No.");
                                    IF ServicePos.FINDFIRST THEN BEGIN
                                      REPEAT
                                        IF STRPOS(ServicePos."Service Artikelnr.",'AHR') <> 0 THEN
                                          hw_repl := TRUE;
                                      UNTIL ServicePos.NEXT = 0;
                                    END;
                                    IF hw_repl = FALSE THEN
                                      CurrReport.SKIP;
                                  END;
                                  TempWartungsvertrag.RESET;
                                  TempWartungsvertrag.SETFILTER(TempWartungsvertrag.Status,'%1',TempWartungsvertrag.Status::Auftrag);
                                  TempWartungsvertrag.SETFILTER(TempWartungsvertrag."Debitornr.",'%1',"No.");
                                  TempWartungsvertrag.SETFILTER(TempWartungsvertrag.Startdatum,filter_startdatum);
                                  TempWartungsvertrag.SETFILTER(TempWartungsvertrag.Vertragsablaufdatum,filter_ablaufdatum);
                                  IF NOT TempWartungsvertrag.FINDFIRST THEN
                                    CurrReport.SKIP;
                                  IF PrintToExcel THEN BEGIN
                                    j := INCSTR(j);
                                    Sheet.Range('A'+j).Value := 'Wartungsvertrags-Å¡bersicht';
                                    Sheet.Range('B'+j).Value := Customer.Name;
                                    Sheet.Range('A'+j+':B'+j).Font.Bold := TRUE;
                                    IF zugangsdaten THEN BEGIN
                                      IF excel_layout = excel_layout::filter THEN BEGIN
                                        Sheet.Range('S'+j).Value := 'myTOPAS Zugangsdaten';
                                        Sheet.Range('S'+j).Font.Bold := TRUE;
                                      END;
                                    END;
                                    j := INCSTR(j);
                                    IF excel_layout = excel_layout::filter THEN
                                      j := INCSTR(j);
                                  END;
                                END;

               ReqFilterFields=No.,AC_Solutionpartner }

    { 2   ;1   ;Column  ;filter              ;
               SourceExpr=filter }

    { 3   ;1   ;Column  ;No_Customer         ;
               SourceExpr="No." }

    { 4   ;1   ;Column  ;Name2_Customer      ;
               SourceExpr="Name 2" }

    { 5   ;1   ;Column  ;Name_Customer       ;
               SourceExpr=Name }

    { 6   ;1   ;DataItem;                    ;
               DataItemTable=Table50011;
               DataItemTableView=SORTING(Debitornr.,Vertragsablaufdatum,Wartungsvertragsnr.)
                                 WHERE(Status=FILTER(Auftrag|ACTS|ACHAT|Champs Partner));
               OnAfterGetRecord=BEGIN
                                  IF show_only_hw_repl THEN BEGIN
                                    hw_repl := FALSE;
                                    ServicePos.RESET;
                                    ServicePos.SETFILTER(Art,'%1',ServicePos.Art::Service);
                                    ServicePos.SETFILTER(Inaktiv,'%1',FALSE);
                                    ServicePos.SETFILTER("Wartungsvertragsnr.",'%1',"Wartungsvertragsnr.");
                                    IF ServicePos.FINDFIRST THEN BEGIN
                                      REPEAT
                                        IF STRPOS(ServicePos."Service Artikelnr.",'AHR') <> 0 THEN
                                          hw_repl := TRUE;
                                      UNTIL ServicePos.NEXT = 0;
                                    END;
                                    IF hw_repl = FALSE THEN
                                      CurrReport.SKIP;
                                  END;
                                  IF PrintToExcel THEN BEGIN
                                    IF excel_layout = excel_layout::klassisch THEN BEGIN
                                      j := INCSTR(j);
                                      Sheet.Range('A'+j).Value := 'Vertragsnr.';
                                      Sheet.Range('B'+j).Value := 'Auftragsnr.';
                                      Sheet.Range('C'+j).Value := 'Startdatum';
                                      Sheet.Range('D'+j).Value := 'Ablaufdatum';
                                      Sheet.Range('E'+j).Value := 'Endkunde';
                                      Sheet.Range('F'+j).Value := 'Endkunde Ort';
                                      Sheet.Range('A'+j+':F'+j).Font.Bold := TRUE;
                                      j := INCSTR(j);
                                      Sheet.Range('A'+j).Value := Wartungsvertrag."Wartungsvertragsnr.";
                                      Sheet.Range('B'+j).Value := Wartungsvertrag."Auftragsnr. Service";
                                      Sheet.Range('C'+j).Value := FORMAT(Wartungsvertrag.Startdatum);
                                      Sheet.Range('D'+j).Value := FORMAT(Wartungsvertrag.Vertragsablaufdatum);
                                      Sheet.Range('E'+j).Value := Wartungsvertrag.Endkunde;
                                      Sheet.Range('F'+j).Value := Wartungsvertrag."Endkunde Ort";
                                      j := INCSTR(j);
                                    END;
                                  END;
                                END;

               ReqFilterFields=Startdatum,Vertragsablaufdatum,Inaktiv;
               DataItemLink=Debitornr.=FIELD(No.) }

    { 7   ;2   ;Column  ;WartungsvertragFIELDCAPTION_Auftragsnr;
               SourceExpr=Wartungsvertrag.FIELDCAPTION("Auftragsnr.") }

    { 8   ;2   ;Column  ;WartungsvertragFIELDCAPTION_Wartungsvertragsnr;
               SourceExpr=Wartungsvertrag.FIELDCAPTION("Wartungsvertragsnr.") }

    { 9   ;2   ;Column  ;Vertragsablaufdatum_Wartungsvertrag;
               SourceExpr=Vertragsablaufdatum }

    { 10  ;2   ;Column  ;Startdatum_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Startdatum) }

    { 11  ;2   ;Column  ;Startdatum_Wartungsvertrag;
               SourceExpr=Startdatum }

    { 12  ;2   ;Column  ;Status_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Status) }

    { 13  ;2   ;Column  ;Status_Wartungsvertrag;
               SourceExpr=Status }

    { 14  ;2   ;Column  ;EndkundeLand_Wartungsvertrag;
               SourceExpr="Endkunde Land" }

    { 15  ;2   ;Column  ;EndkundeOrt_Wartungsvertrag;
               SourceExpr="Endkunde Ort" }

    { 16  ;2   ;Column  ;EndkundePLZ_Code_Wartungsvertrag;
               SourceExpr="Endkunde PLZ-Code" }

    { 17  ;2   ;Column  ;EndkundeAdresse_Wartungsvertrag;
               SourceExpr="Endkunde Adresse" }

    { 18  ;2   ;Column  ;Endkunde_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Endkunde) }

    { 19  ;2   ;Column  ;Endkunde_Wartungsvertrag;
               SourceExpr=Endkunde }

    { 20  ;2   ;Column  ;Auftragsnr_Wartungsvertrag;
               SourceExpr="Auftragsnr." }

    { 21  ;2   ;Column  ;Wartungsvertragsnr_Wartungsvertrag;
               SourceExpr="Wartungsvertragsnr." }

    { 22  ;2   ;DataItem;                    ;
               DataItemTable=Table50024;
               DataItemTableView=SORTING(Lfd. Nr.,Art,Nr.)
                                 WHERE(Art=FILTER(Service));
               OnPreDataItem=BEGIN
                               IF show_only_hw_repl THEN
                                 "Serviceleist. & Leihstellungen".SETFILTER("Service Artikelnr.",'AHR*');
                               IF PrintToExcel THEN BEGIN
                                 IF excel_layout = excel_layout::klassisch THEN BEGIN
                                   Sheet.Range('A'+j).Value := 'Artikelnr.';
                                   Sheet.Range('B'+j).Value := 'Seriennr.';
                                   Sheet.Range('C'+j).Value := 'Menge';
                                   Sheet.Range('D'+j).Value := 'Serviceleistung';
                                   Sheet.Range('E'+j).Value := 'Startdatum';
                                   Sheet.Range('F'+j).Value := 'Ablaufdatum';
                                   Sheet.Range('G'+j).Value := 'Board ini';
                                   Sheet.Range('H'+j).Value := 'HW Lieferung';
                                   Sheet.Range('I'+j).Value := 'Position';
                                   Sheet.Range('J'+j).Value := 'HW Lieferdatum';
                                   Sheet.Range('K'+j).Value := 'Ihre Referenz';
                                   Sheet.Range('L'+j).Value := 'Projektinfos';
                                   IF zugangsdaten THEN BEGIN
                                     Sheet.Range('M'+j).Value := 'Benutzername';
                                     Sheet.Range('N'+j).Value := 'Passwort';
                                   END;
                                   Sheet.Range('A'+j+':N'+j).Font.Bold := TRUE;
                                   j := INCSTR(j);
                                 END;
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  benutzer := '';
                                  pw := '';
                                  "ext-referenz" := '';
                                  artikel2 := '';
                                  endkundezeile := '';
                                  Lieferscheinkopf.RESET;
                                  Lieferscheinkopf.SETFILTER("No.",'%1',"Serviceleist. & Leihstellungen"."Nr.");
                                  IF Lieferscheinkopf.FINDFIRST THEN
                                    "ext-referenz" := Lieferscheinkopf."External Document No."
                                  ELSE BEGIN
                                    Beleghistorie.RESET;
                                    Beleghistorie.SETRANGE(Belegart,Beleghistorie.Belegart::"Sales Shipment");
                                    Beleghistorie.SETRANGE("Belegnr.","Serviceleist. & Leihstellungen"."Nr."); //Zeilennr. ist hier nicht nâtig
                                    IF Beleghistorie.FINDFIRST THEN
                                      "ext-referenz" := Beleghistorie."Externe Belegnummer";
                                  END;

                                  lieferscheinzeile.RESET;
                                  lieferscheinzeile.SETFILTER(lieferscheinzeile."Document No.",'%1',"Serviceleist. & Leihstellungen"."Nr.");
                                  lieferscheinzeile.SETFILTER(lieferscheinzeile."Line No.",'%1',"Serviceleist. & Leihstellungen"."Belegzeilennr.");
                                  IF lieferscheinzeile.FINDFIRST THEN BEGIN
                                    artikel2 := lieferscheinzeile."Artikelnr. 2";
                                  END ELSE BEGIN
                                    Beleghistorie.RESET;
                                    Beleghistorie.SETRANGE(Belegart,Beleghistorie.Belegart::"Sales Shipment");
                                    Beleghistorie.SETRANGE("Belegnr.","Serviceleist. & Leihstellungen"."Nr.");
                                    Beleghistorie.SETRANGE("Zeilennr.","Serviceleist. & Leihstellungen"."Belegzeilennr.");
                                    IF Beleghistorie.FINDFIRST THEN BEGIN
                                        artikel2 := Beleghistorie."Artikelnr.";
                                    END;
                                  END;

                                  IF PrintToExcel THEN BEGIN
                                    Sheet.Range('A'+j).Value := "Serviceleist. & Leihstellungen"."Artikelnr. 2";
                                    Sheet.Range('B'+j).Value := "Serviceleist. & Leihstellungen"."Seriennr.";
                                    Sheet.Range('C'+j).Value := FORMAT("Serviceleist. & Leihstellungen".Menge);
                                    Sheet.Range('D'+j).Value := artikel2;
                                    Sheet.Range('E'+j).Value := FORMAT("Serviceleist. & Leihstellungen".Lizenzdatum);
                                    Sheet.Range('F'+j).Value := FORMAT("Serviceleist. & Leihstellungen"."Ablaufdatum Serviceleistung");
                                    SystemPos.RESET;
                                    SystemPos.SETFILTER(Art,'%1',SystemPos.Art::System);
                                    SystemPos.SETFILTER(Inaktiv,'%1',FALSE);
                                    SystemPos.SETFILTER(SystemPos."Artikelnr. 2",'%1',"Serviceleist. & Leihstellungen"."Artikelnr. 2");
                                    SystemPos.SETFILTER("Seriennr.",'%1',"Serviceleist. & Leihstellungen"."Seriennr.");
                                    IF SystemPos.FINDLAST THEN
                                      Sheet.Range('G'+j).Value := SystemPos."Board ini";
                                    Sheet.Range('H'+j).Value := "Serviceleist. & Leihstellungen"."Urspr. Lieferscheinnr.";
                                    Sheet.Range('I'+j).Value := "Serviceleist. & Leihstellungen"."Urspr. Lieferscheinzeilennr.";
                                    IF Lieferscheinkopf.GET("Serviceleist. & Leihstellungen"."Urspr. Lieferscheinnr.") THEN
                                      Sheet.Range('J'+j).Value := Lieferscheinkopf."Posting Date"
                                    ELSE BEGIN
                                      Beleghistorie.RESET;
                                      Beleghistorie.SETRANGE(Belegart,Beleghistorie.Belegart::"Sales Shipment");
                                      Beleghistorie.SETRANGE("Belegnr.","Serviceleist. & Leihstellungen"."Urspr. Lieferscheinnr."); //Zeilennr. ist hier nicht nâtig
                                      IF Beleghistorie.FINDFIRST THEN
                                        Sheet.Range('J'+j).Value := Beleghistorie.Belegdatum;
                                    END;
                                    Sheet.Range('K'+j).Value := "ext-referenz";
                                    Sheet.Range('L'+j).Value := "Serviceleist. & Leihstellungen"."System Projektinfos"; //entspricht den ACS Projektinfos aus dem Lieferschein
                                    //Suche nach 1. Basisgerât zum Andruck des Benuters + PW
                                    IF (Basisgerât = TRUE) AND (zugangsdaten = TRUE)  AND ("Zu exportieren" = TRUE) THEN BEGIN
                                      ServicePos.RESET;
                                      ServicePos.SETRANGE(Art,ServicePos.Art::Service);
                                      ServicePos.SETRANGE(Inaktiv,FALSE);
                                      ServicePos.SETRANGE(Basisgerât,TRUE);
                                      ServicePos.SETRANGE("Zu exportieren",TRUE);
                                      ServicePos.SETRANGE("Wartungsvertragsnr.","Wartungsvertragsnr.");
                                      IF ServicePos.FINDFIRST THEN BEGIN
                                        benutzer := ServicePos.Benutzername;
                                        pw := ServicePos.Passwort
                                      END;
                                    END;
                                    IF excel_layout = excel_layout::klassisch THEN BEGIN
                                      Sheet.Range('M'+j).Value := benutzer;
                                      Sheet.Range('N'+j).Value := pw;
                                    END;
                                    IF excel_layout = excel_layout::filter THEN BEGIN
                                      Sheet.Range('M'+j).Value := Wartungsvertrag."Wartungsvertragsnr.";
                                      Sheet.Range('N'+j).Value := Wartungsvertrag."Auftragsnr. Service";
                                      Sheet.Range('O'+j).Value := FORMAT(Wartungsvertrag.Startdatum);
                                      Sheet.Range('P'+j).Value := FORMAT(Wartungsvertrag.Vertragsablaufdatum);
                                      Sheet.Range('Q'+j).Value := Wartungsvertrag.Endkunde;
                                      Sheet.Range('R'+j).Value := Wartungsvertrag."Endkunde Ort";
                                      Sheet.Range('S'+j).Value := benutzer;
                                      Sheet.Range('T'+j).Value := pw;
                                    END;
                                    j := INCSTR(j);
                                  END;
                                END;

               DataItemLink=Wartungsvertragsnr.=FIELD(Wartungsvertragsnr.) }

    { 23  ;3   ;Column  ;endkundezeile       ;
               SourceExpr=endkundezeile }

    { 24  ;3   ;Column  ;ext_referenz        ;
               SourceExpr="ext-referenz" }

    { 25  ;3   ;Column  ;UrsprLieferscheinzeilennr_Serviceleist_Leihstellungen;
               SourceExpr="Urspr. Lieferscheinzeilennr." }

    { 26  ;3   ;Column  ;UrsprLieferscheinnr_Serviceleist_Leihstellungen;
               SourceExpr="Urspr. Lieferscheinnr." }

    { 27  ;3   ;Column  ;artikel2            ;
               SourceExpr=artikel2 }

    { 28  ;3   ;Column  ;AblaufdatumServiceleistung_Serviceleist_Leihstellungen;
               SourceExpr="Ablaufdatum Serviceleistung" }

    { 29  ;3   ;Column  ;Lizenzdatum_Serviceleist_Leihstellungen;
               SourceExpr=Lizenzdatum }

    { 30  ;3   ;Column  ;Seriennr_Serviceleist_Leihstellungen;
               SourceExpr="Seriennr." }

    { 31  ;3   ;Column  ;Artikelnr2_Serviceleist_Leihstellungen;
               SourceExpr="Artikelnr. 2" }

    { 32  ;3   ;Column  ;Menge_Serviceleist_Leihstellungen;
               DecimalPlaces=0:0;
               SourceExpr=Menge }

    { 33  ;3   ;Column  ;board_ini           ;
               SourceExpr=board_ini }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1140001;2;Field     ;
                  Name=PrintToExcel;
                  CaptionML=DEU=Export nach Excel;
                  SourceExpr=PrintToExcel }

      { 1140004;2;Field     ;
                  CaptionML=DEU=Excel Layout festlegen;
                  OptionCaptionML=DEU=Filter Ansicht,Klassische Ansicht;
                  SourceExpr=excel_layout }

      { 1140007;2;Field     ;
                  Name=check_zugangsdaten;
                  CaptionML=DEU=Zugangsdaten exportieren;
                  SourceExpr=zugangsdaten;
                  Enabled=PrintToExcel }

      { 1140002;2;Field     ;
                  CaptionML=DEU=Nur Hardware Replacement;
                  SourceExpr=show_only_hw_repl }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Excel@1140017 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      Book@1140016 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      Range@1140015 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      Sheet@1140014 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      j@1140013 : Text[30];
      PrintToExcel@1140012 : Boolean;
      TempWartungsvertrag@1140003 : Record 50011;
      lieferscheinzeile@1140000 : Record 111;
      Artikel@1140022 : Record 27;
      Beleghistorie@1000000001 : Record 50008;
      artikel2@1140001 : Code[60];
      endkundezeile@1140002 : Text[80];
      filter_startdatum@1140004 : Text[30];
      filter_ablaufdatum@1140005 : Text[30];
      filter@1140006 : Text[180];
      Lieferscheinkopf@1140007 : Record 110;
      "ext-referenz"@1140008 : Text[80];
      "show_ext-referenz"@1140009 : Boolean;
      SystemPos@1140010 : Record 50024;
      ServicePos@1140018 : Record 50024;
      board_ini@1140011 : Code[20];
      show_only_hw_repl@1140020 : Boolean;
      hw_repl@1140019 : Boolean;
      excel_layout@1140021 : 'filter,klassisch';
      zugangsdaten@1140023 : Boolean;
      benutzer@1140024 : Code[40];
      pw@1140025 : Text[30];
      ExcelExport@1000000000 : Boolean;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionServiceleist_Leihstellungen_Body6@5010(VAR "Serviceleist. & Leihstellungen"@1000000000 : Record 50024);
    BEGIN
      WITH "Serviceleist. & Leihstellungen" DO BEGIN
        ReportForNav.ShowOutput(endkundezeile <> '');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionServiceleist_Leihstellungen_Body7@5011(VAR "Serviceleist. & Leihstellungen"@1000000000 : Record 50024);
    BEGIN
      WITH "Serviceleist. & Leihstellungen" DO BEGIN
        "show_ext-referenz":=TRUE;
        IF "ext-referenz" = '' THEN "show_ext-referenz":=FALSE;
        IF "ext-referenz" = 'VIA EMAIL' THEN "show_ext-referenz":=FALSE;
        IF "ext-referenz" = 'VIA FAX' THEN "show_ext-referenz":=FALSE;
        ReportForNav.ShowOutput("show_ext-referenz");
      END;
    END;

    LOCAL PROCEDURE OnPreSectionServiceleist_Leihstellungen_Body9@5012(VAR "Serviceleist. & Leihstellungen"@1000000000 : Record 50024);
    BEGIN
      WITH "Serviceleist. & Leihstellungen" DO BEGIN
        board_ini := '';
        SystemPos.RESET;
        SystemPos.SETFILTER(Art,'%1',SystemPos.Art::System);
        SystemPos.SETFILTER(Inaktiv,'%1',FALSE);
        SystemPos.SETFILTER(SystemPos."Artikelnr. 2",'%1',"Artikelnr. 2");
        SystemPos.SETFILTER("Seriennr.",'%1',"Seriennr.");
        IF SystemPos.FINDLAST THEN
          board_ini := SystemPos."Board ini";
        ReportForNav.ShowOutput(board_ini <> '');
      END;
    END;

    PROCEDURE ExcelKopf@1140002();
    BEGIN
      CREATE(Excel,FALSE,TRUE);                                    //erzeugt excel
      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.StandardWidth := 16;
      Sheet.Range('A:A').ColumnWidth := 30;
      Sheet.Range('B:B').ColumnWidth := 30;
      // definiert die beschriftung der Âberschriftszeile
      j := '1';                                                    // <- Export in excel ab Zeile 2
      //FÂr neue Ansicht
      IF excel_layout = excel_layout::filter THEN BEGIN
        Sheet.Range('A3').Value := 'Artikelnr.';
        Sheet.Range('B3').Value := 'Seriennr.';
        Sheet.Range('C3').Value := 'Menge';
        Sheet.Range('D3').Value := 'Serviceleistung';
        Sheet.Range('E3').Value := 'Startdatum';
        Sheet.Range('F3').Value := 'Ablaufdatum';
        Sheet.Range('G3').Value := 'Board ini';
        Sheet.Range('H3').Value := 'HW Lieferung';
        Sheet.Range('I3').Value := 'Position';
        Sheet.Range('J3').Value := 'HW Lieferdatum';
        Sheet.Range('K3').Value := 'Ihre Referenz';
        Sheet.Range('L3').Value := 'Projektinfos';
        Sheet.Range('M3').Value := 'Vertragsnr.';
        Sheet.Range('N3').Value := 'Auftragsnr.';
        Sheet.Range('O3').Value := 'Startdatum';
        Sheet.Range('P3').Value := 'Ablaufdatum';
        Sheet.Range('Q3').Value := 'Endkunde';
        Sheet.Range('Q:Q').ColumnWidth := 30;
        Sheet.Range('R3').Value := 'Endkunde Ort';
        IF zugangsdaten THEN BEGIN
          Sheet.Range('S3').Value := 'Benutzername';
          Sheet.Range('T3').Value := 'Passwort';
        END;
        Sheet.Range('A3:Z3').Font.Bold := TRUE;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Serviceleist_Leihstellungen': CASE SectionId OF
          'Body6': OnPreSectionServiceleist_Leihstellungen_Body6("Serviceleist. & Leihstellungen");
          'Body7': OnPreSectionServiceleist_Leihstellungen_Body7("Serviceleist. & Leihstellungen");
          'Body9': OnPreSectionServiceleist_Leihstellungen_Body9("Serviceleist. & Leihstellungen");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT Sheet@1140014::SelectionChange@1543(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Sheet@1140014::BeforeDoubleClick@1537(Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1140014::BeforeRightClick@1534(Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1140014::Activate@304();
    BEGIN
    END;

    EVENT Sheet@1140014::Deactivate@1530();
    BEGIN
    END;

    EVENT Sheet@1140014::Calculate@279();
    BEGIN
    END;

    EVENT Sheet@1140014::Change@1545(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Sheet@1140014::FollowHyperlink@1470(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Hyperlink");
    BEGIN
    END;

    EVENT Book@1140016::Open@1923();
    BEGIN
    END;

    EVENT Book@1140016::Activate@304();
    BEGIN
    END;

    EVENT Book@1140016::Deactivate@1530();
    BEGIN
    END;

    EVENT Book@1140016::BeforeClose@1546(VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140016::BeforeSave@1547(SaveAsUI@1140001 : Boolean;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140016::BeforePrint@1549(VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140016::NewSheet@1550(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1140016::AddinInstall@1552();
    BEGIN
    END;

    EVENT Book@1140016::AddinUninstall@1553();
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>7a435591-dbc9-4791-b773-5a286c8ea970</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>62a10491-f9f0-46d3-a643-79d0be8397c2</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}
