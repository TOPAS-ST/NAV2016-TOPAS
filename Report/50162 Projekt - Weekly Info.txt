OBJECT Report 50162 Projekt - Weekly Info
{
  OBJECT-PROPERTIES
  {
    Date=18.10.21;
    Time=09:36:01;
    Modified=Yes;
    Version List=TOPAS, BT šbergabe Fkt.!,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  VerkTab.SETFILTER(VerkTab.Code,verfasser);
                  IF (VerkTab.FINDFIRST) AND (verfasser <> '') THEN BEGIN
                    Anlagename := VerkTab."First name"+ ' ' + VerkTab.Name;
                  END ELSE BEGIN
                    Anlagename := '';
                  END;

                  //Die Vermischung der Verfasser aus den alten Krzel aus NAV 5.0 und den neuen Windows Benutzernamen mit W2K\...
                  //werden jetzt so umgesetzt, dass sich der Benutzer die neuen Benutzer nicht merken muss, sondern einfach die alten Krzel
                  //weiter verwenden darf, ohne dass Eintr„ge verloren gehen sollten
                  verfasser_filter := verfasser;
                  IF verfasser_filter <> '' THEN BEGIN
                    l := STRLEN(DELCHR(verfasser_filter,'=',DELCHR(verfasser_filter,'=','|'))) + 1;
                    IF l > 0 THEN BEGIN
                      FOR i := 1 TO l DO BEGIN
                        IF STRPOS(verfasser_filter,'|') > 0 THEN BEGIN
                          verfasser_neu := COPYSTR(verfasser_filter,1,STRPOS(verfasser_filter,'|') - 1);
                          verfasser_filter := COPYSTR(verfasser_filter,STRPOS(verfasser_filter,'|') + 1);
                        END ELSE
                          verfasser_neu := verfasser_filter;
                        UserTab.RESET;
                        UserTab.SETRANGE("Salesperson Code",verfasser_neu);
                        IF UserTab.FINDFIRST THEN
                          verfasser_filter_neu += UserTab."User Name" + '|' + verfasser_neu + '|'
                        ELSE
                          verfasser_filter_neu += verfasser_neu + '|';
                      END;
                    END;
                  END;
                  verfasser_filter_neu := DELCHR(verfasser_filter_neu,'>','|');

                  //*******************************************************************************************************
                  //                                   Projektmemos werden durchsucht
                  //*******************************************************************************************************
                  Memokopf.RESET;
                  Memokopf.SETFILTER("Memonr.",memonr);
                  Memokopf.SETFILTER("Kampagnennr.",'<>%1','');
                  IF ansicht = ansicht::Aussendienst THEN
                    Memokopf.SETFILTER(Kontaktart,'BESUCHSBERICHT|WEEKLY INFO|MESSEKONTAKT');
                  IF ansicht = ansicht::Innendienst THEN
                    Memokopf.SETFILTER(Kontaktart,'<>%1&<>%2&<>%3','BESUCHSBERICHT','WEEKLY INFO','MESSEKONTAKT');
                  Memokopf.SETFILTER("Angelegt von",verfasser_filter_neu);
                  IF (Startdatum <> 0D) AND (Enddatum = 0D) THEN
                    Memokopf.SETFILTER(Anlagedatum,'>=%1',Startdatum);
                  IF (Startdatum <> 0D) AND (Enddatum <> 0D) THEN
                    Memokopf.SETFILTER(Anlagedatum,'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum = 0D) AND (Enddatum <> 0D) THEN
                    Memokopf.SETFILTER(Anlagedatum,'<=%1',Enddatum);
                  IF Memokopf.FINDFIRST THEN BEGIN
                    REPEAT
                      Projekt.RESET;
                      Projekt.SETFILTER("No.",Memokopf."Kampagnennr.");
                      Projekt.SETFILTER("Betreuer Innendienst",betreuer);
                      Projekt.SETFILTER("Salesperson Code",verk„ufer);
                      Projekt.SETFILTER(Teams,teams);
                      Projekt.SETFILTER("Territory Code",gebiet);
                      IF Projekt.FINDFIRST THEN BEGIN
                        IF hstcode <> '' THEN BEGIN
                          Linien.RESET;
                          Linien.SETFILTER("Kampagnennr.",Projekt."No.");
                          Linien.SETFILTER(Linienkrzel,hstcode);
                          IF Linien.FINDFIRST THEN
                            Projektmemo_fllen;
                        END ELSE BEGIN
                          Projektmemo_fllen;
                        END;
                      END;
                    UNTIL Memokopf.NEXT = 0;
                  END;
                  // ab hier neuer Vorschlag: letzte Zeile wird ersetzt und Rest ausgefhrt. Das gleiche gilt auch fr die Kontaktmemos

                  IF (Startdatum <> 0D) AND (Enddatum = 0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1',Startdatum);
                  IF (Startdatum <> 0D) AND (Enddatum <> 0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum = 0D) AND (Enddatum <> 0D) THEN
                    Memokopf.SETFILTER(Memodatum,'<=%1',Enddatum);
                  IF Memokopf.FINDFIRST THEN BEGIN
                    REPEAT
                      Projekt.RESET;
                      Projekt.SETFILTER("No.",Memokopf."Kampagnennr.");
                      Projekt.SETFILTER("Betreuer Innendienst",betreuer);
                      Projekt.SETFILTER("Salesperson Code",verk„ufer);
                      Projekt.SETFILTER(Teams,teams);
                      Projekt.SETFILTER("Territory Code",gebiet);
                      IF Projekt.FINDFIRST THEN BEGIN
                        IF hstcode <> '' THEN BEGIN
                          Linien.RESET;
                          Linien.SETFILTER("Kampagnennr.",Projekt."No.");
                          Linien.SETFILTER(Linienkrzel,hstcode);
                          IF Linien.FINDFIRST THEN
                            Projektmemo_fllen;
                        END ELSE BEGIN
                          Projektmemo_fllen;
                        END;
                      END;
                    UNTIL Memokopf.NEXT = 0;
                  END;



                  //*******************************************************************************************************
                  //                                   Kontaktmemos werden durchsucht
                  //*******************************************************************************************************
                  Memokopf.RESET;
                  Memokopf.SETFILTER("Memonr.",memonr);
                  Memokopf.SETFILTER("Angelegt von",verfasser_filter_neu);
                  Memokopf.SETFILTER("Mandantennr.",'<>%1','');
                  IF ansicht = ansicht::Aussendienst THEN
                    Memokopf.SETFILTER(Kontaktart,'BESUCHSBERICHT|WEEKLY INFO|MESSEKONTAKT');
                  IF ansicht = ansicht::Innendienst THEN
                    Memokopf.SETFILTER(Kontaktart,'<>%1&<>%2&<>%3','BESUCHSBERICHT','WEEKLY INFO','MESSEKONTAKT');
                  IF (Startdatum <> 0D) AND (Enddatum = 0D) THEN
                    Memokopf.SETFILTER(Anlagedatum,'>=%1',Startdatum);
                  IF (Startdatum <> 0D) AND (Enddatum <> 0D) THEN
                    Memokopf.SETFILTER(Anlagedatum,'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum = 0D) AND (Enddatum <> 0D) THEN
                    Memokopf.SETFILTER(Anlagedatum,'<=%1',Enddatum);
                  IF Memokopf.FINDFIRST THEN BEGIN
                    REPEAT
                      IF hstcode <> '' THEN BEGIN
                        Linien.RESET;
                        Linien.SETRANGE("Memonr.",Memokopf."Memonr.");
                        Linien.SETFILTER(Linienkrzel,hstcode);
                        IF Linien.FINDFIRST THEN
                          Kontaktmemo_fllen;
                      END ELSE BEGIN
                        Kontaktmemo_fllen;
                      END;
                    UNTIL Memokopf.NEXT = 0;
                  END;

                  IF (Startdatum <> 0D) AND (Enddatum = 0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1',Startdatum);
                  IF (Startdatum <> 0D) AND (Enddatum <> 0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum = 0D) AND (Enddatum <> 0D) THEN
                    Memokopf.SETFILTER(Memodatum,'<=%1',Enddatum);
                  IF Memokopf.FINDFIRST THEN BEGIN
                    REPEAT
                      IF hstcode <> '' THEN BEGIN
                        Linien.RESET;
                        Linien.SETRANGE("Memonr.",Memokopf."Memonr.");
                        Linien.SETFILTER(Linienkrzel,hstcode);
                        IF Linien.FINDFIRST THEN
                          Kontaktmemo_fllen;
                      END ELSE BEGIN
                        Kontaktmemo_fllen;
                      END;
                    UNTIL Memokopf.NEXT = 0;
                  END;



                  Berichtstabelle_Kontakte.COPY(Berichtstabelle,TRUE);
                  Berichtstabelle_zeilen.COPY(Berichtstabelle,TRUE);

                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;0;DataItem;CopyHeader       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle.RESET;
                               IF sort = sort::Name THEN
                                 Berichtstabelle.SETCURRENTKEY("Feld 10",Datum,Index);
                               IF sort = sort::"Betreuer-Name" THEN
                                 Berichtstabelle.SETCURRENTKEY("Feld 6","Feld 10",Datum,Index);
                               Berichtstabelle.SETFILTER(Tabelle,'%1|%2','PROJEKTMEMO','KONTAKTMEMO');
                               SETRANGE(Number,1,Berichtstabelle.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle.NEXT;
                                  END;
                                END;
                                 }

    { 2   ;1   ;Column  ;Verfasser__verfasser__BetreuerInnendienst__betreuer__Verkauf;
               IncludeCaption=No;
               SourceExpr='Verfasser: '+verfasser+' ,Betreuer Innendienst: '+betreuer+' ,Verk„ufercode: '+verk„ufer+' ,Teams: '+teams+' ,Gebiet: '+gebiet }

    { 3   ;1   ;Column  ;Enddatum            ;
               IncludeCaption=No;
               SourceExpr=Enddatum }

    { 4   ;1   ;Column  ;Startdatum          ;
               IncludeCaption=No;
               SourceExpr=Startdatum }

    { 5   ;1   ;Column  ;Anlagename          ;
               IncludeCaption=No;
               SourceExpr=Anlagename }

    { 6   ;1   ;Column  ;TODAY_0_4           ;
               IncludeCaption=No;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 7   ;1   ;Column  ;ReportForNavPageNo  ;
               IncludeCaption=No;
               SourceExpr=ReportForNav.PageNo }

    { 8   ;1   ;Column  ;USERID              ;
               IncludeCaption=No;
               SourceExpr=USERID }

    { 9   ;1   ;Column  ;Index_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle.Index }

    { 10  ;1   ;Column  ;Feld15_Textkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 15" }

    { 11  ;1   ;Column  ;Wert__FORMAT_Feld5  ;
               IncludeCaption=No;
               SourceExpr='Wert:   ' + FORMAT(Berichtstabelle."Feld 5") }

    { 12  ;1   ;Column  ;Stuck__FORMAT_Feld4 ;
               IncludeCaption=No;
               SourceExpr='Stck: ' + FORMAT(Berichtstabelle."Feld 4") }

    { 13  ;1   ;Column  ;Feld14_Textkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 14" }

    { 14  ;1   ;Column  ;Feld12_Textkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 12" }

    { 15  ;1   ;Column  ;Feld19_Textkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 19" }

    { 16  ;1   ;Column  ;Feld1_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 1" }

    { 17  ;1   ;Column  ;Feld8_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 8" }

    { 18  ;1   ;Column  ;Feld7_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 7" }

    { 19  ;1   ;Column  ;Feld6_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 6" }

    { 20  ;1   ;Column  ;Feld13_Textkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 13" }

    { 21  ;1   ;Column  ;Feld3_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 3" }

    { 22  ;1   ;Column  ;Feld10_Textkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 10" }

    { 23  ;1   ;Column  ;Feld18_Textkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 18" }

    { 24  ;1   ;Column  ;Feld11_Textkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 11" }

    { 25  ;1   ;Column  ;Feld2_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 2" }

    { 26  ;1   ;Column  ;Feld9_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 9" }

    { 1000000001;1;DataItem;CopyContacts     ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_Kontakte.RESET;
                               Berichtstabelle_Kontakte.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_Kontakte.SETFILTER(Tabelle,'%1','ANSPRECHPARTNER');
                               Berichtstabelle_Kontakte.SETFILTER(Index,'%1',Berichtstabelle.Index);
                               SETRANGE(Number,1,Berichtstabelle_Kontakte.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_Kontakte.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_Kontakte.NEXT;
                                  END;
                                END;
                                 }

    { 28  ;2   ;Column  ;Feld6_Kontakte      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Kontakte."Feld 6" }

    { 29  ;2   ;Column  ;Feld12_Kontakte     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Kontakte."Feld 12" }

    { 30  ;2   ;Column  ;Feld10_Kontakte     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Kontakte."Feld 10" }

    { 31  ;2   ;Column  ;Feld2_Kontakte      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_Kontakte."Feld 2" }

    { 1000000002;1;DataItem;CopyLine         ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle_zeilen.RESET;
                               Berichtstabelle_zeilen.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_zeilen.SETFILTER(Tabelle,'%1','MEMOZEILE');
                               Berichtstabelle_zeilen.SETFILTER(Index,'%1',Berichtstabelle.Index);
                               SETRANGE(Number,1,Berichtstabelle_zeilen.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_zeilen.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_zeilen.NEXT;
                                  END;
                                END;
                                 }

    { 33  ;2   ;Column  ;Feld1_Textzeile     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_zeilen."Feld 1" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1140001;2;Field     ;
                  CaptionML=DEU=Anlagedatum von;
                  SourceExpr=Startdatum }

      { 1140003;2;Field     ;
                  CaptionML=DEU=bis;
                  SourceExpr=Enddatum }

      { 1140024;2;Field     ;
                  CaptionML=DEU=Memonr.;
                  SourceExpr=memonr }

      { 1140013;2;Field     ;
                  CaptionML=DEU=Betreuer Innendienst;
                  SourceExpr=betreuer }

      { 1140015;2;Field     ;
                  CaptionML=DEU=Verk„ufercode;
                  SourceExpr=verk„ufer }

      { 1140022;2;Field     ;
                  CaptionML=DEU=Teams;
                  SourceExpr=teams;
                  TableRelation=Team }

      { 1140026;2;Field     ;
                  CaptionML=DEU=Gebietscode;
                  SourceExpr=gebiet;
                  TableRelation=Territory }

      { 1140005;2;Field     ;
                  CaptionML=DEU=Verfasser;
                  SourceExpr=verfasser }

      { 1140019;2;Field     ;
                  CaptionML=DEU=Herstellercode;
                  SourceExpr=hstcode;
                  TableRelation=Manufacturer }

      { 1140021;2;Field     ;
                  CaptionML=DEU=Berichtsansicht;
                  OptionCaptionML=DEU=Alle Komm.-Arten,BESUCHSBERICHT|WEEKLY INFO|MESSEKONTAKT,Alle anderen Komm.-Arten auáer BESUCHSBERICHT etc.;
                  SourceExpr=ansicht }

      { 1140008;2;Field     ;
                  CaptionML=DEU=Berichtssortierung;
                  OptionCaptionML=DEU=Name,"Betreuer Innendienst,Name";
                  SourceExpr=sort }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Berichtstabelle@1140028 : TEMPORARY Record 50037;
      Berichtstabelle_Kontakte@1000000006 : TEMPORARY Record 50037;
      Berichtstabelle_zeilen@1000000007 : TEMPORARY Record 50037;
      Memokopf@1140029 : Record 50003;
      Memozeile@1140031 : Record 50004;
      Projekt@1140014 : Record 5071;
      Projekt_Info@1140004 : Record 5071;
      Ansprech@1140030 : Record 50005;
      Ansprechpartner@1140011 : Record 50005;
      UserTab@1000000002 : Record 2000000120;
      Ansprechfilter@1140000 : Text[250];
      Anlagename@1140001 : Text[50];
      Kuerzel@1140002 : Code[60];
      VerkTab@1140003 : Record 13;
      Contact@1140009 : Record 5050;
      Cont_temp@1140005 : Record 5050;
      Statustext@1140010 : Text;
      Hersteller@1140007 : Record 5720;
      Linien@1140008 : Record 50002;
      Startdatum@1140022 : Date;
      Enddatum@1140023 : Date;
      memonr@1140017 : Code[60];
      betreuer@1140012 : Code[60];
      verk„ufer@1140013 : Code[60];
      teams@1140015 : Code[60];
      gebiet@1140018 : Code[60];
      verfasser@1140024 : Code[60];
      verfasser_neu@1000000000 : Text;
      verfasser_filter@1000000003 : Text;
      verfasser_filter_neu@1000000005 : Text;
      hstcode@1140016 : Code[60];
      sort@1140027 : 'Name,Betreuer-Name';
      ansicht@1140006 : 'Alle,Aussendienst,Innendienst';
      counter@1140019 : Integer;
      l@1000000001 : Integer;
      i@1000000004 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionCopyHeader_Body2@5010(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        ReportForNav.ShowOutput(Textkopf.Tabelle = 'PROJEKTMEMO');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyHeader_Body3@5011(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        ReportForNav.ShowOutput(Textkopf.Tabelle = 'KONTAKTMEMO');
      END;
    END;

    PROCEDURE Projektmemo_fllen@1140001();
    BEGIN
      Berichtstabelle.RESET;
      Berichtstabelle.SETRANGE(Tabelle,'PROJEKTMEMO');
      Berichtstabelle.SETRANGE("Belegnr.",Memokopf."Memonr.");
      IF Berichtstabelle.FINDFIRST THEN BEGIN
      END ELSE BEGIN
        Berichtstabelle.INIT;
        Berichtstabelle.Tabelle := 'PROJEKTMEMO';
        Berichtstabelle.Index := Memokopf."Memonr.";
        Berichtstabelle.Datum := Memokopf.Anlagedatum;
        Berichtstabelle."Belegnr." := Memokopf."Memonr.";
        Berichtstabelle."Feld 1" := Memokopf.Memokurztext;
        Berichtstabelle."Feld 2" := Memokopf."Kampagnennr.";
        Berichtstabelle."Feld 15" := Memokopf."Angelegt von";
        Berichtstabelle."Feld 18" := Memokopf.Memodatum;
        Berichtstabelle."Feld 19" := Memokopf.Kontaktart;
        IF Memokopf.ISO THEN Berichtstabelle."Feld 19" += ' | ISO';
        IF Projekt_Info.GET(Memokopf."Kampagnennr.") THEN BEGIN
          Berichtstabelle."Feld 4" := Projekt_Info.Projektvolumen;
          Berichtstabelle."Feld 5" := Projekt_Info.Projektwert;
          Berichtstabelle."Feld 6" := Projekt_Info."Betreuer Innendienst";
          Berichtstabelle."Feld 7" := Projekt_Info."Salesperson Code";
          Berichtstabelle."Feld 8" := Projekt_Info.Projektstatus;
          Berichtstabelle."Feld 9" := Projekt_Info.Projektklasse;
          Berichtstabelle."Feld 11" := Projekt_Info.Description;
          Ansprech.RESET;
          Ansprech.SETRANGE("Kampagnennr.",Projekt_Info."No.");
          Ansprech.SETRANGE(Fhrungsrolle,TRUE);
          IF Ansprech.FINDFIRST THEN BEGIN
            Ansprech.CALCFIELDS(Mandantenname);
            Berichtstabelle."Feld 10" := Ansprech.Mandantenname;
            IF Cont_temp.GET(Ansprech."Kontaktnr.") THEN BEGIN
              Berichtstabelle."Feld 3" := Cont_temp."Post Code";
              Berichtstabelle."Feld 13" := Cont_temp.City;
            END;
          END ELSE BEGIN
            Berichtstabelle."Feld 14" := 'Kein Hauptbeteiligter im Projekt';
          END;
          Linien.RESET;
          Linien.SETRANGE("Memonr.",Memokopf."Memonr.");
          IF Linien.FINDFIRST THEN BEGIN
            REPEAT
              IF Hersteller.GET(Linien.Linienkrzel) THEN
                Berichtstabelle."Feld 12" := Berichtstabelle."Feld 12" + ' ' + Hersteller.Herstellerkurzname;
            UNTIL Linien.NEXT = 0;
          END;
        END;
      Berichtstabelle.User := USERID;
      Berichtstabelle.Uhrzeit := CURRENTDATETIME;
      Berichtstabelle.INSERT;
      END;
      Ansprech.RESET;
      Ansprech.SETRANGE("Memonr.",Memokopf."Memonr.");
      IF Ansprech.FINDFIRST THEN
        REPEAT
          Berichtstabelle.RESET;
          Berichtstabelle.SETRANGE(Tabelle,'ANSPRECHPARTNER');
          Berichtstabelle.SETRANGE("Belegnr.",Memokopf."Memonr.");
          Berichtstabelle.SETRANGE("Belegnr.",Ansprech."Kontaktnr.");
          IF Berichtstabelle.FINDFIRST THEN BEGIN
          END ELSE BEGIN
            Berichtstabelle.INIT;
            Berichtstabelle.Tabelle := 'ANSPRECHPARTNER';
            Berichtstabelle.Index := Ansprech."Memonr.";
            Berichtstabelle."Belegnr." := Ansprech."Kontaktnr.";
            Berichtstabelle."Feld 2" := Ansprech."Kontaktnr.";
            Ansprech.CALCFIELDS(Mandantenname,Kontaktname);
            Cont_temp.RESET;
            IF Cont_temp.GET(Ansprech."Kontaktnr.") THEN
              Berichtstabelle."Feld 6" := Cont_temp."Organizational Level Code";
            Berichtstabelle."Feld 10" := Ansprech.Mandantenname;
            Berichtstabelle."Feld 12" := Ansprech.Kontaktname;
            Berichtstabelle.User := USERID;
            Berichtstabelle.Uhrzeit := CURRENTDATETIME;
            Berichtstabelle.INSERT;
          END;
        UNTIL Ansprech.NEXT = 0;
      Memozeile.RESET;
      Memozeile.SETRANGE("Memonr.",Memokopf."Memonr.");
      IF Memozeile.FINDFIRST THEN
        REPEAT
          Berichtstabelle.RESET;
          Berichtstabelle.SETRANGE(Tabelle,'MEMOZEILE');
          Berichtstabelle.SETRANGE("Belegnr.",Memokopf."Memonr.");
          Berichtstabelle.SETRANGE("Zeilennr.",Memozeile."Zeilennr.");
          IF Berichtstabelle.FINDFIRST THEN BEGIN
          END ELSE BEGIN
            Berichtstabelle.INIT;
            Berichtstabelle.Tabelle := 'MEMOZEILE';
            Berichtstabelle.Index := Memozeile."Memonr.";
            Berichtstabelle."Belegnr." := Memozeile."Memonr.";
            Berichtstabelle."Zeilennr." := Memozeile."Zeilennr.";
            Berichtstabelle."Feld 1" := Memozeile.Bemerkung;
            Berichtstabelle.User := USERID;
            Berichtstabelle.Uhrzeit := CURRENTDATETIME;
            Berichtstabelle.INSERT;
          END;
        UNTIL Memozeile.NEXT = 0;
    END;

    PROCEDURE Kontaktmemo_fllen@1140000();
    BEGIN
      Contact.RESET;
      Contact.SETFILTER("No.",Memokopf."Mandantennr.");
      Contact.SETFILTER("Betreuer Innendienst",betreuer);
      Contact.SETFILTER("Salesperson Code",verk„ufer);
      Contact.SETFILTER(Teams,teams);
      Contact.SETFILTER("Territory Code",gebiet);
      IF Contact.FINDFIRST THEN BEGIN
        Berichtstabelle.RESET;
        Berichtstabelle.SETFILTER(Berichtstabelle."Belegnr.",'%1',Memokopf."Memonr.");
        IF Berichtstabelle.FINDFIRST THEN BEGIN
        END ELSE BEGIN
          Berichtstabelle.INIT;
          Berichtstabelle.Tabelle := 'KONTAKTMEMO';
          Berichtstabelle.Index := Memokopf."Memonr.";
          Berichtstabelle.Datum := Memokopf.Anlagedatum;
          Berichtstabelle."Belegnr." := Memokopf."Memonr.";
          Berichtstabelle."Feld 1" := Memokopf.Memokurztext;
          Berichtstabelle."Feld 2" := Memokopf."Mandantennr.";
          Berichtstabelle."Feld 15" := Memokopf."Angelegt von";
          Berichtstabelle."Feld 18" := Memokopf.Memodatum;
          Berichtstabelle."Feld 19" := Memokopf.Kontaktart;
          IF Memokopf.ISO THEN Berichtstabelle."Feld 19" += ' | ISO';
          IF Cont_temp.GET(Memokopf."Mandantennr.") THEN BEGIN
            Berichtstabelle."Feld 3" := Cont_temp."Post Code";
            Berichtstabelle."Feld 6" := Cont_temp."Betreuer Innendienst";
            Berichtstabelle."Feld 7" := Cont_temp."Salesperson Code";
            Berichtstabelle."Feld 10" := Cont_temp.Name;
            Berichtstabelle."Feld 13" := Cont_temp.City;
          END;
          Linien.RESET;
          Linien.SETRANGE("Memonr.",Memokopf."Memonr.");
          IF Linien.FINDFIRST THEN
            REPEAT
              Hersteller.SETFILTER(Code,Linien.Linienkrzel);
              IF Hersteller.FINDFIRST THEN
                Berichtstabelle."Feld 12" := Berichtstabelle."Feld 12" + ' ' + Hersteller.Herstellerkurzname;
            UNTIL Linien.NEXT = 0;
          Berichtstabelle.User := USERID;
          Berichtstabelle.Uhrzeit := CURRENTDATETIME;
          Berichtstabelle.INSERT;
          Ansprech.RESET;
          Ansprech.SETRANGE("Memonr.",Memokopf."Memonr.");
          IF Ansprech.FINDFIRST THEN
            REPEAT
              Berichtstabelle.INIT;
              Berichtstabelle.Tabelle := 'ANSPRECHPARTNER';
              Berichtstabelle.Index := Ansprech."Memonr.";
              Berichtstabelle."Belegnr." := Ansprech."Kontaktnr.";
              Berichtstabelle."Feld 2" := Ansprech."Kontaktnr.";
              Ansprech.CALCFIELDS(Mandantenname,Kontaktname);
              IF Cont_temp.GET(Ansprech."Kontaktnr.") THEN
                Berichtstabelle."Feld 6" := Cont_temp."Organizational Level Code";
              Berichtstabelle."Feld 10" := Ansprech.Mandantenname;
              Berichtstabelle."Feld 12" := Ansprech.Kontaktname;
              Berichtstabelle.User := USERID;
              Berichtstabelle.Uhrzeit := CURRENTDATETIME;
              Berichtstabelle.INSERT;
            UNTIL Ansprech.NEXT = 0;
          Memozeile.RESET;
          Memozeile.SETRANGE("Memonr.",Memokopf."Memonr.");
          IF Memozeile.FINDFIRST THEN
            REPEAT
              Berichtstabelle.INIT;
              Berichtstabelle.Tabelle := 'MEMOZEILE';
              Berichtstabelle.Index := Memozeile."Memonr.";
              Berichtstabelle."Belegnr." := Memozeile."Memonr.";
              Berichtstabelle."Zeilennr." := Memozeile."Zeilennr.";
              Berichtstabelle."Feld 1" := Memozeile.Bemerkung;
              Berichtstabelle.User := USERID;
              Berichtstabelle.Uhrzeit := CURRENTDATETIME;
              Berichtstabelle.INSERT;
            UNTIL Memozeile.NEXT = 0;
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'CopyHeader': CASE SectionId OF
          'Body2': OnPreSectionCopyHeader_Body2(Berichtstabelle);
          'Body3': OnPreSectionCopyHeader_Body3(Berichtstabelle);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

