OBJECT Report 50186 Wartungsvertrag - Debitor
{
  OBJECT-PROPERTIES
  {
    Date=04.06.18;
    Time=17:07:27;
    Modified=Yes;
    Version List=FORNAV3.1.0.1460/1460;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                               ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  EVALUATE(filter_startdatum,Wartungsvertrag.GETFILTER(Startdatum));
                  EVALUATE(filter_ablaufdatum,Wartungsvertrag.GETFILTER(Vertragsablaufdatum));
                  filter := Wartungsvertrag.GETFILTERS;
                  IF PrintToExcel THEN
                    ExcelKopf;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   IF PrintToExcel THEN BEGIN
                     Window.CLOSE;

                     IF DoUpdateExistingWorksheet THEN BEGIN
                       TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
                       TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
                       TempExcelBuffer.CloseBook;
                       IF NOT Testmode THEN
                         TempExcelBuffer.DownloadAndOpenExcel;
                     END ELSE BEGIN
                       TempExcelBuffer.CreateBook(ServerFileName,Text001);
                       TempExcelBuffer.WriteSheet(
                         PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
                       TempExcelBuffer.SetWidth(1,'A',30);
                       TempExcelBuffer.SetWidth(1,'B',30);
                       IF excel_layout = excel_layout::filter THEN
                         TempExcelBuffer.SetWidth(1,'Q',30);
                       TempExcelBuffer.CloseBook;
                       IF NOT Testmode THEN BEGIN
                         //TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder ¬Åberschreibt, deshalb neue Fkt. nachfolgend
                         TempExcelBuffer.OpenExcelWithoutAutoFit(Text001,Text001 + '_' + Customer.GETFILTER("No.") + ExcelFileExtensionTok,'',TRUE);
                       END;
                     END;
                     IF NOT Testmode THEN
                       TempExcelBuffer.GiveUserControl;
                   END;
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table18;
               OnAfterGetRecord=BEGIN
                                  CurrReport.LANGUAGE := Language.GetLanguageID(Customer."Language Code");
                                  IF show_only_hw_repl THEN BEGIN
                                    hw_repl := FALSE;
                                    ServicePos.RESET;
                                    ServicePos.SETFILTER(Art,'%1',ServicePos.Art::Service);
                                    ServicePos.SETFILTER(Inaktiv,'%1',FALSE);
                                    ServicePos.SETFILTER("Debitornr.",'%1',"No.");
                                    IF ServicePos.FINDFIRST THEN BEGIN
                                      REPEAT
                                        IF STRPOS(ServicePos."Service Artikelnr.",'AHR') <> 0 THEN
                                          hw_repl := TRUE;
                                      UNTIL ServicePos.NEXT = 0;
                                    END;
                                    IF hw_repl = FALSE THEN
                                      CurrReport.SKIP;
                                  END;
                                  TempWartungsvertrag.RESET;
                                  TempWartungsvertrag.SETFILTER(Status,'%1',TempWartungsvertrag.Status::Auftrag);
                                  TempWartungsvertrag.SETFILTER("Debitornr.",'%1',"No.");
                                  TempWartungsvertrag.SETFILTER(Startdatum,filter_startdatum);
                                  TempWartungsvertrag.SETFILTER(Vertragsablaufdatum,filter_ablaufdatum);
                                  IF NOT TempWartungsvertrag.FINDFIRST THEN
                                    CurrReport.SKIP
                                  ELSE
                                    TotalRecNo := TempWartungsvertrag.COUNT;

                                  IF PrintToExcel THEN BEGIN
                                    RowNo := RowNo + 1;
                                    ColumnNo := 1;
                                    EnterCell(RowNo,ColumnNo,Text010,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,Customer.Name,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                    IF show_credentials THEN BEGIN
                                      IF excel_layout = excel_layout::filter THEN BEGIN
                                        EnterCell(RowNo,19,Text038,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      END;
                                    END;
                                    RowNo := RowNo + 1;
                                    IF excel_layout = excel_layout::filter THEN
                                      RowNo := RowNo + 1;
                                  END;
                                END;

               ReqFilterFields=No.,AC_Solutionpartner }

    { 2   ;1   ;Column  ;filter              ;
               SourceExpr=filter }

    { 3   ;1   ;Column  ;No_Customer         ;
               SourceExpr="No." }

    { 4   ;1   ;Column  ;Name2_Customer      ;
               SourceExpr="Name 2" }

    { 5   ;1   ;Column  ;Name_Customer       ;
               SourceExpr=Name }

    { 6   ;1   ;DataItem;                    ;
               DataItemTable=Table50011;
               DataItemTableView=SORTING(Debitornr.,Vertragsablaufdatum,Wartungsvertragsnr.)
                                 WHERE(Status=FILTER(Auftrag|ACTS|ACHAT|Champs Partner));
               OnAfterGetRecord=BEGIN
                                  IF show_only_hw_repl THEN BEGIN
                                    hw_repl := FALSE;
                                    ServicePos.RESET;
                                    ServicePos.SETFILTER(Art,'%1',ServicePos.Art::Service);
                                    ServicePos.SETFILTER(Inaktiv,'%1',FALSE);
                                    ServicePos.SETFILTER("Wartungsvertragsnr.",'%1',"Wartungsvertragsnr.");
                                    IF ServicePos.FINDFIRST THEN BEGIN
                                      REPEAT
                                        IF STRPOS(ServicePos."Service Artikelnr.",'AHR') <> 0 THEN
                                          hw_repl := TRUE;
                                      UNTIL ServicePos.NEXT = 0;
                                    END;
                                    IF hw_repl = FALSE THEN
                                      CurrReport.SKIP;
                                  END;
                                  IF PrintToExcel THEN BEGIN
                                    IF excel_layout = excel_layout::klassisch THEN BEGIN
                                      RowNo := RowNo + 1;
                                      ColumnNo := 1;
                                      EnterCell(RowNo,ColumnNo,Text032,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text033,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text024,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text025,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text034,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Text035,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      RowNo := RowNo + 1;
                                      ColumnNo := 1;
                                      EnterCell(RowNo,ColumnNo,Wartungsvertrag."Wartungsvertragsnr.",TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Wartungsvertrag."Auftragsnr. Service",TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,FORMAT(Wartungsvertrag.Startdatum),TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Date);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,FORMAT(Wartungsvertrag.Vertragsablaufdatum),TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Date);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Wartungsvertrag.Endkunde,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Wartungsvertrag."Endkunde Ort",TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                      RowNo := RowNo + 1;
                                    END;
                                    RecNo := RecNo + 1;
                                    Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                  END;
                                END;

               ReqFilterFields=Startdatum,Vertragsablaufdatum,Inaktiv;
               DataItemLink=Debitornr.=FIELD(No.) }

    { 7   ;2   ;Column  ;WartungsvertragFIELDCAPTION_Auftragsnr;
               SourceExpr=Wartungsvertrag.FIELDCAPTION("Auftragsnr.") }

    { 8   ;2   ;Column  ;WartungsvertragFIELDCAPTION_Wartungsvertragsnr;
               SourceExpr=Wartungsvertrag.FIELDCAPTION("Wartungsvertragsnr.") }

    { 9   ;2   ;Column  ;Vertragsablaufdatum_Wartungsvertrag;
               SourceExpr=Vertragsablaufdatum }

    { 10  ;2   ;Column  ;Startdatum_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Startdatum) }

    { 11  ;2   ;Column  ;Startdatum_Wartungsvertrag;
               SourceExpr=Startdatum }

    { 12  ;2   ;Column  ;Status_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Status) }

    { 13  ;2   ;Column  ;Status_Wartungsvertrag;
               SourceExpr=Status }

    { 14  ;2   ;Column  ;EndkundeLand_Wartungsvertrag;
               SourceExpr="Endkunde Land" }

    { 15  ;2   ;Column  ;EndkundeOrt_Wartungsvertrag;
               SourceExpr="Endkunde Ort" }

    { 16  ;2   ;Column  ;EndkundePLZ_Code_Wartungsvertrag;
               SourceExpr="Endkunde PLZ-Code" }

    { 17  ;2   ;Column  ;EndkundeAdresse_Wartungsvertrag;
               SourceExpr="Endkunde Adresse" }

    { 18  ;2   ;Column  ;Endkunde_Wartungsvertrag_Lbl;
               SourceExpr=Wartungsvertrag.FIELDCAPTION(Endkunde) }

    { 19  ;2   ;Column  ;Endkunde_Wartungsvertrag;
               SourceExpr=Endkunde }

    { 20  ;2   ;Column  ;Auftragsnr_Wartungsvertrag;
               SourceExpr="Auftragsnr." }

    { 21  ;2   ;Column  ;Wartungsvertragsnr_Wartungsvertrag;
               SourceExpr="Wartungsvertragsnr." }

    { 22  ;2   ;DataItem;                    ;
               DataItemTable=Table50024;
               DataItemTableView=SORTING(Lfd. Nr.,Art,Nr.)
                                 WHERE(Art=FILTER(Service));
               OnPreDataItem=BEGIN
                               IF show_only_hw_repl THEN
                                 "Serviceleist. & Leihstellungen".SETFILTER("Service Artikelnr.",'AHR*');

                               IF export_all = FALSE THEN
                                 "Serviceleist. & Leihstellungen".SETFILTER("Ablaufdatum Serviceleistung",'>=%1',WORKDATE);

                               IF PrintToExcel THEN BEGIN

                                 IF excel_layout = excel_layout::klassisch THEN BEGIN
                                   ColumnNo := 1;
                                   EnterCell(RowNo,ColumnNo,Text020,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                   ColumnNo := ColumnNo + 1;
                                   EnterCell(RowNo,ColumnNo,Text021,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                   ColumnNo := ColumnNo + 1;
                                   EnterCell(RowNo,ColumnNo,Text022,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                   ColumnNo := ColumnNo + 1;
                                   EnterCell(RowNo,ColumnNo,Text023,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                   ColumnNo := ColumnNo + 1;
                                   EnterCell(RowNo,ColumnNo,Text024,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                   ColumnNo := ColumnNo + 1;
                                   EnterCell(RowNo,ColumnNo,Text025,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                   ColumnNo := ColumnNo + 1;
                                   EnterCell(RowNo,ColumnNo,Text026,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                   ColumnNo := ColumnNo + 1;
                                   EnterCell(RowNo,ColumnNo,Text027,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                   ColumnNo := ColumnNo + 1;
                                   EnterCell(RowNo,ColumnNo,Text028,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                   ColumnNo := ColumnNo + 1;
                                   EnterCell(RowNo,ColumnNo,Text029,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                   ColumnNo := ColumnNo + 1;
                                   EnterCell(RowNo,ColumnNo,Text030,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                   ColumnNo := ColumnNo + 1;
                                   EnterCell(RowNo,ColumnNo,Text031,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);

                                   IF show_credentials THEN BEGIN
                                     ColumnNo := ColumnNo + 1;
                                     EnterCell(RowNo,ColumnNo,Text036,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                     ColumnNo := ColumnNo + 1;
                                     EnterCell(RowNo,ColumnNo,Text037,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                                   END;
                                   RowNo := RowNo + 1;
                                 END;
                               END;
                             END;

               OnAfterGetRecord=BEGIN
                                  user := '';
                                  pw := '';
                                  "ext-referenz" := '';
                                  artikel2 := '';
                                  endkundezeile := '';
                                  Lieferscheinkopf.RESET;
                                  Lieferscheinkopf.SETFILTER("No.",'%1',"Serviceleist. & Leihstellungen"."Nr.");
                                  IF Lieferscheinkopf.FINDFIRST THEN
                                    "ext-referenz" := Lieferscheinkopf."External Document No."
                                  ELSE BEGIN
                                    Beleghistorie.RESET;
                                    Beleghistorie.SETRANGE(Belegart,Beleghistorie.Belegart::"Sales Shipment");
                                    Beleghistorie.SETRANGE("Belegnr.","Serviceleist. & Leihstellungen"."Nr."); //Zeilennr. ist hier nicht n‚Äùtig
                                    IF Beleghistorie.FINDFIRST THEN
                                      "ext-referenz" := Beleghistorie."Externe Belegnummer";
                                  END;

                                  lieferscheinzeile.RESET;
                                  lieferscheinzeile.SETFILTER(lieferscheinzeile."Document No.",'%1',"Serviceleist. & Leihstellungen"."Nr.");
                                  lieferscheinzeile.SETFILTER(lieferscheinzeile."Line No.",'%1',"Serviceleist. & Leihstellungen"."Belegzeilennr.");
                                  IF lieferscheinzeile.FINDFIRST THEN BEGIN
                                    artikel2 := lieferscheinzeile."Artikelnr. 2";
                                  END ELSE BEGIN
                                    Beleghistorie.RESET;
                                    Beleghistorie.SETRANGE(Belegart,Beleghistorie.Belegart::"Sales Shipment");
                                    Beleghistorie.SETRANGE("Belegnr.","Serviceleist. & Leihstellungen"."Nr.");
                                    Beleghistorie.SETRANGE("Zeilennr.","Serviceleist. & Leihstellungen"."Belegzeilennr.");
                                    IF Beleghistorie.FINDFIRST THEN BEGIN
                                        artikel2 := Beleghistorie."Artikelnr.";
                                    END;
                                  END;

                                  IF PrintToExcel THEN BEGIN
                                    ColumnNo := 1;
                                    EnterCell(RowNo,ColumnNo,"Serviceleist. & Leihstellungen"."Artikelnr. 2",FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Serviceleist. & Leihstellungen"."Seriennr.",FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Serviceleist. & Leihstellungen".Menge),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,artikel2,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Serviceleist. & Leihstellungen".Lizenzdatum),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Serviceleist. & Leihstellungen"."Ablaufdatum Serviceleistung"),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                    ColumnNo := ColumnNo + 1;

                                    SystemPos.RESET;
                                    SystemPos.SETFILTER(Art,'%1',SystemPos.Art::System);
                                    SystemPos.SETFILTER(Inaktiv,'%1',FALSE);
                                    SystemPos.SETFILTER(SystemPos."Artikelnr. 2",'%1',"Serviceleist. & Leihstellungen"."Artikelnr. 2");
                                    SystemPos.SETFILTER("Seriennr.",'%1',"Serviceleist. & Leihstellungen"."Seriennr.");
                                    IF SystemPos.FINDLAST THEN BEGIN
                                      EnterCell(RowNo,ColumnNo,SystemPos."Board ini",FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    END;
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"Serviceleist. & Leihstellungen"."Urspr. Lieferscheinnr.",FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,FORMAT("Serviceleist. & Leihstellungen"."Urspr. Lieferscheinzeilennr."),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;

                                    IF Lieferscheinkopf.GET("Serviceleist. & Leihstellungen"."Urspr. Lieferscheinnr.") THEN
                                      EnterCell(RowNo,ColumnNo,FORMAT(Lieferscheinkopf."Posting Date"),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date)
                                    ELSE BEGIN
                                      Beleghistorie.RESET;
                                      Beleghistorie.SETRANGE(Belegart,Beleghistorie.Belegart::"Sales Shipment");
                                      Beleghistorie.SETRANGE("Belegnr.","Serviceleist. & Leihstellungen"."Urspr. Lieferscheinnr."); //Zeilennr. ist hier nicht n‚Äùtig
                                      IF Beleghistorie.FINDFIRST THEN
                                        EnterCell(RowNo,ColumnNo,FORMAT(Beleghistorie.Belegdatum),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                    END;
                                    ColumnNo := ColumnNo + 1;
                                    EnterCell(RowNo,ColumnNo,"ext-referenz",FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    ColumnNo := ColumnNo + 1;
                                    //entspricht den ACS Projektinfos aus dem Lieferschein
                                    EnterCell(RowNo,ColumnNo,"Serviceleist. & Leihstellungen"."System Projektinfos",FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

                                    //Suche nach 1. Basisger‚Äût zum Andruck des Benuters + PW
                                    IF (Basisger‚Äût = TRUE) AND (show_credentials = TRUE)  AND ("Zu exportieren" = TRUE) THEN BEGIN
                                      ServicePos.RESET;
                                      ServicePos.SETRANGE(Art,ServicePos.Art::Service);
                                      ServicePos.SETRANGE(Inaktiv,FALSE);
                                      ServicePos.SETRANGE(Basisger‚Äût,TRUE);
                                      ServicePos.SETRANGE("Zu exportieren",TRUE);
                                      ServicePos.SETRANGE("Wartungsvertragsnr.","Wartungsvertragsnr.");
                                      IF ServicePos.FINDFIRST THEN BEGIN
                                        user := ServicePos.Benutzername;
                                        pw := ServicePos.Passwort
                                      END;
                                    END;
                                    IF excel_layout = excel_layout::klassisch THEN BEGIN
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,user,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,pw,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    END;
                                    IF excel_layout = excel_layout::filter THEN BEGIN
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Wartungsvertrag."Wartungsvertragsnr.",FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Wartungsvertrag."Auftragsnr. Service",FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,FORMAT(Wartungsvertrag.Startdatum),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,FORMAT(Wartungsvertrag.Vertragsablaufdatum),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Wartungsvertrag.Endkunde,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Wartungsvertrag."Endkunde Ort",FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,user,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,pw,FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                    END;
                                    RowNo := RowNo + 1;

                                  END;
                                END;

               DataItemLink=Wartungsvertragsnr.=FIELD(Wartungsvertragsnr.) }

    { 23  ;3   ;Column  ;endkundezeile       ;
               SourceExpr=endkundezeile }

    { 24  ;3   ;Column  ;ext_referenz        ;
               SourceExpr="ext-referenz" }

    { 25  ;3   ;Column  ;UrsprLieferscheinzeilennr_Serviceleist_Leihstellungen;
               SourceExpr="Urspr. Lieferscheinzeilennr." }

    { 26  ;3   ;Column  ;UrsprLieferscheinnr_Serviceleist_Leihstellungen;
               SourceExpr="Urspr. Lieferscheinnr." }

    { 27  ;3   ;Column  ;artikel2            ;
               SourceExpr=artikel2 }

    { 28  ;3   ;Column  ;AblaufdatumServiceleistung_Serviceleist_Leihstellungen;
               SourceExpr="Ablaufdatum Serviceleistung" }

    { 29  ;3   ;Column  ;Lizenzdatum_Serviceleist_Leihstellungen;
               SourceExpr=Lizenzdatum }

    { 30  ;3   ;Column  ;Seriennr_Serviceleist_Leihstellungen;
               SourceExpr="Seriennr." }

    { 31  ;3   ;Column  ;Artikelnr2_Serviceleist_Leihstellungen;
               SourceExpr="Artikelnr. 2" }

    { 32  ;3   ;Column  ;Menge_Serviceleist_Leihstellungen;
               DecimalPlaces=0:0;
               SourceExpr=Menge }

    { 33  ;3   ;Column  ;board_ini           ;
               SourceExpr=board_ini }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1140001;2;Field     ;
                  Name=PrintToExcel;
                  CaptionML=DEU=Export nach Excel;
                  SourceExpr=PrintToExcel }

      { 1140004;2;Field     ;
                  CaptionML=DEU=Excel Layout festlegen;
                  OptionCaptionML=DEU=Filter Ansicht,Klassische Ansicht;
                  SourceExpr=excel_layout }

      { 1000000000;2;Field  ;
                  CaptionML=DEU=Alles exportieren;
                  SourceExpr=export_all }

      { 1140007;2;Field     ;
                  Name=check_zugangsdaten;
                  CaptionML=DEU=Zugangsdaten exportieren;
                  SourceExpr=show_credentials;
                  Enabled=PrintToExcel }

      { 1140002;2;Field     ;
                  CaptionML=DEU=Nur Hardware Replacement;
                  SourceExpr=show_only_hw_repl }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TempWartungsvertrag@1000000041 : Record 50011;
      lieferscheinzeile@1000000040 : Record 111;
      Artikel@1000000039 : Record 27;
      Beleghistorie@1000000001 : Record 50008;
      SystemPos@1000000043 : Record 50024;
      ServicePos@1000000042 : Record 50024;
      Lieferscheinkopf@1000000044 : Record 110;
      TempExcelBuffer@1000000038 : TEMPORARY Record 370;
      Language@1000000012 : Record 8;
      FileMgt@1000000011 : Codeunit 419;
      ServerFileName@1000000010 : Text;
      SheetName@1000000009 : Text[250];
      DoUpdateExistingWorksheet@1000000008 : Boolean;
      Testmode@1000000007 : Boolean;
      Window@1000000006 : Dialog;
      RecNo@1000000005 : Integer;
      TotalRecNo@1000000004 : Integer;
      RowNo@1000000003 : Integer;
      ColumnNo@1000000002 : Integer;
      PrintToExcel@1140012 : Boolean;
      artikel2@1140001 : Code[60];
      endkundezeile@1140002 : Text[80];
      filter_startdatum@1140004 : Text[30];
      filter_ablaufdatum@1140005 : Text[30];
      filter@1140006 : Text[180];
      "ext-referenz"@1140008 : Text[80];
      "show_ext-referenz"@1140009 : Boolean;
      board_ini@1140011 : Code[20];
      show_only_hw_repl@1140020 : Boolean;
      hw_repl@1140019 : Boolean;
      export_all@1000000045 : Boolean;
      excel_layout@1140021 : 'filter,klassisch';
      show_credentials@1140023 : Boolean;
      user@1140024 : Code[40];
      pw@1140025 : Text[30];
      ExcelExport@1000000000 : Boolean;
      Text000@1000000016 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000015 : TextConst 'DEU=Wartungsvertr‚Äûge;ENU=Service Contracts';
      Text002@1000000014 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text003@1000000035 : TextConst 'DEU=Fehler beim Export nach Excel. Es konnte kein Filter gefunden werden. Der Report wird abgebrochen.';
      Text010@1000000036 : TextConst 'DEU=Wartungsvertrags-≈°bersicht;ENU=Contracts Overview';
      Text020@1000000017 : TextConst 'DEU=Artikelnr.;ENU=Item No.';
      Text021@1000000018 : TextConst 'DEU=Seriennr.;ENU=Serial No.';
      Text022@1000000019 : TextConst 'DEU=Menge;ENU=Quantity';
      Text023@1000000020 : TextConst 'DEU=Serviceleistung;ENU=Service';
      Text024@1000000021 : TextConst 'DEU=Startdatum;ENU=Start Date';
      Text025@1000000022 : TextConst 'DEU=Ablaufdatum;ENU=End Date';
      Text026@1000000023 : TextConst 'DEU=Board ini;ENU=Board ini';
      Text027@1000000024 : TextConst 'DEU=HW Lieferung;ENU=HW Shipment';
      Text028@1000000025 : TextConst 'DEU=Position;ENU=Position';
      Text029@1000000026 : TextConst 'DEU=HW Lieferdatum;ENU=HW Shipdate';
      Text030@1000000027 : TextConst 'DEU=Ihre Referenz;ENU=Your Reference';
      Text031@1000000028 : TextConst 'DEU=Projektinfos;ENU=Project Infos';
      Text032@1000000029 : TextConst 'DEU=Vertragsnr.;ENU=Contract Number';
      Text033@1000000030 : TextConst 'DEU=Auftragsnr.;ENU=Order No.';
      Text034@1000000031 : TextConst 'DEU=Endkunde;ENU=End Customer';
      Text035@1000000032 : TextConst 'DEU=Endkunde Ort;ENU=End Customer City';
      Text036@1000000033 : TextConst 'DEU=Benutzername;ENU=Username';
      Text037@1000000034 : TextConst 'DEU=Passwort;ENU=Password';
      Text038@1000000037 : TextConst 'DEU=myTOPAS Zugangsdaten;ENU=myTOPAS Authorization';
      ExcelFileExtensionTok@1000000013 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionServiceleist_Leihstellungen_Body6@5010(VAR "Serviceleist. & Leihstellungen"@1000000000 : Record 50024);
    BEGIN
      WITH "Serviceleist. & Leihstellungen" DO BEGIN
        ReportForNav.ShowOutput(endkundezeile <> '');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionServiceleist_Leihstellungen_Body7@5011(VAR "Serviceleist. & Leihstellungen"@1000000000 : Record 50024);
    BEGIN
      WITH "Serviceleist. & Leihstellungen" DO BEGIN
        "show_ext-referenz" := TRUE;
        IF "ext-referenz" = '' THEN "show_ext-referenz" := FALSE;
        IF "ext-referenz" = 'VIA EMAIL' THEN "show_ext-referenz" := FALSE;
        IF "ext-referenz" = 'VIA FAX' THEN "show_ext-referenz" := FALSE;
        ReportForNav.ShowOutput("show_ext-referenz");
      END;
    END;

    LOCAL PROCEDURE OnPreSectionServiceleist_Leihstellungen_Body9@5012(VAR "Serviceleist. & Leihstellungen"@1000000000 : Record 50024);
    BEGIN
      WITH "Serviceleist. & Leihstellungen" DO BEGIN
        board_ini := '';
        SystemPos.RESET;
        SystemPos.SETFILTER(Art,'%1',SystemPos.Art::System);
        SystemPos.SETFILTER(Inaktiv,'%1',FALSE);
        SystemPos.SETFILTER(SystemPos."Artikelnr. 2",'%1',"Artikelnr. 2");
        SystemPos.SETFILTER("Seriennr.",'%1',"Seriennr.");
        IF SystemPos.FINDLAST THEN
          board_ini := SystemPos."Board ini";
        ReportForNav.ShowOutput(board_ini <> '');
      END;
    END;

    PROCEDURE ExcelKopf@1140002();
    BEGIN
      IF Customer.GETFILTER("No.") = '' THEN BEGIN
        MESSAGE(Text003);
        CurrReport.QUIT;
      END;
      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;
      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');
      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);
      RowNo := 3;
      //F¬År neue Ansicht
      IF excel_layout = excel_layout::filter THEN BEGIN
        ColumnNo := 1;
        EnterCell(RowNo,ColumnNo,Text020,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text021,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text022,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text023,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text024,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text025,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text026,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text027,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text028,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text029,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text030,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text031,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text032,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text033,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text024,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text025,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text034,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text035,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        IF show_credentials THEN BEGIN
          ColumnNo := ColumnNo + 1;
          EnterCell(RowNo,ColumnNo,Text036,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo := ColumnNo + 1;
          EnterCell(RowNo,ColumnNo,Text037,TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        END;
      END;
      RowNo := 1;
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := '';
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Serviceleist_Leihstellungen': CASE SectionId OF
          'Body6': OnPreSectionServiceleist_Leihstellungen_Body6("Serviceleist. & Leihstellungen");
          'Body7': OnPreSectionServiceleist_Leihstellungen_Body7("Serviceleist. & Leihstellungen");
          'Body9': OnPreSectionServiceleist_Leihstellungen_Body9("Serviceleist. & Leihstellungen");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

