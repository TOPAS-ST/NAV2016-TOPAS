OBJECT Report 50168 Memovolltextsuche
{
  OBJECT-PROPERTIES
  {
    Date=18.10.21;
    Time=09:36:01;
    Modified=Yes;
    Version List=TOPAS, BT šbergabe Fkt.! ,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  Suchtext := '*' + Suchtext + '*';

                  //*******************************************************************************************************
                  //                                      K”pfe werden untersucht
                  //*******************************************************************************************************
                  Memokopf.RESET;
                  Memokopf.SETFILTER(Memokurztext,Suchtext);
                  Memokopf.SETFILTER("Angelegt von",Verfasser);
                  Memokopf.SETFILTER("Kampagnennr.",'<>%1','');
                  IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1',Startdatum);
                  IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memodatum,'<=%1',Enddatum);
                  IF Memokopf.FIND('-') THEN BEGIN
                    REPEAT
                      Berichtstabelle.RESET;
                      Berichtstabelle.SETRANGE(Index,Memokopf."Memonr.");
                      IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
                        Berichtstabelle.INIT;
                        Berichtstabelle.Tabelle := 'PROJEKTMEMO';
                        Berichtstabelle.Index := Memokopf."Memonr.";
                        Berichtstabelle.Datum := Memokopf.Anlagedatum;
                        Berichtstabelle."Belegnr." := Memokopf."Memonr.";
                        Berichtstabelle."Feld 1" := Memokopf.Memokurztext;
                        Berichtstabelle."Feld 2" := Memokopf."Kampagnennr.";
                        Berichtstabelle."Feld 6" := Memokopf."Angelegt von";
                        Berichtstabelle."Feld 18" := Memokopf.Memodatum;
                        Projekt.SETFILTER(Projekt."No.",Memokopf."Kampagnennr.");
                        IF Projekt.FINDFIRST THEN BEGIN
                          Berichtstabelle."Feld 11" := Projekt.Description;
                          Ansprech.SETFILTER(Ansprech."Kampagnennr.",Projekt."No.");
                          Ansprech.SETFILTER(Fhrungsrolle,'%1',TRUE);
                          IF Ansprech.FINDFIRST THEN BEGIN
                            Ansprech.CALCFIELDS(Mandantenname);
                            Berichtstabelle."Feld 10" := Ansprech.Mandantenname;
                          END;
                        END;
                        Berichtstabelle.User := USERID;
                        Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                        Berichtstabelle.INSERT;
                        Memozeile.RESET;
                        Memozeile.SETRANGE("Memonr.",Memokopf."Memonr.");
                        IF Memozeile.FINDFIRST THEN BEGIN
                          REPEAT
                            Berichtstabelle.INIT;
                            Berichtstabelle.Tabelle := 'MEMOZEILE';
                            Berichtstabelle.Index := Memozeile."Memonr.";
                            Berichtstabelle."Belegnr." := Memozeile."Memonr.";
                            Berichtstabelle."Zeilennr." := Memozeile."Zeilennr.";
                            Berichtstabelle."Feld 1" := Memozeile.Bemerkung;
                            Berichtstabelle.User := USERID;
                            Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                            Berichtstabelle.INSERT;
                          UNTIL Memozeile.NEXT = 0;
                        END;
                      END;
                    UNTIL Memokopf.NEXT = 0;
                  END;

                  Memokopf.RESET;
                  Memokopf.SETFILTER(Memokurztext,Suchtext);
                  Memokopf.SETFILTER("Angelegt von",Verfasser);
                  Memokopf.SETFILTER("Mandantennr.",'<>%1','');
                  IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1',Startdatum);
                  IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memodatum,'<=%1',Enddatum);
                  IF Memokopf.FIND('-') THEN BEGIN
                    REPEAT
                      Berichtstabelle.RESET;
                      Berichtstabelle.SETRANGE(Index,Memokopf."Memonr.");
                      IF Berichtstabelle.FINDFIRST THEN BEGIN
                        Berichtstabelle.INIT;
                        Berichtstabelle.Tabelle := 'KONTAKTMEMO';
                        Berichtstabelle.Index := Memokopf."Memonr.";
                        Berichtstabelle.Datum := Memokopf.Anlagedatum;
                        Berichtstabelle."Belegnr." := Memokopf."Memonr.";
                        Berichtstabelle."Feld 1" := Memokopf.Memokurztext;
                        Berichtstabelle."Feld 2" := Memokopf."Mandantennr.";
                        Berichtstabelle."Feld 6" := Memokopf."Angelegt von";
                        Berichtstabelle."Feld 18" := Memokopf.Memodatum;
                        IF Cont.GET(Memokopf."Mandantennr.") THEN
                          Berichtstabelle."Feld 10" := Cont.Name;
                        Berichtstabelle.User := USERID;
                        Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                        Berichtstabelle.INSERT;
                        Memozeile.RESET;
                        Memozeile.SETRANGE("Memonr.",Memokopf."Memonr.");
                        IF Memozeile.FINDFIRST THEN BEGIN
                          REPEAT
                            Berichtstabelle.INIT;
                            Berichtstabelle.Tabelle := 'MEMOZEILE';
                            Berichtstabelle.Index := Memozeile."Memonr.";
                            Berichtstabelle."Belegnr." := Memozeile."Memonr.";
                            Berichtstabelle."Zeilennr." := Memozeile."Zeilennr.";
                            Berichtstabelle."Feld 1" := Memozeile.Bemerkung;
                            Berichtstabelle.User := USERID;
                            Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                            Berichtstabelle.INSERT;
                          UNTIL Memozeile.NEXT = 0;
                        END;
                      END;
                    UNTIL Memokopf.NEXT = 0;
                  END;

                  //*******************************************************************************************************
                  //                                     Zeilen werden untersucht
                  //*******************************************************************************************************
                  Memozeile.RESET;
                  Memozeile.SETFILTER(Bemerkung,Suchtext);
                  IF Memozeile.FIND('-') THEN BEGIN
                    REPEAT
                      Berichtstabelle.RESET;
                      Berichtstabelle.SETRANGE(Index,Memozeile."Memonr.");
                      IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
                        Memokopf.RESET;
                        Memokopf.SETFILTER("Memonr.",'%1',Memozeile."Memonr.");
                        Memokopf.SETFILTER("Angelegt von",Verfasser);
                        IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                          Memokopf.SETFILTER(Memodatum,'>=%1',Startdatum);
                        IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                          Memokopf.SETFILTER(Memodatum,'>=%1&<=%2',Startdatum,Enddatum);
                        IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                          Memokopf.SETFILTER(Memodatum,'<=%1',Enddatum);
                        IF Memokopf.FIND('-') THEN BEGIN
                          REPEAT
                            Berichtstabelle.INIT;
                            IF Memokopf."Kampagnennr." <> '' THEN BEGIN
                              Berichtstabelle.Tabelle := 'PROJEKTMEMO';
                              Berichtstabelle."Feld 2" := Memokopf."Kampagnennr.";
                              IF Projekt.GET(Memokopf."Kampagnennr.") THEN BEGIN
                                Berichtstabelle."Feld 11" := Projekt.Description;
                                Ansprech.SETFILTER(Ansprech."Kampagnennr.",Projekt."No.");
                                Ansprech.SETFILTER(Fhrungsrolle,'%1',TRUE);
                                IF Ansprech.FINDFIRST THEN BEGIN
                                  Ansprech.CALCFIELDS(Mandantenname);
                                  Berichtstabelle."Feld 10" := Ansprech.Mandantenname;
                                END;
                              END;
                            END;
                            IF  Memokopf."Mandantennr." <> '' THEN BEGIN
                              Berichtstabelle.Tabelle := 'KONTAKTMEMO';
                              Berichtstabelle."Feld 2" := Memokopf."Mandantennr.";
                              Cont.GET(Memokopf."Mandantennr.");
                              IF Cont.FINDFIRST THEN
                                Berichtstabelle."Feld 10" := Cont.Name;
                            END;
                            Berichtstabelle.Index := Memokopf."Memonr.";
                            Berichtstabelle.Datum := Memokopf.Anlagedatum;
                            Berichtstabelle."Belegnr." := Memokopf."Memonr.";
                            Berichtstabelle."Feld 1" := Memokopf.Memokurztext;
                            //Berichtstabelle."Feld 2" := Memokopf."Mandantennr.";
                            Berichtstabelle."Feld 6" := Memokopf."Angelegt von";
                            Berichtstabelle."Feld 18" := Memokopf.Memodatum;
                            Berichtstabelle.User := USERID;
                            Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                            Berichtstabelle.INSERT;
                            Memozeile2.RESET;
                            Memozeile2.SETRANGE("Memonr.",Memokopf."Memonr.");
                            IF Memozeile2.FIND('-') THEN BEGIN
                              REPEAT
                                Berichtstabelle.INIT;
                                Berichtstabelle.Tabelle := 'MEMOZEILE';
                                Berichtstabelle.Index := Memozeile2."Memonr.";
                                Berichtstabelle."Belegnr." := Memozeile2."Memonr.";
                                Berichtstabelle."Zeilennr." := Memozeile2."Zeilennr.";
                                Berichtstabelle."Feld 1" := Memozeile2.Bemerkung;
                                Berichtstabelle.User := USERID;
                                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                                Berichtstabelle.INSERT;
                              UNTIL Memozeile2.NEXT = 0;
                            END;
                          UNTIL Memokopf.NEXT = 0;
                        END;
                      END;
                    UNTIL Memozeile.NEXT = 0;
                  END;

                  Aufgabe.RESET;
                  Aufgabe.SETFILTER("System To-do Type",'%1',Aufgabe."System To-do Type"::Organizer);
                  Aufgabe.SETFILTER(Description,Suchtext);
                  Aufgabe.SETFILTER(Ersteller,Verfasser);
                  IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                    Aufgabe.SETFILTER("Erstellt am",'>=%1',Startdatum);
                  IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                    Aufgabe.SETFILTER("Erstellt am",'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                    Aufgabe.SETFILTER("Erstellt am",'<=%1',Enddatum);
                  IF Aufgabe.FIND('-') THEN BEGIN
                    REPEAT
                      Berichtstabelle.INIT;
                      Berichtstabelle.Tabelle := 'AUFGABE';
                      Berichtstabelle.Index := Aufgabe."No.";
                      IF Aufgabe."Erstellt am" <> 0D THEN
                        Berichtstabelle.Datum := Aufgabe."Erstellt am"
                      ELSE
                        Berichtstabelle.Datum := Aufgabe.Date;
                      Berichtstabelle."Belegnr." := Aufgabe."No.";
                      Berichtstabelle."Feld 1" := Aufgabe.Description;
                      Berichtstabelle."Feld 2" := Aufgabe."Contact Company No.";
                      Berichtstabelle."Feld 6" := Aufgabe.Ersteller;
                      Aufgabe.CALCFIELDS("Contact Company Name");
                      Berichtstabelle."Feld 10" := Aufgabe."Contact Company Name";
                      Berichtstabelle."Feld 18" := Aufgabe.Date;
                      Berichtstabelle.User := USERID;
                      Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                      Berichtstabelle.INSERT;
                      Bemerkung.RESET;
                      Bemerkung.SETFILTER("Table Name",'Aufgabe');
                      Bemerkung.SETFILTER("No.",'%1',Aufgabe."No.");
                      IF Bemerkung.FIND('-') THEN BEGIN
                        REPEAT
                          Berichtstabelle.INIT;
                          Berichtstabelle.Tabelle := 'BEMERKUNG';
                          Berichtstabelle.Index := Bemerkung."No.";
                          Berichtstabelle."Belegnr." := Bemerkung."No.";
                          Berichtstabelle."Zeilennr." := Bemerkung."Line No.";
                          Berichtstabelle.Datum := Bemerkung.Date;
                          Berichtstabelle."Feld 1" := Bemerkung.Comment;
                          Berichtstabelle.User := USERID;
                          Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                          Berichtstabelle.INSERT;
                        UNTIL Bemerkung.NEXT = 0;
                      END;
                    UNTIL Aufgabe.NEXT = 0;
                  END;

                  //*******************************************************************************************************
                  //                        Bemerkungszeilen der Aufgaben werden durchsucht
                  //*******************************************************************************************************
                  Bemerkung.RESET;
                  Bemerkung.SETFILTER(Comment,Suchtext);
                  IF Bemerkung.FIND('-') THEN BEGIN
                    REPEAT
                      Berichtstabelle.RESET;
                      Berichtstabelle.SETRANGE(Index,Bemerkung."No.");
                      IF Berichtstabelle.FINDFIRST THEN BEGIN
                        Aufgabe.RESET;
                        Aufgabe.SETFILTER("No.",'%1',Bemerkung."No.");
                        Aufgabe.SETFILTER(Ersteller,Verfasser);
                        IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                          Aufgabe.SETFILTER("Erstellt am",'>=%1',Startdatum);
                        IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                          Aufgabe.SETFILTER("Erstellt am",'>=%1&<=%2',Startdatum,Enddatum);
                        IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                          Aufgabe.SETFILTER("Erstellt am",'<=%1',Enddatum);
                        IF Aufgabe.FIND('-') THEN BEGIN
                          REPEAT
                            Berichtstabelle.INIT;
                            Berichtstabelle.Tabelle := 'AUFGABE';
                            Berichtstabelle.Index := Aufgabe."No.";
                            IF Aufgabe."Erstellt am" <> 0D THEN
                              Berichtstabelle.Datum := Aufgabe."Erstellt am"
                            ELSE
                              Berichtstabelle.Datum := Aufgabe.Date;
                            Berichtstabelle."Belegnr." := Aufgabe."No.";
                            Berichtstabelle."Feld 1" := Aufgabe.Description;
                            Berichtstabelle."Feld 2" := Aufgabe."Contact Company No.";
                            Berichtstabelle."Feld 6" := Aufgabe.Ersteller;
                            Aufgabe.CALCFIELDS("Contact Company Name");
                            Berichtstabelle."Feld 10" := Aufgabe."Contact Company Name";
                            Berichtstabelle."Feld 18" := Aufgabe.Date;
                            Berichtstabelle.User := USERID;
                            Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                            Berichtstabelle.INSERT;
                            Bemerkung2.RESET;
                            Bemerkung2.SETRANGE("No.",Aufgabe."No.");
                            IF Bemerkung2.FINDFIRST THEN BEGIN
                              REPEAT
                                Berichtstabelle.INIT;
                                Berichtstabelle.Tabelle := 'BEMERKUNG';
                                Berichtstabelle.Index := Bemerkung2."No.";
                                Berichtstabelle."Belegnr." := Bemerkung2."No.";
                                Berichtstabelle."Zeilennr." := Bemerkung2."Line No.";
                                Berichtstabelle.Datum := Bemerkung2.Date;
                                Berichtstabelle."Feld 1" := Bemerkung2.Comment;
                                Berichtstabelle.User := USERID;
                                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                                Berichtstabelle.INSERT;
                              UNTIL Bemerkung2.NEXT = 0;
                            END;
                          UNTIL Aufgabe.NEXT = 0;
                        END;
                      END;
                    UNTIL Bemerkung.NEXT = 0;
                  END;
                  Berichtstabelle_zeilen.COPY(Berichtstabelle,TRUE);

                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

    UseRequestPage=Yes;
  }
  DATASET
  {
    { 1000000000;;DataItem;CopyHeader        ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle.RESET;
                               Berichtstabelle.SETCURRENTKEY(Datum,Index);
                               Berichtstabelle.ASCENDING(FALSE);
                               Berichtstabelle.SETFILTER(Tabelle,'%1|%2|%3','PROJEKTMEMO','KONTAKTMEMO','AUFGABE');
                               SETRANGE(Number,1,Berichtstabelle.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle.NEXT;
                                  END;
                                END;
                                 }

    { 2   ;1   ;Column  ;Verfasser           ;
               IncludeCaption=No;
               SourceExpr=Verfasser }

    { 3   ;1   ;Column  ;Enddatum            ;
               IncludeCaption=No;
               SourceExpr=Enddatum }

    { 4   ;1   ;Column  ;Startdatum          ;
               IncludeCaption=No;
               SourceExpr=Startdatum }

    { 5   ;1   ;Column  ;ReportForNavPageNo  ;
               IncludeCaption=No;
               SourceExpr=ReportForNav.PageNo }

    { 6   ;1   ;Column  ;WORKDATE            ;
               IncludeCaption=No;
               SourceExpr=WORKDATE }

    { 7   ;1   ;Column  ;USERID              ;
               IncludeCaption=No;
               SourceExpr=USERID }

    { 8   ;1   ;Column  ;Suchtext            ;
               IncludeCaption=No;
               SourceExpr=Suchtext }

    { 9   ;1   ;Column  ;Feld6_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 6" }

    { 10  ;1   ;Column  ;Datum_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle.Datum }

    { 11  ;1   ;Column  ;Feld1_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 1" }

    { 12  ;1   ;Column  ;Feld10_Textkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 10" }

    { 13  ;1   ;Column  ;Feld11_Textkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 11" }

    { 14  ;1   ;Column  ;Feld2_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 2" }

    { 1000000001;1;DataItem;CopyLine         ;
               DataItemTable=Table2000000026;
               OnPreDataItem=BEGIN
                               Berichtstabelle_zeilen.RESET;
                               Berichtstabelle_zeilen.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_zeilen.SETFILTER(Tabelle,'%1|%2','MEMOZEILE','BEMERKUNG');
                               Berichtstabelle_zeilen.SETFILTER(Index,'%1',Berichtstabelle.Index);
                               SETRANGE(Number,1,Berichtstabelle_zeilen.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_zeilen.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_zeilen.NEXT;
                                  END;
                                END;
                                 }

    { 16  ;2   ;Column  ;Feld1_Textzeile     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_zeilen."Feld 1" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1000000000;2;Field  ;
                  CaptionML=DEU=Hinweis: Es muss kein * vor und nach dem Suchtext eingegeben werden. }

      { 1140000;2;Field     ;
                  CaptionML=DEU=Suchtext:;
                  SourceExpr=Suchtext }

      { 1140004;2;Field     ;
                  CaptionML=DEU=Datum:;
                  SourceExpr=Startdatum }

      { 1140006;2;Field     ;
                  CaptionML=DEU=bis;
                  SourceExpr=Enddatum }

      { 1140007;2;Field     ;
                  CaptionML=DEU=Verfasser:;
                  SourceExpr=Verfasser }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Projekt@1140001 : Record 5071;
      Ansprech@1140002 : Record 50005;
      Cont@1140004 : Record 5050;
      Memokopf@1140011 : Record 50003;
      Memozeile@1140012 : Record 50004;
      Memozeile2@1140013 : Record 50004;
      Aufgabe@1140014 : Record 5080;
      Bemerkung@1140015 : Record 5061;
      Bemerkung2@1140016 : Record 5061;
      Berichtstabelle@1140009 : TEMPORARY Record 50037;
      Berichtstabelle_zeilen@1000000000 : TEMPORARY Record 50037;
      Projektname@1140003 : Text[50];
      Fhrungsname@1140005 : Text[50];
      Suchtext@1140006 : Text[250];
      Verfasser@1140007 : Code[20];
      Startdatum@1140000 : Date;
      Enddatum@1140008 : Date;
      counter@1140017 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionCopyHeader_Body1@5017(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        ReportForNav.ShowOutput(Textkopf.Tabelle = 'PROJEKTMEMO');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyHeader_Body2@5018(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        ReportForNav.ShowOutput(Textkopf.Tabelle = 'KONTAKTMEMO');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyHeader_Body3@5019(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        ReportForNav.ShowOutput(Textkopf.Tabelle = 'AUFGABE');
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'CopyHeader': CASE SectionId OF
          'Body1': OnPreSectionCopyHeader_Body1(Berichtstabelle);
          'Body2': OnPreSectionCopyHeader_Body2(Berichtstabelle);
          'Body3': OnPreSectionCopyHeader_Body3(Berichtstabelle);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
x1vKf/4f</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

