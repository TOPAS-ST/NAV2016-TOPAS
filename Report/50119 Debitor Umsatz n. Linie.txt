OBJECT Report 50119 Debitor Umsatz n. Linie
{
  OBJECT-PROPERTIES
  {
    Date=15.05.17;
    Time=14:29:30;
    Modified=Yes;
    Version List=fs_v.2.0 5.9.03,FORNAV2.0.0.1189/1189;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  CREATE (Excel,FALSE,TRUE);                                              //erzeugt excel
                  Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
                  Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
                  Sheet.Range('A1').Value := 'Kunden-Nr';                          // definiert die beschriftung der ¬Åberschriftszeile
                  Sheet.Range('B1').Value := 'Debitor';
                  Sheet.Range('C1').Value := 'Debitor2';
                  Sheet.Range('D1').Value := 'Strasse';
                  Sheet.Range('E1').Value := 'Strasse2';
                  Sheet.Range('F1').Value := 'PLZ';
                  Sheet.Range('G1').Value := 'Ort';
                  Sheet.Range('H1').Value := 'Linie';
                  Sheet.Range('I1').Value := 'Menge';
                  Sheet.Range('J1').Value := 'Betrag in Euro';
                  j := '2';                                                    // <- Import in excel ab Zeile 2
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                     Excel.Visible (TRUE);
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               vHerstellername:='';
                               Hersteller.SETFILTER(Hersteller.Code,vHerstellercode);
                               IF Hersteller.FINDFIRST THEN
                                 vHerstellername := Hersteller.Name;
                             END;

               OnAfterGetRecord=BEGIN
                                  vBetrag := 0;
                                  vMenge := 0;
                                  SalesInv.RESET;
                                  SalesInv.SETFILTER(SalesInv."Sell-to Customer No.",Customer."No.");
                                  SalesInv.SETFILTER(SalesInv.Type,'%1',SalesInv.Type::Item);
                                  SalesInv.SETFILTER(SalesInv."Manufacturer Code",vHerstellercode);
                                  SalesInv.SETFILTER(SalesInv.Quantity,'>%1',0);
                                  IF (StartBuchdatum <> 0D ) AND (Endbuchdatum = 0D) THEN
                                    SalesInv.SETFILTER(SalesInv."Posting Date",'>=%1',StartBuchdatum);
                                  IF (StartBuchdatum = 0D) AND (Endbuchdatum <> 0D) THEN
                                    SalesInv.SETFILTER(SalesInv."Posting Date",'<=%1',Endbuchdatum);
                                  IF (StartBuchdatum <> 0D) AND (Endbuchdatum <> 0D) THEN
                                    SalesInv.SETFILTER(SalesInv."Posting Date",'>=%1&<=%2',StartBuchdatum,Endbuchdatum);
                                  IF SalesInv.FINDFIRST THEN
                                  BEGIN
                                    IF (SalesInv.Quantity <> 0 ) THEN
                                    BEGIN
                                    Sheet.Range('A'+j).Value := Customer."No.";
                                    Sheet.Range('B'+j).Value := Customer.Name;
                                    Sheet.Range('C'+j).Value := Customer."Name 2";
                                    Sheet.Range('D'+j).Value := Customer.Address;
                                    Sheet.Range('E'+j).Value := Customer."Address 2";
                                    Sheet.Range('F'+j).Value := Customer."Post Code";
                                    Sheet.Range('G'+j).Value := Customer.City;
                                    REPEAT
                                      vBetrag := vBetrag + (SalesInv.Quantity*SalesInv."VK-Preis (MW)");
                                      vMenge := vMenge + SalesInv.Quantity;
                                    UNTIL SalesInv.NEXT = 0;
                                    Sheet.Range('H'+j).Value := vHerstellername;
                                    Sheet.Range('I'+j).Value := vMenge;
                                    Sheet.Range('J'+j).Value := vBetrag;
                                    j := INCSTR (j);
                                  END
                                  ELSE BEGIN
                                  END;
                                  END;
                                END;
                                 }

    { 2   ;1   ;Column  ;vBetrag             ;
               SourceExpr=vBetrag }

    { 3   ;1   ;Column  ;No_Customer         ;
               SourceExpr="No." }

    { 4   ;1   ;Column  ;Name_Customer       ;
               SourceExpr=Name }

    { 5   ;1   ;Column  ;vHerstellername     ;
               SourceExpr=vHerstellername }

    { 6   ;1   ;Column  ;vMenge              ;
               SourceExpr=vMenge }

    { 7   ;    ;DataItem;                    ;
               DataItemTable=Table114;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               ReportForNav.NewPageWithoutTransportTotals;
                               IF (StartBuchdatum <> 0D ) AND (Endbuchdatum = 0D) THEN
                                 "Sales Cr.Memo Header".SETFILTER("Sales Cr.Memo Header"."Posting Date",'>=%1',StartBuchdatum);
                               IF (StartBuchdatum = 0D) AND (Endbuchdatum <> 0D) THEN
                                 "Sales Cr.Memo Header".SETFILTER("Sales Cr.Memo Header"."Posting Date",'<=%1',Endbuchdatum);
                               IF (StartBuchdatum <> 0D) AND (Endbuchdatum <> 0D) THEN
                                 "Sales Cr.Memo Header".SETFILTER("Sales Cr.Memo Header"."Posting Date",'>=%1&<=%2',StartBuchdatum,Endbuchdatum);
                             END;
                              }

    { 8   ;1   ;DataItem;                    ;
               DataItemTable=Table115;
               DataItemTableView=SORTING(Document No.,Line No.);
               OnPreDataItem=BEGIN
                               IF vHerstellercode <> '' THEN
                               "Sales Cr.Memo Line".SETFILTER("Sales Cr.Memo Line"."Manufacturer Code",vHerstellercode);
                             END;

               DataItemLink=Document No.=FIELD(No.) }

    { 9   ;2   ;DataItem;Debitor2            ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=VAR
                                  verkaufsgutschriftskopf@1140000 : Record 114;
                                BEGIN
                                END;

               DataItemLink=No.=FIELD(Sell-to Customer No.) }

    { 10  ;3   ;DataItem;Artikel2            ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(No.);
               OnAfterGetRecord=BEGIN
                                  IF ("Sales Cr.Memo Line".Quantity>0) THEN
                                   BEGIN
                                     Sheet.Range('A'+j).Value := Debitor2."No.";
                                     Sheet.Range('B'+j).Value := Debitor2.Name;
                                     Sheet.Range('C'+j).Value := Debitor2."Name 2";
                                     Sheet.Range('D'+j).Value := Debitor2.Address;
                                     Sheet.Range('E'+j).Value := Debitor2."Address 2";
                                     Sheet.Range('F'+j).Value := Debitor2."Post Code";
                                     Sheet.Range('G'+j).Value := Debitor2.City;
                                     Sheet.Range('H'+j).Value := "Sales Cr.Memo Line"."No.";
                                     Sheet.Range('I'+j).Value := FORMAT("Sales Cr.Memo Line".Quantity);
                                     Sheet.Range('J'+j).Value := -"Sales Cr.Memo Line"."VK-Preis (MW)"*"Sales Cr.Memo Line".Quantity;
                                     Sheet.Range('K'+j).Value := FORMAT("Sales Cr.Memo Line"."VK-Preis (MW)");
                                     Sheet.Range('L'+j).Value := FORMAT("Sales Cr.Memo Line"."Unit Price");
                                     verkaufsgutschriftskopf.RESET;
                                     verkaufsgutschriftskopf.SETFILTER(verkaufsgutschriftskopf."No.",'%1',"Sales Cr.Memo Line"."Document No.");
                                     IF verkaufsgutschriftskopf.FINDFIRST THEN
                                        BEGIN
                                          IF verkaufsgutschriftskopf."Currency Code" = '' THEN
                                             BEGIN
                                               Sheet.Range('M'+j).Value := 'EURO';
                                             END
                                             ELSE
                                             BEGIN
                                               Sheet.Range('M'+j).Value := verkaufsgutschriftskopf."Currency Code";
                                             END;
                                        END;
                                     Sheet.Range('N'+j).Value := "Sales Cr.Memo Line"."Location Code";
                                     Sheet.Range('O'+j).Value := "Sales Cr.Memo Line"."Document No.";
                                     IF ("Sales Cr.Memo Header"."Posting Date" <> 0D)  AND ("Sales Cr.Memo Header"."Posting Date" > 010100D)
                                       THEN Sheet.Range('P'+j).Value := "Sales Cr.Memo Header"."Posting Date";
                                  //   IF ("Sales Cr.Memo Line".Wunschtermin <> 0D) AND ("Sales Cr.Memo Line".Wunschtermin > 010100D)
                                  //      THEN Sheet.Range('Q'+j).Value := "Sales Cr.Memo Line".Wunschtermin;
                                     IF ("Sales Cr.Memo Line"."Shipment Date" <> 0D) AND ("Sales Cr.Memo Line"."Shipment Date" > 010100D)
                                        THEN Sheet.Range('R'+j).Value := "Sales Cr.Memo Line"."Shipment Date";
                                     Sheet.Range('S'+j).Value := "Sales Cr.Memo Line"."Cross-Reference No." ;
                                     j := INCSTR (j);
                                   END;
                                END;

               DataItemLinkReference=Sales Cr.Memo Line;
               DataItemLink=No.=FIELD(No.) }

    { 11  ;4   ;Column  ;SalesCrMemoLineVK_Preis_MW__SalesCrMemoLineQuantity;
               SourceExpr=-"Sales Cr.Memo Line"."VK-Preis (MW)"*"Sales Cr.Memo Line".Quantity }

    { 12  ;4   ;Column  ;No_Debitor2         ;
               SourceExpr=Debitor2."No." }

    { 13  ;4   ;Column  ;Name_Debitor2       ;
               SourceExpr=Debitor2.Name }

    { 14  ;4   ;Column  ;DocumentNo_SalesCrMemoLine;
               SourceExpr="Sales Cr.Memo Line"."Document No." }

    { 15  ;4   ;Column  ;No_SalesCrMemoLine  ;
               SourceExpr="Sales Cr.Memo Line"."No." }

    { 16  ;4   ;Column  ;Quantity_SalesCrMemoLine;
               SourceExpr="Sales Cr.Memo Line".Quantity }

    { 17  ;4   ;Column  ;PostingDate_SalesCrMemoHeader;
               SourceExpr="Sales Cr.Memo Header"."Posting Date" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1140005;2;Field     ;
                  Lookup=Yes;
                  CaptionML=DEU=Herstellercode;
                  SourceExpr=vHerstellercode;
                  OnLookup=BEGIN
                             Hersteller2.RESET;
                             IF PAGE.RUNMODAL(5728,Hersteller2) = ACTION::LookupOK THEN
                             BEGIN
                                vHerstellercode:=Hersteller2.Code;
                             END;
                           END;
                            }

      { 1140007;2;Field     ;
                  CaptionML=DEU=Buchungsdatum ab;
                  SourceExpr=StartBuchdatum }

      { 1140011;2;Field     ;
                  CaptionML=DEU=bis;
                  SourceExpr=Endbuchdatum }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Excel@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      Book@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      Range@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      Sheet@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      j@1140004 : Text[30];
      Word@1140006 : Integer;
      betragmw@1140007 : Decimal;
      waehrung@1140008 : Text[30];
      waecode@1140009 : Text[30];
      betragmw2@1140010 : Decimal;
      waehrung2@1140011 : Text[30];
      claimbetrag1@1140012 : Decimal;
      claimbetraggesamt@1140013 : Decimal;
      vkrk@1140014 : Text[90];
      verkaufsgutschriftskopf@1140017 : Record 114;
      SalesInv@1140021 : Record 113;
      Hersteller@1140019 : Record 5720;
      Hersteller2@1140024 : Record 5720;
      vHerstellercode@1140020 : Code[10];
      StartBuchdatum@1140022 : Date;
      Endbuchdatum@1140023 : Date;
      vMenge@1140015 : Integer;
      vBetrag@1140016 : Decimal;
      vHerstellername@1140018 : Text[50];
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionCustomer_Body2@5010(VAR Customer@1000000000 : Record 18);
    BEGIN
      WITH Customer DO BEGIN
        ReportForNav.ShowOutput((vMenge<>0) OR (vBetrag<>0));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesCrMemoHeader_Header3@5011(VAR "Sales Cr.Memo Header"@1000000000 : Record 114);
    BEGIN
      WITH "Sales Cr.Memo Header" DO BEGIN
        j := INCSTR (j);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionArtikel2_Body6@5012(VAR Artikel2@1000000000 : Record 27);
    BEGIN
      WITH Artikel2 DO BEGIN
        ReportForNav.ShowOutput("Sales Cr.Memo Line".Quantity>0)
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Customer': CASE SectionId OF
          'Body2': OnPreSectionCustomer_Body2(Customer);
        END;
        'SalesCrMemoHeader': CASE SectionId OF
          'Header3': OnPreSectionSalesCrMemoHeader_Header3("Sales Cr.Memo Header");
        END;
        'Artikel2': CASE SectionId OF
          'Body6': OnPreSectionArtikel2_Body6(Artikel2);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>08f6ed0d-2c90-47ec-9c2a-997e2212cf4d</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>03598ea5-5759-4e6c-b483-0ff6e4271d55</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="vBetrag">
          <DataField>vBetrag</DataField>
        </Field>
        <Field Name="vBetragFormat">
          <DataField>vBetragFormat</DataField>
        </Field>
        <Field Name="No_Customer">
          <DataField>No_Customer</DataField>
        </Field>
        <Field Name="Name_Customer">
          <DataField>Name_Customer</DataField>
        </Field>
        <Field Name="vHerstellername">
          <DataField>vHerstellername</DataField>
        </Field>
        <Field Name="vMenge">
          <DataField>vMenge</DataField>
        </Field>
        <Field Name="SalesCrMemoLineVK_Preis_MW__SalesCrMemoLineQuantity">
          <DataField>SalesCrMemoLineVK_Preis_MW__SalesCrMemoLineQuantity</DataField>
        </Field>
        <Field Name="SalesCrMemoLineVK_Preis_MW__SalesCrMemoLineQuantityFormat">
          <DataField>SalesCrMemoLineVK_Preis_MW__SalesCrMemoLineQuantityFormat</DataField>
        </Field>
        <Field Name="No_Debitor2">
          <DataField>No_Debitor2</DataField>
        </Field>
        <Field Name="Name_Debitor2">
          <DataField>Name_Debitor2</DataField>
        </Field>
        <Field Name="DocumentNo_SalesCrMemoLine">
          <DataField>DocumentNo_SalesCrMemoLine</DataField>
        </Field>
        <Field Name="No_SalesCrMemoLine">
          <DataField>No_SalesCrMemoLine</DataField>
        </Field>
        <Field Name="Quantity_SalesCrMemoLine">
          <DataField>Quantity_SalesCrMemoLine</DataField>
        </Field>
        <Field Name="Quantity_SalesCrMemoLineFormat">
          <DataField>Quantity_SalesCrMemoLineFormat</DataField>
        </Field>
        <Field Name="PostingDate_SalesCrMemoHeader">
          <DataField>PostingDate_SalesCrMemoHeader</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

