OBJECT Report 50072 TOPAS-AB-intern
{
  OBJECT-PROPERTIES
  {
    Date=18.10.21;
    Time=09:35:58;
    Modified=Yes;
    Version List=Beleg AB intern --> 50076,50131, ,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   FIBUEinrichtung.GET;
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               ReqFilterHeadingML=DEU=Geb. Verkaufsrechnung;
               OnPreDataItem=BEGIN
                               Firmendaten.GET;
                               FormatAdr.Company(FirmaAdr,Firmendaten);
                               RestmengeAU := 0;
                               RestmengeZeile := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  CurrReport.LANGUAGE := Language.GetLanguageID("Language Code");
                                  TOPAS_Funktionen.GetCompanyInformation(CompanyInfo,Firmendaten);

                                  IF "Sales Invoice Header"."Location Code" = 'MUST' THEN CurrReport.SKIP;
                                  IF "Order No." = '' THEN
                                    AuftragNrText := ''
                                  ELSE
                                    AuftragNrText := FIELDNAME("Order No.");
                                  IF "Salesperson Code" = '' THEN BEGIN
                                    VerkEinkPerson.INIT;
                                    Verk„uferText := '';
                                  END ELSE BEGIN
                                    VerkEinkPerson.GET("Salesperson Code");
                                    Verk„uferText := 'Verk„ufer';
                                  END;
                                  IF "Your Reference" = '' THEN
                                    ReferenzText := ''
                                  ELSE
                                    ReferenzText := FIELDNAME("Your Reference");
                                  IF "VAT Registration No." = '' THEN
                                    MWStNrText := ''
                                  ELSE
                                    MWStNrText := FIELDNAME("VAT Registration No.");
                                  IF "Currency Code" = '' THEN BEGIN
                                    FIBUEinrichtung.TESTFIELD("LCY Code");
                                    TotalText := 'Total';
                                    TotalInklMWStText := 'Total inkl. MWSt';
                                  //  TotalText := STRSUBSTNO('Total %1',FIBUEinrichtung."LCY Code");
                                  //  TotalInklMWStText := STRSUBSTNO('Total %1 inkl. MWSt',FIBUEinrichtung."LCY Code");
                                  END ELSE BEGIN
                                    TotalText := 'Total';
                                    TotalInklMWStText := 'Total inkl. MWSt';
                                  //  TotalText := STRSUBSTNO('Total %1',"Currency Code");
                                  //  TotalInklMWStText := STRSUBSTNO('Total %1 inkl. MWSt',"Currency Code");
                                  END;
                                  FormatAdr.SalesInvBillTo(DebAdr,"Sales Invoice Header");
                                  Deb.GET("Bill-to Customer No.");
                                  IF "Payment Terms Code" = '' THEN
                                    ZlgBed.INIT
                                  ELSE
                                    ZlgBed.GET("Payment Terms Code");
                                  IF "Shipment Method Code" = '' THEN
                                    LieferBed.INIT
                                  ELSE
                                    LieferBed.GET("Shipment Method Code");
                                  FormatAdr.SalesInvShipTo(LieferAnAdr,"Sales Invoice Header");
                                  LiefAdrAnzeigen := "Sell-to Customer No." <> "Bill-to Customer No.";
                                  FOR i := 1 TO ARRAYLEN(LieferAnAdr) DO
                                    IF LieferAnAdr[i] <> DebAdr[i] THEN
                                      LiefAdrAnzeigen := TRUE;
                                  IF "Currency Code" = '' THEN BEGIN
                                    waehrung := '[ ' + 'EUR' + ' ]';
                                    waehrung2 := 'EUR';
                                  END ELSE BEGIN
                                    waehrung := '[ ' + "Currency Code" + ' ]';
                                    waehrung2 := "Currency Code";
                                  END;

                                  // KW fr Ablage bestimmen
                                  n„chste_lief_jahr := '';
                                  n„chste_lief_woche := '';
                                  n„chste_lief_tab.RESET;
                                  n„chste_lief_tab.SETFILTER("Document No.",'%1',"Sales Invoice Header"."Order No.");
                                  n„chste_lief_tab.SETFILTER(Type,'%1',n„chste_lief_tab.Type::Item);
                                  n„chste_lief_tab.SETFILTER("Outstanding Quantity",'>%1',0);
                                  n„chste_lief_tab.SETCURRENTKEY("Document Type",Type,"Promised Delivery Date");
                                  IF (n„chste_lief_tab.FINDFIRST) AND (n„chste_lief_tab."Promised Delivery Date" <> 0D) THEN BEGIN
                                    n„chste_lief_woche := 'KW ' + FORMAT(DATE2DWY(n„chste_lief_tab."Promised Delivery Date", 2));
                                    n„chste_lief_jahr := FORMAT(DATE2DWY(n„chste_lief_tab."Promised Delivery Date", 3));
                                    IF n„chste_lief_tab."Promised Delivery Date" = 31122053D THEN BEGIN
                                      n„chste_lief_jahr := '';
                                      n„chste_lief_woche := 'Auf Abruf';
                                    END;
                                    IF (n„chste_lief_tab.FINDLAST) AND (n„chste_lief_tab."Promised Delivery Date" = 31122055D) THEN BEGIN
                                      n„chste_lief_jahr := '';
                                      n„chste_lief_woche := 'Termin folgt';
                                    END;
                                  END;
                                  v_FER_SPL := FALSE;
                                END;

               ReqFilterFields=No.,Sell-to Customer No.,No. Printed }

    { 2   ;1   ;DataItem;                    ;
               DataItemTable=Table291;
               OnAfterGetRecord=BEGIN
                                  spedition := "Shipping Agent";
                                END;

               DataItemLink=Code=FIELD(Shipping Agent Code) }

    { 3   ;1   ;DataItem;                    ;
               DataItemTable=Table18;
               OnAfterGetRecord=BEGIN
                                  verk_debitor := Customer;
                                END;

               DataItemLink=No.=FIELD(Sell-to Customer No.) }

    { 4   ;1   ;DataItem;KopieSchleife       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Deb."Invoice Copies":=0;
                               AnzSchleifen := ABS(AnzKopien) + Deb."Invoice Copies";
                               IF AnzSchleifen <= 0 THEN
                                 AnzSchleifen := 1;
                               KopieText := '';
                               SETRANGE(Number,1,AnzSchleifen);
                               "WŽ berprfen" := '';
                               "ab vor wandlung" := '';
                               "via EMail_adresse":= '';
                               "via Email_unterschrift" := '';
                               "via Email" := '';
                               "via email_adr_r":= '';
                               "via Email_unterschrift_R" := '';
                               "via Email_R" := '';
                               Service_via_EMail := '';
                               nicht_rechnen := '';
                               Kunde.GET("Sales Invoice Header"."Sell-to Customer No.");
                               IF Kunde."AB vor Wandlung" THEN "ab vor wandlung" := 'Achtung erst AB dann Wandeln !!!';
                               IF Kunde."AB via EMail" THEN BEGIN
                                 "via Email_unterschrift" :='Erledigt von ..............';
                                 "via Email" := 'Achtung via E-Mail versenden !!!';
                               END;
                               IF Kunde."Rech via EMail" THEN BEGIN
                                 "via Email_unterschrift_R" := 'Erledigt von ..............';
                                 "via Email_R" := 'Achtung: Rechnung via E-Mail versenden!';
                               END;
                               IF Kunde."SerNr. via EMail" THEN
                                 "Seriennummer via EMail" := 'Achtung: Seriennummern via E-Mail versenden'
                               ELSE
                                 "Seriennummer via EMail" := '';
                               IF Kunde."Best„tigung via Internet" THEN BEGIN
                                 "via Email_unterschrift" := 'Termin eingehend beim Kunden';
                                 "via Email" := 'Best. per Internet (Vertrieb) !';
                                 "via Email_R" := 'Erledigt von ..............';
                               END;
                               //17.10.12
                               IF Kunde."Service via EMail" THEN
                                 Service_via_EMail := Kunde.FIELDCAPTION("Service via EMail");
                               //19.10.11 UB
                               IF "Sales Invoice Header"."Nicht rechnen" THEN
                                 nicht_rechnen := 'Nicht rechnen, ist fix !!!';
                               //ENDE NEU
                               vkk.RESET;
                               vkk.SETFILTER("No.",'%1',"Sales Invoice Header"."Order No.");
                               vkk.SETFILTER(W„hrungsabgleich,'%1',TRUE);
                               IF vkk.FINDFIRST THEN
                                   "WŽ berprfen" := 'WŽ berprfen, +/- 3% !'  ;
                               IF (("Sales Invoice Header"."Shipment Method Code" = 'ACCOUNT') OR ("Sales Invoice Header"."Shipment Method Code" = 'ACC-ENG')) THEN
                                 Account := "Sales Invoice Header".Spediteuraccount
                               ELSE
                                 Account := "Shipping Agent".Name;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number > 1 THEN
                                    KopieText := 'skopie';
                                  ReportForNav.PageNo := 1;
                                END;

               OnPostDataItem=BEGIN
                                //IF NOT CurrReport.PREVIEW THEN
                                //  VerkRechDruckZ„hler.RUN("Sales Invoice Header");
                              END;
                               }

    { 5   ;2   ;DataItem;SeiteSchleife       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1)) }

    { 1000000000;3;Column;CompanyName        ;
               SourceExpr=CompanyInfo[1] }

    { 1000000001;3;Column;CompanyAddress     ;
               SourceExpr=CompanyInfo[2]+ ', ' + CompanyInfo[4] +  ' ' + CompanyInfo[5] }

    { 1000000005;3;Column;CompanyPhone       ;
               SourceExpr=CompanyInfo[6] }

    { 1000000006;3;Column;CompanyFax         ;
               SourceExpr=CompanyInfo[7] }

    { 1000000007;3;Column;CompanyVATRegNo    ;
               SourceExpr=CompanyInfo[8] }

    { 1000000008;3;Column;CompanyRegNo       ;
               SourceExpr=CompanyInfo[9] }

    { 1000000009;3;Column;CompanyVorstand    ;
               SourceExpr=CompanyInfo[10] }

    { 1000000010;3;Column;CompanyARV         ;
               SourceExpr=CompanyInfo[11] }

    { 1000000011;3;Column;CompanyAmtsgericht ;
               SourceExpr=CompanyInfo[12] }

    { 1000000012;3;Column;CompanyWEEERegNo   ;
               SourceExpr=CompanyInfo[13] }

    { 1000000013;3;Column;CompanyPostfach    ;
               SourceExpr=CompanyInfo[14] }

    { 1000000002;3;Column;CompanyHomepage    ;
               SourceExpr=CompanyInfo[15] }

    { 6   ;3   ;Column  ;Service_via_EMail   ;
               SourceExpr=Service_via_EMail }

    { 7   ;3   ;Column  ;nicht_rechnen       ;
               IncludeCaption=No;
               SourceExpr=nicht_rechnen }

    { 8   ;3   ;Column  ;WAuberprufen        ;
               IncludeCaption=No;
               SourceExpr="WŽ berprfen" }

    { 9   ;3   ;Column  ;nachste_lief_jahr   ;
               IncludeCaption=No;
               SourceExpr=n„chste_lief_jahr }

    { 10  ;3   ;Column  ;nachste_lief_woche  ;
               IncludeCaption=No;
               SourceExpr=n„chste_lief_woche }

    { 11  ;3   ;Column  ;SeriennummerviaEMail;
               IncludeCaption=No;
               SourceExpr="Seriennummer via EMail" }

    { 12  ;3   ;Column  ;viaEmail_unterschrift_R;
               IncludeCaption=No;
               SourceExpr="via Email_unterschrift_R" }

    { 13  ;3   ;Column  ;viaEmail_R          ;
               IncludeCaption=No;
               SourceExpr="via Email_R" }

    { 14  ;3   ;Column  ;viaEmail_unterschrift;
               IncludeCaption=No;
               SourceExpr="via Email_unterschrift" }

    { 15  ;3   ;Column  ;viaEmail            ;
               IncludeCaption=No;
               SourceExpr="via Email" }

    { 16  ;3   ;Column  ;abvorwandlung       ;
               IncludeCaption=No;
               SourceExpr="ab vor wandlung" }

    { 17  ;3   ;Column  ;No_SalesInvoiceHeader;
               IncludeCaption=No;
               SourceExpr="Sales Invoice Header"."No." }

    { 18  ;3   ;Column  ;Sell_toCustomerNo_SalesInvoiceHeader;
               IncludeCaption=No;
               SourceExpr="Sales Invoice Header"."Sell-to Customer No." }

    { 19  ;3   ;Column  ;OrderNo_SalesInvoiceHeader;
               IncludeCaption=No;
               SourceExpr="Sales Invoice Header"."Order No." }

    { 20  ;3   ;Column  ;VATRegistrationNo_verk_debitor;
               IncludeCaption=No;
               SourceExpr=verk_debitor."VAT Registration No." }

    { 21  ;3   ;Column  ;OurAccountNo_verk_debitor;
               IncludeCaption=No;
               SourceExpr=verk_debitor."Our Account No." }

    { 22  ;3   ;Column  ;SalesInvoiceHeaderExternalDocumentNo__SalesInvoiceHeaderYour;
               IncludeCaption=No;
               SourceExpr="Sales Invoice Header"."External Document No."+' '+"Sales Invoice Header"."Your Reference" }

    { 23  ;3   ;Column  ;PostingDate_SalesInvoiceHeader;
               IncludeCaption=No;
               SourceExpr=FORMAT("Sales Invoice Header"."Posting Date",0,1) }

    { 24  ;3   ;Column  ;DebAdr8             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[8] }

    { 25  ;3   ;Column  ;DebAdr7             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[7] }

    { 26  ;3   ;Column  ;DebAdr6             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[6] }

    { 27  ;3   ;Column  ;DebAdr5             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[5] }

    { 28  ;3   ;Column  ;DebAdr4             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[4] }

    { 29  ;3   ;Column  ;DebAdr3             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[3] }

    { 30  ;3   ;Column  ;DebAdr2             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[2] }

    { 31  ;3   ;Column  ;DebAdr1             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[1] }

    { 32  ;3   ;Column  ;STRSUBSTNO_Seite_Pct1_FORMAT_ReportForNavPageNo_;
               IncludeCaption=No;
               SourceExpr=STRSUBSTNO('Seite:  %1',FORMAT(ReportForNav.PageNo)) }

    { 33  ;3   ;DataItem;Verkaufsrechnungszeile;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               OnPreDataItem=BEGIN
                               MWSTBetragZeile.DELETEALL;
                               MehrZeilen := FIND('+');
                               WHILE MehrZeilen AND (Description = '') AND ("No." = '') AND (Quantity = 0) AND (Amount = 0) DO
                                 MehrZeilen := NEXT(-1) <> 0;
                               IF NOT MehrZeilen THEN
                                 CurrReport.BREAK;
                               SETRANGE("Line No.",0,"Line No.");
                               {lshanf c02}
                               grechrabbetr := 0;
                               {lshend}
                             END;

               OnAfterGetRecord=BEGIN
                                  MWSTBetragZeile.INIT;
                                  MWSTBetragZeile."VAT %" := "VAT %";
                                  MWSTBetragZeile."VAT Base" := Amount;
                                  MWSTBetragZeile."Amount Including VAT" := "Amount Including VAT";
                                  MWSTBetragZeile.InsertLine;
                                  {lshanf c02}
                                  IF "Inv. Discount Amount" <> 0 THEN BEGIN
                                    "grechrab%" := ("Inv. Discount Amount" * 100) / (Amount + "Inv. Discount Amount");
                                    grechrabbetr := grechrabbetr + Amount + "Inv. Discount Amount";
                                  END;
                                  {lshend}
                                  //TOPAS 02.07.08 ST - Sachkonten Restmenge aus Auftrag holen , zum andrucken
                                  Auftrag.SETFILTER(Type,'%1',Auftrag.Type::"G/L Account");
                                  Auftrag.SETFILTER("Document No.",'%1',Verkaufsrechnungszeile."Order No.");
                                  Auftrag.SETFILTER("Line No.",'%1',Verkaufsrechnungszeile."Order Line No.");
                                  IF Auftrag.FINDFIRST THEN BEGIN
                                    RestmengeZeile := Auftrag."Outstanding Quantity" + Auftrag."Qty. Shipped Not Invoiced";
                                  END ELSE BEGIN
                                    RestmengeZeile := 0;
                                  END;
                                  IF v_FER_SPL = FALSE THEN BEGIN
                                    IF ((Verkaufsrechnungszeile."Manufacturer Code" = '82') OR (Verkaufsrechnungszeile."Manufacturer Code" = '85')) THEN BEGIN
                                      v_FER_SPL := TRUE;
                                    END;
                                  END;
                                END;

               DataItemLinkReference=Sales Invoice Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 34  ;4   ;Column  ;STRSUBSTNO_Seite_Pct1_FORMAT_ReportForNavPageNo_1_;
               IncludeCaption=No;
               SourceExpr=STRSUBSTNO('Seite:  %1',FORMAT(ReportForNav.PageNo-1)) }

    { 35  ;4   ;Column  ;Amount_InvDiscountAmount;
               IncludeCaption=No;
               SourceExpr=Amount+"Inv. Discount Amount";
               AutoFormatType=1;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 36  ;4   ;Column  ;Description_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Description }

    { 37  ;4   ;Column  ;RestmengeZeile      ;
               DecimalPlaces=0:0;
               IncludeCaption=No;
               SourceExpr=RestmengeZeile }

    { 38  ;4   ;Column  ;UnitPrice_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr="Unit Price";
               AutoFormatType=2;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 39  ;4   ;Column  ;Quantity_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Quantity }

    { 40  ;4   ;Column  ;STRSUBSTNO_Seite_Pct1_FORMAT_ReportForNavPageNo_1_2;
               IncludeCaption=No;
               SourceExpr=STRSUBSTNO('Seite:  %1',FORMAT(ReportForNav.PageNo+1)) }

    { 41  ;4   ;Column  ;InvDiscountAmount_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=-"Inv. Discount Amount" }

    { 42  ;4   ;Column  ;grechrabbetr        ;
               IncludeCaption=No;
               SourceExpr=grechrabbetr }

    { 43  ;4   ;Column  ;grechrabPct         ;
               IncludeCaption=No;
               SourceExpr="grechrab%" }

    { 44  ;4   ;Column  ;waehrung2           ;
               IncludeCaption=No;
               SourceExpr=waehrung2 }

    { 45  ;4   ;Column  ;TotalInklMWStText   ;
               IncludeCaption=No;
               SourceExpr=TotalInklMWStText }

    { 46  ;4   ;Column  ;TotalText           ;
               IncludeCaption=No;
               SourceExpr=TotalText }

    { 47  ;4   ;Column  ;MWSTBetragZeileVATAmountText;
               IncludeCaption=No;
               SourceExpr=MWSTBetragZeile.VATAmountText }

    { 48  ;4   ;Column  ;AmountIncludingVAT_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr="Amount Including VAT";
               AutoFormatType=1;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 49  ;4   ;Column  ;AmountIncludingVAT_Amount;
               IncludeCaption=No;
               SourceExpr="Amount Including VAT" - Amount;
               AutoFormatType=1;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 50  ;4   ;Column  ;Amount_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Amount;
               AutoFormatType=1;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 51  ;4   ;DataItem;                    ;
               DataItemTable=Table27;
               OnPreDataItem=BEGIN
                               IF debart <> '' THEN
                               debart := 'Ihre Artikelnummer: ' + debart;
                               //TOPAS 02.07.08 ST - Restmenge aus Auftrag holen, zum andrucken
                               Auftrag.SETFILTER(Type,'%1',Auftrag.Type::Item);
                               Auftrag.SETFILTER("Document No.",'%1',Verkaufsrechnungszeile."Order No.");
                               Auftrag.SETFILTER("Line No.",'%1',Verkaufsrechnungszeile."Order Line No.");
                               IF Auftrag.FINDFIRST THEN BEGIN
                                 IF Auftrag."Outstanding Quantity" <> 0 THEN BEGIN
                                   RestmengeZeile := Auftrag."Outstanding Quantity" + Auftrag."Qty. Shipped Not Invoiced";
                                   RestmengeAU := RestmengeAU + RestmengeZeile;
                                 END ELSE BEGIN
                                   IF Auftrag."Qty. Shipped Not Invoiced" <> 0 THEN
                                     RestmengeAU := RestmengeAU + Auftrag."Qty. Shipped Not Invoiced";
                                 END;
                                 IF Auftrag."Promised Delivery Date" = 31122053D THEN BEGIN
                                   liefert := 'Abruf';
                                 END;
                                 IF Auftrag."Promised Delivery Date"= 31122055D THEN BEGIN
                                   IF CurrReport.LANGUAGE = 1031 THEN BEGIN
                                     liefert := 'folgt';
                                   END ELSE BEGIN
                                     liefert := 'To Follow';
                                   END;
                                 END;
                               END;
                             END;

               OnPostDataItem=BEGIN
                                debart := '';
                                liefert := '';
                              END;

               DataItemLinkReference=Verkaufsrechnungszeile;
               DataItemLink=No.=FIELD(No.) }

    { 52  ;5   ;Column  ;LineNo_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile."Line No." }

    { 53  ;5   ;Column  ;SearchDescription_Item;
               IncludeCaption=No;
               SourceExpr="Search Description" }

    { 54  ;5   ;Column  ;Artikelnr2_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile."Artikelnr. 2" }

    { 55  ;5   ;Column  ;Description_Verkaufsrechnungszeile3;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile.Description }

    { 56  ;5   ;Column  ;Country_RegionofOriginCode_Item;
               IncludeCaption=No;
               SourceExpr="Country/Region of Origin Code" }

    { 57  ;5   ;Column  ;Quantity_Verkaufsrechnungszeile2;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile.Quantity }

    { 58  ;5   ;Column  ;RestmengeZeile2     ;
               DecimalPlaces=0:0;
               IncludeCaption=No;
               SourceExpr=RestmengeZeile }

    { 59  ;5   ;Column  ;liefert             ;
               IncludeCaption=No;
               SourceExpr=liefert }

    { 60  ;5   ;Column  ;UnitPrice_Verkaufsrechnungszeile2;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile."Unit Price";
               AutoFormatType=2;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 61  ;5   ;Column  ;VerkaufsrechnungszeileAmount_VerkaufsrechnungszeileInvDiscou;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile.Amount+Verkaufsrechnungszeile."Inv. Discount Amount";
               AutoFormatType=1;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 62  ;5   ;Column  ;PromisedDeliveryDate_Auftrag;
               IncludeCaption=No;
               SourceExpr=Auftrag."Promised Delivery Date" }

    { 63  ;5   ;Column  ;Description2_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile."Description 2" }

    { 64  ;5   ;Column  ;Endkunde_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile.Endkunde }

    { 65  ;5   ;Column  ;Cross_ReferenceNo_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile."Cross-Reference No." }

    { 66  ;3   ;DataItem;                    ;
               DataItemTable=Table44;
               DataItemTableView=SORTING(Document Type,No.,Line No.);
               DataItemLinkReference=Sales Invoice Header;
               DataItemLink=No.=FIELD(No.) }

    { 67  ;4   ;Column  ;Comment_SalesCommentLine;
               IncludeCaption=No;
               SourceExpr=Comment }

    { 70  ;3   ;DataItem;MWStZ„hler          ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               IF MWSTBetragZeile.COUNT <= 1 THEN
                                 CurrReport.BREAK;
                               SETRANGE(Number,1,MWSTBetragZeile.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  MWSTBetragZeile.GetLine(Number);
                                END;
                                 }

    { 71  ;4   ;Column  ;VATAmount_MWSTBetragZeile;
               IncludeCaption=No;
               SourceExpr=MWSTBetragZeile."VAT Amount";
               AutoFormatType=1;
               AutoFormatExpr="Sales Invoice Header"."Currency Code" }

    { 72  ;4   ;Column  ;VATBase_MWSTBetragZeile;
               IncludeCaption=No;
               SourceExpr=MWSTBetragZeile."VAT Base";
               AutoFormatType=1;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 73  ;4   ;Column  ;VATBase_MWSTBetragZeile2;
               IncludeCaption=No;
               SourceExpr=MWSTBetragZeile."VAT Base";
               AutoFormatType=1;
               AutoFormatExpr="Sales Invoice Header"."Currency Code" }

    { 74  ;4   ;Column  ;VATPct_MWSTBetragZeile;
               IncludeCaption=No;
               SourceExpr=MWSTBetragZeile."VAT %" }

    { 75  ;3   ;DataItem;Total               ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1)) }

    { 76  ;4   ;Column  ;Account             ;
               IncludeCaption=No;
               SourceExpr=Account }

    { 77  ;4   ;Column  ;Description_LieferBed;
               IncludeCaption=No;
               SourceExpr=LieferBed.Description }

    { 78  ;4   ;Column  ;gzbedtx             ;
               IncludeCaption=No;
               SourceExpr=gzbedtx }

    { 79  ;3   ;DataItem;Total2              ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnPreDataItem=BEGIN
                               IF NOT LiefAdrAnzeigen THEN
                                 CurrReport.BREAK;
                             END;
                              }

    { 80  ;4   ;Column  ;Sell_toCustomerNo_SalesInvoiceHeader2_Lbl;
               IncludeCaption=No;
               SourceExpr="Sales Invoice Header".FIELDCAPTION("Sell-to Customer No.") }

    { 81  ;4   ;Column  ;Sell_toCustomerNo_SalesInvoiceHeader2;
               IncludeCaption=No;
               SourceExpr="Sales Invoice Header"."Sell-to Customer No." }

    { 82  ;4   ;Column  ;LieferAnAdr1        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[1] }

    { 83  ;4   ;Column  ;LieferAnAdr8        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[8] }

    { 84  ;4   ;Column  ;LieferAnAdr7        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[7] }

    { 85  ;4   ;Column  ;LieferAnAdr6        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[6] }

    { 86  ;4   ;Column  ;LieferAnAdr5        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[5] }

    { 87  ;4   ;Column  ;LieferAnAdr4        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[4] }

    { 88  ;4   ;Column  ;LieferAnAdr3        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[3] }

    { 89  ;4   ;Column  ;LieferAnAdr2        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[2] }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  CaptionML=DEU=Anzahl Kopien;
                  SourceExpr=AnzKopien }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      spedition@1000000014 : Record 291;
      art1@1000000013 : Record 27;
      verk_debitor@1000000012 : Record 18;
      FIBUEinrichtung@1000000011 : Record 98;
      LieferBed@1000000010 : Record 10;
      ZlgBed@1000000009 : Record 3;
      VerkEinkPerson@1000000008 : Record 13;
      Firmendaten@1000000007 : Record 79;
      Deb@1000000006 : Record 18;
      Kunde@1000000016 : Record 18;
      vk_rech_zeile@1000000015 : Record 37;
      MWSTBetragZeile@1000000005 : TEMPORARY Record 290;
      Language@1000000004 : Record 8;
      VerkRechDruckZ„hler@1000000003 : Codeunit 315;
      FormatAdr@1000000002 : Codeunit 365;
      TOPAS_Funktionen@1000000000 : Codeunit 50006;
      waehrung2@1140000 : Code[10];
      waehrung@1140001 : Code[10];
      debart@1140002 : Text[80];
      CompanyInfo@1000000001 : ARRAY [15] OF Text;
      DebAdr@1140015 : ARRAY [8] OF Text[50];
      LieferAnAdr@1140016 : ARRAY [8] OF Text[50];
      FirmaAdr@1140017 : ARRAY [8] OF Text[50];
      AuftragNrText@1140018 : Text[30];
      Verk„uferText@1140019 : Text[30];
      MWStNrText@1140020 : Text[30];
      ReferenzText@1140021 : Text[30];
      TotalText@1140022 : Text[50];
      TotalInklMWStText@1140023 : Text[50];
      MehrZeilen@1140024 : Boolean;
      AnzKopien@1140025 : Integer;
      AnzSchleifen@1140026 : Integer;
      KopieText@1140027 : Text[30];
      LiefAdrAnzeigen@1140028 : Boolean;
      i@1140029 : Integer;
      "--------LSH--------"@1140030 : Integer;
      "grechrab%"@1140031 : Decimal;
      grechrabbetr@1140032 : Decimal;
      gzbedtx@1140033 : Text[100];
      "via Email"@1140034 : Text[40];
      "via Email_unterschrift"@1140035 : Text[40];
      "via EMail_adresse"@1140036 : Text[40];
      "ab vor wandlung"@1140037 : Text[40];
      "via Email_R"@1140038 : Text[40];
      "via Email_unterschrift_R"@1140039 : Text[40];
      "via email_adr_r"@1140040 : Text[40];
      "Seriennummer via EMail"@1140041 : Text[50];
      Service_via_EMail@1140055 : Text[40];
      Account@1140044 : Text[90];
      Auftrag@1140045 : Record 37;
      RestmengeZeile@1140046 : Decimal;
      RestmengeAU@1140047 : Decimal;
      liefert@1140048 : Code[10];
      n„chste_lief_tab@1140049 : Record 37;
      n„chste_lief_woche@1140050 : Text[30];
      n„chste_lief_jahr@1140051 : Text[30];
      "WŽ berprfen"@1140052 : Text[30];
      vkk@1140053 : Record 36;
      nicht_rechnen@1140054 : Text[30];
      v_FER_SPL@1140056 : Boolean;
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionMWStZahler_Header23@1000000057(VAR MWStZ„hler@1000000000 : Record 2000000026);
    BEGIN
      WITH MWStZ„hler DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE OnPreSectionMWStZahler_TransHeader24@1000000058(VAR MWStZ„hler@1000000000 : Record 2000000026);
    BEGIN
      WITH MWStZ„hler DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE OnPreSectionMWStZahler_Body25@1000000059(VAR MWStZ„hler@1000000000 : Record 2000000026);
    BEGIN
      WITH MWStZ„hler DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE OnPreSectionMWStZahler_TransFooter26@1000000060(VAR MWStZ„hler@1000000000 : Record 2000000026);
    BEGIN
      WITH MWStZ„hler DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE OnPreSectionMWStZahler_Footer27@1000000061(VAR MWStZ„hler@1000000000 : Record 2000000026);
    BEGIN
      WITH MWStZ„hler DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE OnPreSectionSeiteSchleife_Header2@5010(VAR SeiteSchleife@1000000000 : Record 2000000026);
    BEGIN
      WITH SeiteSchleife DO BEGIN
        ReportForNav.ShowOutput("Sales Invoice Header"."Shipping Agent Code"='UPS-RG4')
      END;
    END;

    LOCAL PROCEDURE OnPreSectionVerkaufsrechnungszeile_Body6@5011(VAR Verkaufsrechnungszeile@1000000000 : Record 113);
    BEGIN
      WITH Verkaufsrechnungszeile DO BEGIN
        //ReportForNav.ShowOutput(Art = 0);
        // Unterdckt Artikeltexte wenn eine Artikelzeile nicht berechnet wird
        vk_rech_zeile.SETFILTER(vk_rech_zeile."Document No.",'%1',Verkaufsrechnungszeile."Document No." );
        vk_rech_zeile.SETFILTER(vk_rech_zeile."Line No.",'%1',Verkaufsrechnungszeile."Attached to Line No." );
        IF vk_rech_zeile.FINDFIRST THEN BEGIN
          ReportForNav.ShowOutput(((vk_rech_zeile.Type = vk_rech_zeile.Type::Item) AND (vk_rech_zeile.Quantity > 0)) OR (vk_rech_zeile.Type = 0));
        END ELSE BEGIN
          IF ((Verkaufsrechnungszeile."Attached to Line No." = 0) AND (Verkaufsrechnungszeile.Type = 0) AND (Verkaufsrechnungszeile.Description <> '')) THEN
            ReportForNav.ShowOutput(TRUE)
          ELSE
            ReportForNav.ShowOutput(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionVerkaufsrechnungszeile_Body7@5012(VAR Verkaufsrechnungszeile@1000000000 : Record 113);
    BEGIN
      WITH Verkaufsrechnungszeile DO BEGIN
        ReportForNav.ShowOutput((Type = Type::"G/L Account")  AND (Verkaufsrechnungszeile.Quantity > 0));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionVerkaufsrechnungszeile_Footer9@5013(VAR Verkaufsrechnungszeile@1000000000 : Record 113);
    BEGIN
      WITH Verkaufsrechnungszeile DO BEGIN
        ReportForNav.ShowOutput("Inv. Discount Amount" <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionVerkaufsrechnungszeile_Footer11@5014(VAR Verkaufsrechnungszeile@1000000000 : Record 113);
    BEGIN
      WITH Verkaufsrechnungszeile DO BEGIN
        ReportForNav.ShowOutput(v_FER_SPL = FALSE);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionVerkaufsrechnungszeile_Footer13@5015(VAR Verkaufsrechnungszeile@1000000000 : Record 113);
    BEGIN
      WITH Verkaufsrechnungszeile DO BEGIN
        ReportForNav.ShowOutput(RestmengeAU = 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body14@5016(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput((Verkaufsrechnungszeile.Type = Verkaufsrechnungszeile.Type::Item)
        AND ((Verkaufsrechnungszeile.Quantity > 0) OR (Verkaufsrechnungszeile.Einkaufsw„hrungsfaktor > 0)) AND (Auftrag."Promised Delivery Date" = 31122055D));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body15@5017(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput((Verkaufsrechnungszeile.Type = Verkaufsrechnungszeile.Type::Item)
        AND ((Verkaufsrechnungszeile.Quantity > 0) OR (Verkaufsrechnungszeile.Einkaufsw„hrungsfaktor > 0)) AND (Auftrag."Promised Delivery Date" = 31122053D));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body16@5018(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput((Verkaufsrechnungszeile.Type =Verkaufsrechnungszeile.Type::Item)
        AND ((Verkaufsrechnungszeile.Quantity > 0) OR (Verkaufsrechnungszeile.Einkaufsw„hrungsfaktor > 0)) AND (Auftrag."Promised Delivery Date" < 31122053D));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body17@5019(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput((Verkaufsrechnungszeile."Description 2" <> '')
        AND (Verkaufsrechnungszeile.Type =Verkaufsrechnungszeile.Type::Item));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body18@5020(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput(("Beschreibung 3" <> '') AND (Verkaufsrechnungszeile.Type = Verkaufsrechnungszeile.Type::Item));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body19@5021(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput((Verkaufsrechnungszeile.Type = Verkaufsrechnungszeile.Type::Item)
        AND (Verkaufsrechnungszeile.Quantity > 0) OR (Verkaufsrechnungszeile."Cross-Reference No." <> ''));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body20@5022(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput((Verkaufsrechnungszeile."VAT Prod. Posting Group" = '13B2')
         AND (Verkaufsrechnungszeile.Type = Verkaufsrechnungszeile.Type::Item) AND (Verkaufsrechnungszeile.Quantity > 0));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionTotal_Body28@5028(VAR Total@1000000000 : Record 2000000026);
    BEGIN
      WITH Total DO BEGIN
        {lshanf c01}
        //IF ZlgBed."Discount %" <> 0 THEN BEGIN
        //  "Sales Invoice Header".CALCFIELDS(Skontobetrag);
          IF COPYSTR(ZlgBed.Description,1,1) <> '*' THEN
            gzbedtx := ZlgBed.Description;
        //    ELSE
        //    BEGIN
        //    gzbedtx := ZlgBed.Description;
        //      END
        {lshend}
      END;
    END;

    LOCAL PROCEDURE OnPreSectionTotal2_Body30@5029(VAR Total2@1000000000 : Record 2000000026);
    BEGIN
      WITH Total2 DO BEGIN
        ReportForNav.ShowOutput := "Sales Invoice Header"."Sell-to Customer No." <> "Sales Invoice Header"."Bill-to Customer No.";
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'SeiteSchleife': CASE SectionId OF
          'Header2': OnPreSectionSeiteSchleife_Header2(SeiteSchleife);
        END;
        'Verkaufsrechnungszeile': CASE SectionId OF
          'Body6': OnPreSectionVerkaufsrechnungszeile_Body6(Verkaufsrechnungszeile);
          'Body7': OnPreSectionVerkaufsrechnungszeile_Body7(Verkaufsrechnungszeile);
          'Footer9': OnPreSectionVerkaufsrechnungszeile_Footer9(Verkaufsrechnungszeile);
          'Footer11': OnPreSectionVerkaufsrechnungszeile_Footer11(Verkaufsrechnungszeile);
          'Footer13': OnPreSectionVerkaufsrechnungszeile_Footer13(Verkaufsrechnungszeile);
        END;
        'Item': CASE SectionId OF
          'Body14': OnPreSectionItem_Body14(Item);
          'Body15': OnPreSectionItem_Body15(Item);
          'Body16': OnPreSectionItem_Body16(Item);
          'Body17': OnPreSectionItem_Body17(Item);
          'Body18': OnPreSectionItem_Body18(Item);
          'Body19': OnPreSectionItem_Body19(Item);
          'Body20': OnPreSectionItem_Body20(Item);
        END;
        'MWStZahler': CASE SectionId OF
          'Header23': OnPreSectionMWStZahler_Header23(MWStZ„hler);
          'TransHeader24': OnPreSectionMWStZahler_TransHeader24(MWStZ„hler);
          'Body25': OnPreSectionMWStZahler_Body25(MWStZ„hler);
          'TransFooter26': OnPreSectionMWStZahler_TransFooter26(MWStZ„hler);
          'Footer27': OnPreSectionMWStZahler_Footer27(MWStZ„hler);
        END;
        'Total': CASE SectionId OF
          'Body28': OnPreSectionTotal_Body28(Total);
        END;
        'Total2': CASE SectionId OF
          'Body30': OnPreSectionTotal2_Body30(Total2);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
      ForNavOperation@1000000009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Verkaufsrechnungszeile': WITH Verkaufsrechnungszeile DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
                ReportForNav.AddTotal(DataItemId,2,"Inv. Discount Amount");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Inv. Discount Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;  'MWStZahler': WITH MWStZ„hler DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,MWSTBetragZeile."VAT Base");
                ReportForNav.AddTotal(DataItemId,1,MWSTBetragZeile."VAT Amount");
              END;
           'Restore': BEGIN
                 MWSTBetragZeile."VAT Base" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 MWSTBetragZeile."VAT Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      030299 pl
      c01  Total, Body(1) und Globals
           Zahlungsbedingung vom Skonto abh„nging ausdrucken.
      230699 ug
           Adressfeld auf Fensterkurvert-Norm gesetzt.
      c02  Verkaufsrechnungszeile, C/AL und Globals
           Rechnungsrabatt %-Satz und Rabattgrundlage in Rechnungsrabattzeile mit ausdrucken.
      131099 al
      c03  Verkaufsrechnungszeile, Body(7) eingefgt.
           Bezeichnung 2 ausdrucken.
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
Tzj/5/8H</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

