OBJECT Report 50072 TOPAS-AB-intern
{
  OBJECT-PROPERTIES
  {
    Date=08.02.22;
    Time=11:50:37;
    Modified=Yes;
    Version List=Beleg AB intern --> 50076,50131, ,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   FIBUEinrichtung.GET;
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table112;
               DataItemTableView=SORTING(No.);
               ReqFilterHeadingML=DEU=Geb. Verkaufsrechnung;
               OnPreDataItem=BEGIN
                               Firmendaten.GET;
                               FormatAdr.Company(FirmaAdr,Firmendaten);
                               RestmengeAU := 0;
                               RestmengeZeile := 0;
                             END;

               OnAfterGetRecord=BEGIN
                                  CurrReport.LANGUAGE := Language.GetLanguageID("Language Code");
                                  TOPAS_Funktionen.GetCompanyInformation(CompanyInfo,Firmendaten);

                                  IF "Sales Invoice Header"."Location Code" = 'MUST' THEN CurrReport.SKIP;
                                  IF "Order No." = '' THEN
                                    AuftragNrText := ''
                                  ELSE
                                    AuftragNrText := FIELDNAME("Order No.");
                                  IF "Salesperson Code" = '' THEN BEGIN
                                    VerkEinkPerson.INIT;
                                    Verk„uferText := '';
                                  END ELSE BEGIN
                                    VerkEinkPerson.GET("Salesperson Code");
                                    Verk„uferText := 'Verk„ufer';
                                  END;
                                  IF "Your Reference" = '' THEN
                                    ReferenzText := ''
                                  ELSE
                                    ReferenzText := FIELDNAME("Your Reference");
                                  IF "VAT Registration No." = '' THEN
                                    MWStNrText := ''
                                  ELSE
                                    MWStNrText := FIELDNAME("VAT Registration No.");
                                  IF "Currency Code" = '' THEN BEGIN
                                    FIBUEinrichtung.TESTFIELD("LCY Code");
                                    TotalText := 'Total';
                                    TotalInklMWStText := 'Total inkl. MWSt';
                                  //  TotalText := STRSUBSTNO('Total %1',FIBUEinrichtung."LCY Code");
                                  //  TotalInklMWStText := STRSUBSTNO('Total %1 inkl. MWSt',FIBUEinrichtung."LCY Code");
                                  END ELSE BEGIN
                                    TotalText := 'Total';
                                    TotalInklMWStText := 'Total inkl. MWSt';
                                  //  TotalText := STRSUBSTNO('Total %1',"Currency Code");
                                  //  TotalInklMWStText := STRSUBSTNO('Total %1 inkl. MWSt',"Currency Code");
                                  END;
                                  FormatAdr.SalesInvBillTo(DebAdr,"Sales Invoice Header");
                                  Deb.GET("Bill-to Customer No.");
                                  IF "Payment Terms Code" = '' THEN
                                    ZlgBed.INIT
                                  ELSE
                                    ZlgBed.GET("Payment Terms Code");
                                  IF "Shipment Method Code" = '' THEN
                                    LieferBed.INIT
                                  ELSE
                                    LieferBed.GET("Shipment Method Code");
                                  FormatAdr.SalesInvShipTo(LieferAnAdr,"Sales Invoice Header");
                                  LiefAdrAnzeigen := "Sell-to Customer No." <> "Bill-to Customer No.";
                                  FOR i := 1 TO ARRAYLEN(LieferAnAdr) DO
                                    IF LieferAnAdr[i] <> DebAdr[i] THEN
                                      LiefAdrAnzeigen := TRUE;
                                  IF "Currency Code" = '' THEN BEGIN
                                    waehrung := '[ ' + 'EUR' + ' ]';
                                    waehrung2 := 'EUR';
                                  END ELSE BEGIN
                                    waehrung := '[ ' + "Currency Code" + ' ]';
                                    waehrung2 := "Currency Code";
                                  END;

                                  // KW fr Ablage bestimmen
                                  n„chste_lief_jahr := '';
                                  n„chste_lief_woche := '';
                                  n„chste_lief_tab.RESET;
                                  n„chste_lief_tab.SETFILTER("Document No.",'%1',"Sales Invoice Header"."Order No.");
                                  n„chste_lief_tab.SETFILTER(Type,'%1',n„chste_lief_tab.Type::Item);
                                  n„chste_lief_tab.SETFILTER("Outstanding Quantity",'>%1',0);
                                  n„chste_lief_tab.SETCURRENTKEY("Document Type",Type,"Promised Delivery Date");
                                  IF (n„chste_lief_tab.FINDFIRST) AND (n„chste_lief_tab."Promised Delivery Date" <> 0D) THEN BEGIN
                                    n„chste_lief_woche := 'KW ' + FORMAT(DATE2DWY(n„chste_lief_tab."Promised Delivery Date", 2));
                                    n„chste_lief_jahr := FORMAT(DATE2DWY(n„chste_lief_tab."Promised Delivery Date", 3));
                                    IF n„chste_lief_tab."Promised Delivery Date" = 31122053D THEN BEGIN
                                      n„chste_lief_jahr := '';
                                      n„chste_lief_woche := 'Auf Abruf';
                                    END;
                                    IF (n„chste_lief_tab.FINDLAST) AND (n„chste_lief_tab."Promised Delivery Date" = 31122055D) THEN BEGIN
                                      n„chste_lief_jahr := '';
                                      n„chste_lief_woche := 'Termin folgt';
                                    END;
                                  END;
                                  v_FER_SPL := FALSE;
                                END;

               ReqFilterFields=No.,Sell-to Customer No.,No. Printed }

    { 2   ;1   ;DataItem;                    ;
               DataItemTable=Table291;
               OnAfterGetRecord=BEGIN
                                  spedition := "Shipping Agent";
                                END;

               DataItemLink=Code=FIELD(Shipping Agent Code) }

    { 3   ;1   ;DataItem;                    ;
               DataItemTable=Table18;
               OnAfterGetRecord=BEGIN
                                  verk_debitor := Customer;
                                END;

               DataItemLink=No.=FIELD(Sell-to Customer No.) }

    { 4   ;1   ;DataItem;KopieSchleife       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Deb."Invoice Copies" := 0;
                               AnzSchleifen := ABS(AnzKopien) + Deb."Invoice Copies";
                               IF AnzSchleifen <= 0 THEN
                                 AnzSchleifen := 1;
                               KopieText := '';
                               SETRANGE(Number,1,AnzSchleifen);
                               "WŽ berprfen" := '';
                               "ab vor wandlung" := '';
                               "via EMail_adresse":= '';
                               "via Email_unterschrift" := '';
                               "via Email" := '';
                               "via email_adr_r":= '';
                               "via Email_unterschrift_R" := '';
                               "via Email_R" := '';
                               Service_via_EMail := '';
                               nicht_rechnen := '';
                               Kunde.GET("Sales Invoice Header"."Sell-to Customer No.");
                               IF Kunde."AB vor Wandlung" THEN "ab vor wandlung" := 'Achtung erst AB dann Wandeln !!!';
                               IF Kunde."AB via EMail" THEN BEGIN
                                 "via Email_unterschrift" :='Erledigt von ..............';
                                 "via Email" := 'Achtung via E-Mail versenden !!!';
                               END;
                               IF Kunde."Rech via EMail" THEN BEGIN
                                 "via Email_unterschrift_R" := 'Erledigt von ..............';
                                 "via Email_R" := 'Achtung: Rechnung via E-Mail versenden!';
                               END;
                               IF Kunde."SerNr. via EMail" THEN
                                 "Seriennummer via EMail" := 'Achtung: Seriennummern via E-Mail versenden'
                               ELSE
                                 "Seriennummer via EMail" := '';
                               IF Kunde."Best„tigung via Internet" THEN BEGIN
                                 "via Email_unterschrift" := 'Termin eingehend beim Kunden';
                                 "via Email" := 'Best. per Internet (Vertrieb) !';
                                 "via Email_R" := 'Erledigt von ..............';
                               END;
                               //17.10.12
                               IF Kunde."Service via EMail" THEN
                                 Service_via_EMail := Kunde.FIELDCAPTION("Service via EMail");
                               //19.10.11 UB
                               IF "Sales Invoice Header"."Nicht rechnen" THEN
                                 nicht_rechnen := 'Nicht rechnen, ist fix !!!';
                               //ENDE NEU
                               vkk.RESET;
                               vkk.SETFILTER("No.",'%1',"Sales Invoice Header"."Order No.");
                               vkk.SETFILTER(W„hrungsabgleich,'%1',TRUE);
                               IF vkk.FINDFIRST THEN
                                   "WŽ berprfen" := 'WŽ berprfen, +/- 3% !'  ;
                               IF (("Sales Invoice Header"."Shipment Method Code" = 'ACCOUNT') OR ("Sales Invoice Header"."Shipment Method Code" = 'ACC-ENG')) THEN
                                 Account := "Sales Invoice Header".Spediteuraccount
                               ELSE
                                 Account := "Shipping Agent".Name;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number > 1 THEN
                                    KopieText := 'skopie';
                                  ReportForNav.PageNo := 1;
                                END;

               OnPostDataItem=BEGIN
                                //IF NOT CurrReport.PREVIEW THEN
                                //  VerkRechDruckZ„hler.RUN("Sales Invoice Header");
                              END;
                               }

    { 5   ;2   ;DataItem;SeiteSchleife       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1)) }

    { 1000000000;3;Column;CompanyName        ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[1] }

    { 1000000001;3;Column;CompanyAddress     ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[2]+ ', ' + CompanyInfo[4] +  ' ' + CompanyInfo[5] }

    { 1000000005;3;Column;CompanyPhone       ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[6] }

    { 1000000006;3;Column;CompanyFax         ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[7] }

    { 1000000007;3;Column;CompanyVATRegNo    ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[8] }

    { 1000000008;3;Column;CompanyRegNo       ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[9] }

    { 1000000009;3;Column;CompanyVorstand    ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[10] }

    { 1000000010;3;Column;CompanyARV         ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[11] }

    { 1000000011;3;Column;CompanyAmtsgericht ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[12] }

    { 1000000012;3;Column;CompanyWEEERegNo   ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[13] }

    { 1000000013;3;Column;CompanyPostfach    ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[14] }

    { 1000000002;3;Column;CompanyHomepage    ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[15] }

    { 6   ;3   ;Column  ;Service_via_EMail   ;
               IncludeCaption=No;
               SourceExpr=Service_via_EMail }

    { 7   ;3   ;Column  ;nicht_rechnen       ;
               IncludeCaption=No;
               SourceExpr=nicht_rechnen }

    { 8   ;3   ;Column  ;WAuberprufen        ;
               IncludeCaption=No;
               SourceExpr="WŽ berprfen" }

    { 9   ;3   ;Column  ;nachste_lief_jahr   ;
               IncludeCaption=No;
               SourceExpr=n„chste_lief_jahr }

    { 10  ;3   ;Column  ;nachste_lief_woche  ;
               IncludeCaption=No;
               SourceExpr=n„chste_lief_woche }

    { 11  ;3   ;Column  ;SeriennummerviaEMail;
               IncludeCaption=No;
               SourceExpr="Seriennummer via EMail" }

    { 12  ;3   ;Column  ;viaEmail_unterschrift_R;
               IncludeCaption=No;
               SourceExpr="via Email_unterschrift_R" }

    { 13  ;3   ;Column  ;viaEmail_R          ;
               IncludeCaption=No;
               SourceExpr="via Email_R" }

    { 14  ;3   ;Column  ;viaEmail_unterschrift;
               IncludeCaption=No;
               SourceExpr="via Email_unterschrift" }

    { 15  ;3   ;Column  ;viaEmail            ;
               IncludeCaption=No;
               SourceExpr="via Email" }

    { 16  ;3   ;Column  ;abvorwandlung       ;
               IncludeCaption=No;
               SourceExpr="ab vor wandlung" }

    { 17  ;3   ;Column  ;No_SalesInvoiceHeader;
               IncludeCaption=No;
               SourceExpr="Sales Invoice Header"."No." }

    { 18  ;3   ;Column  ;Sell_toCustomerNo_SalesInvoiceHeader;
               IncludeCaption=No;
               SourceExpr="Sales Invoice Header"."Sell-to Customer No." }

    { 19  ;3   ;Column  ;OrderNo_SalesInvoiceHeader;
               IncludeCaption=No;
               SourceExpr="Sales Invoice Header"."Order No." }

    { 20  ;3   ;Column  ;VATRegistrationNo_verk_debitor;
               IncludeCaption=No;
               SourceExpr=verk_debitor."VAT Registration No." }

    { 21  ;3   ;Column  ;OurAccountNo_verk_debitor;
               IncludeCaption=No;
               SourceExpr=verk_debitor."Our Account No." }

    { 22  ;3   ;Column  ;SalesInvoiceHeaderExternalDocumentNo__SalesInvoiceHeaderYour;
               IncludeCaption=No;
               SourceExpr="Sales Invoice Header"."External Document No."+' '+"Sales Invoice Header"."Your Reference" }

    { 23  ;3   ;Column  ;PostingDate_SalesInvoiceHeader;
               IncludeCaption=No;
               SourceExpr=FORMAT("Sales Invoice Header"."Posting Date",0,1) }

    { 24  ;3   ;Column  ;DebAdr8             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[8] }

    { 25  ;3   ;Column  ;DebAdr7             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[7] }

    { 26  ;3   ;Column  ;DebAdr6             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[6] }

    { 27  ;3   ;Column  ;DebAdr5             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[5] }

    { 28  ;3   ;Column  ;DebAdr4             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[4] }

    { 29  ;3   ;Column  ;DebAdr3             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[3] }

    { 30  ;3   ;Column  ;DebAdr2             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[2] }

    { 31  ;3   ;Column  ;DebAdr1             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[1] }

    { 32  ;3   ;Column  ;STRSUBSTNO_Seite_Pct1_FORMAT_ReportForNavPageNo_;
               IncludeCaption=No;
               SourceExpr=STRSUBSTNO('Seite:  %1',FORMAT(ReportForNav.PageNo)) }

    { 33  ;3   ;DataItem;Verkaufsrechnungszeile;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Document No.,Line No.);
               OnPreDataItem=BEGIN
                               MWSTBetragZeile.DELETEALL;
                               MehrZeilen := FIND('+');
                               WHILE MehrZeilen AND (Description = '') AND ("No." = '') AND (Quantity = 0) AND (Amount = 0) DO
                                 MehrZeilen := NEXT(-1) <> 0;
                               IF NOT MehrZeilen THEN
                                 CurrReport.BREAK;
                               SETRANGE("Line No.",0,"Line No.");
                               {lshanf c02}
                               grechrabbetr := 0;
                               {lshend}
                             END;

               OnAfterGetRecord=BEGIN
                                  MWSTBetragZeile.INIT;
                                  MWSTBetragZeile."VAT %" := "VAT %";
                                  MWSTBetragZeile."VAT Base" := Amount;
                                  MWSTBetragZeile."Amount Including VAT" := "Amount Including VAT";
                                  MWSTBetragZeile.InsertLine;
                                  {lshanf c02}
                                  IF "Inv. Discount Amount" <> 0 THEN BEGIN
                                    "grechrab%" := ("Inv. Discount Amount" * 100) / (Amount + "Inv. Discount Amount");
                                    grechrabbetr := grechrabbetr + Amount + "Inv. Discount Amount";
                                  END;
                                  {lshend}
                                  //TOPAS 02.07.08 ST - Sachkonten Restmenge aus Auftrag holen , zum andrucken
                                  Auftrag.SETFILTER(Type,'%1',Auftrag.Type::"G/L Account");
                                  Auftrag.SETFILTER("Document No.",'%1',Verkaufsrechnungszeile."Order No.");
                                  Auftrag.SETFILTER("Line No.",'%1',Verkaufsrechnungszeile."Order Line No.");
                                  IF Auftrag.FINDFIRST THEN BEGIN
                                    RestmengeZeile := Auftrag."Outstanding Quantity" + Auftrag."Qty. Shipped Not Invoiced";
                                  END ELSE BEGIN
                                    RestmengeZeile := 0;
                                  END;
                                  IF v_FER_SPL = FALSE THEN BEGIN
                                    IF ((Verkaufsrechnungszeile."Manufacturer Code" = '82') OR (Verkaufsrechnungszeile."Manufacturer Code" = '85')) THEN BEGIN
                                      v_FER_SPL := TRUE;
                                    END;
                                  END;
                                END;

               DataItemLinkReference=Sales Invoice Header;
               DataItemLink=Document No.=FIELD(No.) }

    { 34  ;4   ;Column  ;STRSUBSTNO_Seite_Pct1_FORMAT_ReportForNavPageNo_1_;
               IncludeCaption=No;
               SourceExpr=STRSUBSTNO('Seite:  %1',FORMAT(ReportForNav.PageNo-1)) }

    { 35  ;4   ;Column  ;Amount_InvDiscountAmount;
               IncludeCaption=No;
               SourceExpr=Amount+"Inv. Discount Amount";
               AutoFormatType=1;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 36  ;4   ;Column  ;Description_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Description }

    { 37  ;4   ;Column  ;RestmengeZeile      ;
               DecimalPlaces=0:0;
               IncludeCaption=No;
               SourceExpr=RestmengeZeile }

    { 38  ;4   ;Column  ;UnitPrice_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr="Unit Price";
               AutoFormatType=2;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 39  ;4   ;Column  ;Quantity_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Quantity }

    { 40  ;4   ;Column  ;STRSUBSTNO_Seite_Pct1_FORMAT_ReportForNavPageNo_1_2;
               IncludeCaption=No;
               SourceExpr=STRSUBSTNO('Seite:  %1',FORMAT(ReportForNav.PageNo+1)) }

    { 41  ;4   ;Column  ;InvDiscountAmount_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=-"Inv. Discount Amount" }

    { 42  ;4   ;Column  ;grechrabbetr        ;
               IncludeCaption=No;
               SourceExpr=grechrabbetr }

    { 43  ;4   ;Column  ;grechrabPct         ;
               IncludeCaption=No;
               SourceExpr="grechrab%" }

    { 44  ;4   ;Column  ;waehrung2           ;
               IncludeCaption=No;
               SourceExpr=waehrung2 }

    { 45  ;4   ;Column  ;TotalInklMWStText   ;
               IncludeCaption=No;
               SourceExpr=TotalInklMWStText }

    { 46  ;4   ;Column  ;TotalText           ;
               IncludeCaption=No;
               SourceExpr=TotalText }

    { 47  ;4   ;Column  ;MWSTBetragZeileVATAmountText;
               IncludeCaption=No;
               SourceExpr=MWSTBetragZeile.VATAmountText }

    { 48  ;4   ;Column  ;AmountIncludingVAT_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr="Amount Including VAT";
               AutoFormatType=1;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 49  ;4   ;Column  ;AmountIncludingVAT_Amount;
               IncludeCaption=No;
               SourceExpr="Amount Including VAT" - Amount;
               AutoFormatType=1;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 50  ;4   ;Column  ;Amount_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Amount;
               AutoFormatType=1;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 51  ;4   ;DataItem;                    ;
               DataItemTable=Table27;
               OnPreDataItem=BEGIN
                               IF debart <> '' THEN
                               debart := 'Ihre Artikelnummer: ' + debart;
                               //TOPAS 02.07.08 ST - Restmenge aus Auftrag holen, zum andrucken
                               Auftrag.SETFILTER(Type,'%1',Auftrag.Type::Item);
                               Auftrag.SETFILTER("Document No.",'%1',Verkaufsrechnungszeile."Order No.");
                               Auftrag.SETFILTER("Line No.",'%1',Verkaufsrechnungszeile."Order Line No.");
                               IF Auftrag.FINDFIRST THEN BEGIN
                                 IF Auftrag."Outstanding Quantity" <> 0 THEN BEGIN
                                   RestmengeZeile := Auftrag."Outstanding Quantity" + Auftrag."Qty. Shipped Not Invoiced";
                                   RestmengeAU := RestmengeAU + RestmengeZeile;
                                 END ELSE BEGIN
                                   IF Auftrag."Qty. Shipped Not Invoiced" <> 0 THEN
                                     RestmengeAU := RestmengeAU + Auftrag."Qty. Shipped Not Invoiced";
                                 END;
                                 IF Auftrag."Promised Delivery Date" = 31122053D THEN BEGIN
                                   liefert := 'Abruf';
                                 END;
                                 IF Auftrag."Promised Delivery Date"= 31122055D THEN BEGIN
                                   IF CurrReport.LANGUAGE = 1031 THEN BEGIN
                                     liefert := 'folgt';
                                   END ELSE BEGIN
                                     liefert := 'To Follow';
                                   END;
                                 END;
                               END;
                             END;

               OnPostDataItem=BEGIN
                                debart := '';
                                liefert := '';
                              END;

               DataItemLinkReference=Verkaufsrechnungszeile;
               DataItemLink=No.=FIELD(No.) }

    { 52  ;5   ;Column  ;LineNo_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile."Line No." }

    { 53  ;5   ;Column  ;SearchDescription_Item;
               IncludeCaption=No;
               SourceExpr="Search Description" }

    { 54  ;5   ;Column  ;Artikelnr2_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile."Artikelnr. 2" }

    { 55  ;5   ;Column  ;Description_Verkaufsrechnungszeile3;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile.Description }

    { 56  ;5   ;Column  ;Country_RegionofOriginCode_Item;
               IncludeCaption=No;
               SourceExpr="Country/Region of Origin Code" }

    { 57  ;5   ;Column  ;Quantity_Verkaufsrechnungszeile2;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile.Quantity }

    { 58  ;5   ;Column  ;RestmengeZeile2     ;
               DecimalPlaces=0:0;
               IncludeCaption=No;
               SourceExpr=RestmengeZeile }

    { 59  ;5   ;Column  ;liefert             ;
               IncludeCaption=No;
               SourceExpr=liefert }

    { 60  ;5   ;Column  ;UnitPrice_Verkaufsrechnungszeile2;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile."Unit Price";
               AutoFormatType=2;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 61  ;5   ;Column  ;VerkaufsrechnungszeileAmount_VerkaufsrechnungszeileInvDiscou;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile.Amount+Verkaufsrechnungszeile."Inv. Discount Amount";
               AutoFormatType=1;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 62  ;5   ;Column  ;PromisedDeliveryDate_Auftrag;
               IncludeCaption=No;
               SourceExpr=Auftrag."Promised Delivery Date" }

    { 63  ;5   ;Column  ;Description2_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile."Description 2" }

    { 64  ;5   ;Column  ;Endkunde_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile.Endkunde }

    { 65  ;5   ;Column  ;Cross_ReferenceNo_Verkaufsrechnungszeile;
               IncludeCaption=No;
               SourceExpr=Verkaufsrechnungszeile."Cross-Reference No." }

    { 66  ;3   ;DataItem;                    ;
               DataItemTable=Table44;
               DataItemTableView=SORTING(Document Type,No.,Line No.);
               DataItemLinkReference=Sales Invoice Header;
               DataItemLink=No.=FIELD(No.) }

    { 67  ;4   ;Column  ;Comment_SalesCommentLine;
               IncludeCaption=No;
               SourceExpr=Comment }

    { 70  ;3   ;DataItem;MWStZ„hler          ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               IF MWSTBetragZeile.COUNT <= 1 THEN
                                 CurrReport.BREAK;
                               SETRANGE(Number,1,MWSTBetragZeile.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  MWSTBetragZeile.GetLine(Number);
                                END;
                                 }

    { 71  ;4   ;Column  ;VATAmount_MWSTBetragZeile;
               IncludeCaption=No;
               SourceExpr=MWSTBetragZeile."VAT Amount";
               AutoFormatType=1;
               AutoFormatExpr="Sales Invoice Header"."Currency Code" }

    { 72  ;4   ;Column  ;VATBase_MWSTBetragZeile;
               IncludeCaption=No;
               SourceExpr=MWSTBetragZeile."VAT Base";
               AutoFormatType=1;
               AutoFormatExpr=Verkaufsrechnungszeile.GetCurrencyCode }

    { 73  ;4   ;Column  ;VATBase_MWSTBetragZeile2;
               IncludeCaption=No;
               SourceExpr=MWSTBetragZeile."VAT Base";
               AutoFormatType=1;
               AutoFormatExpr="Sales Invoice Header"."Currency Code" }

    { 74  ;4   ;Column  ;VATPct_MWSTBetragZeile;
               IncludeCaption=No;
               SourceExpr=MWSTBetragZeile."VAT %" }

    { 75  ;3   ;DataItem;Total               ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1)) }

    { 76  ;4   ;Column  ;Account             ;
               IncludeCaption=No;
               SourceExpr=Account }

    { 77  ;4   ;Column  ;Description_LieferBed;
               IncludeCaption=No;
               SourceExpr=LieferBed.Description }

    { 78  ;4   ;Column  ;gzbedtx             ;
               IncludeCaption=No;
               SourceExpr=gzbedtx }

    { 79  ;3   ;DataItem;Total2              ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnPreDataItem=BEGIN
                               IF NOT LiefAdrAnzeigen THEN
                                 CurrReport.BREAK;
                             END;
                              }

    { 80  ;4   ;Column  ;Sell_toCustomerNo_SalesInvoiceHeader2_Lbl;
               IncludeCaption=No;
               SourceExpr="Sales Invoice Header".FIELDCAPTION("Sell-to Customer No.") }

    { 81  ;4   ;Column  ;Sell_toCustomerNo_SalesInvoiceHeader2;
               IncludeCaption=No;
               SourceExpr="Sales Invoice Header"."Sell-to Customer No." }

    { 82  ;4   ;Column  ;LieferAnAdr1        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[1] }

    { 83  ;4   ;Column  ;LieferAnAdr8        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[8] }

    { 84  ;4   ;Column  ;LieferAnAdr7        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[7] }

    { 85  ;4   ;Column  ;LieferAnAdr6        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[6] }

    { 86  ;4   ;Column  ;LieferAnAdr5        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[5] }

    { 87  ;4   ;Column  ;LieferAnAdr4        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[4] }

    { 88  ;4   ;Column  ;LieferAnAdr3        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[3] }

    { 89  ;4   ;Column  ;LieferAnAdr2        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[2] }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  CaptionML=DEU=Anzahl Kopien;
                  SourceExpr=AnzKopien }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      spedition@1000000014 : Record 291;
      art1@1000000013 : Record 27;
      verk_debitor@1000000012 : Record 18;
      FIBUEinrichtung@1000000011 : Record 98;
      LieferBed@1000000010 : Record 10;
      ZlgBed@1000000009 : Record 3;
      VerkEinkPerson@1000000008 : Record 13;
      Firmendaten@1000000007 : Record 79;
      Deb@1000000006 : Record 18;
      Kunde@1000000016 : Record 18;
      vk_rech_zeile@1000000015 : Record 37;
      MWSTBetragZeile@1000000005 : TEMPORARY Record 290;
      Language@1000000004 : Record 8;
      VerkRechDruckZ„hler@1000000003 : Codeunit 315;
      FormatAdr@1000000002 : Codeunit 365;
      TOPAS_Funktionen@1000000000 : Codeunit 50006;
      waehrung2@1140000 : Code[10];
      waehrung@1140001 : Code[10];
      debart@1140002 : Text[80];
      CompanyInfo@1000000001 : ARRAY [15] OF Text;
      DebAdr@1140015 : ARRAY [8] OF Text[50];
      LieferAnAdr@1140016 : ARRAY [8] OF Text[50];
      FirmaAdr@1140017 : ARRAY [8] OF Text[50];
      AuftragNrText@1140018 : Text[30];
      Verk„uferText@1140019 : Text[30];
      MWStNrText@1140020 : Text[30];
      ReferenzText@1140021 : Text[30];
      TotalText@1140022 : Text[50];
      TotalInklMWStText@1140023 : Text[50];
      MehrZeilen@1140024 : Boolean;
      AnzKopien@1140025 : Integer;
      AnzSchleifen@1140026 : Integer;
      KopieText@1140027 : Text[30];
      LiefAdrAnzeigen@1140028 : Boolean;
      i@1140029 : Integer;
      "--------LSH--------"@1140030 : Integer;
      "grechrab%"@1140031 : Decimal;
      grechrabbetr@1140032 : Decimal;
      gzbedtx@1140033 : Text[100];
      "via Email"@1140034 : Text[40];
      "via Email_unterschrift"@1140035 : Text[40];
      "via EMail_adresse"@1140036 : Text[40];
      "ab vor wandlung"@1140037 : Text[40];
      "via Email_R"@1140038 : Text[40];
      "via Email_unterschrift_R"@1140039 : Text[40];
      "via email_adr_r"@1140040 : Text[40];
      "Seriennummer via EMail"@1140041 : Text[50];
      Service_via_EMail@1140055 : Text[40];
      Account@1140044 : Text[90];
      Auftrag@1140045 : Record 37;
      RestmengeZeile@1140046 : Decimal;
      RestmengeAU@1140047 : Decimal;
      liefert@1140048 : Code[10];
      n„chste_lief_tab@1140049 : Record 37;
      n„chste_lief_woche@1140050 : Text[30];
      n„chste_lief_jahr@1140051 : Text[30];
      "WŽ berprfen"@1140052 : Text[30];
      vkk@1140053 : Record 36;
      nicht_rechnen@1140054 : Text[30];
      v_FER_SPL@1140056 : Boolean;
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionMWStZahler_Header23@1000000057(VAR MWStZ„hler@1000000000 : Record 2000000026);
    BEGIN
      WITH MWStZ„hler DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE OnPreSectionMWStZahler_TransHeader24@1000000058(VAR MWStZ„hler@1000000000 : Record 2000000026);
    BEGIN
      WITH MWStZ„hler DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE OnPreSectionMWStZahler_Body25@1000000059(VAR MWStZ„hler@1000000000 : Record 2000000026);
    BEGIN
      WITH MWStZ„hler DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE OnPreSectionMWStZahler_TransFooter26@1000000060(VAR MWStZ„hler@1000000000 : Record 2000000026);
    BEGIN
      WITH MWStZ„hler DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE OnPreSectionMWStZahler_Footer27@1000000061(VAR MWStZ„hler@1000000000 : Record 2000000026);
    BEGIN
      WITH MWStZ„hler DO BEGIN
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE OnPreSectionSeiteSchleife_Header2@5010(VAR SeiteSchleife@1000000000 : Record 2000000026);
    BEGIN
      WITH SeiteSchleife DO BEGIN
        ReportForNav.ShowOutput("Sales Invoice Header"."Shipping Agent Code"='UPS-RG4')
      END;
    END;

    LOCAL PROCEDURE OnPreSectionVerkaufsrechnungszeile_Body6@5011(VAR Verkaufsrechnungszeile@1000000000 : Record 113);
    BEGIN
      WITH Verkaufsrechnungszeile DO BEGIN
        //ReportForNav.ShowOutput(Art = 0);
        // Unterdckt Artikeltexte wenn eine Artikelzeile nicht berechnet wird
        vk_rech_zeile.SETFILTER(vk_rech_zeile."Document No.",'%1',Verkaufsrechnungszeile."Document No." );
        vk_rech_zeile.SETFILTER(vk_rech_zeile."Line No.",'%1',Verkaufsrechnungszeile."Attached to Line No." );
        IF vk_rech_zeile.FINDFIRST THEN BEGIN
          ReportForNav.ShowOutput(((vk_rech_zeile.Type = vk_rech_zeile.Type::Item) AND (vk_rech_zeile.Quantity > 0)) OR (vk_rech_zeile.Type = 0));
        END ELSE BEGIN
          IF ((Verkaufsrechnungszeile."Attached to Line No." = 0) AND (Verkaufsrechnungszeile.Type = 0) AND (Verkaufsrechnungszeile.Description <> '')) THEN
            ReportForNav.ShowOutput(TRUE)
          ELSE
            ReportForNav.ShowOutput(FALSE);
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionVerkaufsrechnungszeile_Body7@5012(VAR Verkaufsrechnungszeile@1000000000 : Record 113);
    BEGIN
      WITH Verkaufsrechnungszeile DO BEGIN
        ReportForNav.ShowOutput((Type = Type::"G/L Account")  AND (Verkaufsrechnungszeile.Quantity > 0));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionVerkaufsrechnungszeile_Footer9@5013(VAR Verkaufsrechnungszeile@1000000000 : Record 113);
    BEGIN
      WITH Verkaufsrechnungszeile DO BEGIN
        ReportForNav.ShowOutput("Inv. Discount Amount" <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionVerkaufsrechnungszeile_Footer11@5014(VAR Verkaufsrechnungszeile@1000000000 : Record 113);
    BEGIN
      WITH Verkaufsrechnungszeile DO BEGIN
        ReportForNav.ShowOutput(v_FER_SPL = FALSE);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionVerkaufsrechnungszeile_Footer13@5015(VAR Verkaufsrechnungszeile@1000000000 : Record 113);
    BEGIN
      WITH Verkaufsrechnungszeile DO BEGIN
        ReportForNav.ShowOutput(RestmengeAU = 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body14@5016(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput((Verkaufsrechnungszeile.Type = Verkaufsrechnungszeile.Type::Item)
        AND ((Verkaufsrechnungszeile.Quantity > 0) OR (Verkaufsrechnungszeile.Einkaufsw„hrungsfaktor > 0)) AND (Auftrag."Promised Delivery Date" = 31122055D));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body15@5017(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput((Verkaufsrechnungszeile.Type = Verkaufsrechnungszeile.Type::Item)
        AND ((Verkaufsrechnungszeile.Quantity > 0) OR (Verkaufsrechnungszeile.Einkaufsw„hrungsfaktor > 0)) AND (Auftrag."Promised Delivery Date" = 31122053D));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body16@5018(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput((Verkaufsrechnungszeile.Type =Verkaufsrechnungszeile.Type::Item)
        AND ((Verkaufsrechnungszeile.Quantity > 0) OR (Verkaufsrechnungszeile.Einkaufsw„hrungsfaktor > 0)) AND (Auftrag."Promised Delivery Date" < 31122053D));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body17@5019(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput((Verkaufsrechnungszeile."Description 2" <> '')
        AND (Verkaufsrechnungszeile.Type =Verkaufsrechnungszeile.Type::Item));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body18@5020(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput(("Beschreibung 3" <> '') AND (Verkaufsrechnungszeile.Type = Verkaufsrechnungszeile.Type::Item));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body19@5021(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput((Verkaufsrechnungszeile.Type = Verkaufsrechnungszeile.Type::Item)
        AND (Verkaufsrechnungszeile.Quantity > 0) OR (Verkaufsrechnungszeile."Cross-Reference No." <> ''));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body20@5022(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        ReportForNav.ShowOutput((Verkaufsrechnungszeile."VAT Prod. Posting Group" = '13B2')
         AND (Verkaufsrechnungszeile.Type = Verkaufsrechnungszeile.Type::Item) AND (Verkaufsrechnungszeile.Quantity > 0));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionTotal_Body28@5028(VAR Total@1000000000 : Record 2000000026);
    BEGIN
      WITH Total DO BEGIN
        {lshanf c01}
        //IF ZlgBed."Discount %" <> 0 THEN BEGIN
        //  "Sales Invoice Header".CALCFIELDS(Skontobetrag);
          IF COPYSTR(ZlgBed.Description,1,1) <> '*' THEN
            gzbedtx := ZlgBed.Description;
        //    ELSE
        //    BEGIN
        //    gzbedtx := ZlgBed.Description;
        //      END
        {lshend}
      END;
    END;

    LOCAL PROCEDURE OnPreSectionTotal2_Body30@5029(VAR Total2@1000000000 : Record 2000000026);
    BEGIN
      WITH Total2 DO BEGIN
        ReportForNav.ShowOutput := "Sales Invoice Header"."Sell-to Customer No." <> "Sales Invoice Header"."Bill-to Customer No.";
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'SeiteSchleife': CASE SectionId OF
          'Header2': OnPreSectionSeiteSchleife_Header2(SeiteSchleife);
        END;
        'Verkaufsrechnungszeile': CASE SectionId OF
          'Body6': OnPreSectionVerkaufsrechnungszeile_Body6(Verkaufsrechnungszeile);
          'Body7': OnPreSectionVerkaufsrechnungszeile_Body7(Verkaufsrechnungszeile);
          'Footer9': OnPreSectionVerkaufsrechnungszeile_Footer9(Verkaufsrechnungszeile);
          'Footer11': OnPreSectionVerkaufsrechnungszeile_Footer11(Verkaufsrechnungszeile);
          'Footer13': OnPreSectionVerkaufsrechnungszeile_Footer13(Verkaufsrechnungszeile);
        END;
        'Item': CASE SectionId OF
          'Body14': OnPreSectionItem_Body14(Item);
          'Body15': OnPreSectionItem_Body15(Item);
          'Body16': OnPreSectionItem_Body16(Item);
          'Body17': OnPreSectionItem_Body17(Item);
          'Body18': OnPreSectionItem_Body18(Item);
          'Body19': OnPreSectionItem_Body19(Item);
          'Body20': OnPreSectionItem_Body20(Item);
        END;
        'MWStZahler': CASE SectionId OF
          'Header23': OnPreSectionMWStZahler_Header23(MWStZ„hler);
          'TransHeader24': OnPreSectionMWStZahler_TransHeader24(MWStZ„hler);
          'Body25': OnPreSectionMWStZahler_Body25(MWStZ„hler);
          'TransFooter26': OnPreSectionMWStZahler_TransFooter26(MWStZ„hler);
          'Footer27': OnPreSectionMWStZahler_Footer27(MWStZ„hler);
        END;
        'Total': CASE SectionId OF
          'Body28': OnPreSectionTotal_Body28(Total);
        END;
        'Total2': CASE SectionId OF
          'Body30': OnPreSectionTotal2_Body30(Total2);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
      ForNavOperation@1000000009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Verkaufsrechnungszeile': WITH Verkaufsrechnungszeile DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Amount);
                ReportForNav.AddTotal(DataItemId,1,"Amount Including VAT");
                ReportForNav.AddTotal(DataItemId,2,"Inv. Discount Amount");
              END;
           'Restore': BEGIN
                 Amount := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Amount Including VAT" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Inv. Discount Amount" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;  'MWStZahler': WITH MWStZ„hler DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,MWSTBetragZeile."VAT Base");
                ReportForNav.AddTotal(DataItemId,1,MWSTBetragZeile."VAT Amount");
              END;
           'Restore': BEGIN
                 MWSTBetragZeile."VAT Base" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 MWSTBetragZeile."VAT Amount" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    {
      030299 pl
      c01  Total, Body(1) und Globals
           Zahlungsbedingung vom Skonto abh„nging ausdrucken.
      230699 ug
           Adressfeld auf Fensterkurvert-Norm gesetzt.
      c02  Verkaufsrechnungszeile, C/AL und Globals
           Rechnungsrabatt %-Satz und Rabattgrundlage in Rechnungsrabattzeile mit ausdrucken.
      131099 al
      c03  Verkaufsrechnungszeile, Body(7) eingefgt.
           Bezeichnung 2 ausdrucken.
      25.01.22 st: šbertrag- und Fortsetzungsbetrag Sektionen ausgeblendet, da mit 6.1.0 mitunter fehlerhaft
    }
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>zEcBAO19W2/cuJbu+wDnP2h70JM02qlI1L13PAPbcTqedmwf20lm9mDDkMu0Szuy5K1SOZeHeZqf
McC8NHD+wXnqp5M/dkhRUkmqRYpkqZK+BWi0Sxdq6ePSunGtxWf/8uEuMR5wPo+zdGfLmphbBk6n
2XWc3u5sLYqbJ8HWv/zz//qHZ/9W5NEZvs/yYn4UfcwWxTnO4yiJP+HcWP75phnImaCJS0frHNoy
jqM7vLN1cXK6e/5kd+9JnBY4T7eM/Swt8iy5+HhPzj7HDwcf7nM8n09aj528Pmz9RNsG57IH+qDt
+rnGjlHTsm3sL5JikWNyLMULckuybZwurpJ4+iP+eJG9w/Tqa38aBThApn/jYMckb/A8nt8n0UcO
5dVjX2T5cfTQvKw3IVBOkOW4W8bJ1d/wtDjOdrZc0/RRcwAe70WMk+u3+IqA+hBP8es82dmaFcX9
90+fHu++OT84e/MEmZY3eY/eTYrsPppPrvH3vukET59/TKO7eDonl4Xm05PnURE93c/u7qP04+NH
5XMefbtlnEa3+CWOb2fFzhYKfZMdeRtfFzNywKIv/CrKb+N0TqbMJ6C52wY5um3YZv2yr9OY3HyB
02I2P7nZfRUnSXyHCfl0rHuc/xin1ztbuw6B7j4mg7rkrxdkgskxyijbhn9fbBGmMoxne1F6PS//
JD8OC3xnVRxyHiV4fpg+ZASDlzi6poN3mIQBTl+S3kbHIcyF39OXOcX5GZ5mOSGiyBeYkFFddRFd
JRRz+j/LQr0Tb2L8njz45Ozi8PiHx8fZ5Fv6wn9/ESfk1SgN5Jt4dUTY8+D1zg/4akJZ7F20uJnn
eDpLF+lt6/JyFgmCZJTtc5wkT4qMcN+8yO7I90IPkv+M05xOOqH7kFBqbVUw9FBZRWYW398TUnZv
yQRIgAK9PAot8OWXB4/i9N3O1n52jXdeHB4cPX9cP9Yon2vQMxx8/pN+jf94/ProiL0ZomyRk5vq
selBYH5bL1xjYDxto/C0hKGPC6pwqeHVhMQKpBAh81YDAkyrJCL2qIigPiJ2hciP2X2Mz6ezBMc3
eITP502UgwODHGayf8gTf2WLuyucS8Lm6MPWOdT/oHBcqMC0AkdvgPXhMN6+PDg7qH7t7J8cn188
tr6VRMmFUOrOWA8NDkgtoM7wzc6WD2LDMK8YqISDHbHa0v+c6DuiF3vnS/l3kh4Q8+MjZbya35h6
ekFeJTRXaS3JqgiBSO6THTRGB/5Q7GUfbPA1qpOEVGLHkEdbyLInYRgGwbYdln+ENhFkR9k0om/y
Iskios+IWjS5Wi6YIPe+2DbmxUfCB3tZcr1tTGdRfo6LHZOxAfmz1BSVBGPKmv4wvjMebRuPyP+q
g7vX19TSMbYMSqnstS+z/NNuEt8Si+QI3xTs5vLAHaaUvoqvrxNcnuIgSbA8p/STucryuPjIMA23
jNdzzN72JkrmuPzdG7w68ZQ3RyvifGUGEXuaZdZT2Jkry3LYByUxnY5vTZxtz1yZQTLP5sQi1o3j
T1zuVFpmdyK3jD0iH3G+nyVZvrO1l0TTd9CMVkbc5UMcXR68iuKknr7VE0r4W9bqBIhxRiKc7WpU
JMDZlcLZDt2JD+HsOh61yq0gmNijw5zG01lxWZphOK0h7h5Ug9dWhdcWwetUozoCeOWkkuMEhFkB
eJEbTmzCxTZxPEaH9+3uguih+3xxs0S3c0wNXFcVXEcErluN6gnARXK8S7wcAFrPMSm0FvJF0Dp9
aAEujaazeYEvkxjfXP4tmuUNp66cUAPUVwXUFQHqVaMGAkCtEQD1wvHQfJ9NZxiEk51RwxPQbmI8
PRGePhsVwUqM4iMBJXHUwc/eo445kbkCLPVVV4zTdHF3R1VV1Ndeq+eUMEbKCswXYRxUo8IKzIct
1z7GgQtiHAYEY2Tz7bxVhFfRpCjdEZQuFzTMM5/O8vimuDyrAeWdVsNUWWsFIkzDalRYa/ly9oAI
U8sfCdNVGFWRU1ZJodDxMKthYZ3kOetDZ22AHYXMqAioskqyTCGilS+HYKXkyCPqchD1xgG0j6Ei
bMqaxxL6T1blQNmw7rHl1LiHQEaknhMRjKEKcHKqJ7p6yPL3UXqdlEFVhmj3oBKstrKysYTuklX5
SzasbiRdJeSibQdRb6gPrINo2B0JIgv3BYTbcXYJhc0ZfpyTm4oQ2MrKyBL6UFblRNk9dXQUXeEE
wd9/eU4Wbyfg403XK4z96J7eVK8AnFVB/zkzg2qY+4fVQFPWQ5bQN7Iq58j2INBgl7MLWki+cRC0
sMSsy6MtXtrHabke1ANtLy4KbFzh2PhLNKMfshFTlIweakaU3uKr2tlc4cZ6cIa48phcREvIKvfH
9iHIYEeyC5lluhw+80INPiOf+eKuflf2Q42nAmWeErozVuXP2CEs/OT8GcTjK8sK9YQfXY65LLJ6
NUYoC+Wu3ZRodEzlGRE6P1bl/TgWwLLUmR0WjeLZUGXZHxfpde0e1pB3jqnBhZThEvo1VuXYODYE
VyADl21xhKKjgdbu4qbIo74e6R1VQ8xRRkzoz6DKn6HJDFBISM69FqOm8cWfUFtS+J2LrtjY1+0p
h+aFrg+qXB+np5DOZ9E9tuDVj/JcR4dbCPB7ShXedXyYgT4n0CdC34U+oKKLfDHlT0Yc0boF0bTJ
8FuLV34qz8UJoY9UxtyzbI5M8wKNj/T1efHk8Po4n9SstTygxB2usuxHQlcEVa6Ia8GfptyyAhJi
pfFpvtm9OMO38ZyIsHLdN7t8wPm7y2t8FRdZ83kOXKUGrLKWQEJ/A1X+hmtzwuDrmTmOa+vJvEW+
O51mi7TgYMq/QA1OZRWChJ4IqjwR1wW+ZxkThRoiHCQ1PuejGN/gPCJuRPqk9VH3D6tBpi74hesw
qPJEXB8OwMotGPK+bE0je0WRHnygaYtR8jybLqjiJFwHqNt/zxZL43udMdRmRNn1QULXB1Wujwsp
JTjo0zMcPTIbq4pYg4EPZzk2ahuR6Nvoark0C55TAs5T11JCDwVVHooHeigSwLnkIw+BlcSgzEsV
RCBLPn6D86Iy9faygrh8MqEKlo9LgNxbMQ3ZIN0oROtyNajV9ZbQu0GVd+Nx9JYrmf7k8DxCb8g/
D2HRcZrNizi9JSewwGIfumpTVrunru+ELpNduUwe7DI5sJu5EnkXSG/bH0r1gGbhOb7avc6DJp5U
/VTDSlnR2UIPx648HA9WdHIM6/kCqGx7EmhC5Xeh8hWhUtZAttAtsiu3yIODb5bkoqzJxwqF1kAe
HB8rr4uVp4aVr6x0bHFSW+Ua+RzXSC4pSIiVE9KSFi2s3C5WriJWylrDFno7duXt+BytIRfUFWJl
egNJKnysnC5WjiJWyqLdFroyduXK+LBol5PsIqgsz5l4mlDZXahsRajUJbvQhbErF8aHJbtc6q4Q
KoQG0kn5UKEuVEgRKnXJLvQt7Mq38GHJLpngIIBK4GCIcbK6OFlqOAXqUl3oStiVKxHAUl1OqAus
29KjECQm+RzH+OLs/PXe+cXxyWVZDXJ5Oi2syxcnZ692Ly5Z1RwjhdY5EP+2cYaV72tZwGe0TIJj
ArNzalOlrlRgV+TZU0F5Bj/tv53yH8BWH6/YpKOFgWITWrmBH3BCy+yMl9H8JD3NcXXdStWJFaBJ
6Ju+E45QfAKlK5Q5tDasU7t+b4DcibftAoxqmu7EJc4WUqpa6Pm4//T3RVb8+UccE8f1NLqPcV6X
MhqfFrnBwmHk158M45+S4s875B+7pVnVU7lVkRvVcyEkSkkCKBOC5TTLRCFF8+HRMhJnyNOQmI/X
p+esjjahRTyVA2zg/KZcm0ni6exP9LXgGVG8WXFOlNP6YAtdQkBAN3aKG/vFt/NPOE5kyvf2cxwV
+CIrCP1kau5orHybgch+ENSmyYKW1xlvdi/YmeoCgueE1oOXAXaDXV7jv1IWyKMQrka2hYWBdWi0
rB0+oh8dqzZtF6ee0U8Op9M6TtvMfh086VaytoesSloVKljhEtZOISQ89bxKw2aCa8kJf488DeAM
aABHotww4FQblqQNCP0++aEJCBpfRuZbnrltQ+mWTulGiSyTrnABYpyvFkkRU/ap3x1cF7lephwN
5F61rxcAwykiVEjLLMcQSvlmAipJHyJI0tsyYXrLhWfAdPVngEUrh/A/w/OCoH2LRYHNJtOwvlYd
eYXkzCXyvGhLg3wVcAnBFE14vaoLvA/jbinC3gP15Y81ZOQvdawU7JAlVrxoS4NVFXAJIXvEhh1j
KTER+JvmUfbNy3Jp+2p17BXsjSX2vOhNg30VwAkDiE+lFqMdEHtflVGVsX+dz+8nR6XyG0R+ea06
7gp1CEvceaGgBve6stCEdKMjIyAsZIESolyU0kS+8qKHoN/DdD1V6G3XCcnsSmXULVNLIfLCSg3s
fj08pBEdKYXoBSDsZeL8ZmE/iNNPOLnPcTyXwb59ucYEaOlFXryqmYCgHh5SjI5MTrnjIXACVNke
WAkfmoDdvIjf4YSzCP6vi3kR33xsslarizWg11KzvKXwBvqwHh7Ss45M6gHHJlEEfgjl02w+aa2B
C1KP+AhqKUveKnaDYF3MaJkBkIDKab/RTUC1Atvc9sG8F43kUwbAMgHVMkPVDNTl63PLDgeCFK0R
JKJOFm8BLY/S+apH2zrcCe4tQ5jns+z9yaK4XyynuvFiafJOxwHuDDeag2tZUDKPLZU/zy03KEsK
B1JLel/O5/++IkKNKFzjIWtSoLoH1b8lSyEUPswKq+wAL7Pacjl9VBsLCtmUM3NU1yAs7dULcqfG
XCis3y7nQtZZtSx4GdeVW5zkFjVYbuBozAULKV4epg91lJEdaRQs77wGrgqLvUtc+Y6tpLwcaETE
YKB/67Y29CX6+LVCpUNR2n7bP/kYKc3JX42Rcp7Hh1UUMG2Aa4QyLH/3suuPbQ1Df1v8kGl9emil
LKSJCmLOk9Aqqy/ByW6iyzSSqSjcIkyaNKCc9kwNNyK+eKxSRzqEF42RudigBX3PSGGlvRloUG81
k1PrLsRJp6KTY8LBE+nJoSc0puccR/l09hzPp3lc2gaXTH7UxZ7gWU2QFQ2DJcgihdSA3DRi41Wd
UJDlMoxoyjQMcqj1DVSuXZqjge9A4sLNfwuKNsNymkSB22aa6oZuiFMQWU6TnDEnniZXlN7Emag2
p8MT0EoSG75UcwIUjYvlBIiit80E1E3fEJxYxiZAzoKzeDlTvqP1nexTcyz/eEkr27I0uznJ49s4
pe2SO1Jp6DJN2BWy0rqwi4K3Dex1ABcJFLQpl4Ns8fg+8LRg/9+LKC0IEBw+bpL9hq/bS6L03V9w
njXmzigZV8J5s7V1tyj628xbHQG2RbpbLsWQLjtxdLetNXHNMuZfOvPUP6yJq7a6FgV1G1zrwK4t
UteSBTe8+gULDeM61J0qKRfhGiey+QlkCIgW/TXnQFsXi6K7zRzUEV5bpIsl00ID3hw4lhZv040S
CBpTPCSVJC7siyXNydDWy6JAcTMZTbC43z6nMxtytdNWyAut0IZkGrMBQ1tFVOCTTZylKVlfa4yR
5lBbyQui3ewiKW/9WbmYsZ8li7u0JikcNT7qwE4+GMVwxVEMVyXzd0PxjH5jnvbHINkv6XcYz1Dp
+yPPZ83kNLwm0N2c5km/oXiGSqugLshK8Qxe56AS5D/iGcPTpK22leIZ/R5DnWn6XcczHG2dqxTP
6Lc76kzA7zCeodIuqQu7UjyD1z2phP2PeIbGvGnrbqV4Brc5E52332I8Q6UtUxdXpXhGv0tTB9ff
ezxDpc9Tdw6U4hmctk9sDv6IZ9QoaetltXhGv+VTZzb+iGesNYcq3aa6c7ixeAZtVDVijpEHf69g
PMMTxzO8Jp6Bvlo8g9NbypW0lDapGU7z7C6e4+vnOIlpnV/ZSKrqhdbk1wqv+SI6RKXdVJfnlGIb
nO5TlmRy26/LNlJpS9XFVCmUwetSJamSf0vemUp3qy7iSlEJXrMr2XWEX290TqUlVhdgpagDr0OW
+Udsmjcx2v6tUlyC044rlAtL/64jpipdv7ozpBSB4DQBC+Wc5N9osFSljVgXe6UoBaermC9p3PwR
sGtPmbYqVwpqcLqbeZLrbL/9eIZKu7TuPKjFMzjt0ziO6h+hDNnp01+z3lQog3ZSG69fhRXAYXUw
lOGLQxl+E8qwh0MZJbuNH8oIOE085b4Dsf5W/gpaGnnIxJK5VJOFtZW3ODSxBgf7Y3b9sAKFEqlA
zMFBw8ESxVKb4mBYpUr2eR+Zgw/S63d0o68B7h26TI9zww0VQOlzbigVRpbumxIqhJFDMeeGDee6
w5zrCvqilUTq8G0oypmWCzy4IdibwXH6rAvEzfJsPr9sykAHAw7y1yt4tsPc2Q7mgm21XFgd9/er
g3tYrHzi4CYjlTNf7kP3fXePkd4p8eus8Rm5o/bBCWEHEfqMui0+Vj6jclM19hl5w59RsJnVmBDa
qZTllsowR+D7ExvWASgMJg4x50PBRhOlIljh+R4jnRd4Ue4kvkiuP/98hfPbKL01bvHd558+/4/x
//6PYdlXxu7VfIKM43xCnJR48mZyNykPucbr8+IH409/Pjh+vXMxi+fGfZQXBvl/mqVPphH5GhNa
5m2QqSsP5bhY5Ck99CeJLlmqI2qqJv2U7U19U1IZ2/x4zLOn4rr0Z+xpEoXrZak80ggFn2eLfIoP
PtznPOdvwnqz1v1S606trL8rrpi0mRBKAPtODtMC39KVPyFCTDiX5NsqCwVtuhlJ7Eqjdak0qXQN
R4JOm9EJ6kKJcK001M1YEwON/Q4OewdXO+4p8RatcSQIpyJEgnCXEe5pLeCtckt1y1N2i5HdGOwm
g941Nugeo93XC3lKIF4PIkHyczyN76JEgmqfUR1ILUK3ieye5NPEKDlNoime72yZ35t6dAaMzlCY
5Namrzk41vyGJQWeqRkelRYMdCyjHGyAQ3cXRUbslLuoYO+B2oeED/oBF/uLnNrnH9nL68wIMT5K
QKzxw5QSWLGhvhMiKepBLompNQamr4kDf0M067UMqkzNe6CaF+fjtFGrDlZA1PcZ9Y10bHkBSC+W
IZ2peA9U8VIRO+lvpDWagvaUVEIWMwE80AQYjNtIvEM9xogkM43vgRpf3iOXxr8c8kkzpJLJOCRu
qaUuMojFYfh2CB5xMtsh/1WcTOiNF4BX7R6IeG3XJFvgudylwHUj7/KBd63oJeQeIr1WbHzXUMIt
XHUJkSWIs4tj7O34OlJoQSZeIPJVouveiHs3IF4DMk607QvnTcJpkxpsp9oxTK2KG3E6hXmSe9Kb
3DVmvcV+7daKamvDMNJa/URl88sRp12YJ5kg+aXTKmSzKkZBXjEPTG05HHE6gLmSCS1fNgdJMgVp
oxlI8CRp6T/ZFV/E6RLmSm7CPHIa5Ve2NVRbhA2tUerZGkgQfhY/sb0iijib6JUdr19kWQH01WaH
Owv7y5VQUV9tlo652lm7HnA884PTpovTFWXV+uC1h7YDMcOO1h+6yZvTuVWdpVW7fCnaMf3uXqzR
ucw+MchFnKmwBgxBqNM5eUIxx8UnusciEQU1xv3DGvhp6Uhp64TTmStYv8O2Fjt/uRbbSLXb1kgt
toUbDfs1bbCnvSo12ZEQEJgSa97OqtCsxxtRXgawu2ZLehp8DvMDjR7uK5wzoOalr9dgQK2NnKQl
o2NygJdLn+SKRz/Uwf2WwpVHV1e4aDYo7B5b351wtLZokhaVDrhpISei0tujiVeF5flIdU+Nb4gi
mdcQsh8aUGltpiTteTkOL39svaI11/HW4D1i3/RZrzw0AudpbZAk7SM58MbIMhuWIp+XPxQo7+Zy
Vks8AlxUFMtQV+ewoYOf1vZIa/g94gyadiUTcuAPnKeLuzZPpYz99g7mLt2FGtC61phR0n6zqnIP
Jg9+FWBDKEtxQ6h6D88s/0QTeshgRY6L6ay2OXbpnk9s493yaezxzeUDHLPcTwq59QjLLKQNh+PF
lVTtCirkwjE9LqtYAKsEXLvtR4zv38bF7LiEuu8BOz6PrawR2cqFdCDHlOupQMpW1NsA2EpQSimz
cTK4UfvzGM+x8ZZu8WK8XxBWTY3jw/2XF0acGoRvjYPXxgznt3he4CShz4ixQcab31PN0FxMbzvN
P/9Urjp+yvEtTtL2nu4DWzBvjggNIetq6Xxpe9N1AImD1pQ4dsnVX13ouFpCh29ZSgodXtlgp1wQ
cRqGcKUOAqRO2FZQAaI5xZAoEQSA1EUJHPj1FDopAmnzrFWHN3FVjcT3EZ7lxIppwmOtA2MVxMOf
pVbMV/6z5FT1SvYDEsKMBnAeagj01TBX7Wql6Cl6cIyYs7+9Eubur4m1Pa3Yr7SXyWl1FcitrNL9
GDnxX2sM5r7Iiig5TN8lr96eFyypqqpqWDmhgaxWVFja4eT0pgrkFjmGkNVg4RKzFRB1wdOK/MpW
AiJOEypfbtl5ADyd75/w2QXb97xMRnmze8FCmW08hddoQKyl1GSrxBCn61QoF17ir/w4/hhfPkOO
ZSXG6S3Bcqgnj/QN6jOh2qZKbdt0xGlPxamGVZwJHWYHsISWkKALNMDVUnCyG6MjXospOTFcggvY
EYzJtaGV4uUR+VdL0/EbrsjuHM5r+VGnzFfUwSYd1/eyAd+Ler5DS3Us7gV4ZGOm/fpQmBnB1lSv
TpUoLZ9W0K4E7GnLmZAfZrY89fjO7usXF2e7Pxi7ez8cnO+/PDo5Pz84lgrHwHdq8KRWuHrtGKQF
jyCq9hyo9GxVedpg7YHO9uPtlP7l/Y8flQN8bxjfWI+22QiP2yNM2BBPrG+/lUjplyhwadWA2mCV
Aj/ZoFPXwsp+fnX1Pa3SUhusbpTJdWsDMWb5Zatm1AbLF/tZ1V++DrBVHWqDtYrDGbKr5aG/8Eq7
VlWpDdY9Dmantl95zOrRVuWoA9ZDaiXCrSeqvhtXVLF6UwcsbpRPW2m/0hNtoaU6M6xS1QFLCLtp
Hm36umdGIqUqEnXAmsDOuv/q51mf/kYaHtnJrYosHVDLtuJxbZpah9cscWsXSzqgLgSiVW1SgNNj
aICq7tEB9VMr5rNCyogkMC3kgFpIHDlpU9W7ctK7dDw+YhrJATWSQuBhlffZzUZzt0Fu/xqmjeRX
zrSUA2opQQxA5b2NJ0Z92y/RtrOqRgqgOlTQEl/jHQcmWVSQy18kqIzKyh6IEjzfz+6oN8gWbAEv
lhJEb2Keev3rgnYTIsKD/q8W2M3xNzF+T0Y/Obs4PP7h8fNsuqBPMOio28fZZLvuZ/Pt8j5y6F1T
uFxRRtB+yIgZSFz86Jp6qO2Ld7bIADsvDg+Onj9mQ53hv7+IE+LK0ssJk1Jf+D//jYibfzx+fXS0
xUqxiRQ9pakGRT0WPVqaMufTWYLjG0785ZmoW1AnQqDSnauT3LLancuS7GGnHMXot9yqw++y9Xa2
ue0OZz/JxMsq7rtcZcWqbx3vvHpEQrWH1WaKlEV9q0RPHCeC4YEqnD8JbRlYnVjTpBgWW9AKXOVo
NhZH8ZeIfK25hMDaz3FU4NIgmq+aIEyJEW1m7EXzyt/c5l/U9QvqB72J8hZhn39ilEGSEpnsH/KE
EvN4cXeFc0mRRhcvNivSbM7280wst4UaO4JsrlhbXkA+zrQ4SQ9o3xPqKjbh3IEoL+0wPpogtE2o
NMqXSVf3bM4a5JAU7IZye3HbV+/Pi4nBmM84v8ef4pv4XcTCSdUiJP8KZZFom1oLB7J5NbbpAuiG
cN3OauFZAAbLTWfbYGdkISaWV1FFy/eyosjuoHLgUlBTmVczXH9iyKddob4SRmejtuqKmSSoL9eY
Fq3Fd9nUG9uEGm5yzBbJaaElSF9xWu7wfE5t6tt8kV4nRJoozNHqvRoTpmVayCbx2GYITRi8rNab
MMuEJ8z8etP1jfTkfKMxFZbWWj4/60d23Um8wFLRxrGvaRX2qjJtHaZNIFbXRKWaygAF382Y4+lR
C8HFTKZcOh83x6EU98pORRNYuuyZcs1WG9wLNBhuoynjtsUpEzPXzOMpJbYOstRQFuAKntZAVata
TFoFWmC1mClTpEFFqpbhJ6qHpyb89XlBbOLbnS1jYgC18Togaq3Br12+zZuF7gzId9lCrjhM4qps
KTtuGzib12nLlMtk/DULvs1237I53bcsU67rzZcRfGhA8ml0A7E322vL5vTasky5zoVriD8Q1dOp
iFmhsxqIjtxDSyvyZyPBLhDy3TNtxCn+GWwZhDzAiJRonOmDRmQz5niylNPmyrIk22DwZSnhTfQL
F6YbrXCyEUdNWWvmIJfCVAvaLyVN7Y2WMdn9VldV2wGZhFCRJB2C9Etbknodqta2JGX6tdqc0mpe
fjHyATHoDIvBEM4uJsONJwFtXk8QSd28hgQcKtj4otLQ1vL+pKWh7XFgluzotYY0lID5i0lGLe9Q
XjIGoGSUjVrqSUbh4kq5CNgpjtNBTasj1dqSEK6sG2dR2If3iuB/8KKkLt5iqX7mTLXFEJARws7U
ze+rNJrOLjKqKVMs/c8HczS5sS85OJYLzL+oNKJOErwPJoTyZdKXfPMvyQYs39EHE1F5PqscFvJZ
s2unf0Eio0pebyWPKuR8NXkO1Y3rZzgYb18enB1Uv3b2T47PLx6XCeNSiQ/uxhMfHFhbgUFK8Va7
iN+zaJna4DiTkPzzRuwtaff7otW9oyV78Zq85tE26/CNJh6lWLiQCOZeTqedgtPqp7o+1muLJm0q
OpAV48j0zrUtToM+Bdx6BgwR/nPCdlHe4NY6ogGdlikjbQC6nOaaSC7mMMB6nj9B9GNxHVXWa9d0
HZXbke3RPOLVluXLk+rYulp9NqUzAsAeY5ZUHaqIL2VB7fElA+oKU0ldhiAYlv3DGihqra3KtvCw
++24Gg6VFI424jSOLDkUMWle1j8rNuP8REArPjSNOKufGvhp+dGyXTxsF+65ua50lAWux4U0JZRa
xCt8uHpCA0ktNcNv1qG3hED7YH295GEfLEFqNHmnXqI+OEb5UeWUganLHGHepqU5POrmqG2vCSw0
aj7iTjVffXDDOdQQ41XloS0THlbEMsY/+vrWf7hx65+z0RNo/Ydi6z/srqeNZ957DmgIyCSyiDKY
kT/xNUyA6DrH8znuGgD1QXWh640cBtYTutRI1xG6PU/Cg2P4EDfZppCb6Gn5HMCRE148zl4FSC4f
TaT31Td2wUlyWWT7i3mR3eH8OGMVLFV0qEpzvDy6aoK+Cjdssumf7W10WwPb53lektmYvPB7adZu
ZpaUZmjDs+OPvEeCntihQWix2JHKs/PllZgtLkekp1t5drV8oSvs44kXn+eSyS3N+bydK/VYlymw
3XT3Ore6Sq06psFcm13a7PenqsN9cjEXMXwoWAfAAABQsOkYH8DNLlv6sH7jtK1XBNBZB0AfAFCQ
fMAHcOQVzF5oKuDtqTMKguY6CHoAgoIENi6CgZaCkA5LBZxiCt5mgUoIWt46CLoAgq4OglqBPenA
VMDTInJZ2QMIque7tdByAAQFlTh8BLX0iGz3WDvgpMhwNitQQ3AtPWIDAAocHD6AWnpEtumrHfD8
JLlULjGAa+kRBACokz8UaOkRfmNXPTOZpuXpZFWPExIN4D5r8m7maq8dQYZD2e1kf/f04vDk+HF1
NXnUkyIz6mfRtirszPgdIgMwT0jSY1N60aF3G6fZF4veBmCyT9fyXw0nl2f+w/rrmF0eAzD7pmtC
8ygJRqKEtc4KwMyXri3Ko8QfiRLWvCoAO7F1bToeJd5IlLAeUgG4+tG1jXiUuCNRwtofBuBKSNfG
4FHijEQJa2YYgCsfXWXNo8QeiZKql2EAdjnrqj0eKWhdUoYXZCC7oW0vOKbavmhQk+yA31WlbPB6
mLJCeyDxCM5t55hVQ0GddkDHMRtnprGA5BbXQ9Pc9swJXU2ybLCBwUAm8HQW5YQbdkAVvZ/d3Ufp
x5dEr9w3/SKAw0CrbVETbb7lAlhQjgl4QeR37wEDppX8EoRj9tyicr8uB46s9bYfo7NB7FEUhr5D
E8eBbcjKubJM78tvRtbeiMwxVTYikw+kOiaU7ODIbevngrsV0YQbPg971JAf7vT+4vPPuXEdY2N3
Mb/5/HPZDJX+nhPbandxQ3NQyV+3OClwaizSOc6xESXJLb7DBJnU+AHPp7PPP90Uy/QInEp1it/M
kxW/IAUnTr7G0jGhrD8bXuGSnmtBi3/JuWbG70FMcCoWd/OHLL/Csygpvifai4A4z4g5T0B+j+M5
3UwxJtMT5dHixpjF6Tb5ez4v54vutUjm5e7zT5//p5qYfHhmjKt4bnxa5EaVTkP3Z3zIkoTc+/Lz
/51hNpJRU2dcJTi+KhqDXYKhfl0vpsqpCt6yKF4o9JJ5LjbP2RU4ui0n1zLrfwJNSn+s9AukJw7T
m2xdR6nlhDbEgM5o9czd6zLngE8P+ut3xqNt45HxndE+7PyVHCBH+8fXtN9b3mZDPujXVM88nWVA
88WGmjX9mpbH2VAD+jbVM19EH/i0rOnttXzOhhZei0r6zDe7F2f49jjjE7SmI9xyPRuCQCeneuYA
NeEI1PhdakA/p4Yny+dF6StwP0RzBIqCDkWWSCzsnr0REDOGWAi7xAjFwl0xv8V5PJ0VAqLW9Abb
TmlDFRhjqp769uDgYICNrDWd5XZ7/YYmMNpUS6BsXtxE05mApDUjCe12+w1vi2Ba+mRcksYQ01W7
fVAgnuP8ge5l8hBHlwevorgXvwVOr01NVYkGUZNSPr4sCwGpxd6mpHdqbSqqqCBExdvdxRXO7/PF
TZ8IZvm9/fxfxuefy0s+/0yuGWvXiHaHe1AkpoR95wW+TGJ8c/m3aNbbVyP9/NPK+bVxqkX1ID3v
s+kMiwiqLlibokpUcyL3eYzTdHF3Rxk3Aji6jsMvrzPIhUZ55bgTWUlxUABQ2u7IEy8X1FsgFnwe
3xSXZxCpJXXAtaMSiyrhDgrQhtgB+kYmqZLtYNwexE8evXEJrSQ+aP7WhAppG5ecyioHxX10RRzR
98ScSspiklWaoiviKOZGfcm4lFUWOij6wUU2rTW2cZbUGMWVHQ+qCZlVwl/SIiF7o8oRAPXLCQ1s
jvce5XCjEs+UEQKVEfOj4nmRl0Eq8hoPOH93eY2v4iLrvUD7TKuSvX2/Et1Dbj5TWQhUWSeLvCot
UiWZ3GlUt45KLVNcCFRcq6xx8IHI1TRK6j1RyFsADPTv5FW0mKge3mj2XGle9btHxqPvJIehzzea
3VhGFWs2050I1J3U64jTW3ICD35W1ZZzkm9UjUyfWe/yYG5bI6RIsJdi2heB2vc5vlpdumcHRwlW
2EyjIlCjsuf44MPHCN3YTH8iUH+y53jgw8eIYdlMRSJOYeDV6pp89fBRwnlM2yFQ27HnOODDx/Cb
baaYEKiY2HNs8OFjxBFsplhsULGw5yDw4WMEVmymHWxQO7DnWODDxwg12UzY27CwV9xcc92dNdff
V5OXtQCtKK+uIPSX07pXtMdYnnn2lFZxspeZH0Ufs0VBncsoiT/h/J//Pw==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

