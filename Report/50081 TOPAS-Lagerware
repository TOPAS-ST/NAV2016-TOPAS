OBJECT Report 50081 TOPAS-Lagerware
{
  OBJECT-PROPERTIES
  {
    Modified=Yes;
    Date=04.04.17;
    Time=11:35:53;
    Version List=Topas Bericht,FORNAV2.0.0.1189/1189;
    
  }
  PROPERTIES
  {
    OnPreReport=BEGIN
                  //ArtikelFilter := Item.GETFILTERS;
                  VerkZeileFilter := "Sales Line".GETFILTERS;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;
    OnInitReport=BEGIN
                   ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init; 
                 END;
    OnPostReport=BEGIN
                   ReportForNav.Post;
                 END;
    
  }
  DATASET
  {
    { 1;   ;DataItem;                   ;
               DataItemTable=Table18;
               DataItemTableView=SORTING(No.);
               PrintOnlyIfDetail=Yes;
               OnPreDataItem=BEGIN
                               
                             END;
               OnAfterGetRecord=BEGIN
                                  hinweis := '';
                                  adresse := '';
                                END;
                }
    { 2   ;1   ;Column  ;USERID;
               SourceExpr=USERID; }
    { 3   ;1   ;Column  ;ReportForNavPageNo;
               SourceExpr=ReportForNav.PageNo; }
    { 4   ;1   ;Column  ;COMPANYNAME;
               SourceExpr=COMPANYNAME; }
    { 5   ;1   ;Column  ;TODAY_0_4;
               SourceExpr=FORMAT(TODAY,0,4); }
    { 6   ;1   ;Column  ;STRSUBSTNO_Auftragszeile_Pct1_VerkZeileFilter;
               SourceExpr=STRSUBSTNO('Auftragszeile: %1',VerkZeileFilter); }
    { 7   ;1   ;Column  ;No_Customer;
               SourceExpr="No."; }
    { 8   ;1   ;Column  ;Name_Customer;
               SourceExpr=Name; }
    { 9   ;1   ;Column  ;OutstandingAmount_SalesLine;
               SourceExpr="Sales Line"."Outstanding Amount"; }
    { 10; 1 ;DataItem;                   ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document Type,Type,No.,Variant Code,Drop Shipment,Location Code,Shipment Date) WHERE(Document Type=CONST(Order),       Type=CONST(Item),       Outstanding Quantity=FILTER(<>0));
               ReqFilterHeadingML=DEU=Verkaufszeile;
               OnPreDataItem=BEGIN
                               
                             END;
               OnAfterGetRecord=BEGIN
                                  VerkKopf.GET("Document Type","Document No.");
                                  IF (adresse <> '') AND (VerkKopf."Ship-to Address" <> adresse) THEN
                                    hinweis := 'Achtung: Unterschiedliche Lief. an Adressen !!!';
                                  adresse := VerkKopf."Ship-to Address";
                                  auftragsdatum := VerkKopf."Order Date";
                                  IF VerkKopf."Currency Factor" <> 0 THEN
                                    "Outstanding Amount" :=
                                      ROUND(
                                        W・rungWechKurs.ExchangeAmtFCYToLCY(
                                          WORKDATE,VerkKopf."Currency Code","Outstanding Amount",
                                          VerkKopf."Currency Factor"));
                                  IF "Shipment Date" < WORKDATE THEN
                                    R…kstandMenge := "Outstanding Quantity"
                                  ELSE
                                    R…kstandMenge := 0;
                                  lagerbe.GET("No.");
                                  lagerbe.CALCFIELDS(Inventory);
                                END;
               ReqFilterFields=Promised Delivery Date,Location Code;
               DataItemLink=Sell-to Customer No.=FIELD(No.);
                }
    { 11   ;2   ;Column  ;auftragsdatum;
               SourceExpr=auftragsdatum; }
    { 12   ;2   ;Column  ;lagerbeInventory_OutstandingQuantity;
               SourceExpr=lagerbe.Inventory-"Outstanding Quantity"; }
    { 13   ;2   ;Column  ;Inventory_lagerbe;
               SourceExpr=lagerbe.Inventory; }
    { 14   ;2   ;Column  ;RequestedDeliveryDate_SalesLine;
               SourceExpr="Requested Delivery Date"; }
    { 15   ;2   ;Column  ;DocumentNo_SalesLine;
               SourceExpr="Document No."; }
    { 16   ;2   ;Column  ;No_SalesLine;
               SourceExpr="No."; }
    { 17   ;2   ;Column  ;PromisedDeliveryDate_SalesLine;
               SourceExpr="Promised Delivery Date"; }
    { 18   ;2   ;Column  ;Quantity_SalesLine;
               SourceExpr=Quantity; }
    { 19   ;2   ;Column  ;OutstandingQuantity_SalesLine;
               SourceExpr="Outstanding Quantity"; }
    { 20   ;2   ;Column  ;RuckstandMenge;
               DecimalPlaces=0:5;
               SourceExpr=R…kstandMenge; }
    { 21   ;2   ;Column  ;UnitPrice_SalesLine;
               SourceExpr="Unit Price"; }
    { 22   ;2   ;Column  ;OutstandingAmount_SalesLine2;
               SourceExpr="Outstanding Amount"; }
    { 23   ;2   ;Column  ;PaymentTermsCode_SalesHeader;
               SourceExpr="Sales Header"."Payment Terms Code"; }
    { 24   ;2   ;Column  ;hinweis;
               SourceExpr=hinweis; }
    { 25; 2 ;DataItem;                   ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.);
               DataItemLink=No.=FIELD(Document No.);
                }

  }

  REQUESTPAGE
  {
    PROPERTIES
    {
      
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                 ContainerType=ContentArea;
                  }
      { 1900000002;1;Group;
                 CaptionML=[ENU=Options;
                            CSY=Moznosti;
                            DAN=Indstillinger;
                            DEU=Optionen;
                            FIN=Vaihtoehdot;
                            ISL=Valkostir;
                            ITS=Opzioni;
                            NOR=Alternativer;
                            NLB=Opties;
                            NLD=Opties;
                            SVE=Alternativ];
                  }
      
      { 5000;2;Field;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }
    }
  }
  
  
  LABELS
  {
  }
  CODE
  {
    VAR
      W・rungWechKurs@1140000 : Record 330;
      VerkKopf@1140001 : Record 36;
      R…kstandMenge@1140002 : Decimal;
      ArtikelFilter@1140003 : Text[250];
      VerkZeileFilter@1140004 : Text[250];
      lagerbe@1140005 : Record 27;
      adresse@1140007 : Text[50];
      hinweis@1140006 : Text[80];
      auftragsdatum@1140008 : Date;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001: Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      CustomLayoutID := ReportLayoutSelection."6";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."6";
    
      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);
    
      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."6");
      LayoutId := ReportLayoutSelection."6";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."6";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;
    

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;
    

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;
    

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId : Text;SectionId : Text); 
    BEGIN
      CASE DataItemId OF
        'Customer': CASE SectionId OF
          'Header2': OnPreSectionCustomer_Header2(Customer);
        END;
        'SalesLine': CASE SectionId OF
          'Footer7': OnPreSectionSalesLine_Footer7("Sales Line");
        END;
        'SalesHeader': CASE SectionId OF
          'Body9': OnPreSectionSalesHeader_Body9("Sales Header");
        END;
      END;
    END;
    
    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId : Text;SectionId : Text); 
    BEGIN
      
    END;
    

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;
    
    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report(); 
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN 
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;
    
    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;
    
    EVENT ReportForNav@5000::OnPrint@5005(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName); 
    END;
    
    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;
    

    EVENT ReportForNav@5000::OnView@5008(ClientFileName : Text; Parameters : Text; ServerFileName : Text);
    VAR
      ServerFile : File;
      ServerInStream : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;
    
    EVENT ReportForNav@5000::OnMessage@5009(Operation : Text;Parameter : Text;ParameterNo : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream"; Preview : Boolean);
    VAR
      ClientFileName : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId : Text; Operation : Text; GroupTotalFieldNo : Integer);
    VAR
          CurrRecRef : RecordRef;
          NextRecRef : RecordRef;
          CurrKeyRef : KeyRef;
          NextKeyRef : KeyRef;
          FieldIndex : Integer;
          GroupFieldIndex : Integer;
    BEGIN 
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'Customer': WITH Customer DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Sales Line"."Outstanding Amount");
              END;
           'Restore': BEGIN
                 "Sales Line"."Outstanding Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'SalesLine': WITH "Sales Line" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Outstanding Amount");
                ReportForNav.AddTotal(DataItemId,1,R…kstandMenge);
                ReportForNav.AddTotal(DataItemId,2,"Outstanding Quantity");
              END;
           'Restore': BEGIN
                 "Outstanding Amount" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 R…kstandMenge := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
                 "Outstanding Quantity" := ReportForNav.RestoreTotal(DataItemId,2,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCustomer_Header2@5010(VAR Customer : Record 18);
    BEGIN
      WITH Customer DO BEGIN
        ReportForNav.ShowOutput((ReportForNav.PageNo = 1) AND (VerkZeileFilter <> ''));
      END;
    END;
    
    LOCAL PROCEDURE OnPreSectionSalesLine_Footer7@5011(VAR "Sales Line" : Record 37);
    BEGIN
      WITH "Sales Line" DO BEGIN
        ReportForNav.ShowOutput(("Sales Header"."Payment Terms Code"='BBL') OR
        ("Sales Header"."Payment Terms Code"='VORK') OR ("Sales Header"."Payment Terms Code"='ADV') OR
        ("Sales Header"."Payment Terms Code"='VORK-E') OR ("Sales Header"."Payment Terms Code"='TT') OR
        ("Sales Header"."Payment Terms Code"='VK-1%') OR ("Sales Header"."Payment Terms Code"='VK-2%'));
      END;
    END;
    
    LOCAL PROCEDURE OnPreSectionSalesHeader_Body9@5012(VAR "Sales Header" : Record 36);
    BEGIN
      WITH "Sales Header" DO BEGIN
          ReportForNav.ShowOutput(("Sales Header"."Payment Terms Code"='BBL') OR
          ("Sales Header"."Payment Terms Code"='VORK') OR ("Sales Header"."Payment Terms Code"='ADV') OR
          ("Sales Header"."Payment Terms Code"='VORK-E') OR ("Sales Header"."Payment Terms Code"='TT') OR
          ("Sales Header"."Payment Terms Code"='VK-1%') OR ("Sales Header"."Payment Terms Code"='VK-2%'));
      END;
    END;
    
    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2008/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <Body>
    <Height>2in</Height>
    <Style />
  </Body>
  <Width>6.5in</Width>
  <Page>
    <Style />
  </Page>
</Report>
    END_OF_RDLDATA
  }
}

