OBJECT Report 50033 TOPAS-nicht_fakt. Zugâ€žnge
{
  OBJECT-PROPERTIES
  {
    Date=27.03.20;
    Time=11:00:00;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV3.1.0.1460/1460;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table23;
               PrintOnlyIfDetail=Yes }

    { 2   ;1   ;Column  ;USERID              ;
               IncludeCaption=No;
               SourceExpr=USERID }

    { 3   ;1   ;Column  ;ReportForNavPageNo  ;
               IncludeCaption=No;
               SourceExpr=ReportForNav.PageNo }

    { 4   ;1   ;Column  ;TODAY_0_4           ;
               IncludeCaption=No;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 5   ;1   ;Column  ;TIME                ;
               IncludeCaption=No;
               SourceExpr=FORMAT(TIME) }

    { 6   ;1   ;DataItem;                    ;
               DataItemTable=Table38;
               PrintOnlyIfDetail=Yes;
               DataItemLink=Buy-from Vendor No.=FIELD(No.) }

    { 7   ;2   ;DataItem;                    ;
               DataItemTable=Table39;
               DataItemLink=Buy-from Vendor No.=FIELD(Buy-from Vendor No.),
                            Document No.=FIELD(No.) }

    { 8   ;3   ;Column  ;PostingDate_PurchaseHeader;
               IncludeCaption=No;
               SourceExpr="Purchase Header"."Posting Date" }

    { 9   ;3   ;Column  ;QuantityInvoiced_PurchaseLine;
               IncludeCaption=No;
               SourceExpr="Quantity Invoiced" }

    { 10  ;3   ;Column  ;QuantityReceived_PurchaseLine;
               IncludeCaption=No;
               SourceExpr="Quantity Received" }

    { 11  ;3   ;Column  ;No_Vendor           ;
               IncludeCaption=No;
               SourceExpr=Vendor."No." }

    { 12  ;3   ;Column  ;Name_Vendor         ;
               IncludeCaption=No;
               SourceExpr=Vendor.Name }

    { 13  ;3   ;Column  ;No_PurchaseHeader   ;
               IncludeCaption=No;
               SourceExpr="Purchase Header"."No." }

    { 14  ;3   ;Column  ;No_PurchaseLine     ;
               IncludeCaption=No;
               SourceExpr="No." }

    { 15  ;3   ;Column  ;LineNo_PurchaseLine ;
               IncludeCaption=No;
               SourceExpr="Line No." }

    { 1000000012;3;Column;DC_PurchaseLine    ;
               SourceExpr="Direct Unit Cost" }

    { 1000000002;;DataItem;                  ;
               DataItemTable=Table18 }

    { 1000000000;1;DataItem;                 ;
               DataItemTable=Table36;
               DataItemTableView=WHERE(Document Type=FILTER(Order));
               PrintOnlyIfDetail=Yes;
               DataItemLink=Sell-to Customer No.=FIELD(No.) }

    { 1000000001;2;DataItem;                 ;
               DataItemTable=Table37;
               DataItemTableView=WHERE(Type=FILTER(Item),
                                       Qty. Shipped Not Invoiced=FILTER(>0));
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000003;3;Column;PostingDate_SalesHeader;
               IncludeCaption=No;
               SourceExpr="Sales Header"."Posting Date" }

    { 1000000004;3;Column;QuantityInvoiced_SalesLine;
               SourceExpr="Sales Line"."Qty. Shipped Not Invoiced" }

    { 1000000005;3;Column;LocationCode_SalesLine;
               SourceExpr="Sales Line"."Location Code" }

    { 1000000006;3;Column;No_Customer        ;
               IncludeCaption=No;
               SourceExpr=Customer."No." }

    { 1000000007;3;Column;Name_Customer      ;
               IncludeCaption=No;
               SourceExpr=Customer.Name }

    { 1000000008;3;Column;No_SalesHeader     ;
               IncludeCaption=No;
               SourceExpr="Sales Header"."No." }

    { 1000000009;3;Column;No_SalesLine       ;
               IncludeCaption=No;
               SourceExpr="No." }

    { 1000000010;3;Column;LineNo_SalesLine   ;
               IncludeCaption=No;
               SourceExpr="Line No." }

    { 1000000011;3;Column;CrossReference_SalesLine;
               SourceExpr="Sales Line"."Cross-Reference No." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionPurchaseLine_Header4@5064(VAR "Purchase Line"@1000000000 : Record 39);
    BEGIN
      WITH "Purchase Line" DO BEGIN
        // ReportForNav.ShowOutput((Lagerortcode<>'MUST') AND ("Offene Lieferung"=TRUE));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionPurchaseLine_Body5@5065(VAR "Purchase Line"@1000000000 : Record 39);
    BEGIN
      WITH "Purchase Line" DO BEGIN
        ReportForNav.ShowOutput(("Quantity Received" <> "Quantity Invoiced") AND (Type = Type::Item) AND ("Location Code"<>'MUST'));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Header7@1000000002(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      //WITH "Sales Line" DO BEGIN
      //ReportForNav.ShowOutput(("Sales Line"."Document No."='AU242749'));
      //END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Body1@1000000003(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      //WITH "Sales Line" DO BEGIN
      //ReportForNav.ShowOutput(("Sales Line"."Quantity Shipped" <> "Sales Line"."Quantity Invoiced") AND (Type = Type::Item) AND (("Sales Line"."Location Code"<>'MUST') AND ("Sales Line"."Location Code"<>'KONSI')));
      ReportForNav.ShowOutput(("Sales Line"."Quantity Shipped" <> 0));
      //ReportForNav.ShowOutput(("Sales Line"."Quantity Shipped" <> "Sales Line"."Quantity Invoiced") AND ("Sales Line".Type = "Sales Line".Type::Item) AND ("Sales Line"."Document Type"="Sales Line"."Document Type"::Order));
      //END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'PurchaseLine': CASE SectionId OF
          'Header4': OnPreSectionPurchaseLine_Header4("Purchase Line");
          'Body5': OnPreSectionPurchaseLine_Body5("Purchase Line");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="USERID">
          <DataField>USERID</DataField>
        </Field>
        <Field Name="ReportForNavPageNo">
          <DataField>ReportForNavPageNo</DataField>
        </Field>
        <Field Name="TODAY_0_4">
          <DataField>TODAY_0_4</DataField>
        </Field>
        <Field Name="TIME">
          <DataField>TIME</DataField>
        </Field>
        <Field Name="PostingDate_PurchaseHeader">
          <DataField>PostingDate_PurchaseHeader</DataField>
        </Field>
        <Field Name="QuantityInvoiced_PurchaseLine">
          <DataField>QuantityInvoiced_PurchaseLine</DataField>
        </Field>
        <Field Name="QuantityInvoiced_PurchaseLineFormat">
          <DataField>QuantityInvoiced_PurchaseLineFormat</DataField>
        </Field>
        <Field Name="QuantityReceived_PurchaseLine">
          <DataField>QuantityReceived_PurchaseLine</DataField>
        </Field>
        <Field Name="QuantityReceived_PurchaseLineFormat">
          <DataField>QuantityReceived_PurchaseLineFormat</DataField>
        </Field>
        <Field Name="No_Vendor">
          <DataField>No_Vendor</DataField>
        </Field>
        <Field Name="Name_Vendor">
          <DataField>Name_Vendor</DataField>
        </Field>
        <Field Name="No_PurchaseHeader">
          <DataField>No_PurchaseHeader</DataField>
        </Field>
        <Field Name="No_PurchaseLine">
          <DataField>No_PurchaseLine</DataField>
        </Field>
        <Field Name="LineNo_PurchaseLine">
          <DataField>LineNo_PurchaseLine</DataField>
        </Field>
        <Field Name="DC_PurchaseLine">
          <DataField>DC_PurchaseLine</DataField>
        </Field>
        <Field Name="DC_PurchaseLineFormat">
          <DataField>DC_PurchaseLineFormat</DataField>
        </Field>
        <Field Name="PostingDate_SalesHeader">
          <DataField>PostingDate_SalesHeader</DataField>
        </Field>
        <Field Name="QuantityInvoiced_SalesLine">
          <DataField>QuantityInvoiced_SalesLine</DataField>
        </Field>
        <Field Name="QuantityInvoiced_SalesLineFormat">
          <DataField>QuantityInvoiced_SalesLineFormat</DataField>
        </Field>
        <Field Name="LocationCode_SalesLine">
          <DataField>LocationCode_SalesLine</DataField>
        </Field>
        <Field Name="No_Customer">
          <DataField>No_Customer</DataField>
        </Field>
        <Field Name="Name_Customer">
          <DataField>Name_Customer</DataField>
        </Field>
        <Field Name="No_SalesHeader">
          <DataField>No_SalesHeader</DataField>
        </Field>
        <Field Name="No_SalesLine">
          <DataField>No_SalesLine</DataField>
        </Field>
        <Field Name="LineNo_SalesLine">
          <DataField>LineNo_SalesLine</DataField>
        </Field>
        <Field Name="CrossReference_SalesLine">
          <DataField>CrossReference_SalesLine</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

