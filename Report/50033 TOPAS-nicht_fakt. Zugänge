OBJECT Report 50033 TOPAS-nicht_fakt. Zugâ€žnge
{
  OBJECT-PROPERTIES
  {
    Date=09.05.18;
    Time=14:04:42;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV3.1.0.1460/1460;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table23;
               PrintOnlyIfDetail=Yes }

    { 2   ;1   ;Column  ;USERID              ;
               IncludeCaption=No;
               SourceExpr=USERID }

    { 3   ;1   ;Column  ;ReportForNavPageNo  ;
               IncludeCaption=No;
               SourceExpr=ReportForNav.PageNo }

    { 4   ;1   ;Column  ;TODAY_0_4           ;
               IncludeCaption=No;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 5   ;1   ;Column  ;TIME                ;
               IncludeCaption=No;
               SourceExpr=FORMAT(TIME) }

    { 6   ;1   ;DataItem;                    ;
               DataItemTable=Table38;
               PrintOnlyIfDetail=Yes;
               DataItemLink=Buy-from Vendor No.=FIELD(No.) }

    { 7   ;2   ;DataItem;                    ;
               DataItemTable=Table39;
               DataItemLink=Buy-from Vendor No.=FIELD(Buy-from Vendor No.),
                            Document No.=FIELD(No.) }

    { 8   ;3   ;Column  ;PostingDate_PurchaseHeader;
               IncludeCaption=No;
               SourceExpr="Purchase Header"."Posting Date" }

    { 9   ;3   ;Column  ;QuantityInvoiced_PurchaseLine;
               IncludeCaption=No;
               SourceExpr="Quantity Invoiced" }

    { 10  ;3   ;Column  ;QuantityReceived_PurchaseLine;
               IncludeCaption=No;
               SourceExpr="Quantity Received" }

    { 11  ;3   ;Column  ;No_Vendor           ;
               IncludeCaption=No;
               SourceExpr=Vendor."No." }

    { 12  ;3   ;Column  ;Name_Vendor         ;
               IncludeCaption=No;
               SourceExpr=Vendor.Name }

    { 13  ;3   ;Column  ;No_PurchaseHeader   ;
               IncludeCaption=No;
               SourceExpr="Purchase Header"."No." }

    { 14  ;3   ;Column  ;No_PurchaseLine     ;
               IncludeCaption=No;
               SourceExpr="No." }

    { 15  ;3   ;Column  ;LineNo_PurchaseLine ;
               IncludeCaption=No;
               SourceExpr="Line No." }

    { 1000000002;;DataItem;                  ;
               DataItemTable=Table18 }

    { 1000000000;1;DataItem;                 ;
               DataItemTable=Table36;
               DataItemTableView=WHERE(Document Type=FILTER(Order));
               PrintOnlyIfDetail=Yes;
               DataItemLink=Sell-to Customer No.=FIELD(No.) }

    { 1000000001;2;DataItem;                 ;
               DataItemTable=Table37;
               DataItemTableView=WHERE(Type=FILTER(Item),
                                       Qty. Shipped Not Invoiced=FILTER(>0));
               DataItemLink=Document No.=FIELD(No.) }

    { 1000000003;3;Column;PostingDate_SalesHeader;
               IncludeCaption=No;
               SourceExpr="Sales Header"."Posting Date" }

    { 1000000004;3;Column;QuantityInvoiced_SalesLine;
               SourceExpr="Sales Line"."Qty. Shipped Not Invoiced" }

    { 1000000005;3;Column;LocationCode_SalesLine;
               SourceExpr="Sales Line"."Location Code" }

    { 1000000006;3;Column;No_Customer        ;
               IncludeCaption=No;
               SourceExpr=Customer."No." }

    { 1000000007;3;Column;Name_Customer      ;
               IncludeCaption=No;
               SourceExpr=Customer.Name }

    { 1000000008;3;Column;No_SalesHeader     ;
               IncludeCaption=No;
               SourceExpr="Sales Header"."No." }

    { 1000000009;3;Column;No_SalesLine       ;
               IncludeCaption=No;
               SourceExpr="No." }

    { 1000000010;3;Column;LineNo_SalesLine   ;
               IncludeCaption=No;
               SourceExpr="Line No." }

    { 1000000011;3;Column;CrossReference_SalesLine;
               SourceExpr="Sales Line"."Cross-Reference No." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionPurchaseLine_Header4@5064(VAR "Purchase Line"@1000000000 : Record 39);
    BEGIN
      WITH "Purchase Line" DO BEGIN
        // ReportForNav.ShowOutput((Lagerortcode<>'MUST') AND ("Offene Lieferung"=TRUE));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionPurchaseLine_Body5@5065(VAR "Purchase Line"@1000000000 : Record 39);
    BEGIN
      WITH "Purchase Line" DO BEGIN
        ReportForNav.ShowOutput(("Quantity Received" <> "Quantity Invoiced") AND (Type = Type::Item) AND ("Location Code"<>'MUST'));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Header7@1000000002(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      //WITH "Sales Line" DO BEGIN
      //ReportForNav.ShowOutput(("Sales Line"."Document No."='AU242749'));
      //END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Body1@1000000003(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      //WITH "Sales Line" DO BEGIN
      //ReportForNav.ShowOutput(("Sales Line"."Quantity Shipped" <> "Sales Line"."Quantity Invoiced") AND (Type = Type::Item) AND (("Sales Line"."Location Code"<>'MUST') AND ("Sales Line"."Location Code"<>'KONSI')));
      ReportForNav.ShowOutput(("Sales Line"."Quantity Shipped" <> 0));
      //ReportForNav.ShowOutput(("Sales Line"."Quantity Shipped" <> "Sales Line"."Quantity Invoiced") AND ("Sales Line".Type = "Sales Line".Type::Item) AND ("Sales Line"."Document Type"="Sales Line"."Document Type"::Order));
      //END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'PurchaseLine': CASE SectionId OF
          'Header4': OnPreSectionPurchaseLine_Header4("Purchase Line");
          'Body5': OnPreSectionPurchaseLine_Body5("Purchase Line");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

