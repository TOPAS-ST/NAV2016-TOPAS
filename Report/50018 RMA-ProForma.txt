OBJECT Report 50018 RMA-ProForma
{
  OBJECT-PROPERTIES
  {
    Date=18.10.21;
    Time=09:35:57;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   selected := STRMENU(Text000,1);
                   CASE selected OF
                     0: opt_invoice := opt_invoice::Hersteller;
                     1: opt_invoice := opt_invoice::Hersteller;
                     2: opt_invoice := opt_invoice::Kunde;
                   END
                   {;ReportForNav};ReportsForNavInit();
                   Firmendaten.GET;
                   Firmendaten.CALCFIELDS("ISO Logo",Picture);
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table50020;
               OnAfterGetRecord=BEGIN
                                  TOPAS_Funktionen.GetCompanyInformation(CompanyInfo,Firmendaten);

                                  Anschrift.RESET;
                                    Anschrift.SETRANGE("RMA-Nr.","RMA-Nr.");
                                    IF opt_invoice = opt_invoice::Kunde THEN
                                      Anschrift.SETRANGE(Art,Anschrift.Art::Kunde)
                                    ELSE
                                      Anschrift.SETRANGE(Art,Anschrift.Art::Hersteller);
                                    Anschrift.SETRANGE(Fhrungsrolle,TRUE);
                                    IF Anschrift.FINDFIRST THEN BEGIN
                                      Kontakt.GET(Anschrift."Kontakt Mandantennr.");
                                      CurrReport.LANGUAGE := Language.GetLanguageID(Kontakt."Language Code");
                                      Ansprechpartner.RESET;
                                      Ansprechpartner.SETRANGE("RMA-Nr.","RMA-Nr.");
                                      Ansprechpartner.SETRANGE(Art,Ansprechpartner.Art::"Ansprechpartner Kunde");
                                      Ansprechpartner.SETRANGE("Kontakt Mandantennr.",Anschrift."Kontakt Mandantennr.");
                                      IF Ansprechpartner.FINDFIRST THEN BEGIN
                                        Ansprechpartner.CALCFIELDS("Telefonnr.");
                                        kontaktname := Ansprechpartner.Name + ' (' + Ansprechpartner."Telefonnr." + ')';
                                      END ELSE
                                        kontaktname := '';
                                      FormatAddr.FormatAddr(Andruck,Anschrift.Name,Anschrift."Name 2",kontaktname,
                                      Anschrift.Adresse,Anschrift."Adresse 2",Anschrift.Ort,Anschrift."PLZ-Code",'',Anschrift."L„nder-/Regionscode");
                                    END ELSE
                                      ERROR(Text001);
                                     IF CurrReport.LANGUAGE = 1031 THEN
                                      seite := STRSUBSTNO('Seite %1',FORMAT(ReportForNav.PageNo))
                                    ELSE
                                      seite := STRSUBSTNO('Page %1',FORMAT(ReportForNav.PageNo));
                                END;

               ReqFilterFields=RMA-Nr. }

    { 1000000000;1;Column;Picture_Firmendaten;
               SourceExpr=Firmendaten.Picture }

    { 10  ;1   ;Column  ;ISOLogo_Firmendaten ;
               SourceExpr=Firmendaten."ISO Logo" }

    { 1000000003;1;Column;CompanyName        ;
               SourceExpr=CompanyInfo[1] }

    { 1000000001;1;Column;CompanyAddress     ;
               SourceExpr=CompanyInfo[2]+ ', ' + CompanyInfo[4] +  ' ' + CompanyInfo[5] }

    { 1000000005;1;Column;CompanyPhone       ;
               SourceExpr=CompanyInfo[6] }

    { 1000000006;1;Column;CompanyFax         ;
               SourceExpr=CompanyInfo[7] }

    { 1000000007;1;Column;CompanyVATRegNo    ;
               SourceExpr=CompanyInfo[8] }

    { 1000000008;1;Column;CompanyRegNo       ;
               SourceExpr=CompanyInfo[9] }

    { 1000000009;1;Column;CompanyVorstand    ;
               SourceExpr=CompanyInfo[10] }

    { 1000000010;1;Column;CompanyARV         ;
               SourceExpr=CompanyInfo[11] }

    { 1000000011;1;Column;CompanyAmtsgericht ;
               SourceExpr=CompanyInfo[12] }

    { 1000000012;1;Column;CompanyWEEERegNo   ;
               SourceExpr=CompanyInfo[13] }

    { 1000000013;1;Column;CompanyPostfach    ;
               SourceExpr=CompanyInfo[14] }

    { 1000000002;1;Column;CompanyHomepage    ;
               SourceExpr=CompanyInfo[15] }

    { 2   ;1   ;Column  ;Andruck7            ;
               SourceExpr=Andruck[7] }

    { 3   ;1   ;Column  ;Andruck8            ;
               SourceExpr=Andruck[8] }

    { 4   ;1   ;Column  ;Andruck1            ;
               SourceExpr=Andruck[1] }

    { 5   ;1   ;Column  ;Andruck2            ;
               SourceExpr=Andruck[2] }

    { 6   ;1   ;Column  ;Andruck3            ;
               SourceExpr=Andruck[3] }

    { 7   ;1   ;Column  ;Andruck4            ;
               SourceExpr=Andruck[4] }

    { 8   ;1   ;Column  ;Andruck5            ;
               SourceExpr=Andruck[5] }

    { 9   ;1   ;Column  ;Andruck6            ;
               SourceExpr=Andruck[6] }

    { 11  ;1   ;Column  ;seite               ;
               SourceExpr=seite }

    { 12  ;1   ;Column  ;WORKDATE            ;
               SourceExpr=WORKDATE }

    { 13  ;1   ;Column  ;RMA_Nr_RMA_Kopf     ;
               SourceExpr="RMA-Nr." }

    { 14  ;1   ;DataItem;                    ;
               DataItemTable=Table50023;
               DataItemTableView=WHERE(Art=FILTER(an Hersteller),
                                       Andruck=FILTER(Text oben));
               DataItemLink=Nr.=FIELD(RMA-Nr.) }

    { 15  ;2   ;Column  ;Bemerkung_TOPASBemerkungen;
               SourceExpr=Bemerkung }

    { 16  ;1   ;DataItem;                    ;
               DataItemTable=Table50021;
               DataItemTableView=WHERE(Ausblenden=FILTER(No));
               OnPreDataItem=BEGIN
                               IF opt_invoice = opt_invoice::Hersteller THEN
                                 "RMA-Zeile".SETRANGE("RMA-Zeile".Belegart,"RMA-Zeile".Belegart::"an Hersteller");
                               IF opt_invoice = opt_invoice::Kunde THEN
                                 "RMA-Zeile".SETRANGE("RMA-Zeile".Belegart,"RMA-Zeile".Belegart::"an Kunden");
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Artikel.GET("Artikelnr.") THEN BEGIN
                                    TariffNo := Artikel."Tariff No.";
                                    Artikelnr :=  Artikel."No. 2";
                                  END ELSE BEGIN
                                    Artikelnr := "Artikelnr.";
                                    TariffNo := '';
                                  END;
                                  /////W„hrungscode 0 durch Euro ersetzen\\\\\
                                  IF opt_invoice = opt_invoice::Hersteller THEN
                                    W„hrung := "RMA-Zeile"."EK-W„hrung"
                                  ELSE
                                    W„hrung := "RMA-Zeile".W„hrung;
                                  IF W„hrung = '' THEN
                                    W„hrung := 'EUR';
                                END;

               DataItemLink=RMA-Nr.=FIELD(RMA-Nr.) }

    { 17  ;2   ;Column  ;Manufac             ;
               SourceExpr=Manufac }

    { 18  ;2   ;Column  ;Description_Artikel ;
               SourceExpr=Artikel.Description }

    { 19  ;2   ;Column  ;SN_Nr_DC_RMA_Zeile  ;
               SourceExpr="SN-Nr. / DC" }

    { 20  ;2   ;Column  ;RMA_NrHersteller_RMA_Zeile;
               SourceExpr="RMA-Nr. Hersteller" }

    { 21  ;2   ;Column  ;TariffNo            ;
               SourceExpr=TariffNo }

    { 22  ;2   ;Column  ;Wahrung_RMA_Zeile   ;
               SourceExpr=W„hrung }

    { 23  ;2   ;Column  ;Ursprungsland_RMA_Zeile;
               SourceExpr=Ursprungsland }

    { 24  ;2   ;Column  ;Amount              ;
               SourceExpr=Amount }

    { 25  ;2   ;Column  ;Price               ;
               SourceExpr=Price }

    { 26  ;2   ;Column  ;MengeSN_Nr_DC_RMA_Zeile;
               DecimalPlaces=0:0;
               SourceExpr="Menge SN-Nr. / DC" }

    { 27  ;2   ;Column  ;Artikelnr           ;
               SourceExpr=Artikelnr }

    { 28  ;2   ;Column  ;Anzahl_Zeile        ;
               SourceExpr=Anzahl_Zeile }

    { 29  ;2   ;Column  ;Totalamount         ;
               SourceExpr=Totalamount }

    { 30  ;1   ;DataItem;Textunten           ;
               DataItemTable=Table50023;
               DataItemTableView=WHERE(Art=FILTER(an Hersteller),
                                       Andruck=FILTER(Text unten));
               DataItemLink=Nr.=FIELD(RMA-Nr.) }

    { 31  ;2   ;Column  ;Bemerkung_Textunten ;
               SourceExpr=Bemerkung }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Artikel@1140003 : Record 27;
      Manufacturer@1140012 : Record 5720;
      Firmendaten@1000000002 : Record 79;
      RMA_Zeile@1140020 : Record 50021;
      Anschrift@1140015 : Record 50022;
      Kontakt@1140017 : Record 5050;
      Language@1140016 : Record 8;
      Ansprechpartner@1140030 : Record 50022;
      FormatAddr@1140029 : Codeunit 365;
      TOPAS_Funktionen@1000000001 : Codeunit 50006;
      CompanyInfo@1000000000 : ARRAY [15] OF Text;
      w„hrung@1140009 : Text[30];
      Price@1000000006 : Decimal;
      Amount@1000000005 : Decimal;
      Totalamount@1000000004 : Decimal;
      TariffNo@1140010 : Code[20];
      Artikelnr@1140011 : Code[40];
      Manufac@1140013 : Text[50];
      seite@1140014 : Text[30];
      opt_invoice@1140022 : 'Hersteller,Kunde';
      selected@1140023 : Integer;
      Text000@1140024 : TextConst 'DEU=Hersteller,Kunde';
      Text001@1140026 : TextConst 'DEU=Bitte hinterlegen Sie den Hersteller bzw. Kunden und achten Sie darauf, dass die Fhrungsrolle vergeben ist.';
      Anzahl_Zeile@1000000003 : Integer;
      Andruck@1140028 : ARRAY [8] OF Text[90];
      kontaktname@1140031 : Text[50];
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionRMA_Kopf_Header1@5052(VAR "RMA-Kopf"@1000000000 : Record 50020);
    BEGIN
      WITH "RMA-Kopf" DO BEGIN
      END;
    END;

    LOCAL PROCEDURE OnPreSectionTOPASBemerkungen_Body2@5053(VAR "TOPAS Bemerkungen"@1000000000 : Record 50023);
    BEGIN
      WITH "TOPAS Bemerkungen" DO BEGIN
        ReportForNav.ShowOutput(Andruck=Andruck::"Text oben");
      END;
    END;

    LOCAL PROCEDURE OnPreSectionRMA_Zeile_Body4@5054(VAR "RMA-Zeile"@1000000000 : Record 50021);
    BEGIN
      WITH "RMA-Zeile" DO BEGIN
        //ReportForNav.ShowOutput(Belegart=Belegart::"an Hersteller");
        IF  opt_invoice = opt_invoice::Hersteller THEN BEGIN
          Amount := ROUND(("RMA-Zeile"."Menge SN-Nr. / DC") * ("RMA-Zeile"."urspr. DC-Preis EK-Lieferung"),0.01);
          Price := "RMA-Zeile"."urspr. DC-Preis EK-Lieferung";
        END ELSE BEGIN
          Amount := ROUND(("RMA-Zeile"."Menge SN-Nr. / DC") * ("RMA-Zeile"."VK-Preis"),0.01);
          Price := "RMA-Zeile"."VK-Preis";
        END;
        Totalamount += Amount;
        Anzahl_Zeile += 1;
        IF Manufacturer.GET("RMA-Zeile".Herstellercode) THEN
          Manufac := Manufacturer.Name
        ELSE
          Manufac := '';
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'RMA_Kopf': CASE SectionId OF
          'Header1': OnPreSectionRMA_Kopf_Header1("RMA-Kopf");
        END;
        'TOPASBemerkungen': CASE SectionId OF
          'Body2': OnPreSectionTOPASBemerkungen_Body2("TOPAS Bemerkungen");
        END;
        'RMA_Zeile': CASE SectionId OF
          'Body4': OnPreSectionRMA_Zeile_Body4("RMA-Zeile");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
R94124RRvL3wHsNdPEu2kLhRHf3x3w==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

