OBJECT Report 50168 Memovolltextsuche
{
  OBJECT-PROPERTIES
  {
    Date=12.06.17;
    Time=17:16:24;
    Modified=Yes;
    Version List=TOPAS,FORNAV2.0.0.1189/1189;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  //*******************************************************************************************************
                  //                    Sicherheitsabfrage ob Temp Tabelle auch Berichtstabelle ist
                  //*******************************************************************************************************
                  IF Berichtstabelle.TABLECAPTION <> 'Berichtstabelle' THEN
                    ERROR('Eine Sicherheitssperre verhindert die Ausfhrung dieses Berichtes.'+
                          'Stellen Sie sicher, dass die TABLECAPTION der Berichtstabelle auch auf Berichtstabelle lautet.');
                  Berichtstabelle.RESET;
                  IF Berichtstabelle.ISEMPTY = FALSE THEN
                    BEGIN
                      REPEAT
                        IF Berichtstabelle.ISEMPTY = FALSE THEN
                          BEGIN
                            SLEEP(500);
                            counter += 1;
                          END;
                        IF counter MOD 30 = 0 THEN
                          BEGIN
                            Berichtstabelle.FINDFIRST;
                            IF CONFIRM('Die Berichtstabelle ist seit %1 durch Anwender %2 gesperrt. Wollen Sie die Anwendung abbrechen?',
                            TRUE,Berichtstabelle.Uhrzeit,Berichtstabelle.User,counter,TRUE) THEN
                              ERROR('');
                          END;
                      UNTIL Berichtstabelle.ISEMPTY = TRUE;
                    END;
                  Suchtext := '*'+ Suchtext + '*';
                  //*******************************************************************************************************
                  //                                      K”pfe werden untersucht
                  //*******************************************************************************************************
                  Memokopf.RESET;
                  Memokopf.SETFILTER(Memokopf.Memokurztext,Suchtext);
                  Memokopf.SETFILTER(Memokopf."Angelegt von",Verfasser);
                  Memokopf.SETFILTER(Memokopf."Kampagnennr.",'<>%1','');
                  IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                    Memokopf.SETFILTER(Memokopf.Memodatum,'>=%1',Startdatum);
                  IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memokopf.Memodatum,'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memokopf.Memodatum,'<=%1',Enddatum);
                  IF Memokopf.FIND('-') THEN
                    BEGIN
                      REPEAT
                        temp_Berichtstabelle.RESET;
                        temp_Berichtstabelle.SETFILTER(temp_Berichtstabelle.Index,'%1',Memokopf."Memonr.");
                        IF temp_Berichtstabelle.FINDFIRST THEN
                          BEGIN
                          END
                        ELSE
                          BEGIN
                            Berichtstabelle.INIT;
                            Berichtstabelle.Tabelle := 'PROJEKTMEMO';
                            Berichtstabelle.Index := Memokopf."Memonr.";
                            Berichtstabelle.Datum := Memokopf.Anlagedatum;
                            Berichtstabelle."Belegnr." := Memokopf."Memonr.";
                            Berichtstabelle."Feld 1" := Memokopf.Memokurztext;
                            Berichtstabelle."Feld 2" := Memokopf."Kampagnennr.";
                            Berichtstabelle."Feld 6" := Memokopf."Angelegt von";
                            Berichtstabelle."Feld 18" := Memokopf.Memodatum;
                            Projekt.SETFILTER(Projekt."No.",Memokopf."Kampagnennr.");
                            IF Projekt.FINDFIRST THEN BEGIN
                                 Berichtstabelle."Feld 11" := Projekt.Description;
                              Ansprech.SETFILTER(Ansprech."Kampagnennr.",Projekt."No.");
                              Ansprech.SETFILTER(Fhrungsrolle,'%1',TRUE);
                              IF Ansprech.FINDFIRST THEN BEGIN
                                 Ansprech.CALCFIELDS(Mandantenname);
                                 Berichtstabelle."Feld 10" := Ansprech.Mandantenname;
                              END;
                            END;
                            Berichtstabelle.User := USERID;
                            Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                            Berichtstabelle.INSERT;
                            Memozeile.RESET;
                            Memozeile.SETFILTER(Memozeile."Memonr.",'%1',Memokopf."Memonr.");
                            IF Memozeile.FINDFIRST THEN
                              BEGIN
                                REPEAT
                                  Berichtstabelle.INIT;
                                  Berichtstabelle.Tabelle := 'MEMOZEILE';
                                  Berichtstabelle.Index := Memozeile."Memonr.";
                                  Berichtstabelle."Belegnr." := Memozeile."Memonr.";
                                  Berichtstabelle."Zeilennr." := Memozeile."Zeilennr.";
                                  Berichtstabelle."Feld 1" := Memozeile.Bemerkung;
                                  Berichtstabelle.User := USERID;
                                  Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                                  Berichtstabelle.INSERT;
                                UNTIL Memozeile.NEXT = 0;
                              END;
                          END;
                      UNTIL Memokopf.NEXT = 0;
                    END;
                  Memokopf.RESET;
                  Memokopf.SETFILTER(Memokopf.Memokurztext,Suchtext);
                  Memokopf.SETFILTER(Memokopf."Angelegt von",Verfasser);
                  Memokopf.SETFILTER(Memokopf."Mandantennr.",'<>%1','');
                  IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                    Memokopf.SETFILTER(Memokopf.Memodatum,'>=%1',Startdatum);
                  IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memokopf.Memodatum,'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memokopf.Memodatum,'<=%1',Enddatum);
                  IF Memokopf.FIND('-') THEN
                    BEGIN
                      REPEAT
                        temp_Berichtstabelle.RESET;
                        temp_Berichtstabelle.SETFILTER(temp_Berichtstabelle.Index,'%1',Memokopf."Memonr.");
                        IF temp_Berichtstabelle.FINDFIRST THEN
                          BEGIN
                          END
                        ELSE
                          BEGIN
                            Berichtstabelle.INIT;
                            Berichtstabelle.Tabelle := 'KONTAKTMEMO';
                            Berichtstabelle.Index := Memokopf."Memonr.";
                            Berichtstabelle.Datum := Memokopf.Anlagedatum;
                            Berichtstabelle."Belegnr." := Memokopf."Memonr.";
                            Berichtstabelle."Feld 1" := Memokopf.Memokurztext;
                            Berichtstabelle."Feld 2" := Memokopf."Mandantennr.";
                            Berichtstabelle."Feld 6" := Memokopf."Angelegt von";
                            Berichtstabelle."Feld 18" := Memokopf.Memodatum;
                            Cont.RESET;
                            Cont.SETFILTER(Cont."No.",'%1',Memokopf."Mandantennr.");
                            IF Cont.FINDFIRST THEN
                              Berichtstabelle."Feld 10" := Cont.Name;
                            Berichtstabelle.User := USERID;
                            Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                            Berichtstabelle.INSERT;
                            Memozeile.RESET;
                            Memozeile.SETFILTER(Memozeile."Memonr.",'%1',Memokopf."Memonr.");
                            IF Memozeile.FINDFIRST THEN
                              BEGIN
                                REPEAT
                                  Berichtstabelle.INIT;
                                  Berichtstabelle.Tabelle := 'MEMOZEILE';
                                  Berichtstabelle.Index := Memozeile."Memonr.";
                                  Berichtstabelle."Belegnr." := Memozeile."Memonr.";
                                  Berichtstabelle."Zeilennr." := Memozeile."Zeilennr.";
                                  Berichtstabelle."Feld 1" := Memozeile.Bemerkung;
                                  Berichtstabelle.User := USERID;
                                  Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                                  Berichtstabelle.INSERT;
                                UNTIL Memozeile.NEXT = 0;
                              END;
                          END;
                      UNTIL Memokopf.NEXT = 0;
                    END;
                  //*******************************************************************************************************
                  //                                     Zeilen werden untersucht
                  //*******************************************************************************************************
                  Memozeile.RESET;
                  Memozeile.SETFILTER(Memozeile.Bemerkung,Suchtext);
                  IF Memozeile.FIND('-') THEN
                    BEGIN
                      REPEAT
                        temp_Berichtstabelle.RESET;
                        temp_Berichtstabelle.SETFILTER(temp_Berichtstabelle.Index,'%1',Memozeile."Memonr.");
                        IF temp_Berichtstabelle.FINDFIRST THEN
                          BEGIN
                          END
                        ELSE
                          BEGIN
                            Memokopf.RESET;
                            Memokopf.SETFILTER(Memokopf."Memonr.",'%1',Memozeile."Memonr.");
                            Memokopf.SETFILTER(Memokopf."Angelegt von",Verfasser);
                            IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                              Memokopf.SETFILTER(Memokopf.Memodatum,'>=%1',Startdatum);
                            IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                              Memokopf.SETFILTER(Memokopf.Memodatum,'>=%1&<=%2',Startdatum,Enddatum);
                            IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                              Memokopf.SETFILTER(Memokopf.Memodatum,'<=%1',Enddatum);
                            IF Memokopf.FIND('-') THEN
                              BEGIN
                                REPEAT
                                  Berichtstabelle.INIT;
                                  IF Memokopf."Kampagnennr." <> '' THEN
                                    BEGIN
                                      Berichtstabelle.Tabelle := 'PROJEKTMEMO';
                                      Berichtstabelle."Feld 2" := Memokopf."Kampagnennr.";
                                      Projekt.SETFILTER(Projekt."No.",Memokopf."Kampagnennr.");
                                      IF Projekt.FINDFIRST THEN
                                        BEGIN
                                           Berichtstabelle."Feld 11" := Projekt.Description;
                                           Ansprech.SETFILTER(Ansprech."Kampagnennr.",Projekt."No.");
                                           Ansprech.SETFILTER(Fhrungsrolle,'%1',TRUE);
                                           IF Ansprech.FINDFIRST THEN
                                             BEGIN
                                               Ansprech.CALCFIELDS(Mandantenname);
                                               Berichtstabelle."Feld 10" := Ansprech.Mandantenname;
                                             END;
                                        END;
                                    END;
                                  IF  Memokopf."Mandantennr." <> '' THEN
                                    BEGIN
                                      Berichtstabelle.Tabelle := 'KONTAKTMEMO';
                                      Berichtstabelle."Feld 2" := Memokopf."Mandantennr.";
                                      Cont.RESET;
                                      Cont.SETFILTER(Cont."No.",'%1',Memokopf."Mandantennr.");
                                      IF Cont.FINDFIRST THEN
                                        Berichtstabelle."Feld 10" := Cont.Name;
                                    END;
                                  Berichtstabelle.Index := Memokopf."Memonr.";
                                  Berichtstabelle.Datum := Memokopf.Anlagedatum;
                                  Berichtstabelle."Belegnr." := Memokopf."Memonr.";
                                  Berichtstabelle."Feld 1" := Memokopf.Memokurztext;
                                  //Berichtstabelle."Feld 2" := Memokopf."Mandantennr.";
                                  Berichtstabelle."Feld 6" := Memokopf."Angelegt von";
                                  Berichtstabelle."Feld 18" := Memokopf.Memodatum;
                                  Berichtstabelle.User := USERID;
                                  Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                                  Berichtstabelle.INSERT;
                                  Memozeile2.RESET;
                                  Memozeile2.SETFILTER(Memozeile2."Memonr.",'%1',Memokopf."Memonr.");
                                  IF Memozeile2.FIND('-') THEN
                                    BEGIN
                                      REPEAT
                                        Berichtstabelle.INIT;
                                        Berichtstabelle.Tabelle := 'MEMOZEILE';
                                        Berichtstabelle.Index := Memozeile2."Memonr.";
                                        Berichtstabelle."Belegnr." := Memozeile2."Memonr.";
                                        Berichtstabelle."Zeilennr." := Memozeile2."Zeilennr.";
                                        Berichtstabelle."Feld 1" := Memozeile2.Bemerkung;
                                        Berichtstabelle.User := USERID;
                                        Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                                        Berichtstabelle.INSERT;
                                      UNTIL Memozeile2.NEXT = 0;
                                    END;
                                UNTIL Memokopf.NEXT = 0;
                             END;
                          END;
                      UNTIL Memozeile.NEXT = 0;
                    END;
                  Aufgabe.RESET;
                  Aufgabe.SETFILTER(Aufgabe."System To-do Type",'%1',Aufgabe."System To-do Type"::Organizer);
                  Aufgabe.SETFILTER(Aufgabe.Description,Suchtext);
                  Aufgabe.SETFILTER(Aufgabe.Ersteller,Verfasser);
                  IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                    Aufgabe.SETFILTER(Aufgabe."Erstellt am",'>=%1',Startdatum);
                  IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                    Aufgabe.SETFILTER(Aufgabe."Erstellt am",'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                    Aufgabe.SETFILTER(Aufgabe."Erstellt am",'<=%1',Enddatum);
                  IF Aufgabe.FIND('-') THEN
                    BEGIN
                      REPEAT
                        Berichtstabelle.INIT;
                        Berichtstabelle.Tabelle := 'AUFGABE';
                        Berichtstabelle.Index := Aufgabe."No.";
                        IF Aufgabe."Erstellt am" <> 0D THEN
                          Berichtstabelle.Datum := Aufgabe."Erstellt am"
                        ELSE
                          Berichtstabelle.Datum := Aufgabe.Date;
                        Berichtstabelle."Belegnr." := Aufgabe."No.";
                        Berichtstabelle."Feld 1" := Aufgabe.Description;
                        Berichtstabelle."Feld 2" := Aufgabe."Contact Company No.";
                        Berichtstabelle."Feld 6" := Aufgabe.Ersteller;
                        Aufgabe.CALCFIELDS("Contact Company Name");
                        Berichtstabelle."Feld 10" := Aufgabe."Contact Company Name";
                        Berichtstabelle."Feld 18" := Aufgabe.Date;
                        Berichtstabelle.User := USERID;
                        Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                        Berichtstabelle.INSERT;
                        Bemerkung.RESET;
                        Bemerkung.SETFILTER(Bemerkung."Table Name",'Aufgabe');
                        Bemerkung.SETFILTER(Bemerkung."No.",'%1',Aufgabe."No.");
                        IF Bemerkung.FIND('-') THEN
                          BEGIN
                            REPEAT
                              Berichtstabelle.INIT;
                              Berichtstabelle.Tabelle := 'BEMERKUNG';
                              Berichtstabelle.Index := Bemerkung."No.";
                              Berichtstabelle."Belegnr." := Bemerkung."No.";
                              Berichtstabelle."Zeilennr." := Bemerkung."Line No.";
                              Berichtstabelle.Datum := Bemerkung.Date;
                              Berichtstabelle."Feld 1" := Bemerkung.Comment;
                              Berichtstabelle.User := USERID;
                              Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                              Berichtstabelle.INSERT;
                            UNTIL Bemerkung.NEXT = 0;
                          END;
                      UNTIL Aufgabe.NEXT = 0;
                    END;
                  //*******************************************************************************************************
                  //                        Bemerkungszeilen der Aufgaben werden durchsucht
                  //*******************************************************************************************************
                  Bemerkung.RESET;
                  Bemerkung.SETFILTER(Bemerkung.Comment,Suchtext);
                  IF Bemerkung.FIND('-') THEN
                    BEGIN
                      REPEAT
                        temp_Berichtstabelle.RESET;
                        temp_Berichtstabelle.SETFILTER(temp_Berichtstabelle.Index,'%1',Bemerkung."No.");
                        IF temp_Berichtstabelle.FINDFIRST THEN
                          BEGIN
                          END
                        ELSE
                          BEGIN
                            Aufgabe.RESET;
                            Aufgabe.SETFILTER(Aufgabe."No.",'%1',Bemerkung."No.");
                            Aufgabe.SETFILTER(Aufgabe.Ersteller,Verfasser);
                            IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                              Aufgabe.SETFILTER(Aufgabe."Erstellt am",'>=%1',Startdatum);
                            IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                              Aufgabe.SETFILTER(Aufgabe."Erstellt am",'>=%1&<=%2',Startdatum,Enddatum);
                            IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                              Aufgabe.SETFILTER(Aufgabe."Erstellt am",'<=%1',Enddatum);
                            IF Aufgabe.FIND('-') THEN
                              BEGIN
                                REPEAT
                                  Berichtstabelle.INIT;
                                  Berichtstabelle.Tabelle := 'AUFGABE';
                                  Berichtstabelle.Index := Aufgabe."No.";
                                  IF Aufgabe."Erstellt am" <> 0D THEN
                                    Berichtstabelle.Datum := Aufgabe."Erstellt am"
                                  ELSE
                                    Berichtstabelle.Datum := Aufgabe.Date;
                                  Berichtstabelle."Belegnr." := Aufgabe."No.";
                                  Berichtstabelle."Feld 1" := Aufgabe.Description;
                                  Berichtstabelle."Feld 2" := Aufgabe."Contact Company No.";
                                  Berichtstabelle."Feld 6" := Aufgabe.Ersteller;
                                  Aufgabe.CALCFIELDS("Contact Company Name");
                                  Berichtstabelle."Feld 10" := Aufgabe."Contact Company Name";
                                  Berichtstabelle."Feld 18" := Aufgabe.Date;
                                  Berichtstabelle.User := USERID;
                                  Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                                  Berichtstabelle.INSERT;
                                  Bemerkung2.RESET;
                                  Bemerkung2.SETFILTER(Bemerkung2."No.",'%1',Aufgabe."No.");
                                  IF Bemerkung2.FINDFIRST THEN
                                    BEGIN
                                      REPEAT
                                        Berichtstabelle.INIT;
                                        Berichtstabelle.Tabelle := 'BEMERKUNG';
                                        Berichtstabelle.Index := Bemerkung2."No.";
                                        Berichtstabelle."Belegnr." := Bemerkung2."No.";
                                        Berichtstabelle."Zeilennr." := Bemerkung2."Line No.";
                                        Berichtstabelle.Datum := Bemerkung2.Date;
                                        Berichtstabelle."Feld 1" := Bemerkung2.Comment;
                                        Berichtstabelle.User := USERID;
                                        Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                                        Berichtstabelle.INSERT;
                                      UNTIL Bemerkung2.NEXT = 0;
                                    END;
                                UNTIL Aufgabe.NEXT = 0;
                             END;
                          END;
                      UNTIL Bemerkung.NEXT = 0;
                    END;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   IF Berichtstabelle.TABLECAPTION = 'Berichtstabelle' THEN
                     Berichtstabelle.DELETEALL;
                   ;ReportForNav.Post;
                 END;

    UseRequestPage=Yes;
  }
  DATASET
  {
    { 1   ;    ;DataItem;Textkopf            ;
               DataItemTable=Table50037;
               DataItemTableView=SORTING(Datum,Index)
                                 ORDER(Descending)
                                 WHERE(Tabelle=FILTER(PROJEKTMEMO|KONTAKTMEMO|AUFGABE)) }

    { 2   ;1   ;Column  ;Verfasser           ;
               SourceExpr=Verfasser }

    { 3   ;1   ;Column  ;Enddatum            ;
               SourceExpr=Enddatum }

    { 4   ;1   ;Column  ;Startdatum          ;
               SourceExpr=Startdatum }

    { 5   ;1   ;Column  ;ReportForNavPageNo  ;
               SourceExpr=ReportForNav.PageNo }

    { 6   ;1   ;Column  ;WORKDATE            ;
               SourceExpr=WORKDATE }

    { 7   ;1   ;Column  ;USERID              ;
               SourceExpr=USERID }

    { 8   ;1   ;Column  ;Suchtext            ;
               SourceExpr=Suchtext }

    { 9   ;1   ;Column  ;Feld6_Textkopf      ;
               SourceExpr="Feld 6" }

    { 10  ;1   ;Column  ;Datum_Textkopf      ;
               SourceExpr=Datum }

    { 11  ;1   ;Column  ;Feld1_Textkopf      ;
               SourceExpr="Feld 1" }

    { 12  ;1   ;Column  ;Feld10_Textkopf     ;
               SourceExpr="Feld 10" }

    { 13  ;1   ;Column  ;Feld11_Textkopf     ;
               SourceExpr="Feld 11" }

    { 14  ;1   ;Column  ;Feld2_Textkopf      ;
               SourceExpr="Feld 2" }

    { 15  ;1   ;DataItem;Textzeile           ;
               DataItemTable=Table50037;
               DataItemTableView=SORTING(Tabelle,Index,Belegnr.,Zeilennr.)
                                 WHERE(Tabelle=FILTER(MEMOZEILE|BEMERKUNG));
               DataItemLink=Index=FIELD(Index) }

    { 16  ;2   ;Column  ;Feld1_Textzeile     ;
               SourceExpr="Feld 1" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1000000000;2;Field  ;
                  CaptionML=DEU=Hinweis: Es muss kein * vor und nach dem Suchtext eingegeben werden. }

      { 1140000;2;Field     ;
                  CaptionML=DEU=Suchtext:;
                  SourceExpr=Suchtext }

      { 1140004;2;Field     ;
                  CaptionML=DEU=Datum:;
                  SourceExpr=Startdatum }

      { 1140006;2;Field     ;
                  CaptionML=DEU=bis;
                  SourceExpr=Enddatum }

      { 1140007;2;Field     ;
                  CaptionML=DEU=Verfasser:;
                  SourceExpr=Verfasser }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Projekt@1140001 : Record 5071;
      Ansprech@1140002 : Record 50005;
      Cont@1140004 : Record 5050;
      Memokopf@1140011 : Record 50003;
      Memozeile@1140012 : Record 50004;
      Memozeile2@1140013 : Record 50004;
      Aufgabe@1140014 : Record 5080;
      Bemerkung@1140015 : Record 5061;
      Bemerkung2@1140016 : Record 5061;
      Berichtstabelle@1140009 : Record 50037;
      temp_Berichtstabelle@1140010 : Record 50037;
      Projektname@1140003 : Text[50];
      Fhrungsname@1140005 : Text[50];
      Suchtext@1140006 : Text[250];
      Verfasser@1140007 : Code[20];
      Startdatum@1140000 : Date;
      Enddatum@1140008 : Date;
      counter@1140017 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionTextkopf_Body2@5017(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        ReportForNav.ShowOutput(Textkopf.Tabelle = 'PROJEKTMEMO');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionTextkopf_Body3@5018(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        ReportForNav.ShowOutput(Textkopf.Tabelle = 'KONTAKTMEMO');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionTextkopf_Body4@5019(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        ReportForNav.ShowOutput(Textkopf.Tabelle = 'AUFGABE');
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Textkopf': CASE SectionId OF
          'Body2': OnPreSectionTextkopf_Body2(Textkopf);
          'Body3': OnPreSectionTextkopf_Body3(Textkopf);
          'Body4': OnPreSectionTextkopf_Body4(Textkopf);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>5d9f824f-4288-490d-8024-8b5ded271ac6</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>45567614-64f1-4c18-b235-476d7908b6f7</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="Verfasser">
          <DataField>Verfasser</DataField>
        </Field>
        <Field Name="Enddatum">
          <DataField>Enddatum</DataField>
        </Field>
        <Field Name="Startdatum">
          <DataField>Startdatum</DataField>
        </Field>
        <Field Name="ReportForNavPageNo">
          <DataField>ReportForNavPageNo</DataField>
        </Field>
        <Field Name="WORKDATE">
          <DataField>WORKDATE</DataField>
        </Field>
        <Field Name="USERID">
          <DataField>USERID</DataField>
        </Field>
        <Field Name="Suchtext">
          <DataField>Suchtext</DataField>
        </Field>
        <Field Name="Feld6_Textkopf">
          <DataField>Feld6_Textkopf</DataField>
        </Field>
        <Field Name="Datum_Textkopf">
          <DataField>Datum_Textkopf</DataField>
        </Field>
        <Field Name="Feld1_Textkopf">
          <DataField>Feld1_Textkopf</DataField>
        </Field>
        <Field Name="Feld10_Textkopf">
          <DataField>Feld10_Textkopf</DataField>
        </Field>
        <Field Name="Feld11_Textkopf">
          <DataField>Feld11_Textkopf</DataField>
        </Field>
        <Field Name="Feld2_Textkopf">
          <DataField>Feld2_Textkopf</DataField>
        </Field>
        <Field Name="Feld1_Textzeile">
          <DataField>Feld1_Textzeile</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

