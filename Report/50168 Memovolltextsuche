OBJECT Report 50168 Memovolltextsuche
{
  OBJECT-PROPERTIES
  {
    Date=18.01.18;
    Time=11:44:58;
    Modified=Yes;
    Version List=TOPAS,FORNAV2.0.0.1189/1189;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  Suchtext := '*' + Suchtext + '*';

                  //*******************************************************************************************************
                  //                                      K”pfe werden untersucht
                  //*******************************************************************************************************
                  Memokopf.RESET;
                  Memokopf.SETFILTER(Memokurztext,Suchtext);
                  Memokopf.SETFILTER("Angelegt von",Verfasser);
                  Memokopf.SETFILTER("Kampagnennr.",'<>%1','');
                  IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1',Startdatum);
                  IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memodatum,'<=%1',Enddatum);
                  IF Memokopf.FIND('-') THEN BEGIN
                    REPEAT
                      Berichtstabelle.RESET;
                      Berichtstabelle.SETRANGE(Index,Memokopf."Memonr.");
                      IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
                        Berichtstabelle.INIT;
                        Berichtstabelle.Tabelle := 'PROJEKTMEMO';
                        Berichtstabelle.Index := Memokopf."Memonr.";
                        Berichtstabelle.Datum := Memokopf.Anlagedatum;
                        Berichtstabelle."Belegnr." := Memokopf."Memonr.";
                        Berichtstabelle."Feld 1" := Memokopf.Memokurztext;
                        Berichtstabelle."Feld 2" := Memokopf."Kampagnennr.";
                        Berichtstabelle."Feld 6" := Memokopf."Angelegt von";
                        Berichtstabelle."Feld 18" := Memokopf.Memodatum;
                        Projekt.SETFILTER(Projekt."No.",Memokopf."Kampagnennr.");
                        IF Projekt.FINDFIRST THEN BEGIN
                          Berichtstabelle."Feld 11" := Projekt.Description;
                          Ansprech.SETFILTER(Ansprech."Kampagnennr.",Projekt."No.");
                          Ansprech.SETFILTER(Fhrungsrolle,'%1',TRUE);
                          IF Ansprech.FINDFIRST THEN BEGIN
                            Ansprech.CALCFIELDS(Mandantenname);
                            Berichtstabelle."Feld 10" := Ansprech.Mandantenname;
                          END;
                        END;
                        Berichtstabelle.User := USERID;
                        Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                        Berichtstabelle.INSERT;
                        Memozeile.RESET;
                        Memozeile.SETRANGE("Memonr.",Memokopf."Memonr.");
                        IF Memozeile.FINDFIRST THEN BEGIN
                          REPEAT
                            Berichtstabelle.INIT;
                            Berichtstabelle.Tabelle := 'MEMOZEILE';
                            Berichtstabelle.Index := Memozeile."Memonr.";
                            Berichtstabelle."Belegnr." := Memozeile."Memonr.";
                            Berichtstabelle."Zeilennr." := Memozeile."Zeilennr.";
                            Berichtstabelle."Feld 1" := Memozeile.Bemerkung;
                            Berichtstabelle.User := USERID;
                            Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                            Berichtstabelle.INSERT;
                          UNTIL Memozeile.NEXT = 0;
                        END;
                      END;
                    UNTIL Memokopf.NEXT = 0;
                  END;

                  Memokopf.RESET;
                  Memokopf.SETFILTER(Memokurztext,Suchtext);
                  Memokopf.SETFILTER("Angelegt von",Verfasser);
                  Memokopf.SETFILTER("Mandantennr.",'<>%1','');
                  IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1',Startdatum);
                  IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memodatum,'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                    Memokopf.SETFILTER(Memodatum,'<=%1',Enddatum);
                  IF Memokopf.FIND('-') THEN BEGIN
                    REPEAT
                      Berichtstabelle.RESET;
                      Berichtstabelle.SETRANGE(Index,Memokopf."Memonr.");
                      IF Berichtstabelle.FINDFIRST THEN BEGIN
                        Berichtstabelle.INIT;
                        Berichtstabelle.Tabelle := 'KONTAKTMEMO';
                        Berichtstabelle.Index := Memokopf."Memonr.";
                        Berichtstabelle.Datum := Memokopf.Anlagedatum;
                        Berichtstabelle."Belegnr." := Memokopf."Memonr.";
                        Berichtstabelle."Feld 1" := Memokopf.Memokurztext;
                        Berichtstabelle."Feld 2" := Memokopf."Mandantennr.";
                        Berichtstabelle."Feld 6" := Memokopf."Angelegt von";
                        Berichtstabelle."Feld 18" := Memokopf.Memodatum;
                        IF Cont.GET(Memokopf."Mandantennr.") THEN
                          Berichtstabelle."Feld 10" := Cont.Name;
                        Berichtstabelle.User := USERID;
                        Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                        Berichtstabelle.INSERT;
                        Memozeile.RESET;
                        Memozeile.SETRANGE("Memonr.",Memokopf."Memonr.");
                        IF Memozeile.FINDFIRST THEN BEGIN
                          REPEAT
                            Berichtstabelle.INIT;
                            Berichtstabelle.Tabelle := 'MEMOZEILE';
                            Berichtstabelle.Index := Memozeile."Memonr.";
                            Berichtstabelle."Belegnr." := Memozeile."Memonr.";
                            Berichtstabelle."Zeilennr." := Memozeile."Zeilennr.";
                            Berichtstabelle."Feld 1" := Memozeile.Bemerkung;
                            Berichtstabelle.User := USERID;
                            Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                            Berichtstabelle.INSERT;
                          UNTIL Memozeile.NEXT = 0;
                        END;
                      END;
                    UNTIL Memokopf.NEXT = 0;
                  END;

                  //*******************************************************************************************************
                  //                                     Zeilen werden untersucht
                  //*******************************************************************************************************
                  Memozeile.RESET;
                  Memozeile.SETFILTER(Bemerkung,Suchtext);
                  IF Memozeile.FIND('-') THEN BEGIN
                    REPEAT
                      Berichtstabelle.RESET;
                      Berichtstabelle.SETRANGE(Index,Memozeile."Memonr.");
                      IF NOT Berichtstabelle.FINDFIRST THEN BEGIN
                        Memokopf.RESET;
                        Memokopf.SETFILTER("Memonr.",'%1',Memozeile."Memonr.");
                        Memokopf.SETFILTER("Angelegt von",Verfasser);
                        IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                          Memokopf.SETFILTER(Memodatum,'>=%1',Startdatum);
                        IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                          Memokopf.SETFILTER(Memodatum,'>=%1&<=%2',Startdatum,Enddatum);
                        IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                          Memokopf.SETFILTER(Memodatum,'<=%1',Enddatum);
                        IF Memokopf.FIND('-') THEN BEGIN
                          REPEAT
                            Berichtstabelle.INIT;
                            IF Memokopf."Kampagnennr." <> '' THEN BEGIN
                              Berichtstabelle.Tabelle := 'PROJEKTMEMO';
                              Berichtstabelle."Feld 2" := Memokopf."Kampagnennr.";
                              IF Projekt.GET(Memokopf."Kampagnennr.") THEN BEGIN
                                Berichtstabelle."Feld 11" := Projekt.Description;
                                Ansprech.SETFILTER(Ansprech."Kampagnennr.",Projekt."No.");
                                Ansprech.SETFILTER(Fhrungsrolle,'%1',TRUE);
                                IF Ansprech.FINDFIRST THEN BEGIN
                                  Ansprech.CALCFIELDS(Mandantenname);
                                  Berichtstabelle."Feld 10" := Ansprech.Mandantenname;
                                END;
                              END;
                            END;
                            IF  Memokopf."Mandantennr." <> '' THEN BEGIN
                              Berichtstabelle.Tabelle := 'KONTAKTMEMO';
                              Berichtstabelle."Feld 2" := Memokopf."Mandantennr.";
                              Cont.GET(Memokopf."Mandantennr.");
                              IF Cont.FINDFIRST THEN
                                Berichtstabelle."Feld 10" := Cont.Name;
                            END;
                            Berichtstabelle.Index := Memokopf."Memonr.";
                            Berichtstabelle.Datum := Memokopf.Anlagedatum;
                            Berichtstabelle."Belegnr." := Memokopf."Memonr.";
                            Berichtstabelle."Feld 1" := Memokopf.Memokurztext;
                            //Berichtstabelle."Feld 2" := Memokopf."Mandantennr.";
                            Berichtstabelle."Feld 6" := Memokopf."Angelegt von";
                            Berichtstabelle."Feld 18" := Memokopf.Memodatum;
                            Berichtstabelle.User := USERID;
                            Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                            Berichtstabelle.INSERT;
                            Memozeile2.RESET;
                            Memozeile2.SETRANGE("Memonr.",Memokopf."Memonr.");
                            IF Memozeile2.FIND('-') THEN BEGIN
                              REPEAT
                                Berichtstabelle.INIT;
                                Berichtstabelle.Tabelle := 'MEMOZEILE';
                                Berichtstabelle.Index := Memozeile2."Memonr.";
                                Berichtstabelle."Belegnr." := Memozeile2."Memonr.";
                                Berichtstabelle."Zeilennr." := Memozeile2."Zeilennr.";
                                Berichtstabelle."Feld 1" := Memozeile2.Bemerkung;
                                Berichtstabelle.User := USERID;
                                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                                Berichtstabelle.INSERT;
                              UNTIL Memozeile2.NEXT = 0;
                            END;
                          UNTIL Memokopf.NEXT = 0;
                        END;
                      END;
                    UNTIL Memozeile.NEXT = 0;
                  END;

                  Aufgabe.RESET;
                  Aufgabe.SETFILTER("System To-do Type",'%1',Aufgabe."System To-do Type"::Organizer);
                  Aufgabe.SETFILTER(Description,Suchtext);
                  Aufgabe.SETFILTER(Ersteller,Verfasser);
                  IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                    Aufgabe.SETFILTER("Erstellt am",'>=%1',Startdatum);
                  IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                    Aufgabe.SETFILTER("Erstellt am",'>=%1&<=%2',Startdatum,Enddatum);
                  IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                    Aufgabe.SETFILTER("Erstellt am",'<=%1',Enddatum);
                  IF Aufgabe.FIND('-') THEN BEGIN
                    REPEAT
                      Berichtstabelle.INIT;
                      Berichtstabelle.Tabelle := 'AUFGABE';
                      Berichtstabelle.Index := Aufgabe."No.";
                      IF Aufgabe."Erstellt am" <> 0D THEN
                        Berichtstabelle.Datum := Aufgabe."Erstellt am"
                      ELSE
                        Berichtstabelle.Datum := Aufgabe.Date;
                      Berichtstabelle."Belegnr." := Aufgabe."No.";
                      Berichtstabelle."Feld 1" := Aufgabe.Description;
                      Berichtstabelle."Feld 2" := Aufgabe."Contact Company No.";
                      Berichtstabelle."Feld 6" := Aufgabe.Ersteller;
                      Aufgabe.CALCFIELDS("Contact Company Name");
                      Berichtstabelle."Feld 10" := Aufgabe."Contact Company Name";
                      Berichtstabelle."Feld 18" := Aufgabe.Date;
                      Berichtstabelle.User := USERID;
                      Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                      Berichtstabelle.INSERT;
                      Bemerkung.RESET;
                      Bemerkung.SETFILTER("Table Name",'Aufgabe');
                      Bemerkung.SETFILTER("No.",'%1',Aufgabe."No.");
                      IF Bemerkung.FIND('-') THEN BEGIN
                        REPEAT
                          Berichtstabelle.INIT;
                          Berichtstabelle.Tabelle := 'BEMERKUNG';
                          Berichtstabelle.Index := Bemerkung."No.";
                          Berichtstabelle."Belegnr." := Bemerkung."No.";
                          Berichtstabelle."Zeilennr." := Bemerkung."Line No.";
                          Berichtstabelle.Datum := Bemerkung.Date;
                          Berichtstabelle."Feld 1" := Bemerkung.Comment;
                          Berichtstabelle.User := USERID;
                          Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                          Berichtstabelle.INSERT;
                        UNTIL Bemerkung.NEXT = 0;
                      END;
                    UNTIL Aufgabe.NEXT = 0;
                  END;

                  //*******************************************************************************************************
                  //                        Bemerkungszeilen der Aufgaben werden durchsucht
                  //*******************************************************************************************************
                  Bemerkung.RESET;
                  Bemerkung.SETFILTER(Comment,Suchtext);
                  IF Bemerkung.FIND('-') THEN BEGIN
                    REPEAT
                      Berichtstabelle.RESET;
                      Berichtstabelle.SETRANGE(Index,Bemerkung."No.");
                      IF Berichtstabelle.FINDFIRST THEN BEGIN
                        Aufgabe.RESET;
                        Aufgabe.SETFILTER("No.",'%1',Bemerkung."No.");
                        Aufgabe.SETFILTER(Ersteller,Verfasser);
                        IF (Startdatum<>0D) AND (Enddatum=0D) THEN
                          Aufgabe.SETFILTER("Erstellt am",'>=%1',Startdatum);
                        IF (Startdatum<>0D) AND (Enddatum<>0D) THEN
                          Aufgabe.SETFILTER("Erstellt am",'>=%1&<=%2',Startdatum,Enddatum);
                        IF (Startdatum=0D) AND (Enddatum<>0D) THEN
                          Aufgabe.SETFILTER("Erstellt am",'<=%1',Enddatum);
                        IF Aufgabe.FIND('-') THEN BEGIN
                          REPEAT
                            Berichtstabelle.INIT;
                            Berichtstabelle.Tabelle := 'AUFGABE';
                            Berichtstabelle.Index := Aufgabe."No.";
                            IF Aufgabe."Erstellt am" <> 0D THEN
                              Berichtstabelle.Datum := Aufgabe."Erstellt am"
                            ELSE
                              Berichtstabelle.Datum := Aufgabe.Date;
                            Berichtstabelle."Belegnr." := Aufgabe."No.";
                            Berichtstabelle."Feld 1" := Aufgabe.Description;
                            Berichtstabelle."Feld 2" := Aufgabe."Contact Company No.";
                            Berichtstabelle."Feld 6" := Aufgabe.Ersteller;
                            Aufgabe.CALCFIELDS("Contact Company Name");
                            Berichtstabelle."Feld 10" := Aufgabe."Contact Company Name";
                            Berichtstabelle."Feld 18" := Aufgabe.Date;
                            Berichtstabelle.User := USERID;
                            Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                            Berichtstabelle.INSERT;
                            Bemerkung2.RESET;
                            Bemerkung2.SETRANGE("No.",Aufgabe."No.");
                            IF Bemerkung2.FINDFIRST THEN BEGIN
                              REPEAT
                                Berichtstabelle.INIT;
                                Berichtstabelle.Tabelle := 'BEMERKUNG';
                                Berichtstabelle.Index := Bemerkung2."No.";
                                Berichtstabelle."Belegnr." := Bemerkung2."No.";
                                Berichtstabelle."Zeilennr." := Bemerkung2."Line No.";
                                Berichtstabelle.Datum := Bemerkung2.Date;
                                Berichtstabelle."Feld 1" := Bemerkung2.Comment;
                                Berichtstabelle.User := USERID;
                                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                                Berichtstabelle.INSERT;
                              UNTIL Bemerkung2.NEXT = 0;
                            END;
                          UNTIL Aufgabe.NEXT = 0;
                        END;
                      END;
                    UNTIL Bemerkung.NEXT = 0;
                  END;
                  Berichtstabelle_zeilen.COPY(Berichtstabelle,TRUE);

                  ReportForNav.OpenDesigner := ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ReportForNav.Post;
                 END;

    UseRequestPage=Yes;
  }
  DATASET
  {
    { 1   ;    ;DataItem;Textkopf            ;
               DataItemTable=Table50037;
               DataItemTableView=SORTING(Datum,Index)
                                 ORDER(Descending)
                                 WHERE(Tabelle=FILTER(PROJEKTMEMO|KONTAKTMEMO|AUFGABE)) }

    { 1000000000;;DataItem;CopyHeader        ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle.RESET;
                               Berichtstabelle.SETCURRENTKEY(Datum,Index);
                               Berichtstabelle.ASCENDING(FALSE);
                               Berichtstabelle.SETFILTER(Tabelle,'%1|%2|%3','PROJEKTMEMO','KONTAKTMEMO','AUFGABE');
                               SETRANGE(Number,1,Berichtstabelle.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle.NEXT;
                                  END;
                                END;
                                 }

    { 2   ;1   ;Column  ;Verfasser           ;
               IncludeCaption=No;
               SourceExpr=Verfasser }

    { 3   ;1   ;Column  ;Enddatum            ;
               IncludeCaption=No;
               SourceExpr=Enddatum }

    { 4   ;1   ;Column  ;Startdatum          ;
               IncludeCaption=No;
               SourceExpr=Startdatum }

    { 5   ;1   ;Column  ;ReportForNavPageNo  ;
               IncludeCaption=No;
               SourceExpr=ReportForNav.PageNo }

    { 6   ;1   ;Column  ;WORKDATE            ;
               IncludeCaption=No;
               SourceExpr=WORKDATE }

    { 7   ;1   ;Column  ;USERID              ;
               IncludeCaption=No;
               SourceExpr=USERID }

    { 8   ;1   ;Column  ;Suchtext            ;
               IncludeCaption=No;
               SourceExpr=Suchtext }

    { 9   ;1   ;Column  ;Feld6_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 6" }

    { 10  ;1   ;Column  ;Datum_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle.Datum }

    { 11  ;1   ;Column  ;Feld1_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 1" }

    { 12  ;1   ;Column  ;Feld10_Textkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 10" }

    { 13  ;1   ;Column  ;Feld11_Textkopf     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 11" }

    { 14  ;1   ;Column  ;Feld2_Textkopf      ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 2" }

    { 15  ;1   ;DataItem;Textzeile           ;
               DataItemTable=Table50037;
               DataItemTableView=SORTING(Tabelle,Index,Belegnr.,Zeilennr.)
                                 WHERE(Tabelle=FILTER(MEMOZEILE|BEMERKUNG));
               DataItemLinkReference=Textkopf;
               DataItemLink=Index=FIELD(Index) }

    { 1000000001;1;DataItem;CopyLine         ;
               DataItemTable=Table2000000026;
               OnPreDataItem=BEGIN
                               Berichtstabelle_zeilen.RESET;
                               Berichtstabelle_zeilen.SETCURRENTKEY(Tabelle,Index,"Belegnr.","Zeilennr.");
                               Berichtstabelle_zeilen.SETFILTER(Tabelle,'%1|%2','MEMOZEILE','BEMERKUNG');
                               Berichtstabelle_zeilen.SETFILTER(Index,'%1',Berichtstabelle.Index);
                               SETRANGE(Number,1,Berichtstabelle_zeilen.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle_zeilen.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle_zeilen.NEXT;
                                  END;
                                END;
                                 }

    { 16  ;2   ;Column  ;Feld1_Textzeile     ;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle_zeilen."Feld 1" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1000000000;2;Field  ;
                  CaptionML=DEU=Hinweis: Es muss kein * vor und nach dem Suchtext eingegeben werden. }

      { 1140000;2;Field     ;
                  CaptionML=DEU=Suchtext:;
                  SourceExpr=Suchtext }

      { 1140004;2;Field     ;
                  CaptionML=DEU=Datum:;
                  SourceExpr=Startdatum }

      { 1140006;2;Field     ;
                  CaptionML=DEU=bis;
                  SourceExpr=Enddatum }

      { 1140007;2;Field     ;
                  CaptionML=DEU=Verfasser:;
                  SourceExpr=Verfasser }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Projekt@1140001 : Record 5071;
      Ansprech@1140002 : Record 50005;
      Cont@1140004 : Record 5050;
      Memokopf@1140011 : Record 50003;
      Memozeile@1140012 : Record 50004;
      Memozeile2@1140013 : Record 50004;
      Aufgabe@1140014 : Record 5080;
      Bemerkung@1140015 : Record 5061;
      Bemerkung2@1140016 : Record 5061;
      Berichtstabelle@1140009 : TEMPORARY Record 50037;
      Berichtstabelle_zeilen@1000000000 : TEMPORARY Record 50037;
      Projektname@1140003 : Text[50];
      Fhrungsname@1140005 : Text[50];
      Suchtext@1140006 : Text[250];
      Verfasser@1140007 : Code[20];
      Startdatum@1140000 : Date;
      Enddatum@1140008 : Date;
      counter@1140017 : Integer;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionCopyHeader_Body1@5017(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        ReportForNav.ShowOutput(Textkopf.Tabelle = 'PROJEKTMEMO');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyHeader_Body2@5018(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        ReportForNav.ShowOutput(Textkopf.Tabelle = 'KONTAKTMEMO');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopyHeader_Body3@5019(VAR Textkopf@1000000000 : Record 50037);
    BEGIN
      WITH Textkopf DO BEGIN
        ReportForNav.ShowOutput(Textkopf.Tabelle = 'AUFGABE');
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'CopyHeader': CASE SectionId OF
          'Body1': OnPreSectionCopyHeader_Body1(Berichtstabelle);
          'Body2': OnPreSectionCopyHeader_Body2(Berichtstabelle);
          'Body3': OnPreSectionCopyHeader_Body3(Berichtstabelle);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>db7cb165-760f-4d74-9f04-703352c73e81</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>6bacf0fa-46c5-4cb9-b84a-faf7bd1e73be</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="Verfasser">
          <DataField>Verfasser</DataField>
        </Field>
        <Field Name="Enddatum">
          <DataField>Enddatum</DataField>
        </Field>
        <Field Name="Startdatum">
          <DataField>Startdatum</DataField>
        </Field>
        <Field Name="ReportForNavPageNo">
          <DataField>ReportForNavPageNo</DataField>
        </Field>
        <Field Name="WORKDATE">
          <DataField>WORKDATE</DataField>
        </Field>
        <Field Name="USERID">
          <DataField>USERID</DataField>
        </Field>
        <Field Name="Suchtext">
          <DataField>Suchtext</DataField>
        </Field>
        <Field Name="Feld6_Textkopf">
          <DataField>Feld6_Textkopf</DataField>
        </Field>
        <Field Name="Datum_Textkopf">
          <DataField>Datum_Textkopf</DataField>
        </Field>
        <Field Name="Feld1_Textkopf">
          <DataField>Feld1_Textkopf</DataField>
        </Field>
        <Field Name="Feld10_Textkopf">
          <DataField>Feld10_Textkopf</DataField>
        </Field>
        <Field Name="Feld11_Textkopf">
          <DataField>Feld11_Textkopf</DataField>
        </Field>
        <Field Name="Feld2_Textkopf">
          <DataField>Feld2_Textkopf</DataField>
        </Field>
        <Field Name="Feld1_Textzeile">
          <DataField>Feld1_Textzeile</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

