OBJECT Report 50082 TOPAS-Bestellbestand
{
  OBJECT-PROPERTIES
  {
    Date=15.11.18;
    Time=10:45:25;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV3.1.0.1460/1460;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                                                                                                                              ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  KredFilter := Vendor.GETFILTERS;
                  EinkZeileFilter := "Purchase Line".GETFILTERS;
                  PeriodeText := "Purchase Line".GETFILTER("Expected Receipt Date");
                  IF PrintToExcel THEN
                    CreateExcel;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                   IF PrintToExcel THEN
                     FinishExcel(Text001);
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table23;
               PrintOnlyIfDetail=Yes;
               OnPreDataItem=BEGIN
                               ReportForNav.GetDataItem('Vendor').NewPagePerRecord := NurEinProSeiteDrucken;
                             END;

               ReqFilterFields=No.,Search Name,Priority }

    { 2   ;1   ;Column  ;USERID              ;
               SourceExpr=USERID }

    { 3   ;1   ;Column  ;COMPANYNAME         ;
               SourceExpr=COMPANYNAME }

    { 4   ;1   ;Column  ;ReportForNavPageNo  ;
               SourceExpr=ReportForNav.PageNo }

    { 5   ;1   ;Column  ;STRSUBSTNO_Wareneingangsdatum_Pct1_PeriodeText;
               SourceExpr=STRSUBSTNO('Wareneingangsdatum: %1',PeriodeText) }

    { 6   ;1   ;Column  ;TODAY_0_4           ;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 7   ;1   ;Column  ;STRSUBSTNO_Pct1_Pct2_VendorTABLENAME_KredFilter;
               SourceExpr=STRSUBSTNO('%1: %2',Vendor.TABLENAME,KredFilter) }

    { 8   ;1   ;Column  ;STRSUBSTNO_Bestellzeile_Pct1_EinkZeileFilter;
               SourceExpr=STRSUBSTNO('Bestellzeile: %1',EinkZeileFilter) }

    { 9   ;1   ;Column  ;PurchaseLineFIELDCAPTION_DirectUnitCost;
               SourceExpr="Purchase Line".FIELDCAPTION("Direct Unit Cost") }

    { 10  ;1   ;Column  ;PurchaseLineFIELDCAPTION_OutstandingQuantity;
               SourceExpr="Purchase Line".FIELDCAPTION("Outstanding Quantity") }

    { 11  ;1   ;Column  ;PurchaseLineFIELDCAPTION_Quantity;
               SourceExpr="Purchase Line".FIELDCAPTION(Quantity) }

    { 12  ;1   ;Column  ;PurchaseLineFIELDCAPTION_Artikelnr2;
               SourceExpr="Purchase Line".FIELDCAPTION("Artikelnr. 2") }

    { 13  ;1   ;Column  ;Name_Vendor         ;
               SourceExpr=Name }

    { 14  ;1   ;Column  ;No_Vendor           ;
               SourceExpr="No." }

    { 15  ;1   ;DataItem;                    ;
               DataItemTable=Table38;
               PrintOnlyIfDetail=Yes;
               ReqFilterFields=Vendor Order No.,Buy-from Vendor No.;
               DataItemLink=Buy-from Vendor No.=FIELD(No.) }

    { 16  ;2   ;DataItem;                    ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document Type,Pay-to Vendor No.,Currency Code)
                                 WHERE(Document Type=CONST(Order),
                                       Outstanding Quantity=FILTER(<>0));
               ReqFilterHeadingML=DEU=Bestellzeile;
               OnAfterGetRecord=BEGIN
                                  NeuerAuftrag := "Document No." <> EinkBestKopf."No.";
                                  IF NeuerAuftrag THEN
                                    EinkBestKopf.GET(EinkBestKopf."Document Type"::Order,"Document No.");
                                  IF "Expected Receipt Date" <= WORKDATE THEN
                                    RckstandMenge := "Outstanding Quantity"
                                  ELSE
                                    RckstandMenge := 0;
                                  EinkBestBetrag := ROUND("Outstanding Quantity" * "Line Amount" / Quantity);
                                  EinkBestBetragMW := EinkBestBetrag;
                                  IF Vendor."Currency Code" <> '' THEN BEGIN
                                    IF EinkBestKopf."Currency Factor" <> 0 THEN
                                      EinkBestBetragMW :=
                                        ROUND(
                                          W„hrungWechKurs.ExchangeAmtFCYToLCY(
                                            WORKDATE,EinkBestKopf."Currency Code",
                                            EinkBestBetragMW,EinkBestKopf."Currency Factor"));
                                    IF Betr„geDruckInMW THEN BEGIN
                                      "Direct Unit Cost" :=
                                        ROUND(
                                          W„hrungWechKurs.ExchangeAmtFCYToLCY(
                                            WORKDATE,EinkBestKopf."Currency Code",
                                            "Direct Unit Cost",EinkBestKopf."Currency Factor"));
                                      EinkBestBetrag := EinkBestBetragMW;
                                    END;
                                  END;
                                  W„hrungscode2 := EinkBestKopf."Currency Code";
                                  IF Betr„geDruckInMW THEN
                                    W„hrungscode2 := '';
                                  W„hrungSummenPuffer.UpdateTotal(
                                    W„hrungscode2,
                                    EinkBestBetrag,
                                    Z„hler1,
                                    Z„hler1);
                                  IF PrintToExcel THEN
                                    CopyToExcel;
                                END;

               ReqFilterFields=Expected Receipt Date,Promised Receipt Date,Manufacturer Code;
               DataItemLink=Document No.=FIELD(No.) }

    { 17  ;3   ;Column  ;Description_PurchaseLine;
               SourceExpr=Description }

    { 18  ;3   ;Column  ;VendorOrderNo_PurchaseHeader;
               SourceExpr="Purchase Header"."Vendor Order No." }

    { 19  ;3   ;Column  ;EinkBestBetrag      ;
               SourceExpr=EinkBestBetrag;
               AutoFormatType=1;
               AutoFormatExpr="Currency Code" }

    { 20  ;3   ;Column  ;DirectUnitCost_PurchaseLine;
               SourceExpr="Direct Unit Cost";
               AutoFormatType=2;
               AutoFormatExpr="Currency Code" }

    { 21  ;3   ;Column  ;OutstandingQuantity_PurchaseLine;
               SourceExpr="Outstanding Quantity" }

    { 22  ;3   ;Column  ;Quantity_PurchaseLine;
               SourceExpr=Quantity }

    { 23  ;3   ;Column  ;Artikelnr2_PurchaseLine;
               SourceExpr="Artikelnr. 2" }

    { 24  ;3   ;Column  ;PromisedReceiptDate_PurchaseLine;
               SourceExpr="Promised Receipt Date" }

    { 25  ;3   ;Column  ;OrderDate_EinkBestKopf;
               SourceExpr=EinkBestKopf."Order Date" }

    { 26  ;3   ;Column  ;No_EinkBestKopf     ;
               SourceExpr=EinkBestKopf."No." }

    { 27  ;3   ;Column  ;CurrencyCode_EinkBestKopf;
               SourceExpr=EinkBestKopf."Currency Code" }

    { 28  ;1   ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN
                                    OK := W„hrungSummenPuffer.FIND('-')
                                  ELSE
                                    OK := W„hrungSummenPuffer.NEXT <> 0;
                                  IF NOT OK THEN
                                    CurrReport.BREAK;
                                  W„hrungSummenPuffer2.UpdateTotal(
                                    W„hrungSummenPuffer."Currency Code",
                                    W„hrungSummenPuffer."Total Amount",
                                    Z„hler1,
                                    Z„hler1);
                                END;

               OnPostDataItem=BEGIN
                                W„hrungSummenPuffer.DELETEALL;
                              END;
                               }

    { 29  ;2   ;Column  ;TotalAmount_WahrungSummenPuffer;
               SourceExpr=W„hrungSummenPuffer."Total Amount";
               AutoFormatType=1;
               AutoFormatExpr=W„hrungSummenPuffer."Currency Code" }

    { 30  ;2   ;Column  ;Name_Vendor2        ;
               SourceExpr=Vendor.Name }

    { 31  ;2   ;Column  ;CurrencyCode_WahrungSummenPuffer;
               SourceExpr=W„hrungSummenPuffer."Currency Code" }

    { 32  ;    ;DataItem;Integer2            ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN
                                    OK := W„hrungSummenPuffer2.FIND('-')
                                  ELSE
                                    OK := W„hrungSummenPuffer2.NEXT <> 0;
                                  IF NOT OK THEN
                                    CurrReport.BREAK;
                                END;

               OnPostDataItem=BEGIN
                                W„hrungSummenPuffer2.DELETEALL;
                              END;
                               }

    { 33  ;1   ;Column  ;TotalAmount_WahrungSummenPuffer22;
               SourceExpr=W„hrungSummenPuffer2."Total Amount";
               AutoFormatType=1;
               AutoFormatExpr=W„hrungSummenPuffer2."Currency Code" }

    { 34  ;1   ;Column  ;CurrencyCode_WahrungSummenPuffer2;
               SourceExpr=W„hrungSummenPuffer2."Currency Code" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1   ;2   ;Field     ;
                  CaptionML=DEU=Betr„ge in MW anzeigen;
                  SourceExpr=Betr„geDruckInMW }

      { 2   ;2   ;Field     ;
                  CaptionML=DEU=Neue Seite pro Kreditor;
                  SourceExpr=NurEinProSeiteDrucken }

      { 1140001;2;Field     ;
                  CaptionML=DEU=Excel Ausgabe;
                  SourceExpr=PrintToExcel }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      W„hrungWechKurs@1140000 : Record 330;
      W„hrungSummenPuffer@1140001 : TEMPORARY Record 332;
      W„hrungSummenPuffer2@1140002 : TEMPORARY Record 332;
      EinkBestKopf@1140003 : Record 38;
      Betr„geDruckInMW@1140004 : Boolean;
      PeriodeText@1140005 : Text[30];
      NurEinProSeiteDrucken@1140006 : Boolean;
      KredFilter@1140007 : Text[250];
      EinkZeileFilter@1140008 : Text[250];
      RckstandMenge@1140009 : Decimal;
      EinkBestBetrag@1140010 : Decimal;
      EinkBestBetragMW@1140011 : Decimal;
      NeuerAuftrag@1140012 : Boolean;
      OK@1140013 : Boolean;
      Z„hler1@1140014 : Integer;
      W„hrungscode2@1140015 : Code[10];
      PrintToExcel@1140021 : Boolean;
      TempExcelBuffer@1000000010 : TEMPORARY Record 370;
      FileMgt@1000000009 : Codeunit 419;
      ServerFileName@1000000008 : Text;
      SheetName@1000000007 : Text[250];
      DoUpdateExistingWorksheet@1000000006 : Boolean;
      Testmode@1000000005 : Boolean;
      Window@1000000004 : Dialog;
      RecNo@1000000003 : Integer;
      TotalRecNo@1000000002 : Integer;
      RowNo@1000000001 : Integer;
      ColumnNo@1000000000 : Integer;
      Text000@1000000015 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000014 : TextConst 'DEU=Order Overview';
      Text002@1000000013 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text003@1000000012 : TextConst 'DEU=Excel Export erfolgreich abgeschlossen.';
      ExcelFileExtensionTok@1000000011 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionVendor_Header2@5010(VAR Vendor@1000000000 : Record 23);
    BEGIN
      WITH Vendor DO BEGIN
        ReportForNav.ShowOutput(Betr„geDruckInMW);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionVendor_Header3@5011(VAR Vendor@1000000000 : Record 23);
    BEGIN
      WITH Vendor DO BEGIN
        ReportForNav.ShowOutput((ReportForNav.PageNo = 1) AND (KredFilter <> ''));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionVendor_Header4@5012(VAR Vendor@1000000000 : Record 23);
    BEGIN
      WITH Vendor DO BEGIN
        ReportForNav.ShowOutput((ReportForNav.PageNo = 1) AND (EinkZeileFilter <> ''));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionPurchaseLine_Body7@5013(VAR "Purchase Line"@1000000000 : Record 39);
    BEGIN
      WITH "Purchase Line" DO BEGIN
        ReportForNav.ShowOutput((NeuerAuftrag) AND (Betr„geDruckInMW));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionPurchaseLine_Body8@5014(VAR "Purchase Line"@1000000000 : Record 39);
    BEGIN
      WITH "Purchase Line" DO BEGIN
        ReportForNav.ShowOutput((NOT NeuerAuftrag) AND (Betr„geDruckInMW));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionPurchaseLine_Body9@5015(VAR "Purchase Line"@1000000000 : Record 39);
    BEGIN
      WITH "Purchase Line" DO BEGIN
        ReportForNav.ShowOutput((NeuerAuftrag) AND (NOT Betr„geDruckInMW));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionPurchaseLine_Body10@5016(VAR "Purchase Line"@1000000000 : Record 39);
    BEGIN
      WITH "Purchase Line" DO BEGIN
        ReportForNav.ShowOutput((NOT NeuerAuftrag) AND (NOT Betr„geDruckInMW));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionInteger_Body11@5017(VAR Integer@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer DO BEGIN
        ReportForNav.ShowOutput(Betr„geDruckInMW);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionInteger_Body12@5018(VAR Integer@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer DO BEGIN
        ReportForNav.ShowOutput(NOT Betr„geDruckInMW);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionInteger2_Body14@5019(VAR Integer2@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer2 DO BEGIN
        ReportForNav.ShowOutput(Betr„geDruckInMW);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionInteger2_Body15@5020(VAR Integer2@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer2 DO BEGIN
        ReportForNav.ShowOutput(NOT Betr„geDruckInMW);
      END;
    END;

    PROCEDURE CreateExcel@1140000();
    BEGIN
      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;
      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');
      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);
      RowNo := 1;
      //šberschriften
      EnterCell(RowNo,1,'Document No.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Vendor No.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Vendor','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Order Date','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Expected Shipment Date','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Requested Receipt Date','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Promised Receipt Date','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Item No.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'P.O.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Quantity','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'Outstanding Quantity','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'Direct Unit Cost','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'Amount','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,'Currency Code','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'Customer','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 2;
      TotalRecNo := Vendor.COUNT;
    END;

    PROCEDURE CopyToExcel@1140001();
    BEGIN
      ColumnNo := 1;
      EnterCell(RowNo,ColumnNo,"Purchase Header"."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,"Purchase Header"."Buy-from Vendor No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,"Purchase Header"."Buy-from Vendor Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purchase Header"."Order Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purchase Line"."Expected Receipt Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purchase Line"."Requested Receipt Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purchase Line"."Promised Receipt Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,"Purchase Line"."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,"Purchase Header"."Vendor Order No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purchase Line".Quantity),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purchase Line"."Outstanding Quantity"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purchase Line"."Direct Unit Cost"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT(EinkBestBetrag),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,"Purchase Line"."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,"Purchase Line".Description,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
      RecNo := RecNo + 1;
      Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
    END;

    LOCAL PROCEDURE FinishExcel@1000000018(SheetName@1000000000 : Text);
    BEGIN
      Window.CLOSE;
      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN
          TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet(SheetName,COMPANYNAME,USERID);
        //TempExcelBuffer.SetWidth(1,'A',20);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
          //TempExcelBuffer.OpenExcelWithoutAutoFit('','','',TRUE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Vendor': CASE SectionId OF
          'Header2': OnPreSectionVendor_Header2(Vendor);
          'Header3': OnPreSectionVendor_Header3(Vendor);
          'Header4': OnPreSectionVendor_Header4(Vendor);
        END;
        'PurchaseLine': CASE SectionId OF
          'Body7': OnPreSectionPurchaseLine_Body7("Purchase Line");
          'Body8': OnPreSectionPurchaseLine_Body8("Purchase Line");
          'Body9': OnPreSectionPurchaseLine_Body9("Purchase Line");
          'Body10': OnPreSectionPurchaseLine_Body10("Purchase Line");
        END;
        'Integer': CASE SectionId OF
          'Body11': OnPreSectionInteger_Body11(Integer);
          'Body12': OnPreSectionInteger_Body12(Integer);
        END;
        'Integer2': CASE SectionId OF
          'Body14': OnPreSectionInteger2_Body14(Integer2);
          'Body15': OnPreSectionInteger2_Body15(Integer2);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      CASE DataItemId OF
        'Vendor': WITH Vendor DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,EinkBestBetragMW);
              END;
           'Restore': BEGIN
                 EinkBestBetragMW := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'PurchaseLine': WITH "Purchase Line" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,EinkBestBetragMW);
                ReportForNav.AddTotal(DataItemId,1,EinkBestBetrag);
              END;
           'Restore': BEGIN
                 EinkBestBetragMW := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 EinkBestBetrag := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>7nsAAOVd6XLbRhL+v1X7DihWJZaraAr3kZhJUddaG0nUipS92T8qmBxJWIOAAoKKmefJm+TFdgYYkBigB5iBDsve1G5ZxNnXdH/dPTN4+/PnRajco2QZxNGwpw3UnoKiWTwPopthb5Vev3F7P//097+9/Xea+BfoLk7S5Ym/jlfpBCWBHwZ/oETZ/vl+8yBzoA8s8jTmUE858xdo2KNPOoqTM/++p+zHUZrE4XR9h88doPvDz3cJWi4HpZcOLo9LP/W+wrnsnrymX7xVGSoFJX1lfxWmqwThYxFa4VvCvnK++hgGs1/Qehp/QuTquTPzXeTqqnNtIlPF9B8Ey7vQX+d0T8fno8mbPbRMURh+xP/40bynMNxs+DUGWJoDzbTxQ8Yf/4tm6Vk87Fmq6mIxHAUonH9AH7Ho7oMZukzCYe82Te9+2N09G72fHF68f6Ormj34Xf80SOM7fzmYox8c1XR3D9aRvwhmS3yZp+6OD/zU392PF3d+tN55ldH36nVPOfWTmyBaDnu6gTnH/7Oy//eUc/8GvUPBzW2Kz3kOPfIhmKe3+IBGOD7C2hj2RkSnfcW5S7EM7gJ80jILVi+jAF8xRVF6uxxfj06DMAwWKEVJD5uKorzdw2JZZn/iH8cpWmhU7+9RNI+TisJzuRFGyKV7mUjPkyBKx1G4Pr4+QKkfYPGkyQrhOxPkp2gap36IuTsMok9EG3sI6/Pm9AMmlT5m6n8MicLIP7pBCP/tKAgxiZnk8a1n8aA/QX4yu81o6+M3xkmQrnvK8Rwba4+SX+GmxNEFusZKBnl5h/w5SnJOcsbzI1pZlJTFQzz41kQHBYfZ8VP/8ziaoXOU5KeuMbuEez+a3OLznzZHJtiusLlV3pJr+IgMOrVXIh0TT8ldMkdZpkyQqSn6nO7FnwuOmIMOJgSPf/xCAxuaqQ8MFf9nYEpO4plPCDwKYz8l9NjmwPM81+0rrjmw8J+OZZfFQp44CoObaIGIGZ4G83mILgg7mK04+SM7hz1IfoRcPexd4gFzfJArf4LSTMU5lcWZXYhdPWfXkmbX3rDrUHZrjKoZfzXOhr398en56OzXs9HpIUQwcxqk2siptqWptjZUmxZMtOY4mO78VJXufOTnDyQ2eRZD5ENXgVyYORcOyMWJ/xGFLA/ZIbMkdw4HtmfVOdj378g1pyc4uhxeDicoSFHBF/0BEmnlRLrSojaEDAQW9GR6Mbncm0zPxlcf/ARFCIdiP7pZzv10tbg6n6XaFXYLQTxH5HpICbJPAHm3c949ad71rS/QeFrCURBHpYcO++n4YPTrlXplQkIonQT5c3L+NFXKAjUhxTKcMeHUvUv7yjJd49i0F4fzmmn+kqB5kMaJ8kahKGMV3aCo4Jh3usIgZnFC3lHENMoqJv5yiXJ6aPioiWY3kw0bMnaBmJFfqFXDInWpmi4VF/WyvE7QPQpJBFbe+ctxdJ4gGuOYAPkUgVMvBc7MeUtHTg3GAzxrcuWtqWIvozBECkE/f/15g5QgUggGym0FPLUrqlm9qlkadjQYHPA0awCa1Z9fs0ZJs5mY5TUrjxK8jXY1l+cJITfIOPDcW89S/SrHztPR3skhQQdXxBfkkLYlBog9QtgyjKpl0FCuwYiEZxkmYBnG81uG+XDLgDFMk2WQoPNw06AR4A8UhChXMkmH/kN+CtmFwP3CRmFWjYJCJw3GTjyjsACjeMpUySpp3+uQKWkeq9/JrX+HDNggsnMlvePEHL+yTet7cYLpXGbuHArz5KE5LToxKvKzQOKzFIO+kBvktYaUSNfkcPk2IdJ4gcyyAMRbiWbng/GgMPT876YMSIdBBhe6bYGp7vKAqWkD6UO1INKM4FbRfJNc5D+E0BkpUoihM6Mhn9Lh8MyTiW6UDFLt5xlrVSYakQkf0tYEcroK0+AkiDbDtIpZVtekWpMh2MwDvEdJSvH9Xpym8aKWDuSHGfBfe0otSxATuyUqdhMSO3Vzunw2rqvMmAFF7zmNyURN8k1SA4Rcz6tqqqNjcZXMbv0lImeOjg9PDvZH59Pj8dnVQZBgN0PKgfvxEsxFRW8VU5YjqiyrIaXV5fN5bYvUNdWCleUacsPk2ZU1XqXZUAmim3+t/CjNip0SGoPuF1ObJ6o2uyFTN+BMvVFtTrvanFop4oWprZOu5BRkdKwMUAW59ClwPG5U0LYmadi8+GM9goL+uVqmwfUaVJGsQkZJGnxCYZSVLcRVUrpNTCnCgMCFlOLRp8gBAq0ECHSeQuT00QYHTgJ0jRIiydVCHAucoOsNFGCfUBpx2UViwhaGAZ5oSmRVUyIafgwYK+zF83U5ISK/bSAdsh6U9tCnPijp4eQ3jWCn3HvgJAiaCSQIjGl50FAf9sj7rorOYn1Alk+L2YIragtNKZTRoXJuMoNPtG3QLqNaYT0fPdWRUsgzbpJmLCVLUxWVpd4+rvDhzJnsx+FqEdEXaOwD6ziCYgjWO+fpv0Ajuvh1ThopKWkNF7LhtqihFjSxqeL4STY691brN9dJvFDy5yln8WCYxYsd/NdroGFNrxuTegC5ug88gTavrcqgrnawSyO6HrQ6CaUm18Y2fZ89wBGZVzn+PkC/D3uT8cX0+OwfOwfxbEVMWiFk9s/99Zs0Lkmiv79KMHGzNeZmjl4rH94dXhyyNw33x2eT6U4m0Nd9KpYSyFUKEIX1cjI9vNj5Pkx//P4m/VF9/bqqzc2DuWokksEPLaJeufgGKPsc6zVYojk+M0PBXUpeh6h2bWDoQRouaTkfKjAUgAKPU/YvTSXZ7lHIKUehWrNlQz8nHoH8yZfotW0/z8SwxgThjmnQuTPVWuwBWs6SIAMzV+wIqvtN/rVVd8iwRoOJCWMGHoqztmzZnDiie5gpTQLGVVDbfYHMhj3yJ4cHTlAQSOM39wPBoSIjWg404bSeW7MsIV2DH2wfIKJth7aQVOmInMAEEmhWYNUaISMwWiu05Frflt0++8IgGM5qLvIeXl4U8sj+bLR/Wl+zJOvRbjupqvPIpFJ4b+lAS4DTGwNaAhZkhFUymaZAXvTPH0sQXe5Vcqq3vydpgtLZbeG8R6QzUIf/rCFuewuWwfQWWhwXWMphZEVLOpb8TDOthJFNXqtBlxy48hg5BxoZdMCIuIp+6u6/8XopX2AJZKqsJqo1G0YTtHZjyRewTZPpHcCjLCveVM2XjigAA7JCq17ROPxovcOST05Nrb175WlcPthCdjsQaLq8kUNNpSx2mI/mMYVQkEWXzyJQ+W3ls/2eZmYpqLPk02jDbWfW9rjMCnPYiS0K6Gz5Yraxjb8WrzrQMNy25cdWxriXNrNWTEyFY3UjayVXYvCnQ0CMybntIq2iWRVJqlql0X5Ps1go2rLlq+OG0V4PImVz6ViHRyeJRBkrhZP9Jb67BscxfKVUzLIFStmb+/PKWrXbysqUwkJbHj8Yejt+yCqR8jLFgb1NmNVL5KQoHfm1ahu0ONmYVdeLbLYNvwmugm7UVPg6OCRDdQdXfiJo9wqEW5769SgVCFs+MtvCFYgvWoCw4TDMzRUFZupnuWLT3Fap7IsGH0cypzUEE8VHo7NY9yAfJC1LFG8DlvLIYJv6X0c+plm6INiGzP25kDZN5R14Nncje6og0AbY+wIom+bhjnwcNQUyigxkA4w+KcKmCa0jXww2HUGADbD05OiaprdOhzzdEgLX7atxXgyylsYvjtOEX6DiMhNT4KgO4RdPfrlDd/ziPXoHxZFPtm396+iguHLAwNRfdAfFFZiw1W7kVUN35SZUm+rX00FxpTNQkQ6KKx83da1ja4KuHqZdbdLUbs02Gy4WQXeuBXUyYBch3MngL254jj6Ga0v3MeAUmgWKrnzR2VD/z/sYrsAsK1YTIh0lVz6COSK5Kpnb/QVHJAW1nnzV2DFeYpfGk09/HfXr6tJ48rmxLdC4eJldGk8+U7adl9+l8eTju20/Uc1ezq8/b33fk69MN+LRopXkyWe7tsD8gBda3/ekp0VpjSC16Dx5HarSxgvvNVKI6nVIWNVvsNcoXRHJNvril0Qgu2LW+qtwAIdqIuxAE1vp370oQt72yF0dTe0Qyq2voq2jqfKBW9e79EyeESwXO5WoHfYxswRzgS/F22b8yZe3Le9bqwNXtppQO2yJ5r6cnppdsNGhmCA6g+1LNtU2G27JwxFddPray+iquQWnHZaAic5de+62mlfsISZfgtBFJ649a19NHjJpWhNkqk9YersLr8p5mz+1YbnOJMYMILK9LRPg6fof5+E4gGKA8nu+/20Vpz8Wtyp5SS8/OMj/qS5Ay49SolzpaiGfMIMhrOpER6s0xva18NPcALXyoTIvzAowhlivq7OmMbgut9wtKsQvKsQxFq+rEqtLE0v2CXkEN0wjZZ1yaMEb837t8TwkjXNlIra7G2QvA5fUy77BAdjceIeBojPsGQ/2JdTnA4MJWsTHvBzcubIbHKJeGho5BFfS0ZoP3hodlkRliP92TW17fcVrkMjQXkRpeKHW9kL+sAK9qBQsJxEEcuTQrMh6LKivzaB2lFNyHKXo5oErlMG9sNX8v0L0nNW1Z6vFR5QUy2bzX8UyWG0wIAtgMym64iuN6cag4otQNWa77CcqF2iN+/9l5DfgBJY1+ZzMFe7OSGwpmyOnbO31aBGvovTqg3+brKKbyWqB87jz1fU13NxruwUGStBOs8S6REqZYhOINV0+JXK2QJq740QdSLcLVnaP4tLuE2BsY85LCFiwe8qb/NGAfgHkS/Iv+R0wNM6OTeBY77AF8ANGvf54o96Qb2W6wivnvq5RT9ZWPOKoN+Rrk44nUL+rzTsXESyDDAQl23qPhGjNh433SmnUkA9Vjv1NO1RDKmLV+yNyDtUAJqTCqmPVBpfOjuI4ZXfTzY9oTAeL8YLbC+russm5lua0Fv7TqHWSoMIHp+gBFDw+/PVnbaRQNJ+5KiX3VbwMGygHNDyRnx+ANYJW98r5zkiZv9w2B+SB+asMMMNn7ZyzD66g3LhcGmBy3+7r6vtCV5Vb3ZmuahOAPQC2UHy+JdMIRCr0fRdA5sxXVTLGQb55314BpF3+0Mmg+NIJeTKY0rd9FgWoK2036t55Vf+Kxw/Kd9qrfukrHjQhAxP5h3wPBKgbHY0vTkfTnewDG30cCeirwVye8xUOoBBU5vc7DfOnv+rTobLZsL6/3bCevhTM4h+09z1QQSqTVt63KVdCZdN0ShhYD+2++Tq/xlQUbElliJZry9tO7jTVJymtoKsT3vO3RqbXnUx+MZKSqoG+Um7L2xrBlbqVIMXFAwvKQFcqsKtrnRytuwDrZc6CvM6blQIEss51G8k00K2WIhn0MAPgttpdAJ1qaZ/C3VKcYQMLm2vQ0MCU2ODJHXCN7b2fVO99+iKbUcKxjR+j0zi7uIAJt/kMxTXzET67Il/6cbstlBWZAtiC/+D2RftN9ZQBSlGsR9mXVOPsqML9RpHI3ALJfeory3wyATEiFpSI/dS7i2o2uL0o97NXnE0+wAEIfevk6Spe1sOHoi1fj3Htb3Mo2gLlGIGhaMNlGO5QFFk7/6WGokD9RKDCwdkrpNHG1C5z9kRMrC0PBk2s/SZBgQp7e6Orb/Mg36aXoFSXlB0qQ+iPX7/RW0sbIBYV8BotpYRuxIAAVsC+2oBtrq2tpt7uNnyo+6f/AQ==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

