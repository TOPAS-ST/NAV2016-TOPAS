OBJECT Report 50082 TOPAS-Bestellbestand
{
  OBJECT-PROPERTIES
  {
    Date=18.10.21;
    Time=09:35:59;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  KredFilter := Vendor.GETFILTERS;
                  EinkZeileFilter := "Purchase Line".GETFILTERS;
                  PeriodeText := "Purchase Line".GETFILTER("Expected Receipt Date");
                  IF PrintToExcel THEN
                    CreateExcel;
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                   IF PrintToExcel THEN
                     FinishExcel(Text001);
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table23;
               PrintOnlyIfDetail=Yes;
               OnPreDataItem=BEGIN
                               ReportForNav.GetDataItem('Vendor').NewPagePerRecord := NurEinProSeiteDrucken;
                             END;

               ReqFilterFields=No.,Search Name,Priority }

    { 2   ;1   ;Column  ;USERID              ;
               SourceExpr=USERID }

    { 3   ;1   ;Column  ;COMPANYNAME         ;
               SourceExpr=COMPANYNAME }

    { 4   ;1   ;Column  ;ReportForNavPageNo  ;
               SourceExpr=ReportForNav.PageNo }

    { 5   ;1   ;Column  ;STRSUBSTNO_Wareneingangsdatum_Pct1_PeriodeText;
               SourceExpr=STRSUBSTNO('Wareneingangsdatum: %1',PeriodeText) }

    { 6   ;1   ;Column  ;TODAY_0_4           ;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 7   ;1   ;Column  ;STRSUBSTNO_Pct1_Pct2_VendorTABLENAME_KredFilter;
               SourceExpr=STRSUBSTNO('%1: %2',Vendor.TABLENAME,KredFilter) }

    { 8   ;1   ;Column  ;STRSUBSTNO_Bestellzeile_Pct1_EinkZeileFilter;
               SourceExpr=STRSUBSTNO('Bestellzeile: %1',EinkZeileFilter) }

    { 9   ;1   ;Column  ;PurchaseLineFIELDCAPTION_DirectUnitCost;
               SourceExpr="Purchase Line".FIELDCAPTION("Direct Unit Cost") }

    { 10  ;1   ;Column  ;PurchaseLineFIELDCAPTION_OutstandingQuantity;
               SourceExpr="Purchase Line".FIELDCAPTION("Outstanding Quantity") }

    { 11  ;1   ;Column  ;PurchaseLineFIELDCAPTION_Quantity;
               SourceExpr="Purchase Line".FIELDCAPTION(Quantity) }

    { 12  ;1   ;Column  ;PurchaseLineFIELDCAPTION_Artikelnr2;
               SourceExpr="Purchase Line".FIELDCAPTION("Artikelnr. 2") }

    { 13  ;1   ;Column  ;Name_Vendor         ;
               SourceExpr=Name }

    { 14  ;1   ;Column  ;No_Vendor           ;
               SourceExpr="No." }

    { 15  ;1   ;DataItem;                    ;
               DataItemTable=Table38;
               PrintOnlyIfDetail=Yes;
               ReqFilterFields=Vendor Order No.,Buy-from Vendor No.;
               DataItemLink=Buy-from Vendor No.=FIELD(No.) }

    { 16  ;2   ;DataItem;                    ;
               DataItemTable=Table39;
               DataItemTableView=SORTING(Document Type,Pay-to Vendor No.,Currency Code)
                                 WHERE(Document Type=CONST(Order),
                                       Outstanding Quantity=FILTER(<>0));
               ReqFilterHeadingML=DEU=Bestellzeile;
               OnAfterGetRecord=BEGIN
                                  NeuerAuftrag := "Document No." <> EinkBestKopf."No.";
                                  IF NeuerAuftrag THEN
                                    EinkBestKopf.GET(EinkBestKopf."Document Type"::Order,"Document No.");
                                  IF "Expected Receipt Date" <= WORKDATE THEN
                                    RckstandMenge := "Outstanding Quantity"
                                  ELSE
                                    RckstandMenge := 0;
                                  EinkBestBetrag := ROUND("Outstanding Quantity" * "Line Amount" / Quantity);
                                  EinkBestBetragMW := EinkBestBetrag;
                                  IF Vendor."Currency Code" <> '' THEN BEGIN
                                    IF EinkBestKopf."Currency Factor" <> 0 THEN
                                      EinkBestBetragMW :=
                                        ROUND(
                                          W„hrungWechKurs.ExchangeAmtFCYToLCY(
                                            WORKDATE,EinkBestKopf."Currency Code",
                                            EinkBestBetragMW,EinkBestKopf."Currency Factor"));
                                    IF Betr„geDruckInMW THEN BEGIN
                                      "Direct Unit Cost" :=
                                        ROUND(
                                          W„hrungWechKurs.ExchangeAmtFCYToLCY(
                                            WORKDATE,EinkBestKopf."Currency Code",
                                            "Direct Unit Cost",EinkBestKopf."Currency Factor"));
                                      EinkBestBetrag := EinkBestBetragMW;
                                    END;
                                  END;
                                  W„hrungscode2 := EinkBestKopf."Currency Code";
                                  IF Betr„geDruckInMW THEN
                                    W„hrungscode2 := '';
                                  W„hrungSummenPuffer.UpdateTotal(
                                    W„hrungscode2,
                                    EinkBestBetrag,
                                    Z„hler1,
                                    Z„hler1);
                                  IF PrintToExcel THEN
                                    CopyToExcel;
                                END;

               ReqFilterFields=Expected Receipt Date,Promised Receipt Date,Manufacturer Code;
               DataItemLink=Document No.=FIELD(No.) }

    { 17  ;3   ;Column  ;Description_PurchaseLine;
               SourceExpr=Description }

    { 18  ;3   ;Column  ;VendorOrderNo_PurchaseHeader;
               SourceExpr="Purchase Header"."Vendor Order No." }

    { 19  ;3   ;Column  ;EinkBestBetrag      ;
               SourceExpr=EinkBestBetrag;
               AutoFormatType=1;
               AutoFormatExpr="Currency Code" }

    { 20  ;3   ;Column  ;DirectUnitCost_PurchaseLine;
               SourceExpr="Direct Unit Cost";
               AutoFormatType=2;
               AutoFormatExpr="Currency Code" }

    { 21  ;3   ;Column  ;OutstandingQuantity_PurchaseLine;
               SourceExpr="Outstanding Quantity" }

    { 22  ;3   ;Column  ;Quantity_PurchaseLine;
               SourceExpr=Quantity }

    { 23  ;3   ;Column  ;Artikelnr2_PurchaseLine;
               SourceExpr="Artikelnr. 2" }

    { 24  ;3   ;Column  ;PromisedReceiptDate_PurchaseLine;
               SourceExpr="Promised Receipt Date" }

    { 25  ;3   ;Column  ;OrderDate_EinkBestKopf;
               SourceExpr=EinkBestKopf."Order Date" }

    { 26  ;3   ;Column  ;No_EinkBestKopf     ;
               SourceExpr=EinkBestKopf."No." }

    { 27  ;3   ;Column  ;CurrencyCode_EinkBestKopf;
               SourceExpr=EinkBestKopf."Currency Code" }

    { 28  ;1   ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN
                                    OK := W„hrungSummenPuffer.FIND('-')
                                  ELSE
                                    OK := W„hrungSummenPuffer.NEXT <> 0;
                                  IF NOT OK THEN
                                    CurrReport.BREAK;
                                  W„hrungSummenPuffer2.UpdateTotal(
                                    W„hrungSummenPuffer."Currency Code",
                                    W„hrungSummenPuffer."Total Amount",
                                    Z„hler1,
                                    Z„hler1);
                                END;

               OnPostDataItem=BEGIN
                                W„hrungSummenPuffer.DELETEALL;
                              END;
                               }

    { 29  ;2   ;Column  ;TotalAmount_WahrungSummenPuffer;
               SourceExpr=W„hrungSummenPuffer."Total Amount";
               AutoFormatType=1;
               AutoFormatExpr=W„hrungSummenPuffer."Currency Code" }

    { 30  ;2   ;Column  ;Name_Vendor2        ;
               SourceExpr=Vendor.Name }

    { 31  ;2   ;Column  ;CurrencyCode_WahrungSummenPuffer;
               SourceExpr=W„hrungSummenPuffer."Currency Code" }

    { 32  ;    ;DataItem;Integer2            ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(1..));
               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN
                                    OK := W„hrungSummenPuffer2.FIND('-')
                                  ELSE
                                    OK := W„hrungSummenPuffer2.NEXT <> 0;
                                  IF NOT OK THEN
                                    CurrReport.BREAK;
                                END;

               OnPostDataItem=BEGIN
                                W„hrungSummenPuffer2.DELETEALL;
                              END;
                               }

    { 33  ;1   ;Column  ;TotalAmount_WahrungSummenPuffer22;
               SourceExpr=W„hrungSummenPuffer2."Total Amount";
               AutoFormatType=1;
               AutoFormatExpr=W„hrungSummenPuffer2."Currency Code" }

    { 34  ;1   ;Column  ;CurrencyCode_WahrungSummenPuffer2;
               SourceExpr=W„hrungSummenPuffer2."Currency Code" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1   ;2   ;Field     ;
                  CaptionML=DEU=Betr„ge in MW anzeigen;
                  SourceExpr=Betr„geDruckInMW }

      { 2   ;2   ;Field     ;
                  CaptionML=DEU=Neue Seite pro Kreditor;
                  SourceExpr=NurEinProSeiteDrucken }

      { 1140001;2;Field     ;
                  CaptionML=DEU=Excel Ausgabe;
                  SourceExpr=PrintToExcel }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      W„hrungWechKurs@1140000 : Record 330;
      W„hrungSummenPuffer@1140001 : TEMPORARY Record 332;
      W„hrungSummenPuffer2@1140002 : TEMPORARY Record 332;
      EinkBestKopf@1140003 : Record 38;
      Betr„geDruckInMW@1140004 : Boolean;
      PeriodeText@1140005 : Text[30];
      NurEinProSeiteDrucken@1140006 : Boolean;
      KredFilter@1140007 : Text[250];
      EinkZeileFilter@1140008 : Text[250];
      RckstandMenge@1140009 : Decimal;
      EinkBestBetrag@1140010 : Decimal;
      EinkBestBetragMW@1140011 : Decimal;
      NeuerAuftrag@1140012 : Boolean;
      OK@1140013 : Boolean;
      Z„hler1@1140014 : Integer;
      W„hrungscode2@1140015 : Code[10];
      PrintToExcel@1140021 : Boolean;
      TempExcelBuffer@1000000010 : TEMPORARY Record 370;
      FileMgt@1000000009 : Codeunit 419;
      ServerFileName@1000000008 : Text;
      SheetName@1000000007 : Text[250];
      DoUpdateExistingWorksheet@1000000006 : Boolean;
      Testmode@1000000005 : Boolean;
      Window@1000000004 : Dialog;
      RecNo@1000000003 : Integer;
      TotalRecNo@1000000002 : Integer;
      RowNo@1000000001 : Integer;
      ColumnNo@1000000000 : Integer;
      Text000@1000000015 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000014 : TextConst 'DEU=Order Overview';
      Text002@1000000013 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text003@1000000012 : TextConst 'DEU=Excel Export erfolgreich abgeschlossen.';
      ExcelFileExtensionTok@1000000011 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionVendor_Header2@5010(VAR Vendor@1000000000 : Record 23);
    BEGIN
      WITH Vendor DO BEGIN
        ReportForNav.ShowOutput(Betr„geDruckInMW);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionVendor_Header3@5011(VAR Vendor@1000000000 : Record 23);
    BEGIN
      WITH Vendor DO BEGIN
        ReportForNav.ShowOutput((ReportForNav.PageNo = 1) AND (KredFilter <> ''));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionVendor_Header4@5012(VAR Vendor@1000000000 : Record 23);
    BEGIN
      WITH Vendor DO BEGIN
        ReportForNav.ShowOutput((ReportForNav.PageNo = 1) AND (EinkZeileFilter <> ''));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionPurchaseLine_Body7@5013(VAR "Purchase Line"@1000000000 : Record 39);
    BEGIN
      WITH "Purchase Line" DO BEGIN
        ReportForNav.ShowOutput((NeuerAuftrag) AND (Betr„geDruckInMW));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionPurchaseLine_Body8@5014(VAR "Purchase Line"@1000000000 : Record 39);
    BEGIN
      WITH "Purchase Line" DO BEGIN
        ReportForNav.ShowOutput((NOT NeuerAuftrag) AND (Betr„geDruckInMW));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionPurchaseLine_Body9@5015(VAR "Purchase Line"@1000000000 : Record 39);
    BEGIN
      WITH "Purchase Line" DO BEGIN
        ReportForNav.ShowOutput((NeuerAuftrag) AND (NOT Betr„geDruckInMW));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionPurchaseLine_Body10@5016(VAR "Purchase Line"@1000000000 : Record 39);
    BEGIN
      WITH "Purchase Line" DO BEGIN
        ReportForNav.ShowOutput((NOT NeuerAuftrag) AND (NOT Betr„geDruckInMW));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionInteger_Body11@5017(VAR Integer@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer DO BEGIN
        ReportForNav.ShowOutput(Betr„geDruckInMW);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionInteger_Body12@5018(VAR Integer@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer DO BEGIN
        ReportForNav.ShowOutput(NOT Betr„geDruckInMW);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionInteger2_Body14@5019(VAR Integer2@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer2 DO BEGIN
        ReportForNav.ShowOutput(Betr„geDruckInMW);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionInteger2_Body15@5020(VAR Integer2@1000000000 : Record 2000000026);
    BEGIN
      WITH Integer2 DO BEGIN
        ReportForNav.ShowOutput(NOT Betr„geDruckInMW);
      END;
    END;

    PROCEDURE CreateExcel@1140000();
    BEGIN
      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;
      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');
      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);
      RowNo := 1;
      //šberschriften
      EnterCell(RowNo,1,'Document No.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Vendor No.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Vendor','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Order Date','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Expected Shipment Date','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Requested Receipt Date','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Promised Receipt Date','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Item No.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'P.O.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Quantity','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'Outstanding Quantity','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'Direct Unit Cost','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'Amount','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,'Currency Code','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'Customer','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 2;
      TotalRecNo := Vendor.COUNT;
    END;

    PROCEDURE CopyToExcel@1140001();
    BEGIN
      ColumnNo := 1;
      EnterCell(RowNo,ColumnNo,"Purchase Header"."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,"Purchase Header"."Buy-from Vendor No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,"Purchase Header"."Buy-from Vendor Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purchase Header"."Order Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purchase Line"."Expected Receipt Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purchase Line"."Requested Receipt Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purchase Line"."Promised Receipt Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,"Purchase Line"."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,"Purchase Header"."Vendor Order No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purchase Line".Quantity),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purchase Line"."Outstanding Quantity"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purchase Line"."Direct Unit Cost"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT(EinkBestBetrag),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,"Purchase Line"."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,"Purchase Line".Description,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
      RecNo := RecNo + 1;
      Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
    END;

    LOCAL PROCEDURE FinishExcel@1000000018(SheetName@1000000000 : Text);
    BEGIN
      Window.CLOSE;
      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN
          TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet(SheetName,COMPANYNAME,USERID);
        //TempExcelBuffer.SetWidth(1,'A',20);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
          //TempExcelBuffer.OpenExcelWithoutAutoFit('','','',TRUE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Vendor': CASE SectionId OF
          'Header2': OnPreSectionVendor_Header2(Vendor);
          'Header3': OnPreSectionVendor_Header3(Vendor);
          'Header4': OnPreSectionVendor_Header4(Vendor);
        END;
        'PurchaseLine': CASE SectionId OF
          'Body7': OnPreSectionPurchaseLine_Body7("Purchase Line");
          'Body8': OnPreSectionPurchaseLine_Body8("Purchase Line");
          'Body9': OnPreSectionPurchaseLine_Body9("Purchase Line");
          'Body10': OnPreSectionPurchaseLine_Body10("Purchase Line");
        END;
        'Integer': CASE SectionId OF
          'Body11': OnPreSectionInteger_Body11(Integer);
          'Body12': OnPreSectionInteger_Body12(Integer);
        END;
        'Integer2': CASE SectionId OF
          'Body14': OnPreSectionInteger2_Body14(Integer2);
          'Body15': OnPreSectionInteger2_Body15(Integer2);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
      ForNavOperation@1000000009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Vendor': WITH Vendor DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,EinkBestBetragMW);
              END;
           'Restore': BEGIN
                 EinkBestBetragMW := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'PurchaseLine': WITH "Purchase Line" DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,EinkBestBetragMW);
                ReportForNav.AddTotal(DataItemId,1,EinkBestBetrag);
              END;
           'Restore': BEGIN
                 EinkBestBetragMW := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 EinkBestBetrag := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

