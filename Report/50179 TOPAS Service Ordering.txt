OBJECT Report 50179 TOPAS Service Ordering
{
  OBJECT-PROPERTIES
  {
    Date=04.06.18;
    Time=17:03:09;
    Modified=Yes;
    Version List=fertig,FORNAV3.1.0.1460/1460;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   FIBUEinrichtung.GET;
                                                                                                                               ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1)) }

    { 2   ;1   ;DataItem;                    ;
               DataItemTable=Table50024;
               DataItemTableView=SORTING(Wartungsvertragsnr.,Service Artikelnr.)
                                 WHERE(Art=FILTER(Service),
                                       Inaktiv=FILTER(No));
               OnPreDataItem=BEGIN
                               Firmendaten.GET;
                               Firmendaten.CALCFIELDS("ISO Logo","Systeme Logo");
                               Nummer := 0;
                               TotalText := '';
                               //CREATETOTALS(champ_price_total);
                             END;

               OnAfterGetRecord=BEGIN
                                  PurchHeader.RESET;
                                  PurchHeader.SETRANGE("No.","Serviceleist. & Leihstellungen"."BET-Nr.");
                                  IF PurchHeader.FINDFIRST THEN BEGIN
                                    w„hcode  := PurchHeader."Currency Code";
                                    termcode := PurchHeader."Payment Terms Code";
                                    shipcode := PurchHeader."Shipment Method Code";
                                    orderno  := PurchHeader."No.";
                                    vendorno := PurchHeader."Buy-from Vendor No.";
                                    docdate  := PurchHeader."Document Date";
                                    FormatAdr.PurchHeaderBuyFrom(EinkVonAdr,PurchHeader);
                                    CurrReport.LANGUAGE := Language.GetLanguageID(PurchHeader."Language Code");
                                  END ELSE BEGIN
                                    PurchShipHeader.RESET;
                                    PurchShipHeader.SETRANGE("Order No.","Serviceleist. & Leihstellungen"."BET-Nr.");
                                    IF PurchShipHeader.FINDLAST THEN BEGIN
                                      w„hcode  := PurchShipHeader."Currency Code";
                                      termcode := PurchShipHeader."Payment Terms Code";
                                      shipcode := PurchShipHeader."Shipment Method Code";
                                      orderno  := PurchShipHeader."Order No.";
                                      vendorno := PurchShipHeader."Buy-from Vendor No.";
                                      docdate  := PurchShipHeader."Document Date";
                                      FormatAdr.PurchRcptBuyFrom(EinkVonAdr,PurchShipHeader);
                                      CurrReport.LANGUAGE := Language.GetLanguageID(PurchShipHeader."Language Code");
                                    END ELSE
                                      ERROR('Bestellung konnte nicht gefunden werden.');
                                  END;

                                  TOPAS_Funktionen.GetCompanyInformation(CompanyInfo,Firmendaten);
                                  service_price_total := service_price_total + (Menge * "Service DC");
                                  IF termcode = '' THEN
                                    ZlgBed.INIT
                                  ELSE
                                    ZlgBed.GET(termcode);
                                  IF shipcode = '' THEN
                                    LieferBed.INIT
                                  ELSE
                                    LieferBed.GET(shipcode);
                                  IF w„hcode = '' THEN BEGIN
                                    FIBUEinrichtung.TESTFIELD("LCY Code");
                                    TotalText := STRSUBSTNO('Total %1',FIBUEinrichtung."LCY Code");
                                  END ELSE BEGIN
                                    TotalText := STRSUBSTNO('Total %1',w„hcode);
                                  END;
                                  Artikel.GET("SUP Artikelnr.");
                                  IF Artikel.Artikelgruppe = 'CHAMPS' THEN
                                    header_zusatz := 'Champs'
                                  ELSE
                                    IF (Artikel.Artikelgruppe = 'ACTS') OR (Artikel.Artikelgruppe = 'ACTS_AHR') OR (Artikel.Artikelgruppe = 'ACTS/ACHAT')
                                    OR (Artikel.Artikelgruppe = 'ACTS_SCHAEFFLER') OR (Artikel.Artikelgruppe = 'ACTS_MSS_SCHAEFFLER')
                                    OR (Artikel.Artikelgruppe = 'ACTS_MSS') OR (Artikel.Artikelgruppe = 'ACHAT') THEN
                                      header_zusatz := 'ACTS'
                                    ELSE
                                      header_zusatz := '';

                                  seriennr := "Seriennr.";

                                  IF Artikel.GET("Artikelnr.") THEN BEGIN
                                    IF "Seriennr." <> '' THEN BEGIN
                                      IF (Artikel."Item Tracking Code" = 'PRODUCTKEY') OR ((Artikel."Item Tracking Code" = 'SN-ODER-PK') AND (STRPOS("Seriennr.",'NODATA') <> 0)) THEN
                                        seriennr := "Product Key";
                                    END ELSE BEGIN
                                      IF Artikel."Item Tracking Code" = 'PRODUCTKEY' THEN
                                        seriennr := "Product Key";
                                      IF (Artikel.Serviceklassifizierung = 'SOFTWARE') OR (Artikel.Serviceklassifizierung = 'KEINE') THEN BEGIN
                                        ServiceOrderPos.RESET;
                                        ServiceOrderPos.SETRANGE("Wartungsvertragsnr.","Wartungsvertragsnr.");
                                        ServiceOrderPos.SETRANGE(Basisger„t,TRUE);
                                        ServiceOrderPos.SETRANGE("Geh”rt zu Lfd. Nr.","Geh”rt zu Lfd. Nr.");
                                        IF ServiceOrderPos.FINDFIRST THEN BEGIN
                                          IF Artikel.GET(ServiceOrderPos."Artikelnr.") THEN BEGIN
                                            IF Artikel."Item Tracking Code" = 'PRODUCTKEY' THEN
                                              seriennr := ServiceOrderPos."Product Key"
                                            ELSE
                                              seriennr := ServiceOrderPos."Seriennr.";
                                          END;
                                        END;
                                      END;
                                    END;
                                  END;

                                  IF STRPOS(seriennr,'S/N: ') = 1 THEN
                                    seriennr := COPYSTR(seriennr,STRLEN('S/N: ')+1);
                                  IF STRPOS(seriennr,'S/N:') = 1 THEN
                                    seriennr := COPYSTR(seriennr,STRLEN('S/N:')+1);
                                  IF Fremderwerb THEN
                                    seriennr := seriennr + '*';
                                END;

               ReqFilterFields=BET-Nr. }

    { 3   ;2   ;Column  ;SystemeLogo_Firmendaten;
               SourceExpr=Firmendaten."Systeme Logo" }

    { 4   ;2   ;Column  ;ISOLogo_Firmendaten ;
               SourceExpr=Firmendaten."ISO Logo" }

    { 1000000000;2;Column;CompanyName        ;
               SourceExpr=CompanyInfo[1] }

    { 1000000001;2;Column;CompanyAddress     ;
               SourceExpr=CompanyInfo[2]+ ', ' + CompanyInfo[4] +  ' ' + CompanyInfo[5] }

    { 1000000005;2;Column;CompanyPhone       ;
               SourceExpr=CompanyInfo[6] }

    { 1000000006;2;Column;CompanyFax         ;
               SourceExpr=CompanyInfo[7] }

    { 1000000007;2;Column;CompanyVATRegNo    ;
               SourceExpr=CompanyInfo[8] }

    { 1000000008;2;Column;CompanyRegNo       ;
               SourceExpr=CompanyInfo[9] }

    { 1000000009;2;Column;CompanyVorstand    ;
               SourceExpr=CompanyInfo[10] }

    { 1000000010;2;Column;CompanyARV         ;
               SourceExpr=CompanyInfo[11] }

    { 1000000011;2;Column;CompanyAmtsgericht ;
               SourceExpr=CompanyInfo[12] }

    { 1000000012;2;Column;CompanyWEEERegNo   ;
               SourceExpr=CompanyInfo[13] }

    { 1000000013;2;Column;CompanyPostfach    ;
               SourceExpr=CompanyInfo[14] }

    { 1000000002;2;Column;CompanyHomepage    ;
               SourceExpr=CompanyInfo[15] }

    { 5   ;2   ;Column  ;header_zusatz_PurchaseOrder;
               SourceExpr=header_zusatz + ' Purchase Order' }

    { 6   ;2   ;Column  ;EinkVonAdr8         ;
               SourceExpr=EinkVonAdr[8] }

    { 7   ;2   ;Column  ;EinkVonAdr7         ;
               SourceExpr=EinkVonAdr[7] }

    { 8   ;2   ;Column  ;EinkVonAdr6         ;
               SourceExpr=EinkVonAdr[6] }

    { 9   ;2   ;Column  ;EinkVonAdr5         ;
               SourceExpr=EinkVonAdr[5] }

    { 10  ;2   ;Column  ;EinkVonAdr4         ;
               SourceExpr=EinkVonAdr[4] }

    { 11  ;2   ;Column  ;EinkVonAdr3         ;
               SourceExpr=EinkVonAdr[3] }

    { 12  ;2   ;Column  ;EinkVonAdr2         ;
               SourceExpr=EinkVonAdr[2] }

    { 13  ;2   ;Column  ;EinkVonAdr1         ;
               SourceExpr=EinkVonAdr[1] }

    { 14  ;2   ;Column  ;vendorno            ;
               SourceExpr=vendorno }

    { 15  ;2   ;Column  ;orderno             ;
               SourceExpr=orderno }

    { 16  ;2   ;Column  ;docdate             ;
               SourceExpr=docdate }

    { 17  ;2   ;Column  ;STRSUBSTNO_PagePct1_FORMAT_ReportForNavPageNo_;
               SourceExpr=STRSUBSTNO('Page %1',FORMAT(ReportForNav.PageNo)) }

    { 18  ;2   ;Column  ;service_price_total ;
               SourceExpr=service_price_total }

    { 19  ;2   ;Column  ;endkunde            ;
               SourceExpr=endkunde }

    { 20  ;2   ;Column  ;Debitorname_Serviceleist_Leihstellungen;
               SourceExpr=Debitorname }

    { 21  ;2   ;Column  ;Nummer              ;
               SourceExpr=Nummer }

    { 22  ;2   ;Column  ;ServiceArtikelnr_Serviceleist_Leihstellungen;
               SourceExpr="Service Artikelnr." }

    { 23  ;2   ;Column  ;TotalText           ;
               SourceExpr=TotalText }

    { 24  ;2   ;DataItem;                    ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(No.);
               DataItemLink=No.=FIELD(Artikelnr.) }

    { 25  ;3   ;Column  ;Menge_Serviceleist_Leihstellungen;
               DecimalPlaces=0:0;
               SourceExpr="Serviceleist. & Leihstellungen".Menge }

    { 26  ;3   ;Column  ;Serviceleist_LeihstellungenLizenzdatum__FORMAT_Serviceleist_;
               DecimalPlaces=0:0;
               SourceExpr=FORMAT("Serviceleist. & Leihstellungen".Lizenzdatum)+'...'+FORMAT("Serviceleist. & Leihstellungen"."Ablaufdatum Serviceleistung") }

    { 27  ;3   ;Column  ;Serviceleist_LeihstellungenMenge_Serviceleist_Leihstellungen;
               SourceExpr="Serviceleist. & Leihstellungen".Menge*"Serviceleist. & Leihstellungen"."Service DC" }

    { 28  ;3   ;Column  ;ServiceDC_Serviceleist_Leihstellungen;
               SourceExpr="Serviceleist. & Leihstellungen"."Service DC" }

    { 29  ;3   ;Column  ;Artikelnr2_Serviceleist_Leihstellungen;
               SourceExpr="Serviceleist. & Leihstellungen"."Artikelnr. 2" }

    { 30  ;3   ;Column  ;seriennr            ;
               SourceExpr=seriennr }

    { 31  ;3   ;Column  ;quotenr             ;
               DecimalPlaces=0:0;
               SourceExpr=quotenr }

    { 32  ;2   ;DataItem;KopieSchleife       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnAfterGetRecord=BEGIN
                                  //IF (STRPOS("Serviceleist. & Leihstellungen"."SUP Artikelnr.",'ACTS')=0) THEN CurrReport.SKIP;
                                END;
                                 }

    { 33  ;1   ;DataItem;SeiteSchleife       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1)) }

    { 34  ;2   ;DataItem;TOPAS Bemerkungen unten;
               DataItemTable=Table50023;
               DataItemTableView=SORTING(Nr.,Art,Artikelnr.,Zeilennr.)
                                 WHERE(Art=FILTER(Wartungsvertrag),
                                       Andruck=FILTER(Text unten)) }

    { 35  ;2   ;DataItem;Bemerkung           ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Wartungs_Bemerkung.SETRANGE("Nr.","Serviceleist. & Leihstellungen"."Wartungsvertragsnr.");
                               Wartungs_Bemerkung.SETRANGE(Art,Wartungs_Bemerkung.Art :: Wartungsvertrag);
                               Wartungs_Bemerkung.SETRANGE(Andruck,Wartungs_Bemerkung.Andruck :: "Text unten");
                               SETRANGE(Number,1,Wartungs_Bemerkung.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN
                                    Wartungs_Bemerkung.FINDFIRST
                                  ELSE
                                    Wartungs_Bemerkung.NEXT;
                                  "TOPAS Bemerkungen unten" := Wartungs_Bemerkung;
                                END;
                                 }

    { 36  ;3   ;Column  ;Bemerkung_TOPASBemerkungenunten;
               SourceExpr="TOPAS Bemerkungen unten".Bemerkung }

    { 37  ;2   ;DataItem;Total               ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1)) }

    { 38  ;2   ;DataItem;                    ;
               DataItemTable=Table50011;
               DataItemTableView=SORTING(Wartungsvertragsnr.);
               DataItemLinkReference=Serviceleist. & Leihstellungen;
               DataItemLink=Wartungsvertragsnr.=FIELD(Wartungsvertragsnr.) }

    { 39  ;3   ;Column  ;EndkundeE_Mail_Wartungsvertrag;
               SourceExpr=Wartungsvertrag."Endkunde E-Mail" }

    { 40  ;3   ;Column  ;EndkundeTelefonnr_Wartungsvertrag;
               SourceExpr="Endkunde Telefonnr." }

    { 41  ;3   ;Column  ;EndkundeKontakt_Wartungsvertrag;
               SourceExpr="Endkunde Kontakt" }

    { 42  ;3   ;Column  ;EndkundeLand_Wartungsvertrag;
               SourceExpr="Endkunde Land" }

    { 43  ;3   ;Column  ;EndkundeOrt_Wartungsvertrag;
               SourceExpr="Endkunde Ort" }

    { 44  ;3   ;Column  ;EndkundePLZ_Code_Wartungsvertrag;
               SourceExpr=Wartungsvertrag."Endkunde PLZ-Code" }

    { 45  ;3   ;Column  ;EndkundeAdresse_Wartungsvertrag;
               SourceExpr="Endkunde Adresse" }

    { 46  ;3   ;Column  ;Endkunde_Wartungsvertrag;
               SourceExpr=Endkunde }

    { 47  ;3   ;Column  ;Description_ZlgBed  ;
               SourceExpr=ZlgBed.Description }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Debitor@1140007 : Record 18;
      Artikel@1140008 : Record 27;
      Firmendaten@1140009 : Record 79;
      FIBUEinrichtung@1140006 : Record 98;
      Wartung@1140032 : Record 50011;
      LieferBed@1140003 : Record 10;
      ZlgBed@1140002 : Record 3;
      SalesHeader@1140018 : Record 36;
      PurchHeader@1140014 : Record 38;
      PurchShipHeader@1140022 : Record 120;
      ServiceOrderPos@1140030 : Record 50024;
      Opt@1140027 : Record 50001;
      Wartungs_Bemerkung@1140033 : Record 50023;
      Quote@1140036 : Record 50014;
      Language@1000000003 : Record 8;
      FormatAdr@1140020 : Codeunit 365;
      TOPAS_Funktionen@1000000001 : Codeunit 50006;
      CompanyInfo@1000000000 : ARRAY [15] OF Text;
      TotalText@1140004 : Text[50];
      EinkVonAdr@1000000002 : ARRAY [8] OF Text[50];
      service_price_total@1140013 : Decimal;
      Nummer@1140005 : Integer;
      w„hcode@1140015 : Code[20];
      termcode@1140021 : Code[20];
      shipcode@1140023 : Code[20];
      orderno@1140025 : Code[20];
      vendorno@1140024 : Code[20];
      laufzeit@1140028 : Code[10];
      seriennr@1140029 : Code[40];
      docdate@1140026 : Date;
      ansp_name@1140016 : Text[100];
      ansp_anrede@1140012 : Text[50];
      ansp_telefon@1140011 : Text[50];
      ansp_fax@1140010 : Text[50];
      ansp_email@1140017 : Text[80];
      header_zusatz@1140031 : Text[30];
      endkunde@1140034 : Text[50];
      quotenr@1140035 : Code[10];
      v_druck@1140000 : Boolean;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE OnPreSectionServiceleist_Leihstellungen_GroupHeader5@5010(VAR "Serviceleist. & Leihstellungen"@1000000000 : Record 50024);
    BEGIN
      WITH "Serviceleist. & Leihstellungen" DO BEGIN
        Nummer += 1;
        endkunde := '';
        Wartung.GET("Wartungsvertragsnr.");
        endkunde := Wartung.Endkunde;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body9@5011(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        IF Quote.GET("Serviceleist. & Leihstellungen"."Quotenr.") THEN
          quotenr := Quote."Quotenr. Hersteller"
        ELSE
          quotenr := '';
        ReportForNav.ShowOutput(quotenr <> '');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionWartungsvertrag_Footer11@5012(VAR Wartungsvertrag@1000000000 : Record 50011);
    BEGIN
      WITH Wartungsvertrag DO BEGIN
        ReportForNav.ShowOutput(FALSE);
        v_druck := FALSE;
        IF (STRPOS("Serviceleist. & Leihstellungen"."SUP Artikelnr.",'ACTS') <> 0) THEN v_druck := TRUE;
        IF (STRPOS("Serviceleist. & Leihstellungen"."SUP Artikelnr.",'MS') <> 0) THEN v_druck := TRUE;
        IF (STRPOS("Serviceleist. & Leihstellungen"."SUP Artikelnr.",'CH') <> 0) THEN v_druck := TRUE;
        IF v_druck = TRUE THEN ReportForNav.ShowOutput(TRUE);
        //ReportForNav.ShowOutput(STRPOS("Serviceleist. & Leihstellungen"."SUP Artikelnr.",'ACTS')<>0);
        IF Wartungsvertrag.Endkunde = '' THEN
          ReportForNav.ShowOutput(FALSE);
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Serviceleist_Leihstellungen': CASE SectionId OF
          'GroupHeader5': OnPreSectionServiceleist_Leihstellungen_GroupHeader5("Serviceleist. & Leihstellungen");
        END;
        'Item': CASE SectionId OF
          'Body9': OnPreSectionItem_Body9(Item);
        END;
        'Wartungsvertrag': CASE SectionId OF
          'Footer11': OnPreSectionWartungsvertrag_Footer11(Wartungsvertrag);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      CASE DataItemId OF
        'Serviceleist_Leihstellungen': WITH "Serviceleist. & Leihstellungen" DO CASE Operation OF
        END;  'SeiteSchleife': WITH SeiteSchleife DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,service_price_total);
              END;
           'Restore': BEGIN
                 service_price_total := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description></Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

