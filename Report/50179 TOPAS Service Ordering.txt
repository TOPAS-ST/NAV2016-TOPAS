OBJECT Report 50179 TOPAS Service Ordering
{
  OBJECT-PROPERTIES
  {
    Date=18.10.21;
    Time=09:36:01;
    Modified=Yes;
    Version List=fertig,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   FIBUEinrichtung.GET;
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1)) }

    { 2   ;1   ;DataItem;                    ;
               DataItemTable=Table50024;
               DataItemTableView=SORTING(Wartungsvertragsnr.,Service Artikelnr.)
                                 WHERE(Art=FILTER(Service),
                                       Inaktiv=FILTER(No));
               OnPreDataItem=BEGIN
                               Firmendaten.GET;
                               Firmendaten.CALCFIELDS("ISO Logo","Systeme Logo");
                               Nummer := 0;
                               TotalText := '';
                               //CREATETOTALS(champ_price_total);
                             END;

               OnAfterGetRecord=BEGIN
                                  PurchHeader.RESET;
                                  PurchHeader.SETRANGE("No.","Serviceleist. & Leihstellungen"."BET-Nr.");
                                  IF PurchHeader.FINDFIRST THEN BEGIN
                                    w„hcode  := PurchHeader."Currency Code";
                                    termcode := PurchHeader."Payment Terms Code";
                                    shipcode := PurchHeader."Shipment Method Code";
                                    orderno  := PurchHeader."No.";
                                    vendorno := PurchHeader."Buy-from Vendor No.";
                                    docdate  := PurchHeader."Document Date";
                                    FormatAdr.PurchHeaderBuyFrom(EinkVonAdr,PurchHeader);
                                    CurrReport.LANGUAGE := Language.GetLanguageID(PurchHeader."Language Code");
                                  END ELSE BEGIN
                                    PurchShipHeader.RESET;
                                    PurchShipHeader.SETRANGE("Order No.","Serviceleist. & Leihstellungen"."BET-Nr.");
                                    IF PurchShipHeader.FINDLAST THEN BEGIN
                                      w„hcode  := PurchShipHeader."Currency Code";
                                      termcode := PurchShipHeader."Payment Terms Code";
                                      shipcode := PurchShipHeader."Shipment Method Code";
                                      orderno  := PurchShipHeader."Order No.";
                                      vendorno := PurchShipHeader."Buy-from Vendor No.";
                                      docdate  := PurchShipHeader."Document Date";
                                      FormatAdr.PurchRcptBuyFrom(EinkVonAdr,PurchShipHeader);
                                      CurrReport.LANGUAGE := Language.GetLanguageID(PurchShipHeader."Language Code");
                                    END ELSE
                                      ERROR('Bestellung konnte nicht gefunden werden.');
                                  END;

                                  TOPAS_Funktionen.GetCompanyInformation(CompanyInfo,Firmendaten);
                                  service_price_total := service_price_total + (Menge * "Service DC");
                                  IF termcode = '' THEN
                                    ZlgBed.INIT
                                  ELSE
                                    ZlgBed.GET(termcode);
                                  IF shipcode = '' THEN
                                    LieferBed.INIT
                                  ELSE
                                    LieferBed.GET(shipcode);
                                  IF w„hcode = '' THEN BEGIN
                                    FIBUEinrichtung.TESTFIELD("LCY Code");
                                    TotalText := STRSUBSTNO('Total %1',FIBUEinrichtung."LCY Code");
                                  END ELSE BEGIN
                                    TotalText := STRSUBSTNO('Total %1',w„hcode);
                                  END;
                                  Artikel.GET("SUP Artikelnr.");
                                  IF Artikel.Artikelgruppe = 'CHAMPS' THEN
                                    header_zusatz := 'Champs'
                                  ELSE
                                    IF (Artikel.Artikelgruppe = 'ACTS') OR (Artikel.Artikelgruppe = 'ACTS_AHR') OR (Artikel.Artikelgruppe = 'ACTS/ACHAT')
                                    OR (Artikel.Artikelgruppe = 'ACTS_SCHAEFFLER') OR (Artikel.Artikelgruppe = 'ACTS_MSS_SCHAEFFLER')
                                    OR (Artikel.Artikelgruppe = 'ACTS_MSS') OR (Artikel.Artikelgruppe = 'ACHAT') THEN
                                      header_zusatz := 'ACTS'
                                    ELSE
                                      header_zusatz := '';

                                  seriennr := "Seriennr.";

                                  IF Artikel.GET("Artikelnr.") THEN BEGIN
                                    IF "Seriennr." <> '' THEN BEGIN
                                      IF (Artikel."Item Tracking Code" = 'PRODUCTKEY') OR ((Artikel."Item Tracking Code" = 'SN-ODER-PK') AND ((STRPOS("Seriennr.",'NODATA') <> 0) OR (STRPOS("Seriennr.",'VT') = 1))) THEN
                                        seriennr := "Product Key";
                                    END ELSE BEGIN
                                      IF Artikel."Item Tracking Code" = 'PRODUCTKEY' THEN
                                        seriennr := "Product Key";
                                      IF (Artikel.Serviceklassifizierung = 'SOFTWARE') OR (Artikel.Serviceklassifizierung = 'KEINE') THEN BEGIN
                                        ServiceOrderPos.RESET;
                                        ServiceOrderPos.SETRANGE("Wartungsvertragsnr.","Wartungsvertragsnr.");
                                        ServiceOrderPos.SETRANGE(Basisger„t,TRUE);
                                        ServiceOrderPos.SETRANGE("Geh”rt zu Lfd. Nr.","Geh”rt zu Lfd. Nr.");
                                        IF ServiceOrderPos.FINDFIRST THEN BEGIN
                                          IF Artikel.GET(ServiceOrderPos."Artikelnr.") THEN BEGIN
                                            IF Artikel."Item Tracking Code" = 'PRODUCTKEY' THEN
                                              seriennr := ServiceOrderPos."Product Key"
                                            ELSE
                                              seriennr := ServiceOrderPos."Seriennr.";
                                          END;
                                        END;
                                      END;
                                    END;
                                  END;

                                  IF STRPOS(seriennr,'S/N: ') = 1 THEN
                                    seriennr := COPYSTR(seriennr,STRLEN('S/N: ')+1);
                                  IF STRPOS(seriennr,'S/N:') = 1 THEN
                                    seriennr := COPYSTR(seriennr,STRLEN('S/N:')+1);
                                  IF Fremderwerb THEN
                                    seriennr := seriennr + '*';
                                END;

               ReqFilterFields=BET-Nr. }

    { 3   ;2   ;Column  ;SystemeLogo_Firmendaten;
               SourceExpr=Firmendaten."Systeme Logo" }

    { 4   ;2   ;Column  ;ISOLogo_Firmendaten ;
               SourceExpr=Firmendaten."ISO Logo" }

    { 1000000000;2;Column;CompanyName        ;
               SourceExpr=CompanyInfo[1] }

    { 1000000004;2;Column;CompanyAddress     ;
               SourceExpr=CompanyInfo[2] }

    { 1000000003;2;Column;CompanyPostCodeCity;
               SourceExpr=CompanyInfo[4] +  ' ' + CompanyInfo[5] }

    { 1000000005;2;Column;CompanyPhone       ;
               SourceExpr=CompanyInfo[6] }

    { 1000000006;2;Column;CompanyFax         ;
               SourceExpr=CompanyInfo[7] }

    { 1000000007;2;Column;CompanyVATRegNo    ;
               SourceExpr=CompanyInfo[8] }

    { 1000000008;2;Column;CompanyRegNo       ;
               SourceExpr=CompanyInfo[9] }

    { 1000000009;2;Column;CompanyVorstand    ;
               SourceExpr=CompanyInfo[10] }

    { 1000000010;2;Column;CompanyARV         ;
               SourceExpr=CompanyInfo[11] }

    { 1000000011;2;Column;CompanyAmtsgericht ;
               SourceExpr=CompanyInfo[12] }

    { 1000000012;2;Column;CompanyWEEERegNo   ;
               SourceExpr=CompanyInfo[13] }

    { 1000000013;2;Column;CompanyPostfach    ;
               SourceExpr=CompanyInfo[14] }

    { 1000000002;2;Column;CompanyHomepage    ;
               SourceExpr=CompanyInfo[15] }

    { 5   ;2   ;Column  ;header_zusatz_PurchaseOrder;
               SourceExpr=header_zusatz + ' Purchase Order' }

    { 6   ;2   ;Column  ;EinkVonAdr8         ;
               SourceExpr=EinkVonAdr[8] }

    { 7   ;2   ;Column  ;EinkVonAdr7         ;
               SourceExpr=EinkVonAdr[7] }

    { 8   ;2   ;Column  ;EinkVonAdr6         ;
               SourceExpr=EinkVonAdr[6] }

    { 9   ;2   ;Column  ;EinkVonAdr5         ;
               SourceExpr=EinkVonAdr[5] }

    { 10  ;2   ;Column  ;EinkVonAdr4         ;
               SourceExpr=EinkVonAdr[4] }

    { 11  ;2   ;Column  ;EinkVonAdr3         ;
               SourceExpr=EinkVonAdr[3] }

    { 12  ;2   ;Column  ;EinkVonAdr2         ;
               SourceExpr=EinkVonAdr[2] }

    { 13  ;2   ;Column  ;EinkVonAdr1         ;
               SourceExpr=EinkVonAdr[1] }

    { 14  ;2   ;Column  ;vendorno            ;
               SourceExpr=vendorno }

    { 15  ;2   ;Column  ;orderno             ;
               SourceExpr=orderno }

    { 16  ;2   ;Column  ;docdate             ;
               SourceExpr=docdate }

    { 17  ;2   ;Column  ;STRSUBSTNO_PagePct1_FORMAT_ReportForNavPageNo_;
               SourceExpr=STRSUBSTNO('Page %1',FORMAT(ReportForNav.PageNo)) }

    { 18  ;2   ;Column  ;service_price_total ;
               SourceExpr=service_price_total }

    { 19  ;2   ;Column  ;endkunde            ;
               SourceExpr=endkunde }

    { 20  ;2   ;Column  ;Debitorname_Serviceleist_Leihstellungen;
               SourceExpr=Debitorname }

    { 21  ;2   ;Column  ;Nummer              ;
               SourceExpr=Nummer }

    { 22  ;2   ;Column  ;ServiceArtikelnr_Serviceleist_Leihstellungen;
               SourceExpr="Service Artikelnr." }

    { 23  ;2   ;Column  ;TotalText           ;
               SourceExpr=TotalText }

    { 24  ;2   ;DataItem;                    ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(No.);
               DataItemLink=No.=FIELD(Artikelnr.) }

    { 25  ;3   ;Column  ;Menge_Serviceleist_Leihstellungen;
               DecimalPlaces=0:0;
               SourceExpr="Serviceleist. & Leihstellungen".Menge }

    { 26  ;3   ;Column  ;Serviceleist_LeihstellungenLizenzdatum__FORMAT_Serviceleist_;
               DecimalPlaces=0:0;
               SourceExpr=FORMAT("Serviceleist. & Leihstellungen".Lizenzdatum)+'...'+FORMAT("Serviceleist. & Leihstellungen"."Ablaufdatum Serviceleistung") }

    { 27  ;3   ;Column  ;Serviceleist_LeihstellungenMenge_Serviceleist_Leihstellungen;
               SourceExpr="Serviceleist. & Leihstellungen".Menge*"Serviceleist. & Leihstellungen"."Service DC" }

    { 28  ;3   ;Column  ;ServiceDC_Serviceleist_Leihstellungen;
               SourceExpr="Serviceleist. & Leihstellungen"."Service DC" }

    { 29  ;3   ;Column  ;Artikelnr2_Serviceleist_Leihstellungen;
               SourceExpr="Serviceleist. & Leihstellungen"."Artikelnr. 2" }

    { 30  ;3   ;Column  ;seriennr            ;
               SourceExpr=seriennr }

    { 31  ;3   ;Column  ;quotenr             ;
               DecimalPlaces=0:0;
               SourceExpr=quotenr }

    { 32  ;2   ;DataItem;KopieSchleife       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1));
               OnAfterGetRecord=BEGIN
                                  //IF (STRPOS("Serviceleist. & Leihstellungen"."SUP Artikelnr.",'ACTS')=0) THEN CurrReport.SKIP;
                                END;
                                 }

    { 33  ;1   ;DataItem;SeiteSchleife       ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1)) }

    { 34  ;2   ;DataItem;TOPAS Bemerkungen unten;
               DataItemTable=Table50023;
               DataItemTableView=SORTING(Nr.,Art,Artikelnr.,Zeilennr.)
                                 WHERE(Art=FILTER(Wartungsvertrag),
                                       Andruck=FILTER(Text unten)) }

    { 35  ;2   ;DataItem;Bemerkung           ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Wartungs_Bemerkung.SETRANGE("Nr.","Serviceleist. & Leihstellungen"."Wartungsvertragsnr.");
                               Wartungs_Bemerkung.SETRANGE(Art,Wartungs_Bemerkung.Art :: Wartungsvertrag);
                               Wartungs_Bemerkung.SETRANGE(Andruck,Wartungs_Bemerkung.Andruck :: "Text unten");
                               SETRANGE(Number,1,Wartungs_Bemerkung.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN
                                    Wartungs_Bemerkung.FINDFIRST
                                  ELSE
                                    Wartungs_Bemerkung.NEXT;
                                  "TOPAS Bemerkungen unten" := Wartungs_Bemerkung;
                                END;
                                 }

    { 36  ;3   ;Column  ;Bemerkung_TOPASBemerkungenunten;
               SourceExpr="TOPAS Bemerkungen unten".Bemerkung }

    { 37  ;2   ;DataItem;Total               ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1)) }

    { 38  ;2   ;DataItem;                    ;
               DataItemTable=Table50011;
               DataItemTableView=SORTING(Wartungsvertragsnr.);
               DataItemLinkReference=Serviceleist. & Leihstellungen;
               DataItemLink=Wartungsvertragsnr.=FIELD(Wartungsvertragsnr.) }

    { 39  ;3   ;Column  ;EndkundeE_Mail_Wartungsvertrag;
               SourceExpr=Wartungsvertrag."Endkunde E-Mail" }

    { 40  ;3   ;Column  ;EndkundeTelefonnr_Wartungsvertrag;
               SourceExpr="Endkunde Telefonnr." }

    { 41  ;3   ;Column  ;EndkundeKontakt_Wartungsvertrag;
               SourceExpr="Endkunde Kontakt" }

    { 42  ;3   ;Column  ;EndkundeLand_Wartungsvertrag;
               SourceExpr="Endkunde Land" }

    { 44  ;3   ;Column  ;EndkundePLZ_Code_Ort_Wartungsvertrag;
               SourceExpr=Wartungsvertrag."Endkunde PLZ-Code" + ' ' + "Endkunde Ort" }

    { 45  ;3   ;Column  ;EndkundeAdresse_Wartungsvertrag;
               SourceExpr="Endkunde Adresse" }

    { 46  ;3   ;Column  ;Endkunde_Wartungsvertrag;
               SourceExpr=Endkunde }

    { 47  ;3   ;Column  ;Description_ZlgBed  ;
               SourceExpr=ZlgBed.Description }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Debitor@1140007 : Record 18;
      Artikel@1140008 : Record 27;
      Firmendaten@1140009 : Record 79;
      FIBUEinrichtung@1140006 : Record 98;
      Wartung@1140032 : Record 50011;
      LieferBed@1140003 : Record 10;
      ZlgBed@1140002 : Record 3;
      SalesHeader@1140018 : Record 36;
      PurchHeader@1140014 : Record 38;
      PurchShipHeader@1140022 : Record 120;
      ServiceOrderPos@1140030 : Record 50024;
      Opt@1140027 : Record 50001;
      Wartungs_Bemerkung@1140033 : Record 50023;
      Quote@1140036 : Record 50014;
      Language@1000000003 : Record 8;
      FormatAdr@1140020 : Codeunit 365;
      TOPAS_Funktionen@1000000001 : Codeunit 50006;
      CompanyInfo@1000000000 : ARRAY [15] OF Text;
      TotalText@1140004 : Text[50];
      EinkVonAdr@1000000002 : ARRAY [8] OF Text[50];
      service_price_total@1140013 : Decimal;
      Nummer@1140005 : Integer;
      w„hcode@1140015 : Code[20];
      termcode@1140021 : Code[20];
      shipcode@1140023 : Code[20];
      orderno@1140025 : Code[20];
      vendorno@1140024 : Code[20];
      laufzeit@1140028 : Code[10];
      seriennr@1140029 : Code[40];
      docdate@1140026 : Date;
      ansp_name@1140016 : Text[100];
      ansp_anrede@1140012 : Text[50];
      ansp_telefon@1140011 : Text[50];
      ansp_fax@1140010 : Text[50];
      ansp_email@1140017 : Text[80];
      header_zusatz@1140031 : Text[30];
      endkunde@1140034 : Text[50];
      quotenr@1140035 : Code[10];
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionServiceleist_Leihstellungen_GroupHeader5@5010(VAR "Serviceleist. & Leihstellungen"@1000000000 : Record 50024);
    BEGIN
      WITH "Serviceleist. & Leihstellungen" DO BEGIN
        Nummer += 1;
        endkunde := '';
        Wartung.GET("Wartungsvertragsnr.");
        endkunde := Wartung.Endkunde;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItem_Body9@5011(VAR Item@1000000000 : Record 27);
    BEGIN
      WITH Item DO BEGIN
        IF Quote.GET("Serviceleist. & Leihstellungen"."Quotenr.") THEN
          quotenr := Quote."Quotenr. Hersteller"
        ELSE
          quotenr := '';
        ReportForNav.ShowOutput(quotenr <> '');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionWartungsvertrag_Footer11@5012(VAR Wartungsvertrag@1000000000 : Record 50011);
    BEGIN
      WITH Wartungsvertrag DO BEGIN
        ReportForNav.ShowOutput(Wartungsvertrag.Endkunde <> '');
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'Serviceleist_Leihstellungen': CASE SectionId OF
          'GroupHeader5': OnPreSectionServiceleist_Leihstellungen_GroupHeader5("Serviceleist. & Leihstellungen");
        END;
        'Item': CASE SectionId OF
          'Body9': OnPreSectionItem_Body9(Item);
        END;
        'Wartungsvertrag': CASE SectionId OF
          'Footer11': OnPreSectionWartungsvertrag_Footer11(Wartungsvertrag);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
      ForNavOperation@1000000009 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      ForNavOperation := Operation;
      CASE DataItemId OF
        'Serviceleist_Leihstellungen': WITH "Serviceleist. & Leihstellungen" DO CASE ForNavOperation OF
        END;  'SeiteSchleife': WITH SeiteSchleife DO CASE ForNavOperation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,service_price_total);
              END;
           'Restore': BEGIN
                 service_price_total := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
29ef6VsX8Xqbs+g52WZzwng4ZfvpX/8P</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

