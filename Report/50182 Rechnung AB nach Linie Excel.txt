OBJECT Report 50182 Rechnung AB nach Linie Excel
{
  OBJECT-PROPERTIES
  {
    Date=30.10.18;
    Time=16:55:19;
    Modified=Yes;
    Version List=fertig,FORNAV3.1.0.1460/1460;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ;ReportForNav:= ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  IF DoUpdateExistingWorksheet THEN BEGIN
                    IF ServerFileName = '' THEN
                      ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
                    IF ServerFileName = '' THEN
                      EXIT;
                    SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
                    IF SheetName = '' THEN
                      EXIT;
                  END;

                  Window.OPEN(
                    Text000 +
                    '@1@@@@@@@@@@@@@@@@@@@@@\');

                  TempExcelBuffer.DELETEALL;
                  CLEAR(TempExcelBuffer);

                  //Header

                  RecNo := 0;
                  RowNo := 1;
                  ColumnNo := 1;
                  EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
                  RowNo := RowNo + 1;

                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   FinishExcel;

                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table113;
               DataItemTableView=SORTING(Manufacturer Code,No.)
                                 WHERE(Type=FILTER(Item),
                                       Location Code=FILTER(ZENT|KONSI),
                                       Quantity=FILTER(<>0));
               ReqFilterFields=Manufacturer Code,Posting Date }

    { 2   ;1   ;Column  ;GETFILTERS_         ;
               SourceExpr=GETFILTERS() }

    { 3   ;1   ;Column  ;ReportForNavPageNo  ;
               SourceExpr=ReportForNav.PageNo }

    { 4   ;1   ;Column  ;USERID              ;
               SourceExpr=USERID }

    { 5   ;1   ;Column  ;TODAY_0_4           ;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 6   ;1   ;Column  ;DocumentNo_SalesInvoiceLine;
               SourceExpr="Document No." }

    { 7   ;1   ;Column  ;PostingDate_SalesInvoiceLine;
               SourceExpr="Posting Date" }

    { 8   ;1   ;Column  ;No_SalesInvoiceLine ;
               SourceExpr="No." }

    { 9   ;1   ;Column  ;Quantity_SalesInvoiceLine;
               SourceExpr=Quantity }

    { 10  ;    ;DataItem;                    ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document Type,Blanket Order No.,No.,Blanket Order Line No.)
                                 WHERE(Document Type=FILTER(Order),
                                       Location Code=FILTER(ZENT|KONSI),
                                       Outstanding Quantity=FILTER(<>0));
               ReqFilterFields=Manufacturer Code,Promised Delivery Date }

    { 11  ;1   ;Column  ;GETFILTERS_2        ;
               SourceExpr=GETFILTERS() }

    { 12  ;1   ;Column  ;OutstandingQuantity_SalesLine;
               SourceExpr="Outstanding Quantity" }

    { 13  ;1   ;Column  ;ShipmentDate_SalesLine;
               SourceExpr="Shipment Date" }

    { 14  ;1   ;Column  ;DocumentNo_SalesLine;
               SourceExpr="Document No." }

    { 15  ;1   ;Column  ;No_SalesLine        ;
               SourceExpr="No." }

    { 16  ;    ;DataItem;                    ;
               DataItemTable=Table115;
               DataItemTableView=SORTING(Type,No.)
                                 WHERE(Type=FILTER(Item),
                                       Quantity=FILTER(<>0));
               ReqFilterFields=Manufacturer Code,Shipment Date }

    { 17  ;1   ;Column  ;GETFILTERS_3        ;
               SourceExpr=GETFILTERS() }

    { 18  ;1   ;Column  ;Quantity_SalesCrMemoLine;
               SourceExpr=Quantity }

    { 19  ;1   ;Column  ;No_SalesCrMemoLine  ;
               SourceExpr="No." }

    { 20  ;1   ;Column  ;vBuchungsdatum      ;
               SourceExpr=vBuchungsdatum }

    { 21  ;1   ;Column  ;DocumentNo_SalesCrMemoLine;
               SourceExpr="Document No." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TempExcelBuffer@1000000010 : TEMPORARY Record 370;
      TOPAS_API@1000000009 : Codeunit 50001;
      FileMgt@1000000030 : Codeunit 419;
      ServerFileName@1000000008 : Text;
      SheetName@1000000007 : Text[250];
      DoUpdateExistingWorksheet@1000000006 : Boolean;
      Testmode@1000000005 : Boolean;
      Window@1000000004 : Dialog;
      RecNo@1000000003 : Integer;
      TotalRecNo@1000000002 : Integer;
      RowNo@1000000001 : Integer;
      ColumnNo@1000000000 : Integer;
      VKGutKopf@1140009 : Record 114;
      vBuchungsdatum@1140017 : Date;
      ReportForNav@5000 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.3.1.0.1460, Version=3.1.0.1460, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;
      Text000@1000000029 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000028 : TextConst 'DEU=Statistik';
      Text002@1000000027 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text020@1000000026 : TextConst 'DEU=Rechnung;ENU=Invoice';
      Text021@1000000025 : TextConst 'DEU=Artikel;ENU=Item';
      Text022@1000000024 : TextConst 'DEU=Menge;ENU=Quantity';
      ExcelFileExtensionTok@1000000011 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE FinishExcel@1000000000();
    BEGIN
      Window.CLOSE;
      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN
          TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,Text001);
        TempExcelBuffer.WriteSheet(
          PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
          //hat bei OpenExcel nachfolgend keine Auswirkung, da hier Autofit drin ist
          TempExcelBuffer.SetWidth(1,'A',16);
          TempExcelBuffer.SetWidth(1,'B',20);
          TempExcelBuffer.SetWidth(1,'C',16);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder ¬Åberschreibt, deshalb neue Fkt. nachfolgend
          //TempExcelBuffer.OpenExcelWithoutAutoFit(Text001,Text001 + ExcelFileExtensionTok,'',TRUE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;
    END;

    LOCAL PROCEDURE OnPreSectionSalesInvoiceLine_Body2@5010(VAR "Sales Invoice Line"@1000000000 : Record 113);
    BEGIN
      WITH "Sales Invoice Line" DO BEGIN
         // ReportForNav.ShowOutput((Verkaufsrechnungszeile.Art=Verkaufsrechnungszeile.Art::Artikel) AND (Menge <> 0));
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesInvoiceLine_GroupFooter3@5011(VAR "Sales Invoice Line"@1000000000 : Record 113);
    BEGIN
      WITH "Sales Invoice Line" DO BEGIN
        ColumnNo := 2;
        EnterCell(RowNo,ColumnNo,"Sales Invoice Line"."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,FORMAT("Sales Invoice Line".Quantity),'',FALSE,FALSE,FALSE,'########',TempExcelBuffer."Cell Type"::Number);
        RowNo := RowNo + 1;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Header4@5012(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      WITH "Sales Line" DO BEGIN
        ColumnNo := 1;
        EnterCell(RowNo,ColumnNo,'Auftrag','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo + 1;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_GroupFooter6@5013(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      WITH "Sales Line" DO BEGIN
        ColumnNo := 2;
        EnterCell(RowNo,ColumnNo,"Sales Line"."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,FORMAT("Sales Line"."Outstanding Quantity"),'',FALSE,FALSE,FALSE,'########',TempExcelBuffer."Cell Type"::Number);
        RowNo := RowNo + 1;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesCrMemoLine_Header7@5014(VAR "Sales Cr.Memo Line"@1000000000 : Record 115);
    BEGIN
      WITH "Sales Cr.Memo Line" DO BEGIN
        ColumnNo := 1;
        EnterCell(RowNo,ColumnNo,'Gutschrift','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo + 1;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesCrMemoLine_Body8@5015(VAR "Sales Cr.Memo Line"@1000000000 : Record 115);
    BEGIN
      WITH "Sales Cr.Memo Line" DO BEGIN
        VKGutKopf.SETFILTER("No.",'%1',"Sales Cr.Memo Line"."Document No.");
        IF VKGutKopf.FINDFIRST THEN
          vBuchungsdatum := VKGutKopf."Posting Date"
        ELSE
          vBuchungsdatum := 0D;
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesCrMemoLine_GroupFooter9@5016(VAR "Sales Cr.Memo Line"@1000000000 : Record 115);
    BEGIN
      WITH "Sales Cr.Memo Line" DO BEGIN
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,"Sales Cr.Memo Line"."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,FORMAT("Sales Cr.Memo Line".Quantity),'',FALSE,FALSE,FALSE,'########',TempExcelBuffer."Cell Type"::Number);
        RowNo := RowNo + 1;
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'SalesInvoiceLine': CASE SectionId OF
          'Body2': OnPreSectionSalesInvoiceLine_Body2("Sales Invoice Line");
          'GroupFooter3': OnPreSectionSalesInvoiceLine_GroupFooter3("Sales Invoice Line");
        END;
        'SalesLine': CASE SectionId OF
          'Header4': OnPreSectionSalesLine_Header4("Sales Line");
          'GroupFooter6': OnPreSectionSalesLine_GroupFooter6("Sales Line");
        END;
        'SalesCrMemoLine': CASE SectionId OF
          'Header7': OnPreSectionSalesCrMemoLine_Header7("Sales Cr.Memo Line");
          'Body8': OnPreSectionSalesCrMemoLine_Body8("Sales Cr.Memo Line");
          'GroupFooter9': OnPreSectionSalesCrMemoLine_GroupFooter9("Sales Cr.Memo Line");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5014(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5015();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code. Instead change the Create Totals, Total Fields or Group
      // Total Fields properties on the Data item in the ForNAV designer.
      CASE DataItemId OF
        'SalesInvoiceLine': WITH "Sales Invoice Line" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Quantity);
              END;
           'Restore': BEGIN
                 Quantity := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;  'SalesLine': WITH "Sales Line" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Quantity);
                ReportForNav.AddTotal(DataItemId,1,"Outstanding Quantity");
              END;
           'Restore': BEGIN
                 Quantity := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 "Outstanding Quantity" := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'SalesCrMemoLine': WITH "Sales Cr.Memo Line" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,Quantity);
              END;
           'Restore': BEGIN
                 Quantity := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

