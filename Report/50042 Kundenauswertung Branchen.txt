OBJECT Report 50042 Kundenauswertung Branchen
{
  OBJECT-PROPERTIES
  {
    Date=25.09.23;
    Time=16:08:16;
    Modified=Yes;
    Version List=TOPAS, BT šbergabe Fkt.! ,FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  //*******************************************************************************************************
                  //                                  Vorbereitung der Excel Tabelle
                  //*******************************************************************************************************
                  IF check_Ansprech = check_Ansprech::ja THEN
                    Excel_definieren;

                  //*******************************************************************************************************
                  //                         Kontakte und deren Klassifizierung werden geprft
                  //*******************************************************************************************************
                  IF check_klassifizierung = check_klassifizierung::ja THEN BEGIN
                   IF text_branchencode <> '' THEN
                      text_branchencode := '*' + text_branchencode + '*';
                    Suche_Kontakte_mit_Branchen;
                    Anzeigefilter := 'Filter: Betreuer: ' + v_betreuer + ', Verk„ufercode: ' + v_verkcode + ', Gebiet: ' + v_gebietscode + ', Branche: ' +text_branchencode;
                  END;
                  IF check_klassifizierung = check_klassifizierung::nein THEN BEGIN
                    IF Monate = Monate::"0M" THEN
                    Suche_Kontakte_ohne_Umsatz
                      ELSE
                    Suche_Kontakte_ohne_Branchen;
                    Anzeigefilter := 'Filter: Betreuer: ' + v_betreuer + ', Verk„ufercode: ' + v_verkcode + ', Gebiet: ' + v_gebietscode;
                  END;
                  IF check_Ansprech = check_Ansprech::ja THEN BEGIN
                    IF check_klassifizierung = check_klassifizierung::ja THEN BEGIN
                      IF text_branchencode <> '' THEN BEGIN
                        text_branchencode := '*' + text_branchencode + '*';
                        Ansprech_Kontakte_mit_Branchen
                      END ELSE BEGIN
                        ERROR('- Kunde mit Klassifizierung -  muss gesetzt sein');
                        END;
                    END;
                  END;

                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   IF check_Ansprech = check_Ansprech::ja THEN BEGIN
                     FinishExcel(Text001);
                   END;
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1000000000;;DataItem;CopySchleife      ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=FILTER(>0));
               OnPreDataItem=BEGIN
                               Berichtstabelle.RESET;
                               Berichtstabelle.SETCURRENTKEY("Feld 10",Datum,Index);
                               Berichtstabelle.SETFILTER(Tabelle,'%1','KLASSIFIZIERUNG');
                               SETRANGE(Number,1,Berichtstabelle.COUNT);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF Number = 1 THEN BEGIN
                                    Berichtstabelle.FIND('-');
                                  END ELSE BEGIN
                                    Berichtstabelle.NEXT;
                                  END;

                                  IF check_Ansprech = check_Ansprech::ja THEN BEGIN
                                    IF check_klassifizierung = check_klassifizierung::ja THEN BEGIN
                                      ColumnNo := 1;
                                      EnterCell(RowNo,ColumnNo,'',TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Kontakt.TABLENAME,1,50091,Berichtstabelle.Index),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Berichtstabelle."Feld 10",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Berichtstabelle."Feld 13",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Berichtstabelle."Feld 8",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Berichtstabelle."Feld 6",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Berichtstabelle."Feld 7",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Berichtstabelle."Feld 9",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Berichtstabelle."Belegnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Berichtstabelle."Feld 12",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      RowNo := RowNo + 1;
                                    END;
                                    IF check_klassifizierung = check_klassifizierung::nein THEN BEGIN
                                      ColumnNo := 1;
                                      EnterCell(RowNo,ColumnNo,'',TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Kontakt.TABLENAME,1,50091,Berichtstabelle.Index),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Berichtstabelle."Feld 10",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Berichtstabelle."Feld 13",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Berichtstabelle."Feld 8",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Berichtstabelle."Feld 6",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Berichtstabelle."Feld 7",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,Berichtstabelle."Feld 9",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,FORMAT(Berichtstabelle."Feld 4"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                                      ColumnNo := ColumnNo + 1;
                                      EnterCell(RowNo,ColumnNo,FORMAT(Berichtstabelle."Feld 5"),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
                                      RowNo := RowNo + 1;
                                    END;
                                  END;
                                END;
                                 }

    { 2   ;1   ;Column  ;ReportForNavPageNo  ;
               IncludeCaption=No;
               SourceExpr=ReportForNav.PageNo }

    { 3   ;1   ;Column  ;WORKDATE            ;
               IncludeCaption=No;
               SourceExpr=WORKDATE }

    { 4   ;1   ;Column  ;USERID              ;
               IncludeCaption=No;
               SourceExpr=USERID }

    { 5   ;1   ;Column  ;Anzeigefilter       ;
               IncludeCaption=No;
               SourceExpr=Anzeigefilter }

    { 6   ;1   ;Column  ;Feld12_Klassifizierung;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 12" }

    { 7   ;1   ;Column  ;Feld9_Klassifizierung;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 9" }

    { 8   ;1   ;Column  ;Feld7_Klassifizierung;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 7" }

    { 9   ;1   ;Column  ;Feld6_Klassifizierung;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 6" }

    { 10  ;1   ;Column  ;Belegnr_Klassifizierung;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Belegnr." }

    { 11  ;1   ;Column  ;Feld13_Klassifizierung;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 13" }

    { 12  ;1   ;Column  ;Feld10_Klassifizierung;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 10" }

    { 13  ;1   ;Column  ;Index_Klassifizierung;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle.Index }

    { 14  ;1   ;Column  ;Feld5_Klassifizierung;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 5" }

    { 15  ;1   ;Column  ;Feld4_Klassifizierung;
               DecimalPlaces=0:0;
               IncludeCaption=No;
               SourceExpr=Berichtstabelle."Feld 4" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   EnableFields;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1140008;2;Field     ;
                  Name=v_betreuer;
                  CaptionML=DEU=Betreuer Innendienst;
                  SourceExpr=v_betreuer;
                  TableRelation=Salesperson/Purchaser }

      { 1140009;2;Field     ;
                  Name=v_verkcode;
                  CaptionML=DEU=Verk„ufercode;
                  SourceExpr=v_verkcode;
                  TableRelation=Salesperson/Purchaser }

      { 1140010;2;Field     ;
                  Name=v_gebietscode;
                  CaptionML=DEU=Gebietscode;
                  SourceExpr=v_gebietscode;
                  TableRelation=Territory }

      { 1140004;2;Field     ;
                  Name=check_klassifizierung;
                  CaptionML=DEU=Klassifizierung;
                  OptionCaptionML=DEU=Kunde besitzt Klassifizierung,Kunde hat keine Klassifizierung;
                  SourceExpr=check_klassifizierung;
                  OnValidate=BEGIN
                               EnableFields;
                             END;
                              }

      { 1000000002;2;Group  ;
                  CaptionML=DEU=Hilfe;
                  GroupType=Group }

      { 1000000003;3;Field  ;
                  CaptionML=DEU=Hier nach wird nicht gesucht, bitte das Feld darunter fr die Suche benutzen! (> Suche nach Branche);
                  Style=StrongAccent;
                  StyleExpr=TRUE }

      { 1000000001;3;Field  ;
                  CaptionML=DEU=Hilfestellung Brachencode;
                  SourceExpr=hilfe_branchencode;
                  TableRelation="Industry Group";
                  Style=Favorable;
                  StyleExpr=TRUE }

      { 1140005;2;Field     ;
                  Name=txbox_suche_branchencode;
                  CaptionML=DEU=Suche nach Branche;
                  SourceExpr=text_branchencode;
                  Enabled=show_branchencode }

      { 1140016;2;Field     ;
                  Name=rdbutn_12Monate;
                  CaptionML=DEU=Umsatzauswertung;
                  OptionCaptionML=DEU=Umsatz in letzten 12 Monaten,Umsatz in letzten 24 Monaten,Kein Umsatz;
                  SourceExpr=Monate;
                  Enabled=show_branchencode = FALSE }

      { 1140018;2;Field     ;
                  Name=check_Ansprech;
                  CaptionML=DEU=Ausgabe;
                  OptionCaptionML=DEU=Ansprechpartner nach Excel ausgeben,Ansprechpartner nicht nach Excel ausgeben;
                  SourceExpr=check_Ansprech }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

      { 1000000000;2;Field  ;
                  Name=show_branchencode;
                  SourceExpr=show_branchencode;
                  Enabled=FALSE }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Berichtstabelle@1140013 : TEMPORARY Record 50037;
      Kontakt@1140014 : Record 5050;
      Projekt_Ansprech@1140001 : Record 50005;
      RE_Kopf@1140016 : Record 112;
      RE_Zeile@1140017 : Record 113;
      AN_Kopf@1140020 : Record 36;
      Arch_AN_Kopf@1140021 : Record 5107;
      Branchen@1140015 : Record 5058;
      Kontakt_Ansprech@1000000014 : Record 5050;
      Mail_gru@1000000013 : Record 5056;
      Anzeigefilter@1140000 : Text[250];
      check_klassifizierung@1140007 : 'ja,nein';
      v_betreuer@1140008 : Code[10];
      v_verkcode@1140009 : Code[10];
      v_gebietscode@1140010 : Code[10];
      Monate@1140019 : '12M,24M,0M';
      text_branchencode@1140011 : Code[80];
      hilfe_branchencode@1000000001 : Code[10];
      kumuliert@1140018 : Decimal;
      Umsatz@1140012 : Boolean;
      keinUmsatz_aberAngebote@1140022 : Boolean;
      TempExcelBuffer@1000000012 : TEMPORARY Record 370;
      FileMgt@1000000011 : Codeunit 419;
      TOPAS_API@1000000020 : Codeunit 50001;
      ServerFileName@1000000010 : Text;
      SheetName@1000000009 : Text[250];
      DoUpdateExistingWorksheet@1000000008 : Boolean;
      Testmode@1000000007 : Boolean;
      Window@1000000006 : Dialog;
      RecNo@1000000005 : Integer;
      TotalRecNo@1000000004 : Integer;
      RowNo@1000000003 : Integer;
      ColumnNo@1000000002 : Integer;
      check_Ansprech@1140023 : 'ja,nein';
      counter@1140026 : Integer;
      show_branchencode@1000000000 : Boolean;
      Text000@1000000019 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000018 : TextConst 'DEU=Kontakte';
      Text002@1000000017 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text003@1000000016 : TextConst 'DEU=Excel Export erfolgreich abgeschlossen.';
      ExcelFileExtensionTok@1000000015 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionCopySchleife_Header2@5089(VAR Klassifizierung@1000000000 : Record 50037);
    BEGIN
      WITH Klassifizierung DO BEGIN
        ReportForNav.ShowOutput(check_klassifizierung = check_klassifizierung::ja);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopySchleife_Header3@5090(VAR Klassifizierung@1000000000 : Record 50037);
    BEGIN
      WITH Klassifizierung DO BEGIN
        ReportForNav.ShowOutput(check_klassifizierung = check_klassifizierung::nein);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopySchleife_Body4@5091(VAR Klassifizierung@1000000000 : Record 50037);
    BEGIN
      WITH Klassifizierung DO BEGIN
        ReportForNav.ShowOutput(check_klassifizierung = check_klassifizierung::ja);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionCopySchleife_Body5@5092(VAR Klassifizierung@1000000000 : Record 50037);
    BEGIN
      WITH Klassifizierung DO BEGIN
        ReportForNav.ShowOutput(check_klassifizierung = check_klassifizierung::nein);
      END;
    END;

    PROCEDURE EnableFields@1140000();
    BEGIN
      IF check_klassifizierung = check_klassifizierung::ja THEN BEGIN
        show_branchencode := TRUE;
      END;
      IF check_klassifizierung = check_klassifizierung::nein THEN BEGIN
        show_branchencode := FALSE;
      END;
    END;

    PROCEDURE Excel_definieren@1140015();
    BEGIN
      CreateExcel;
      RowNo := 1;
      //šberschriften
      IF check_klassifizierung = check_klassifizierung::nein THEN BEGIN
        ColumnNo := 1;
        EnterCell(RowNo,ColumnNo,'Kontaktnr.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Kunde','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Ort','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'PLZ','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Betreuer','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Verk„ufer','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Gebietscode','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Projekte','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Umsatz in °','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      END;
      IF check_klassifizierung = check_klassifizierung::ja THEN BEGIN
        ColumnNo := 1;
        EnterCell(RowNo,ColumnNo,'Kontaktnr.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Kunde','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Ort','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'PLZ','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Betreuer','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Verk„ufer','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Gebietscode','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Branchencode','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Branchenbeschreibung','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Anrede','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Vorname','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Nachname','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Position','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
        ColumnNo += 1;
        EnterCell(RowNo,ColumnNo,'Email','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      END;
      RowNo := 2;
    END;

    PROCEDURE Suche_Kontakte_mit_Branchen@1140010();
    BEGIN
      Branchen.RESET;
      Branchen.SETFILTER("Industry Group Code",text_branchencode);
      IF Branchen.FINDFIRST THEN BEGIN
        TotalRecNo := Branchen.COUNT;
        REPEAT
          Kontakt.RESET;
          Kontakt.SETFILTER(Type,'%1',Kontakt.Type::Company);
          Kontakt.SETFILTER("No.",Branchen."Contact No.");
          Kontakt.SETFILTER("Betreuer Innendienst",v_betreuer);
          Kontakt.SETFILTER("Salesperson Code",v_verkcode);
          Kontakt.SETFILTER("Territory Code",v_gebietscode);
          IF Kontakt.FINDFIRST THEN BEGIN
            Berichtstabelle.INIT;
            Berichtstabelle.Tabelle := 'KLASSIFIZIERUNG';
            Berichtstabelle.Index := Kontakt."No.";
            Berichtstabelle."Feld 10" := Kontakt.Name;
            Berichtstabelle."Feld 13" := Kontakt.City;
            Berichtstabelle."Feld 6" := Kontakt."Betreuer Innendienst";
            Berichtstabelle."Feld 7" := Kontakt."Salesperson Code";
            Berichtstabelle."Feld 8" := Kontakt."Post Code";
            Berichtstabelle."Feld 9" := Kontakt."Territory Code";
            Berichtstabelle."Belegnr." := Branchen."Industry Group Code";
            Branchen.CALCFIELDS("Industry Group Description");
            Berichtstabelle."Feld 12" := Branchen."Industry Group Description";
            Berichtstabelle.Uhrzeit := CURRENTDATETIME;
            Berichtstabelle.User := USERID;
            Berichtstabelle.INSERT;
          END;
          RecNo := RecNo + 1;
          IF check_Ansprech = check_Ansprech::ja THEN
            Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
        UNTIL Branchen.NEXT = 0;
      END;
    END;

    PROCEDURE Suche_Kontakte_ohne_Branchen@1140011();
    BEGIN
      Kontakt.RESET;
      Kontakt.SETFILTER(Type,'%1',Kontakt.Type::Company);
      Kontakt.SETFILTER("Betreuer Innendienst",v_betreuer);
      Kontakt.SETFILTER("Salesperson Code",v_verkcode);
      Kontakt.SETFILTER("Territory Code",v_gebietscode);
      IF Kontakt.FIND('-') THEN BEGIN
        REPEAT
          TotalRecNo := Kontakt.COUNT;
          Branchen.RESET;
          Branchen.SETFILTER("Contact No.",Kontakt."No.");
          IF NOT Branchen.FINDFIRST THEN BEGIN
            kumuliert := 0;
            RE_Kopf.RESET;
            RE_Kopf.SETFILTER("Sell-to Contact No.",'%1',Kontakt."No.");
            RE_Kopf.SETFILTER("Posting Date",'>%1',CALCDATE('-' + FORMAT(Monate),WORKDATE));
            IF RE_Kopf.FINDFIRST THEN BEGIN
              REPEAT
                RE_Zeile.SETFILTER("Document No.",'%1',RE_Kopf."No.");
                RE_Zeile.SETFILTER(Type,'%1',RE_Zeile.Type::Item);
                RE_Zeile.SETFILTER(RE_Zeile.Quantity,'<>%1',0);
                IF RE_Zeile.FINDFIRST THEN
                  REPEAT
                    kumuliert := kumuliert + (RE_Zeile.Quantity * RE_Zeile."VK-Preis (MW)");
                  UNTIL RE_Zeile.NEXT = 0;
              UNTIL RE_Kopf.NEXT = 0;
              IF kumuliert <> 0 THEN BEGIN
                Berichtstabelle.INIT;
                Berichtstabelle.Tabelle := 'KLASSIFIZIERUNG';
                Berichtstabelle.Index := Kontakt."No.";
                Berichtstabelle."Feld 10" := Kontakt.Name;
                Berichtstabelle."Feld 13" := Kontakt.City;
                Berichtstabelle."Feld 6" := Kontakt."Betreuer Innendienst";
                Berichtstabelle."Feld 7" := Kontakt."Salesperson Code";
                Berichtstabelle."Feld 8" := Kontakt."Post Code";
                Berichtstabelle."Feld 9" := Kontakt."Territory Code";
                Projekt_Ansprech.RESET;
                Projekt_Ansprech.SETFILTER("Kampagnennr.",'<>%1','');
                Projekt_Ansprech.SETFILTER("Kontaktnr.",Kontakt."No.");
                IF Projekt_Ansprech.FINDFIRST THEN
                  Berichtstabelle."Feld 4" := Projekt_Ansprech.COUNT
                ELSE
                  Berichtstabelle."Feld 4" := 0;
                Berichtstabelle."Feld 5" := kumuliert;
                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                Berichtstabelle.User := USERID;
                Berichtstabelle.INSERT;
              END;
            END;
          END;
          RecNo := RecNo + 1;
          IF check_Ansprech = check_Ansprech::ja THEN
            Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
        UNTIL Kontakt.NEXT = 0;
      END;
    END;

    PROCEDURE Suche_Kontakte_ohne_Umsatz@1140001();
    BEGIN
      Kontakt.RESET;
      Kontakt.SETFILTER(Type,'%1',Kontakt.Type::Company);
      Kontakt.SETFILTER("Betreuer Innendienst",v_betreuer);
      Kontakt.SETFILTER("Salesperson Code",v_verkcode);
      Kontakt.SETFILTER("Territory Code",v_gebietscode);
      IF Kontakt.FIND('-') THEN BEGIN
        TotalRecNo := Kontakt.COUNT;
        REPEAT
          keinUmsatz_aberAngebote := FALSE;
          Branchen.RESET;
          Branchen.SETFILTER("Contact No.",Kontakt."No.");
          IF NOT Branchen.FINDFIRST THEN BEGIN
            RE_Kopf.RESET;
            RE_Kopf.SETFILTER("Sell-to Contact No.",'%1',Kontakt."No.");
            //RE_Kopf.SETFILTER("Posting Date",'>%1',CALCDATE('-' + FORMAT(Monate),WORKDATE));
            IF NOT RE_Kopf.FINDFIRST THEN BEGIN
              AN_Kopf.RESET;
              AN_Kopf.SETFILTER("Document Type",'%1',AN_Kopf."Document Type"::Quote);
              AN_Kopf.SETFILTER("Sell-to Contact No.",'%1',Kontakt."No.");
              IF AN_Kopf.FINDFIRST THEN
                keinUmsatz_aberAngebote := TRUE;
              Arch_AN_Kopf.RESET;
              Arch_AN_Kopf.SETFILTER("Document Type",'%1',Arch_AN_Kopf."Document Type"::Quote);
              Arch_AN_Kopf.SETFILTER("Sell-to Contact No.",'%1',Kontakt."No.");
              IF Arch_AN_Kopf.FINDFIRST THEN
                keinUmsatz_aberAngebote := TRUE;
              IF keinUmsatz_aberAngebote THEN BEGIN
                Berichtstabelle.INIT;
                Berichtstabelle.Tabelle := 'KLASSIFIZIERUNG';
                Berichtstabelle.Index := Kontakt."No.";
                Berichtstabelle."Feld 10" := Kontakt.Name;
                Berichtstabelle."Feld 13" := Kontakt.City;
                Berichtstabelle."Feld 6" := Kontakt."Betreuer Innendienst";
                Berichtstabelle."Feld 7" := Kontakt."Salesperson Code";
                Berichtstabelle."Feld 8" := Kontakt."Post Code";
                Berichtstabelle."Feld 9" := Kontakt."Territory Code";
                Projekt_Ansprech.RESET;
                Projekt_Ansprech.SETFILTER("Kampagnennr.",'<>%1','');
                Projekt_Ansprech.SETFILTER("Kontaktnr.",Kontakt."No.");
                IF Projekt_Ansprech.FINDFIRST THEN
                  Berichtstabelle."Feld 4" := Projekt_Ansprech.COUNT
                ELSE
                  Berichtstabelle."Feld 4" := 0;
                Berichtstabelle.Uhrzeit := CURRENTDATETIME;
                Berichtstabelle.User := USERID;
                Berichtstabelle.INSERT;
              END;
            END;
          END;
          RecNo := RecNo + 1;
          IF check_Ansprech = check_Ansprech::ja THEN
            Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
        UNTIL Kontakt.NEXT = 0;
      END;
    END;

    PROCEDURE Ansprech_Kontakte_mit_Branchen@1140002();
    BEGIN
      Branchen.RESET;
      Branchen.SETFILTER("Industry Group Code",text_branchencode);
      IF Branchen.FINDFIRST THEN BEGIN
        TotalRecNo := Branchen.COUNT;
        REPEAT
          Kontakt.RESET;
          Kontakt.SETFILTER(Type,'%1',Kontakt.Type::Company);
          Kontakt.SETFILTER("No.",Branchen."Contact No.");
          Kontakt.SETFILTER("Betreuer Innendienst",v_betreuer);
          Kontakt.SETFILTER("Salesperson Code",v_verkcode);
          Kontakt.SETFILTER("Territory Code",v_gebietscode);
          IF Kontakt.FIND('-') THEN BEGIN
            REPEAT
              Kontakt_Ansprech.RESET;
              Kontakt_Ansprech.SETFILTER("Company No.",'%1',Kontakt."No.");
              Kontakt_Ansprech.SETFILTER(Type,'%1',Kontakt_Ansprech.Type::Person);
              Kontakt_Ansprech.SETFILTER("Unternehmen verlassen",'%1',FALSE);
              IF Kontakt_Ansprech.FINDFIRST THEN BEGIN
                REPEAT
                  Branchen.CALCFIELDS("Industry Group Description");
                  ColumnNo := 1;
                  EnterCell(RowNo,ColumnNo,'',TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Kontakt.TABLENAME,1,50091,Kontakt."No."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Kontakt.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Kontakt.City,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Kontakt."Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Kontakt."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Kontakt."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Kontakt."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Branchen."Industry Group Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Branchen."Industry Group Description",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Kontakt_Ansprech."Salutation Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Kontakt_Ansprech."First Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Kontakt_Ansprech.Surname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Kontakt_Ansprech."Organizational Level Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  Mail_gru.RESET;
                  Mail_gru.SETFILTER(Mail_gru."Contact No.",'%1',Kontakt_Ansprech."No.");
                  Mail_gru.SETFILTER(Mail_gru."Mailing Group Code",'%1|%2','UNSUB','NO EMAIL');
                  IF Mail_gru.FINDFIRST THEN BEGIN
                    EnterCell(RowNo,ColumnNo,'Keine Email gewnscht','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  END ELSE BEGIN
                    EnterCell(RowNo,ColumnNo,Kontakt_Ansprech."E-Mail 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  END;
                  RowNo := RowNo + 1;
                UNTIL Kontakt_Ansprech.NEXT=0;
              END;
            UNTIL Kontakt.NEXT=0;
          END;
          RecNo := RecNo + 1;
          IF check_Ansprech = check_Ansprech::ja THEN
            Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
        UNTIL Branchen.NEXT = 0;
      END;
    END;

    PROCEDURE CreateExcel@1000000001();
    BEGIN
      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;
      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');
      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);
    END;

    LOCAL PROCEDURE FinishExcel@1000000018(SheetName@1000000000 : Text);
    BEGIN
      Window.CLOSE;
      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN
          TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet(SheetName,COMPANYNAME,USERID);
        //TempExcelBuffer.SetWidth(1,'A',20);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
          //TempExcelBuffer.OpenExcelWithoutAutoFit('','','',TRUE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'CopySchleife': CASE SectionId OF
          'Header2': OnPreSectionCopySchleife_Header2(Berichtstabelle);
          'Header3': OnPreSectionCopySchleife_Header3(Berichtstabelle);
          'Body4': OnPreSectionCopySchleife_Body4(Berichtstabelle);
          'Body5': OnPreSectionCopySchleife_Body5(Berichtstabelle);
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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
AbkIzuL+q5yxR92a/2rw2/8A</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

