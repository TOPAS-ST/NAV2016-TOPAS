OBJECT Report 50058 TOPAS-WEIN
{
  OBJECT-PROPERTIES
  {
    Date=27.03.18;
    Time=16:11:24;
    Modified=Yes;
    Version List=Topas Bericht,FORNAV2.0.0.1189/1189;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   ReportForNav := ReportForNav.Report(CurrReport.OBJECTID,CurrReport.LANGUAGE,SERIALNUMBER,USERID,COMPANYNAME);ReportForNav.Init;
                 END;

    OnPreReport=BEGIN
                  IF PrintToExcel THEN
                    CreateExcel;
                  ;ReportForNav.OpenDesigner := ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;

                  PurchRcptFilter := "Purch. Rcpt. Line".GETFILTERS;
                  ItemLedgerEntryFilter := "Item Ledger Entry".GETFILTERS;
                END;

    OnPostReport=BEGIN
                   IF PrintToExcel THEN BEGIN

                     Window.CLOSE;

                     IF DoUpdateExistingWorksheet THEN BEGIN
                       TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
                       TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
                       TempExcelBuffer.CloseBook;
                       IF NOT Testmode THEN
                         TempExcelBuffer.DownloadAndOpenExcel;
                     END ELSE BEGIN
                       TempExcelBuffer.CreateBook(ServerFileName,Text001);
                       TempExcelBuffer.WriteSheet(
                         PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
                       TempExcelBuffer.CloseBook;
                       IF NOT Testmode THEN BEGIN
                         TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
                         //TempExcelBuffer.OpenExcelWithoutAutoFit(Text001,Text001 + ExcelFileExtensionTok,'',TRUE);
                       END;
                     END;
                     IF NOT Testmode THEN
                       TempExcelBuffer.GiveUserControl;

                   END;
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table121;
               DataItemTableView=WHERE(Quantity=FILTER(>0));
               OnPreDataItem=BEGIN
                               TotalRecNo := "Purch. Rcpt. Line".COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  gesamt := "Item Ledger Entry".Quantity * "Purch. Rcpt. Line"."Direct Unit Cost";
                                  PurchRcptHeader.SETRANGE("No.","Purch. Rcpt. Line"."Document No.");
                                  IF PurchRcptHeader.FINDFIRST THEN
                                    VendorOrderNo := PurchRcptHeader."Vendor Order No."
                                  ELSE
                                    VendorOrderNo := '';

                                  IF PrintToExcel THEN BEGIN
                                    RecNo := RecNo + 1;
                                    Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                  END;
                                END;

               ReqFilterFields=Posting Date,Manufacturer Code }

    { 2   ;1   ;Column  ;USERID              ;
               SourceExpr=USERID }

    { 1000000000;1;Column;CompanyName        ;
               SourceExpr=COMPANYNAME }

    { 3   ;1   ;Column  ;ReportForNavPageNo  ;
               SourceExpr=ReportForNav.PageNo }

    { 4   ;1   ;Column  ;TODAY_0_4           ;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 1000000002;1;Column;PurchRcptFilter    ;
               SourceExpr=PurchRcptFilter }

    { 1000000001;1;Column;ItemLedgerEntryFilter;
               SourceExpr=ItemLedgerEntryFilter }

    { 5   ;1   ;Column  ;VendorOrderNo       ;
               SourceExpr=VendorOrderNo }

    { 6   ;1   ;Column  ;DirectUnitCost_PurchRcptLine;
               SourceExpr="Direct Unit Cost" }

    { 7   ;1   ;Column  ;Quantity_PurchRcptLine;
               SourceExpr=Quantity }

    { 8   ;1   ;Column  ;No_PurchRcptLine    ;
               SourceExpr="No." }

    { 9   ;1   ;Column  ;OrderNo_PurchRcptLine;
               SourceExpr="Order No." }

    { 10  ;1   ;DataItem;                    ;
               DataItemTable=Table32;
               DataItemTableView=SORTING(Item No.,Posting Date)
                                 WHERE(Quantity=FILTER(>0));
               OnAfterGetRecord=BEGIN
                                  seriennr := "Serial No.";
                                  IF "Product Key" <> '' THEN BEGIN
                                    IF Artikel.GET("Item No.")THEN BEGIN
                                      IF seriennr <> '' THEN BEGIN
                                        IF Artikel."Item Tracking Code" = 'PRODUCTKEY' THEN
                                          seriennr := "Product Key";
                                      END;
                                    END;
                                  END;

                                  IF PrintToExcel THEN
                                    ExcelFllenDatecode;
                                END;

               ReqFilterFields=Posting Date;
               DataItemLink=Document No.=FIELD(Document No.),
                            Document Line No.=FIELD(Line No.),
                            Posting Date=FIELD(Posting Date) }

    { 11  ;2   ;Column  ;Ursprungsland_ItemLedgerEntry;
               SourceExpr=Ursprungsland }

    { 12  ;2   ;Column  ;LocationCode_ItemLedgerEntry;
               SourceExpr="Location Code" }

    { 13  ;2   ;Column  ;Quantity_ItemLedgerEntry;
               SourceExpr=Quantity }

    { 14  ;2   ;Column  ;LotNo_ItemLedgerEntry;
               SourceExpr="Lot No." }

    { 15  ;2   ;Column  ;SerialNo_ItemLedgerEntry;
               SourceExpr=seriennr }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1140000;2;Field     ;
                  CaptionML=[DEU=Ausgabe in Excel;
                             ENU=Print to Excel];
                  SourceExpr=PrintToExcel }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Artikel@1000000000 : Record 27;
      PurchRcptHeader@1000000001 : Record 120;
      TempExcelBuffer@1000000016 : TEMPORARY Record 370;
      TOPAS_API@1000000015 : Codeunit 50001;
      FileMgt@1000000014 : Codeunit 419;
      ServerFileName@1000000013 : Text;
      SheetName@1000000012 : Text[250];
      DoUpdateExistingWorksheet@1000000011 : Boolean;
      Testmode@1000000010 : Boolean;
      Window@1000000009 : Dialog;
      RecNo@1000000008 : Integer;
      TotalRecNo@1000000007 : Integer;
      RowNo@1000000006 : Integer;
      ColumnNo@1000000005 : Integer;
      gesamt@1140000 : Decimal;
      VendorOrderNo@1140002 : Code[35];
      seriennr@1000000002 : Code[40];
      PurchRcptFilter@1000000003 : Text;
      ItemLedgerEntryFilter@1000000004 : Text;
      PrintToExcel@1140008 : Boolean;
      ReportForNav@5000 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.2.0.0.1189, Version=2.0.0.1189, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;
      Text000@1000000031 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000030 : TextConst 'DEU=WEIN';
      Text002@1000000029 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text003@1000000028 : TextConst 'DEU=Fehler beim Export nach Excel. Es konnte kein Filter gefunden werden. Der Report wird abgebrochen.';
      Text020@1000000027 : TextConst 'DEU=Bestell-Nr.';
      Text021@1000000026 : TextConst 'DEU=Artikelnr.';
      Text022@1000000025 : TextConst 'DEU=Menge';
      Text023@1000000024 : TextConst 'DEU=Kred. Bestellnr.';
      Text024@1000000023 : TextConst 'DEU=Datecode / Seriennummer / Product Key';
      Text025@1000000022 : TextConst 'DEU=EK-Preis';
      Text026@1000000021 : TextConst 'DEU=Packing List No.';
      Text027@1000000020 : TextConst 'DEU=Kred.-Lieferungsnr.';
      Text028@1000000019 : TextConst 'DEU=Ursprungsland';
      ExcelFileExtensionTok@1000000017 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';

    LOCAL PROCEDURE OnPreSectionPurchRcptLine_Body2@5021(VAR "Purch. Rcpt. Line"@1000000000 : Record 121);
    BEGIN
      WITH "Purch. Rcpt. Line" DO BEGIN
         ReportForNav.ShowOutput("Purch. Rcpt. Line"."Location Code" = 'MUST');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionPurchRcptLine_Body3@5022(VAR "Purch. Rcpt. Line"@1000000000 : Record 121);
    BEGIN
      WITH "Purch. Rcpt. Line" DO BEGIN
        ReportForNav.ShowOutput("Purch. Rcpt. Line"."Location Code" <> 'MUST');
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItemLedgerEntry_Header4@5023(VAR "Item Ledger Entry"@1000000000 : Record 32);
    BEGIN
      WITH "Item Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput("Purch. Rcpt. Line".Quantity <> 0);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionItemLedgerEntry_Body5@5024(VAR "Item Ledger Entry"@1000000000 : Record 32);
    BEGIN
      WITH "Item Ledger Entry" DO BEGIN
        ReportForNav.ShowOutput("Purch. Rcpt. Line".Quantity <> 0);
      END;
    END;

    PROCEDURE CreateExcel@1140002();
    BEGIN
      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;

      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');

      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);

      //Header
      RecNo := 0;
      RowNo := 1;
      ColumnNo := 1;
      EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text025,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text026,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text027,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text028,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 2;
    END;

    PROCEDURE ExcelFllenDatecode@1140015();
    BEGIN
      ColumnNo := 1;
      EnterCell(RowNo,ColumnNo,PurchRcptHeader."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,'',TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(Artikel.TABLENAME,1,30,"Purch. Rcpt. Line"."No."),';',','),FALSE,FALSE,FALSE,'[blue]',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Item Ledger Entry".Quantity),'',FALSE,FALSE,FALSE,'#,##0',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,PurchRcptHeader."Vendor Order No.",'',FALSE,FALSE,FALSE,'@',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      IF "Item Ledger Entry"."Item Tracking" = "Item Ledger Entry"."Item Tracking"::"Lot No." THEN
        EnterCell(RowNo,ColumnNo,"Item Ledger Entry"."Lot No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text)
      ELSE
        IF "Item Ledger Entry"."Item Tracking" = "Item Ledger Entry"."Item Tracking"::"Serial No." THEN

      EnterCell(RowNo,ColumnNo,seriennr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT("Purch. Rcpt. Line"."Direct Unit Cost"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,"Purch. Rcpt. Line".Description,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,PurchRcptHeader."Vendor Shipment No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,"Item Ledger Entry".Ursprungsland,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      InStream@1004 : InStream;
      EmptyLayout@1003 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        CustomReportLayout.CALCFIELDS(Layout);
        CustomReportLayout.Layout.CREATEINSTREAM(InStream,TEXTENCODING::UTF8);
        ReportForNav.IsCustomLayout := TRUE;
      END ELSE
        REPORT.RDLCLAYOUT(ReportForNav.ReportID,InStream);

      ReportForNav.LoadRdlc(InStream);
      IF COPYSTR(LOWERCASE(GETURL(CLIENTTYPE::Current, COMPANYNAME, OBJECTTYPE::Codeunit, 1)), 1, 14) = 'dynamicsnav://' THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
    BEGIN
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportForNav.ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END ELSE BEGIN
        IF CONFIRM('Default custom layout not found. Create one?') THEN;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      ReportForNavClient.ShowDesigner;
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'PurchRcptLine': CASE SectionId OF
          'Body2': OnPreSectionPurchRcptLine_Body2("Purch. Rcpt. Line");
          'Body3': OnPreSectionPurchRcptLine_Body3("Purch. Rcpt. Line");
        END;
        'ItemLedgerEntry': CASE SectionId OF
          'Header4': OnPreSectionItemLedgerEntry_Header4("Item Ledger Entry");
          'Body5': OnPreSectionItemLedgerEntry_Body5("Item Ledger Entry");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@50013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnClientOperation@5008(Args@1000 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array");
    VAR
      op@1001 : Text;
      FileMgmt@1002 : Codeunit 419;
      Process@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" RUNONCLIENT;
      PathObj@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Path" RUNONCLIENT;
      FileVersionInfo@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.FileVersionInfo" RUNONCLIENT;
      DirectoryHelper@1004 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
    BEGIN
      op := Args.GetValue(0);
      CASE op OF
        'TempPath': ReportForNav.Result := PathObj.GetTempPath();
        'FileExists': ReportForNav.Result := FileMgmt.ClientFileExists(Args.GetValue(1));
        'DirectoryExists': ReportForNav.Result := FileMgmt.ClientDirectoryExists(Args.GetValue(1));
        'ProcessLocation': ReportForNav.Result := Process.GetCurrentProcess().MainModule.FileName;
        'FileVersion': ReportForNav.Result := FileVersionInfo.GetVersionInfo(Args.GetValue(1)).FileVersion;
        'DeleteFile': FileMgmt.DeleteClientFile(Args.GetValue(1));
        'DeleteDirectory': IF STRLEN(Args.GetValue(1)) > 20 THEN
          IF FileMgmt.ClientDirectoryExists(Args.GetValue(1)) THEN
            DirectoryHelper.Delete(FORMAT(Args.GetValue(1)), TRUE);
      END;
    END;

    EVENT ReportForNav@5000::OnCheckForNavClientVersion@5007();
    BEGIN
      ReportForNavClient := ReportForNavClient.Report();
      IF ReportForNav.MyFileVersion <> ReportForNavClient.MyFileVersion THEN
        ERROR('You have version %1 of the Reports ForNAV assembly here:\\%2\\Please close your NAV client and update it to version %3.',
              ReportForNavClient.MyFileVersion, ReportForNavClient.MyFileName, ReportForNav.MyFileVersion);
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5008(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
    BEGIN
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      DOWNLOADFROMSTREAM(ServerInStream,'','','',ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5009(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      WHILE ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview) DO BEGIN
        ReportForNav.HandlePrintPreviewRequest(ReportForNavClient.GetPrintPreviewRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnTotals@5004(DataItemId@1000000000 : Text;Operation@1000000001 : Text;GroupTotalFieldNo@1000000002 : Integer);
    VAR
      CurrRecRef@1000000003 : RecordRef;
      NextRecRef@1000000004 : RecordRef;
      CurrKeyRef@1000000005 : KeyRef;
      NextKeyRef@1000000006 : KeyRef;
      FieldIndex@1000000007 : Integer;
      GroupFieldIndex@1000000008 : Integer;
    BEGIN
      // Do not change (Autogenerated by Reports ForNAV) - Instead change the Create Totals, Total Fields or Group Total Fields properties on the Data item in the ForNAV designer
      CASE DataItemId OF
        'PurchRcptLine': WITH "Purch. Rcpt. Line" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,"Direct Unit Cost");
                ReportForNav.AddTotal(DataItemId,1,gesamt);
              END;
           'Restore': BEGIN
                 "Direct Unit Cost" := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
                 gesamt := ReportForNav.RestoreTotal(DataItemId,1,GroupTotalFieldNo);
              END;
        END;  'ItemLedgerEntry': WITH "Item Ledger Entry" DO CASE Operation OF
           'Add': BEGIN
                ReportForNav.AddTotal(DataItemId,0,gesamt);
              END;
           'Restore': BEGIN
                 gesamt := ReportForNav.RestoreTotal(DataItemId,0,GroupTotalFieldNo);
              END;
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>23bef2d2-dc2f-4e40-827c-5621d0ff87c1</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
        <Style />
      </Body>
      <Width>6.5in</Width>
      <Page>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <rd:ReportUnitType>Invalid</rd:ReportUnitType>
  <rd:ReportID>25162d22-b419-4187-8538-9af09867c030</rd:ReportID>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Fields>
        <Field Name="USERID">
          <DataField>USERID</DataField>
        </Field>
        <Field Name="CompanyName">
          <DataField>CompanyName</DataField>
        </Field>
        <Field Name="ReportForNavPageNo">
          <DataField>ReportForNavPageNo</DataField>
        </Field>
        <Field Name="TODAY_0_4">
          <DataField>TODAY_0_4</DataField>
        </Field>
        <Field Name="PurchRcptFilter">
          <DataField>PurchRcptFilter</DataField>
        </Field>
        <Field Name="ItemLedgerEntryFilter">
          <DataField>ItemLedgerEntryFilter</DataField>
        </Field>
        <Field Name="VendorOrderNo">
          <DataField>VendorOrderNo</DataField>
        </Field>
        <Field Name="DirectUnitCost_PurchRcptLine">
          <DataField>DirectUnitCost_PurchRcptLine</DataField>
        </Field>
        <Field Name="DirectUnitCost_PurchRcptLineFormat">
          <DataField>DirectUnitCost_PurchRcptLineFormat</DataField>
        </Field>
        <Field Name="Quantity_PurchRcptLine">
          <DataField>Quantity_PurchRcptLine</DataField>
        </Field>
        <Field Name="Quantity_PurchRcptLineFormat">
          <DataField>Quantity_PurchRcptLineFormat</DataField>
        </Field>
        <Field Name="No_PurchRcptLine">
          <DataField>No_PurchRcptLine</DataField>
        </Field>
        <Field Name="OrderNo_PurchRcptLine">
          <DataField>OrderNo_PurchRcptLine</DataField>
        </Field>
        <Field Name="Ursprungsland_ItemLedgerEntry">
          <DataField>Ursprungsland_ItemLedgerEntry</DataField>
        </Field>
        <Field Name="LocationCode_ItemLedgerEntry">
          <DataField>LocationCode_ItemLedgerEntry</DataField>
        </Field>
        <Field Name="Quantity_ItemLedgerEntry">
          <DataField>Quantity_ItemLedgerEntry</DataField>
        </Field>
        <Field Name="Quantity_ItemLedgerEntryFormat">
          <DataField>Quantity_ItemLedgerEntryFormat</DataField>
        </Field>
        <Field Name="LotNo_ItemLedgerEntry">
          <DataField>LotNo_ItemLedgerEntry</DataField>
        </Field>
        <Field Name="SerialNo_ItemLedgerEntry">
          <DataField>SerialNo_ItemLedgerEntry</DataField>
        </Field>
      </Fields>
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
</Report>
    END_OF_RDLDATA
  }
}

