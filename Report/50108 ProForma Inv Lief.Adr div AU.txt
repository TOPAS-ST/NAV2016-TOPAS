OBJECT Report 50108 ProForma Inv Lief.Adr div AU
{
  OBJECT-PROPERTIES
  {
    Date=18.10.21;
    Time=09:36:00;
    Modified=Yes;
    Version List=FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.);
               OnPreDataItem=BEGIN
                               IF aunr = '' THEN ERROR('Der Filter Auftragsnummer ist leer.');
                               MESSAGE('Sicherheitshinweise: '+'\'+
                                       ' '+'\'+
                                       '  - alle Auftr„ge mssen auf die gleiche W„hrung lauten' +'\' +
                                       '  - der Debitor muá in allen Auftr„gen gleich sein' +'\' +
                                       '  - es muá die gleiche Lieferadresse hinterlegt sein'+ '\' +
                                       ' '+'\'+
                                       ' Wer Sicherheitshinweise nicht beachtet oder ungelesen wegklickt'+
                                       ' wird mit Ablage nicht unter 3 Monaten bestraft.');

                               SETFILTER("No.",aunr);
                               Firmendaten.GET;
                               Firmendaten.CALCFIELDS("ISO Logo");
                               //20.03.18 ST - šbergangsweise fr Formwandlung AG wird das TOPAS Logo generell gerendert, da das "alte" Briefpapier mit Logo nicht mehr verwendet werden soll
                               Firmendaten.CALCFIELDS(Picture);
                             END;

               OnAfterGetRecord=BEGIN
                                  CurrReport.LANGUAGE := Language.GetLanguageID("Language Code");
                                  TOPAS_Funktionen.GetCompanyInformation(CompanyInfo,Firmendaten);
                                  FormatAdr.SalesHeaderBillTo(DebAdr,"Sales Header");
                                  FormatAdr.SalesHeaderShipTo(LieferAnAdr,"Sales Header");

                                  IF w„  = '' THEN  BEGIN
                                    w„ := "Currency Code";
                                    IF w„ = '' THEN
                                      w„ := 'EUR';
                                  END;
                                END;
                                 }

    { 1000000003;1;Column;Picture_Firmendaten;
               SourceExpr=Firmendaten.Picture }

    { 18  ;1   ;Column  ;ISOLogo_Firmendaten ;
               SourceExpr=Firmendaten."ISO Logo" }

    { 1000000000;1;Column;CompanyName        ;
               SourceExpr=CompanyInfo[1] }

    { 1000000001;1;Column;CompanyAddress     ;
               SourceExpr=CompanyInfo[2]+ ', ' + CompanyInfo[4] +  ' ' + CompanyInfo[5] }

    { 1000000005;1;Column;CompanyPhone       ;
               SourceExpr=CompanyInfo[6] }

    { 1000000006;1;Column;CompanyFax         ;
               SourceExpr=CompanyInfo[7] }

    { 1000000007;1;Column;CompanyVATRegNo    ;
               SourceExpr=CompanyInfo[8] }

    { 1000000008;1;Column;CompanyRegNo       ;
               SourceExpr=CompanyInfo[9] }

    { 1000000009;1;Column;CompanyVorstand    ;
               SourceExpr=CompanyInfo[10] }

    { 1000000010;1;Column;CompanyARV         ;
               SourceExpr=CompanyInfo[11] }

    { 1000000011;1;Column;CompanyAmtsgericht ;
               SourceExpr=CompanyInfo[12] }

    { 1000000012;1;Column;CompanyWEEERegNo   ;
               SourceExpr=CompanyInfo[13] }

    { 1000000013;1;Column;CompanyPostfach    ;
               SourceExpr=CompanyInfo[14] }

    { 1000000002;1;Column;CompanyHomepage    ;
               SourceExpr=CompanyInfo[15] }

    { 2   ;1   ;Column  ;DebAdr8             ;
               SourceExpr=DebAdr[8] }

    { 3   ;1   ;Column  ;DebAdr7             ;
               SourceExpr=DebAdr[7] }

    { 4   ;1   ;Column  ;DebAdr6             ;
               SourceExpr=DebAdr[6] }

    { 5   ;1   ;Column  ;DebAdr5             ;
               SourceExpr=DebAdr[5] }

    { 6   ;1   ;Column  ;DebAdr4             ;
               SourceExpr=DebAdr[4] }

    { 7   ;1   ;Column  ;DebAdr3             ;
               SourceExpr=DebAdr[3] }

    { 8   ;1   ;Column  ;DebAdr2             ;
               SourceExpr=DebAdr[2] }

    { 9   ;1   ;Column  ;DebAdr1             ;
               SourceExpr=DebAdr[1] }

    { 10  ;1   ;Column  ;LieferAnAdr8        ;
               SourceExpr=LieferAnAdr[8] }

    { 11  ;1   ;Column  ;LieferAnAdr7        ;
               SourceExpr=LieferAnAdr[7] }

    { 12  ;1   ;Column  ;LieferAnAdr6        ;
               SourceExpr=LieferAnAdr[6] }

    { 13  ;1   ;Column  ;LieferAnAdr5        ;
               SourceExpr=LieferAnAdr[5] }

    { 14  ;1   ;Column  ;LieferAnAdr4        ;
               SourceExpr=LieferAnAdr[4] }

    { 15  ;1   ;Column  ;LieferAnAdr3        ;
               SourceExpr=LieferAnAdr[3] }

    { 17  ;1   ;Column  ;LieferAnAdr2        ;
               SourceExpr=LieferAnAdr[2] }

    { 16  ;1   ;Column  ;LieferAnAdr1        ;
               SourceExpr=LieferAnAdr[1] }

    { 19  ;1   ;Column  ;wa                  ;
               SourceExpr=w„ }

    { 20  ;1   ;Column  ;Bill_toCustomerNo_SalesHeader;
               SourceExpr="Sales Header"."Bill-to Customer No." }

    { 21  ;1   ;Column  ;SalesHeaderDocumentDate_0_1;
               SourceExpr=FORMAT("Sales Header"."Document Date",0,1) }

    { 22  ;1   ;Column  ;SalesHeaderExternalDocumentNo__SalesHeaderYourReference;
               SourceExpr="Sales Header"."External Document No."+' '+"Sales Header"."Your Reference" }

    { 23  ;1   ;Column  ;No_SalesHeader      ;
               SourceExpr="No." }

    { 24  ;1   ;Column  ;betrag              ;
               SourceExpr=betrag }

    { 25  ;1   ;DataItem;                    ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               OnAfterGetRecord=BEGIN
                                  IF artikel.GET("Sales Line"."No.") THEN BEGIN
                                    zollpos := artikel."Tariff No.";
                                    ursprung := artikel."Country/Region of Origin Code";
                                  END;
                                END;

               DataItemLink=Document No.=FIELD(No.) }

    { 26  ;2   ;Column  ;UnitPrice_QtytoShip ;
               SourceExpr="Unit Price"*"Qty. to Ship" }

    { 27  ;2   ;Column  ;ursprung            ;
               SourceExpr=ursprung }

    { 28  ;2   ;Column  ;zollpos             ;
               SourceExpr=zollpos }

    { 29  ;2   ;Column  ;UnitPrice_SalesLine ;
               SourceExpr="Unit Price" }

    { 30  ;2   ;Column  ;LineNo_SalesLine    ;
               SourceExpr="Line No." }

    { 31  ;2   ;Column  ;QtytoShip_SalesLine ;
               SourceExpr="Qty. to Ship" }

    { 32  ;2   ;Column  ;No_SalesLine        ;
               SourceExpr="No." }

    { 33  ;2   ;Column  ;Description_SalesLine;
               SourceExpr=Description }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1000000000;2;Field  ;
                  CaptionML=DEU=Hier die Auftragtragsnummern mit Trennstrich "|" angeben die zusammengefasst werden sollen (mindestens zwei). In den AU-Zeilen muá in der Spalte "zu liefern" die zu berechnende Menge eingetragen sein. Alle AUs mssen die gleiche W„hrung und Lief-Adr. haben. }

      { 1140000;2;Field     ;
                  CaptionML=DEU=1.);
                  SourceExpr=aunr }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Firmendaten@1000000003 : Record 79;
      Language@1000000002 : Record 8;
      FormatAdr@1000000004 : Codeunit 365;
      TOPAS_Funktionen@1000000001 : Codeunit 50006;
      CompanyInfo@1000000000 : ARRAY [15] OF Text;
      aunr@1140002 : Code[100];
      w„@1140010 : Code[10];
      betrag@1140011 : Decimal;
      artikel@1140020 : Record 27;
      zollpos@1140021 : Code[20];
      ursprung@1140022 : Code[20];
      sprachcode@1140023 : Decimal;
      DebAdr@1140026 : ARRAY [8] OF Text[50];
      LieferAnAdr@1140027 : ARRAY [8] OF Text[50];
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Header1@5010(VAR "Sales Header"@1000000000 : Record 36);
    BEGIN
      WITH "Sales Header" DO BEGIN
        //ReportForNav.ShowOutput(aunr1 = "Sales Header"."No.");
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Body2@5011(VAR "Sales Header"@1000000000 : Record 36);
    BEGIN
      WITH "Sales Header" DO BEGIN
        //ReportForNav.ShowOutput(KZ = TRUE);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Body5@5012(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      WITH "Sales Line" DO BEGIN
        ReportForNav.ShowOutput(("Qty. to Ship" > 0) AND (Type = Type::Item));
        IF ("Qty. to Ship" > 0) AND (Type = Type::Item) THEN
          betrag := betrag + ("Unit Price" * "Qty. to Ship");
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Body6@5013(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      WITH "Sales Line" DO BEGIN
        ReportForNav.ShowOutput(("Qty. to Ship" > 0) AND (Type = Type::"G/L Account"));
        IF ("Qty. to Ship" > 0) AND (Type = Type::"G/L Account") THEN
          betrag := betrag + ("Unit Price" * "Qty. to Ship");
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'SalesHeader': CASE SectionId OF
          'Header1': OnPreSectionSalesHeader_Header1("Sales Header");
          'Body2': OnPreSectionSalesHeader_Body2("Sales Header");
        END;
        'SalesLine': CASE SectionId OF
          'Body5': OnPreSectionSalesLine_Body5("Sales Line");
          'Body6': OnPreSectionSalesLine_Body6("Sales Line");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>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</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

