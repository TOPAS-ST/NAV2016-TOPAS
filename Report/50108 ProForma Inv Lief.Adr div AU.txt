OBJECT Report 50108 ProForma Inv Lief.Adr div AU
{
  OBJECT-PROPERTIES
  {
    Date=10.07.24;
    Time=14:44:31;
    Modified=Yes;
    Version List=FORNAV6.1.0.2145/2145;
  }
  PROPERTIES
  {
    OnInitReport=BEGIN
                   {;ReportForNav};ReportsForNavInit();
                 END;

    OnPreReport=BEGIN
                  ;ReportForNav.OpenDesigner:=ReportForNavOpenDesigner;IF NOT ReportForNav.Pre THEN CurrReport.QUIT;
                END;

    OnPostReport=BEGIN
                   ;ReportForNav.Post;
                 END;

  }
  DATASET
  {
    { 1   ;    ;DataItem;                    ;
               DataItemTable=Table36;
               DataItemTableView=SORTING(Document Type,No.);
               OnPreDataItem=BEGIN
                               IF aunr = '' THEN ERROR('Der Filter Auftragsnummer ist leer.');
                               MESSAGE('Sicherheitshinweise: '+'\'+
                                       ' '+'\'+
                                       '  - alle Auftr„ge mssen auf die gleiche W„hrung lauten' +'\' +
                                       '  - der Debitor muá in allen Auftr„gen gleich sein' +'\' +
                                       '  - es muá die gleiche Lieferadresse hinterlegt sein'+ '\' +
                                       ' '+'\'+
                                       ' Wer Sicherheitshinweise nicht beachtet oder ungelesen wegklickt'+
                                       ' wird mit Ablage nicht unter 3 Monaten bestraft.');

                               SETFILTER("No.",aunr);
                               Firmendaten.GET;
                               Firmendaten.CALCFIELDS("ISO Logo");
                               //20.03.18 ST - šbergangsweise fr Formwandlung AG wird das TOPAS Logo generell gerendert, da das "alte" Briefpapier mit Logo nicht mehr verwendet werden soll
                               Firmendaten.CALCFIELDS(Picture);
                             END;

               OnAfterGetRecord=BEGIN
                                  CurrReport.LANGUAGE := Language.GetLanguageID("Language Code");
                                  TOPAS_Funktionen.GetCompanyInformation(CompanyInfo,Firmendaten);
                                  FormatAdr.SalesHeaderBillTo(DebAdr,"Sales Header");
                                  FormatAdr.SalesHeaderShipTo(LieferAnAdr,"Sales Header");
                                  IF w„  = '' THEN  BEGIN
                                    w„ := "Currency Code";
                                    IF w„ = '' THEN
                                      w„ := 'EUR';
                                  END;
                                END;
                                 }

    { 1000000003;1;Column;Picture_Firmendaten;
               IncludeCaption=No;
               SourceExpr=Firmendaten.Picture }

    { 18  ;1   ;Column  ;ISOLogo_Firmendaten ;
               IncludeCaption=No;
               SourceExpr=Firmendaten."ISO Logo" }

    { 1000000000;1;Column;CompanyName        ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[1] }

    { 1000000001;1;Column;CompanyAddress     ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[2]+ ', ' + CompanyInfo[4] +  ' ' + CompanyInfo[5] }

    { 1000000005;1;Column;CompanyPhone       ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[6] }

    { 1000000006;1;Column;CompanyFax         ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[7] }

    { 1000000007;1;Column;CompanyVATRegNo    ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[8] }

    { 1000000008;1;Column;CompanyRegNo       ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[9] }

    { 1000000009;1;Column;CompanyVorstand    ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[10] }

    { 1000000010;1;Column;CompanyARV         ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[11] }

    { 1000000011;1;Column;CompanyAmtsgericht ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[12] }

    { 1000000012;1;Column;CompanyWEEERegNo   ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[13] }

    { 1000000013;1;Column;CompanyPostfach    ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[14] }

    { 1000000002;1;Column;CompanyHomepage    ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[15] }

    { 1000000004;1;Column;CompanyEORINo      ;
               IncludeCaption=No;
               SourceExpr=CompanyInfo[16] }

    { 2   ;1   ;Column  ;DebAdr8             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[8] }

    { 3   ;1   ;Column  ;DebAdr7             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[7] }

    { 4   ;1   ;Column  ;DebAdr6             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[6] }

    { 5   ;1   ;Column  ;DebAdr5             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[5] }

    { 6   ;1   ;Column  ;DebAdr4             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[4] }

    { 7   ;1   ;Column  ;DebAdr3             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[3] }

    { 8   ;1   ;Column  ;DebAdr2             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[2] }

    { 9   ;1   ;Column  ;DebAdr1             ;
               IncludeCaption=No;
               SourceExpr=DebAdr[1] }

    { 10  ;1   ;Column  ;LieferAnAdr8        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[8] }

    { 11  ;1   ;Column  ;LieferAnAdr7        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[7] }

    { 12  ;1   ;Column  ;LieferAnAdr6        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[6] }

    { 13  ;1   ;Column  ;LieferAnAdr5        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[5] }

    { 14  ;1   ;Column  ;LieferAnAdr4        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[4] }

    { 15  ;1   ;Column  ;LieferAnAdr3        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[3] }

    { 17  ;1   ;Column  ;LieferAnAdr2        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[2] }

    { 16  ;1   ;Column  ;LieferAnAdr1        ;
               IncludeCaption=No;
               SourceExpr=LieferAnAdr[1] }

    { 19  ;1   ;Column  ;wa                  ;
               IncludeCaption=No;
               SourceExpr=w„ }

    { 20  ;1   ;Column  ;Bill_toCustomerNo_SalesHeader;
               IncludeCaption=No;
               SourceExpr="Sales Header"."Bill-to Customer No." }

    { 21  ;1   ;Column  ;SalesHeaderDocumentDate_0_1;
               IncludeCaption=No;
               SourceExpr=FORMAT("Sales Header"."Document Date",0,1) }

    { 22  ;1   ;Column  ;SalesHeaderExternalDocumentNo__SalesHeaderYourReference;
               IncludeCaption=No;
               SourceExpr="Sales Header"."External Document No."+' '+"Sales Header"."Your Reference" }

    { 23  ;1   ;Column  ;No_SalesHeader      ;
               IncludeCaption=No;
               SourceExpr="No." }

    { 24  ;1   ;Column  ;betrag              ;
               IncludeCaption=No;
               SourceExpr=betrag }

    { 25  ;1   ;DataItem;                    ;
               DataItemTable=Table37;
               DataItemTableView=SORTING(Document Type,Document No.,Line No.);
               OnAfterGetRecord=BEGIN
                                  IF artikel.GET("Sales Line"."No.") THEN BEGIN
                                    zollpos := artikel."Tariff No.";
                                    ursprung := artikel."Country/Region of Origin Code";
                                  END;
                                END;

               DataItemLink=Document No.=FIELD(No.) }

    { 26  ;2   ;Column  ;UnitPrice_QtytoShip ;
               IncludeCaption=No;
               SourceExpr="Unit Price"*"Qty. to Ship" }

    { 27  ;2   ;Column  ;ursprung            ;
               IncludeCaption=No;
               SourceExpr=ursprung }

    { 28  ;2   ;Column  ;zollpos             ;
               IncludeCaption=No;
               SourceExpr=zollpos }

    { 29  ;2   ;Column  ;UnitPrice_SalesLine ;
               IncludeCaption=No;
               SourceExpr="Unit Price" }

    { 30  ;2   ;Column  ;LineNo_SalesLine    ;
               IncludeCaption=No;
               SourceExpr="Line No." }

    { 31  ;2   ;Column  ;QtytoShip_SalesLine ;
               IncludeCaption=No;
               SourceExpr="Qty. to Ship" }

    { 32  ;2   ;Column  ;No_SalesLine        ;
               IncludeCaption=No;
               SourceExpr="No." }

    { 33  ;2   ;Column  ;Description_SalesLine;
               IncludeCaption=No;
               SourceExpr=Description }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[CSY=Moznosti;
                             DAN=Indstillinger;
                             DEU=Optionen;
                             ENU=Options;
                             FIN=Vaihtoehdot;
                             ISL=Valkostir;
                             NLD=Opties;
                             NOR=Alternativer;
                             SVE=Alternativ;
                             ITS=Opzioni;
                             NLB=Opties] }

      { 1000000000;2;Field  ;
                  CaptionML=DEU=Hier die Auftragtragsnummern mit Trennstrich "|" angeben die zusammengefasst werden sollen (mindestens zwei). In den AU-Zeilen muá in der Spalte "zu liefern" die zu berechnende Menge eingetragen sein. Alle AUs mssen die gleiche W„hrung und Lief-Adr. haben. }

      { 1140000;2;Field     ;
                  CaptionML=DEU=1.);
                  SourceExpr=aunr }

      { 5000;2   ;Field     ;
                  Name=ForNavOpenDesigner;
                  CaptionML=ENU=Open Designer;
                  SourceExpr=ReportForNavOpenDesigner;
                  Visible=ReportForNavAllowDesign }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Firmendaten@1000000003 : Record 79;
      Language@1000000002 : Record 8;
      artikel@1000000005 : Record 27;
      FormatAdr@1000000004 : Codeunit 365;
      TOPAS_Funktionen@1000000001 : Codeunit 50006;
      CompanyInfo@1000000000 : ARRAY [20] OF Text;
      aunr@1140002 : Code[100];
      w„@1140010 : Code[10];
      betrag@1140011 : Decimal;
      zollpos@1140021 : Code[20];
      ursprung@1140022 : Code[20];
      sprachcode@1140023 : Decimal;
      DebAdr@1140026 : ARRAY [8] OF Text[50];
      LieferAnAdr@1140027 : ARRAY [8] OF Text[50];
      ReportForNav@5000 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" WITHEVENTS;
      ReportForNavClient@5003 : DotNet "'ForNav.Reports.6.1.0.2145, Version=6.1.0.2145, Culture=neutral, PublicKeyToken=5284c1af2984feb0'.ForNav.Report" RUNONCLIENT;
      ReportForNavDialog@5001 : Dialog;
      ReportForNavOpenDesigner@5002 : Boolean;
      ReportForNavAllowDesign@5004 : Boolean INDATASET;

    LOCAL PROCEDURE ReportsForNavInit@5005();
    VAR
      fn@1000000000 : Text;
    BEGIN
      fn := APPLICATIONPATH() + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll';
      IF NOT FILE.EXISTS(APPLICATIONPATH + 'Add-ins\ReportsForNAV_6_1_0_2145\ForNav.Reports.6.1.0.2145.dll') THEN
        ERROR('Please install the ForNAV DLL version 6.1.0.2145 in your service tier Add-ins folder under the file name "%1"', fn);
      ReportForNav := ReportForNav.Report(CurrReport.OBJECTID(), CurrReport.LANGUAGE() ,SERIALNUMBER(), USERID(), COMPANYNAME());
      ReportForNav.Init();
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Body7@5014(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      WITH "Sales Line" DO BEGIN
        ReportForNav.ShowOutput((Type = Type::" ") AND ("No." = 'PROFORMA'));
      END;// Autogenerated by ForNav;
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Header1@5010(VAR "Sales Header"@1000000000 : Record 36);
    BEGIN
      WITH "Sales Header" DO BEGIN
        //ReportForNav.ShowOutput(aunr1 = "Sales Header"."No.");
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesHeader_Body2@5011(VAR "Sales Header"@1000000000 : Record 36);
    BEGIN
      WITH "Sales Header" DO BEGIN
        //ReportForNav.ShowOutput(KZ = TRUE);
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Body5@5012(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      WITH "Sales Line" DO BEGIN
        ReportForNav.ShowOutput(("Qty. to Ship" > 0) AND (Type = Type::Item));
        IF ("Qty. to Ship" > 0) AND (Type = Type::Item) THEN
          betrag := betrag + ("Unit Price" * "Qty. to Ship");
      END;
    END;

    LOCAL PROCEDURE OnPreSectionSalesLine_Body6@5013(VAR "Sales Line"@1000000000 : Record 37);
    BEGIN
      WITH "Sales Line" DO BEGIN
        ReportForNav.ShowOutput(("Qty. to Ship" > 0) AND (Type = Type::"G/L Account"));
        IF ("Qty. to Ship" > 0) AND (Type = Type::"G/L Account") THEN
          betrag := betrag + ("Unit Price" * "Qty. to Ship");
      END;
    END;

    EVENT ReportForNav@5000::OnInit@5002();
    VAR
      ReportLayoutSelection@1000 : Record 9651;
      CustomReportLayout@1001 : Record 9650;
      CustomLayoutID@1002 : Variant;
      EmptyLayout@1003 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";
      ReportForNav.OData := GETURL(CLIENTTYPE::OData, COMPANYNAME, OBJECTTYPE::Page, 7702);
      IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN
        CustomLayoutID := ReportLayoutSelection.GetTempLayoutSelected
      ELSE
        IF ReportLayoutSelection.HasCustomLayout(ReportForNav.ReportID) = 1 THEN
          CustomLayoutID := ReportLayoutSelection."Custom Report Layout ID";

      IF (FORMAT(CustomLayoutID) <> EmptyLayout) AND CustomReportLayout.GET(CustomLayoutID) THEN BEGIN
        CustomReportLayout.TESTFIELD(Type,CustomReportLayout.Type::RDLC);
        ReportForNav.IsCustomLayout := TRUE;
      END;

      IF ReportForNav.IsWindowsClient THEN BEGIN
        ReportForNav.CheckClientAddIn();
        ReportForNavClient := ReportForNavClient.Report(ReportForNav.Definition);
        ReportForNavAllowDesign := ReportForNavClient.HasDesigner AND NOT ReportForNav.ParameterMode;
      END;
    END;

    EVENT ReportForNav@5000::OnSave@5010(Base64Layout@1000 : Text);
    VAR
      CustomReportLayout@1002 : Record 9650;
      ReportLayoutSelection@1003 : Record 9651;
      LayoutId@1004 : Variant;
      TempBlob@1007 : Record 99008535;
      OutStream@1006 : OutStream;
      Bstr@1005 : BigText;
      EmptyLayout@1001 : Text;
      ReportID@1008 : Integer;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      EmptyLayout := FORMAT(ReportLayoutSelection."Custom Report Layout ID");
      LayoutId := ReportLayoutSelection."Custom Report Layout ID";
      EVALUATE(ReportID, FORMAT(ReportForNav.ReportID));
      IF ReportLayoutSelection.HasCustomLayout(ReportID) = 1 THEN BEGIN
        IF FORMAT(ReportLayoutSelection.GetTempLayoutSelected) <> EmptyLayout THEN BEGIN
          LayoutId := ReportLayoutSelection.GetTempLayoutSelected;
        END ELSE BEGIN
          IF ReportLayoutSelection.GET(ReportID, COMPANYNAME) THEN BEGIN
          LayoutId := ReportLayoutSelection."Custom Report Layout ID";
          END;
        END;
      END;
      IF FORMAT(LayoutId) <> EmptyLayout THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(OutStream);
        Bstr.ADDTEXT(Base64Layout);
        Bstr.WRITE(OutStream);
        CustomReportLayout.GET(LayoutId);
        CustomReportLayout.ImportLayoutBlob(TempBlob, 'RDL');
      END;
    END;

    EVENT ReportForNav@5000::OnParameters@5008(Parameters@1000 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.Parameters := REPORT.RUNREQUESTPAGE(ReportForNav.ReportID, Parameters);
    END;

    EVENT ReportForNav@5000::OnPreview@5009(Parameters@1000 : Text;FileName@1005 : Text);
    VAR
      PdfFile@1002 : File;
      InStream@1003 : InStream;
      OutStream@1004 : OutStream;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      COMMIT;
      PdfFile.CREATETEMPFILE;
      PdfFile.CREATEOUTSTREAM(OutStream);
      REPORT.SAVEAS(ReportForNav.ReportID, Parameters, REPORTFORMAT::Pdf, OutStream);
      PdfFile.CREATEINSTREAM(InStream);
      IF ReportForNav.IsValidPdf(PdfFile.NAME) THEN DOWNLOADFROMSTREAM(InStream, '', '', '', FileName);
      PdfFile.CLOSE;
    END;

    EVENT ReportForNav@5000::OnPreSection@5012(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
      CASE DataItemId OF
        'SalesHeader': CASE SectionId OF
          'Header1': OnPreSectionSalesHeader_Header1("Sales Header");
          'Body2': OnPreSectionSalesHeader_Body2("Sales Header");
        END;
        'SalesLine': CASE SectionId OF
          'Body5': OnPreSectionSalesLine_Body5("Sales Line");
          'Body6': OnPreSectionSalesLine_Body6("Sales Line");
          'Body7': OnPreSectionSalesLine_Body7("Sales Line");
        END;
      END;
    END;

    EVENT ReportForNav@5000::OnPostSection@5013(DataItemId@1000000000 : Text;SectionId@1000000001 : Text);
    BEGIN
    END;

    EVENT ReportForNav@5000::OnSelectPrinter@5006();
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNav.PrinterSettings.PageSettings := ReportForNavClient.SelectPrinter(ReportForNav.PrinterSettings.PrinterName,ReportForNav.PrinterSettings.ShowPrinterDialog,ReportForNav.PrinterSettings.PageSettings);
    END;

    EVENT ReportForNav@5000::OnPrint@5005(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream");
    VAR
      ClientFileName@1000000001 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.Print(ClientFileName);
    END;

    EVENT ReportForNav@5000::OnDesign@5007(Data@1001 : Text);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ReportForNavClient.Data := Data;
      WHILE ReportForNavClient.DesignReport DO BEGIN
        ReportForNav.HandleRequest(ReportForNavClient.GetRequest());
        SLEEP(100);
      END;
    END;

    EVENT ReportForNav@5000::OnView@5003(ClientFileName@1000000000 : Text;Parameters@1000000001 : Text;ServerFileName@1000000002 : Text);
    VAR
      ServerFile@1000000003 : File;
      ServerInStream@1000000004 : InStream;
      Filter@1000000005 : Text;
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      ServerFile.OPEN(ServerFileName);
      ServerFile.CREATEINSTREAM(ServerInStream);
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.pdf' THEN Filter := 'PDF (*.pdf)|*.pdf';
      IF STRLEN(ClientFileName) >= 4 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-3, 4)) = '.doc' THEN Filter := 'Microsoft Word (*.doc)|*.doc';
      IF STRLEN(ClientFileName) >= 5 THEN IF LOWERCASE(COPYSTR(ClientFileName, STRLEN(ClientFileName)-4, 5)) = '.xlsx' THEN Filter := 'Microsoft Excel (*.xlsx)|*.xlsx';
      DOWNLOADFROMSTREAM(ServerInStream,'Export','',Filter,ClientFileName);
    END;

    EVENT ReportForNav@5000::OnMessage@5016(Operation@1000000000 : Text;Parameter@1000000001 : Text;ParameterNo@1000000002 : Integer);
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CASE Operation OF
        'Open'    : ReportForNavDialog.OPEN(Parameter);
        'Update'  : ReportForNavDialog.UPDATE(ParameterNo,Parameter);
        'Close'   : ReportForNavDialog.CLOSE();
        'Message' : MESSAGE(Parameter);
        'Error'   : ERROR(Parameter);
      END;
    END;

    EVENT ReportForNav@5000::OnPrintPreview@5011(InStream@1000000000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.Stream";Preview@1000000001 : Boolean);
    VAR
      ClientFileName@1000000002 : Text[255];
    BEGIN
      // This code is created automatically every time Reports ForNAV saves the report.
      // Do not modify this code.
      CurrReport.LANGUAGE := SYSTEM.GLOBALLANGUAGE;
      DOWNLOADFROMSTREAM(InStream, '', '<TEMP>', '', ClientFileName);
      ReportForNavClient.PrintPreviewDialog(ClientFileName,ReportForNav.PrinterSettings.PrinterName,Preview);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <Description>SJMAANVd3XLcNpa+36p9B5a2ap1s2jQBEPxxrJmSLCnWRpa0+rEzs5VyUd2QxDFFKiRbtnyxr7I3
eYa5mju/2AAk2E2yD9inu+VsbaYmEUE2cPjx4JzvAAfAqz9/vkusB5EXcZZubxHb2bJEOs4mcXqz
vTUtr58HW3/+07/+y6tfyjw6E/dZXhZH0WM2Lc9FHkdJ/EXk1vzPd7OKXJvaXNXWKdqyjqM7sb11
mmcHWX4XWYfpg3UUi2t7Z5Jbk/jB2rncsl5naZlnycXjvXx0Tzzsf77PRVHYLRnsy8PWJR1Zhsce
VKujRghr22oEG1mvp0k5zYUsS8VU/iQZWafTqyQe/yweL7KPQj098cdRIALq+NeucB35OntxcZ9E
j5jX0DLIJ46jhxkMni1Btilx+ZZ1cvU3MS6Ps+0t7hAnmBUgKj+IRTJ5L64k9g/xWFzmyfbWbVne
v3zx4njnHXWI9/yC2J/oR7vM7qPCnoiXvuMGL/Ye0+guHhfyodB5cbIXldGL19ndfZQ+fvfs4uR0
5/zZ91vWaXQj3oj45rbc3qKh79Ql7+NJeSsLiALibZTfxGkhv2sgwSTV/+W/XKd58cs0lr++EGl5
W5xc77yNkyS+E6XIVWX3Iv85TifbWzuuxPQ+lrVy+deB/PKyTKnTyPLvyy2pepb1ajdKJ0X1p7w4
LMUd0Xp0HiWieCOiiaq1ozY16ur11POqAtmOvrqIrhL5SPUf5vXK38Xik6z45Ozi8Pin7/ay8fRO
voKlah0dZ/b36vV+O4gT+SKqYdlP3h5tb/2PUrp/O748OtqyDuVrkS0tbk/61hucievtLQaKXb9R
LXT9onUJaWN1LjVFalTv/mkep+VJui+79KP6ZttbZT4VW9abqDhJT3OhfzUrrj7ygRSYhdQOXZ+3
JK+E1eIVndLuS7iNlBfic7mbfSYEfCt9V0ouTYVsklJqO47DPG/EHPUXoVT+8igbR0rEgySLpDIQ
7gcjy/NC9QQdUpaRVZSP8sPuZon+2OeirPpJLZ1W8/2Ts8PjbMtS4iwUvsnyLztJfCMBOhLXZf1U
VaC0YHvrbTyZJKK61QNEQnKumpcfIMvj8rGGRnbyy0LUkl5HSSGq616l+saLPsQvKowh4Gldu9cA
fxRdiQTWperWHHPZR5mzCDJTnXh1kF9H96oW1QP29i+3FYrPj3P7pfXj/nFzmdkvG7DnBSjw/EXw
YIwohBGrKwlAVE7jsTL+lTrWEPbLCZH2XumjRo5TPiLUX4SOBqHNwzDgEh9uu74T8DaAi3qo2/hw
EOfy+0+iUqQNQOAtKUDljf+aZXeHd7JPAzCoF3brFw47SkE3U4q6W44s7odra8V5KaYir/XCqjXj
YucXq60Ys2uUXhAHqxguhBPXtZDup68wqb6666NBM5utFnieU/UrsjaCl+el/fxwz271rXc7F/I1
buw2ip0yHJIUiySHkPR0LcyIJNz7VlY/j1UIOt76GL7f399/rtBpgdgqa8HYK8UB6WKB9CAgfV0L
73lS72kdqW+HYeixdTTS6E6l0kmsFhzqvPipXSrxNvapPvQNAl293/sGsDF4gm+whk4bv4LSWegz
tMqf/DsEG3+HAPoOoa4+7LPK1b/DIP4ruTQj8BDo3whwCri9FQEPQRbv6PpJD/EQhXgobYlPQwhu
yuyAyX8oGVlMPlaRI2+YHWkM1YX1g/VsZD2T/9GFp1lRXkfj2x7eS5598u9AVyfxDgi8jp8o61A2
WNG7PlMyTeK4EldpRKQ+h4G7yExVSO7RCnR/0MZ0fKXyiwfRZ9v6UXlN9VeDdlWKhAjtDgkY3xAd
4FBuYhbqDhIl4rkVTr6EKfQoiBOtcVoJpdPbLBU1TBcimcFUFyNxAnyZAScwxiE6yKF9pwXHgv2u
Syhx7ECqT6NGEDZBBY2Mb9z1O+7OZKKG5ixMx50/++QdN1i94zIQdh1q0b6PgqOtBR/FXKmMPGD+
yF00mr5yYFJpuTfXywBnNCvV62Gsy54aS+asjiUYjREdjrG+93GfGkvQFhqxlNauh2RV8uQ4ruFM
wFiM6GCMsR6OsKFc9OJcWQB/yKEwx7VDyWzd1dHcOXvX6uF3ZXEj8nh8W/YgNj/25Li7q+MOhm5E
x26sH7vBoa8B9wCNu7QI1Hd8isP9XZYXZTWO3I3OZsVPjqu3Oq5gOEZ0PMb8LgWYjTFLEuDhbITH
wAGGNjsljsTVH3b/iyDviaudSR404DaXOKCA8MmADxgmER0nsXAAHxwNQOAThhKeJQMGZoT8LkI+
DiEXPcxHwLiG6rjGJQMI4Tw2BiFpED3ZgfmaGHldjDwkRugBPAqGILSZwmEDGOEibwxGbO1Oxrvw
cCQ86DiEwvMsOg5x+QA8zpPB42zSydwuQi4SIXQEQsEIhOoIxB0w0xw3kIBAKPA362SsixFDYoQ2
1RQMF6gOF9wBU81xdAGDkbt2J6NdeChyjhNtpykYAVAdAfABO81xo7AYeMgmnYx0ESJIhPBWGuT2
VHN7bpxo4fBMQXc4RKEjlYMt4uParoTHZaF8fY/YrBoKMOATLJloORPj23Sa3hRRFceLl9VUy65K
/0hvLB3dzyZbFspxgOLtOkjaqSbtfMCuc1zgFHAEqB6XDN6IKHFglVNJPyLfSdscs1OGwwpv4UEi
TjUR50MWHkfEcVgRr4qE2EaA+QBgSN7J8eYeZOZUM3M+ZO5xzBwF2NBEBgIpD0AKyT49vOUHGTrT
DN0bsvw4ho5DinmbdUMOYIWkoh7aBzCQqTPN1L0Bps5xTB2FlVtHfI7PNgHMBQBDMlMPbeMZyN1Z
kyQ1ZONx3B0HGCebKRcDsEIyVA9t4xmcK6VZvDdg410ci0dhxXzHdtRwo7cJYAQADMnIPLSNZyCl
Z5rSewM23pD8sp5ykZqVeRv1RgoAhiT5PtrUM5DkM03yfdhEIfPxVJSpYWPEGVFnkeuHoTOyKJeM
f3iA9PD85Ci7yaAsPPAWmHLHNDH3qTEDCkPMXWrOgJIhC6eebe4o/alJxcEPd3eOX1p7+8yh3Akc
RwLl+zJI8EKFmH7LoWdwOsHQOgGycKZZuO8a0cPM8i5Bzw1XRe/8/eHBxfPdw9e2xOds/3xv/+CA
8hlwpts4zICMYANmIBtnmo37nhEzmIuvhpm3Kmb//ts0K3/cvzx7PrIuz/eeW9N0Yv3n6V+e/yx/
mb2sb8/ygE2PITFEJwYzkKAzTdD9wIghJpd6GYZsCYaDUXQN2Ovs7k7kX66i9KO189PIehOlafYg
8i6cpqeQaIZoNEES72oSHzhGNDFJyENoBpIxBEtHtQw20KOyc0omq8gsk/aN8EUbCD6DQi8g6Fxk
kNa7mtYHZg+CyQdahh5fFb2Okdu/vNjbp29++eUX0Aa2buMwQ/sNF2T2rmb2gdlvwLwejZlEbPl8
YH/xgzRqlTlTdk2bs5a969/CIYX2Fi7I691mEYTRWzCY1a+AFJX+df207NqS7YlpWYxvhbU7bOnM
zyHxRHsOF6T9rqb9QWCm/QwXUxLCbQ8m/sTzmK3m+hlxJetn3mBe2rJE1U9Rg576qzXf/1qk1Wo8
cMZf38ShivYgLhgbuDo2CB0zqhQXfQ6h6gbE9hyH/P8BNsQ7F3DewNXhSWh0LhSzQEP2ciC3ilRp
7g5xuMpKUamWIVuf75xmhV1NFCi5Z+5Z/Y1DCu9SwFDE1aFIaHQpFLWSKuC2a1C/NlzE922POwPR
fAB4mPdxbiVV5J5at9ISinoRi7CK2/jeKrNJ9Dhbw9IpxEGI9zVgZOLqyCQ0+hqCUTYu43dJWtwF
AHng2TJADdVIB1dJf2E4MBji3Zdgn+yrXbPIupm1qiA9PTs5ODl7u2MdHr87OXy9P9yVm7zf/o9w
qAMeacX8KRcMclwd5ITGIIeglrlRuPO7lNtMfQrG7c6C0R7AP0vaI9J0qiKUCtvX06LM7uawza/B
ERauo4swNL4GZowghN/C47i3kMZ/eleJL/+aZdjWf8Nik2apojEqIpg4nUufZTIoLFDuzGH+U9jf
nbyMP4qkVv8oL9Xat5lmN9e4dUEO2mtxkN5z2lREzXyAIDPc5YfnQ+ob9D78ohFedPxqzvpDmTWa
e5x96OxDMJ/YHnjoyVdjOWgPyMFQgbOmIncAddxkHGEw6rPutg7qLfiaXRlUB/zgfJjNAww9gkQR
7QQ5GCBwt6mo5wXPb6N7UWMIx/PVA/OIy1VIEchmsXq/DdKDcDfL5WsXEsUkgV5WVd/IpkbR1XUt
oHR9ZZTeJOZXhZdRN+uoHbOHwYThlAQmExcwz+bVEsnKxLEVTdxy9/8+yuWNKI+v07ymnxfq4tqa
Wb8lTr/1OFLB0LESByk9b9ZcE6NjcTAhPfFhj0gDpgaMKrQdibaZYq0B942o6atmroqholCuHsTh
S/DOBwwEeLMUmxhjJgdDY4fwVRSWOdJ7P7E2vxXpTY3sb9MoLSUoKHRnDyMRxjsaME7gzUJrYoy1
HMykGeGGsFTGCd630uDLvLjPVXLb85rMZlMp5aOVXaOQbj2OxBrvjsAggDeLqYkxKHMwNNSEtetT
e73wfznU+3H6RST3uYiLCmu1n5Ta3mgsUFi3HkdijR4b5OA8iOc0FRn9oYOZViKmWIW6iu9T+o3w
/kkU0V05x/siK6ME5wSrJ5Eoo/2fB86XeE1gRc3+DzNSQ0xZF5X94NUYIbVDiTF/SpCTKJ1U6J7k
8U2couDVj+LwpWj/54HBl9cEX5SaCKwDs7ougSWBjAEI9QCEq/XWfFGBV2CwasX8KgzW64Y8r14A
u5otbrfV3mqLUNhO7maTx/ZGbeq6w8s727Tpu0fiQSRqk7il27Jx1w4499xeri9mVzbSXzzfDuRC
XMJuyI3DD4FPqqXj1VYaG8Ry+5+lqqdR0gRsMlBuR8p/yab5meKMIh0LIM5b6efILoRflA+m/zbV
+MawCENvmAzwCAy9VAjFcJag3p8Ov82FtTO9LvPoppCdRTaW1qn5Yz1EYeUNULOJS+gWEkR8EjWY
otFUYxz2C1AgVhNpIIjOqgBG08KapoWE4a7B0VJbSVUYSjUD4OuV4pBj+Ew7cNy3qWYgp9rB5Qmr
nT0ldlRl4/PFAXnG/dkApFul7LuMmimJwRTAo2e9UiRy6BRrd7k7kMVvp0kZv86S6V3atMC6NS5q
cEd7GWxlD7Ks7G7vWZd0ZtF3o/FH2XaWS36VR2lxXw1VqL1TJ/XmvM6o/l/19GkSjcVhupuVsr8u
eBEqDYbrq1nAjjdqWl3dtTBuIgeG/M6VyAGz+Zq8QBGKVXjBoAEfWnlu+LILu1M4nnE6mvuy30ga
ZLZC4fI56Cuh7FDTa5qrFg89UypgoJn1PWTfehp7PrRaneJ2u6sGUAwz/H5YOUY+kHiHAPXbT+wT
/Nr2QSPfX9remq5GhfWhKQiiAVXDgKshuTz8qSLFbxhd4pfDIzzAIv5d7OFg3mTcO7sn6QCAmfdr
Bg36z0Lcv4/L2+MKGP1+8y2cVUgMGHh3DQPvzsbmmh6KnPlRlt2rUx04W+QM0rw7wwo1vo1y2R23
nYFdTd5ITnpfbYTb2dVkXvxt+uy33cyZuMYpIw8e0QecKq13kXEV/V6EvtljxuhdNZ4KvqNYbRt1
XuaiHN82CrijnGmdqFU1Xksze3zYObvdaae6gTV8iGscX/MwGQ0VTsPb5nGdq8PNY8fI/JKDr/9Q
e/aryKu4/vqPWzV2rK4LUTRBhPzrRiSlSHV0YUVJciPuhIQntX4Sxfj26+/XZXElFO2TPxdpbUBv
hSU+i/FUNWdl11b9HS1JE61iWp0jYJWZpUKQaqufKJ9YUsI7+UQ6scZZOombXxaSaSOnu566UWTP
w6eoD3lLbhwy9FATDi3F8f3FzV2l4vj1XcBnvo3HeVZk16V1Lsl8dWTGNVqL9OKKWH77cnpXPGT5
lbiNkvKldZhKxSgkrkpxPom4kDrzKZYqF+XR9Nq6jdOR/LsoKh1Us51S1+6+/v71f7Wy5cu1zbqK
C+uL/KJ/jW4Tpb5xaj1kSSJ/++br36VCVDVZjXTWVSLiq9KuZa5VVR0rYRVS4kSGw2UkKyjjMhFK
VW6ybKLi6jJOrLi0bqNCPjIW8YOYWPfRY3X2gnz+epokSBV9ssZeYCmC26cIvH08RW3n1jucwl/h
cIrZ1XFmj1SjVn1cRVOBLPoo1an11PbB4f7R3nf4Uy3UiOJpFYc2lapSY6C+cPLFDKCGZhgWd0OD
qnxwUJUvH0oNqe0GPoc2ATAwokVx+3vrGRIc+qzI9bjtj1wXyGpUWVxqYaevFnlKKq4mP7vr+aGt
SIpxHlcW4kNLxZoUefBm31zO3q1hH3wg7SdE7r3smLNfuU8lBAPkzzA8pKbxqlm8D/9VPpbZ+Sxl
wHBrs9DX6IE4YiJ2bhD69GUGdkNhuGcGO0Buu8xsasCaEH8trKd6crsBeHa9Ak6ISdQ5Tn1vPcNp
5rEH1lkEyI3ZHZVJBU9hyECFr4HTF+n97rOigam5XAElBJ+Zo9TPvpqh1CRgeQPrJgJkniTjEgrD
qApzZLfepOsuGCnoFh4+DzHHOYevn0Y1g6/JpPIG0kx95LIThykDTwEDPxjxGpBTeDQj4G3YFspX
wAyRtTPHrJ8aNcOsyY7yBryFg+uYag2Ebxp+oo46tm1l4GaOYBE76NYK8K1k//t5TzP4mtQnb8D+
O7h9p3hgMv8sWKu7Qgq3rrKt5AX6mUvGCZnq1uKkjFrFtcZwi2FQBeKe3iD39NoT+vAQ3RJq6ktm
SJkP7SSEpab+gA/wcRuRDLBUnwZ6T66RpRKPVSfv7sH4B7FUf2BW00fanUFbLamTejtOlyzN+kOM
to8Yzp5r+1LW6Q9sHeUjecJyo70+gt/MevuIraTmOC5lpf5AYo2PXSGxlG+tj+M3I14+IjNmjuNS
3uoPbe2N84JLQ05lqZ4Gy//T+NNHTL/OkV+kvKt5VMV61xiYD+DREMij+oMetdrl6SaN1NZPasc7
MfYmoRdFYz8MoyighJMxCwXxBfXHzA+oR6iSeS3n63o2UwcZeNBea1j3G/RPr0CuT/OYVN3Ad5cP
Djl/hLddTU3UniWYYfhXLxYHAl/VNRlGB6vBRg/dH8+zaT4W6vzn7a163Hme/V1f/0f9H/kbWw0E
q581O0scpuNkOhF6yH2mNqrp+stdphNxLQGbGNZ60lpcf3hIpS3jvHRp46+ziWmNKavbDQaHKNrN
zgo3adWtWw3Rjmf5x0EItCfG8Z1KGIBX21YyMXDKeJGWLQrUjJajxTlMS3FjXLPs1eIQNMdZlGgt
RR0Gya+lostjv0VxVsFmQHeCWgS2ggFry9J6BCGHMn3QJE7f7PRdZt9aAZaqZaWIo/8BXwo+z7f1
Sq0btn4Y8Wq7Rye7vUTEuSEioEEA9zQ0SVJ/a/kTS/0G/eUNYrEuUEOJHeqiK5a+cZheZ/9Nfl3r
s7fM1kwIsG92DyAzy0F/7Z9ZVhW7v8oCWdov5xuIzbti8wGx9UFfJqG9DaTwulKAjrl9SJZJBn8D
GfyuDKC3XTh71iRIsIEgQVcQsLd1DwI1SRFuIEXYlQJ0xwuHPRk7lrOBJMTpiEKG+vfO2bsBKTbp
36RrjslgB28fLGaUhm4iDe1KAzrdxSN6jbKwTWTp2l8COqqFQ1ONoribiNKzwkOwzJP5jKJsYlhJ
z7KCQZVubf/k7HDw82xiW0ltXEEoZueLdVmQKtzIhBHNBc1t+mCbm9hvUttNQ/CqT8AC2twI29pK
gl5zdqwU0OYmikVrcwj6yNlBTUCbm/QrWhs/0CfODj4C2tzErNDaxIHub3aaENDmJmaV1qYMdHaz
83mANjdxLLSxWXBw2T6hpd1y685GXZVqOwX6s+55J6bmN+m1VFM/0Dx1DxExNb9JB6aa9YGWqnsu
h6n5jfqy5nqg0eqecmFqfqNurUkeaL+6B0eYmt+khzNN7ECz0j1VwNT8Jp2daUYHWtLuKRCm5jfp
90xTONDYqHVB7UY/ff19rZGR5vCNigGAFmbJNmKLQzXVbau+X5focF7V9LzMrKaqlQa8TKLr0UDQ
Og1u2NUZelDbJl58t0T+WeaqqqQuGjkj8v36I7jNwRTVK4AWbu116it8l6Ziq52aW9/64Zn17Icl
P1cNW7OWNx3Ubk61qCABre5yDXwKvartPgUNb7PKsd1yU7bOGGl/ULCdOzIfDHz1QiVDn4n7LC+L
o+gxm5YqiT9K4i8i/9M/AQ==</Description>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
    </DataSource>
  </DataSources>
  <ReportSections>
    <ReportSection>
      <Body>
        <Height>2in</Height>
      </Body>
      <Width>6.5in</Width>
      <Page></Page>
    </ReportSection>
  </ReportSections>
</Report>
    END_OF_RDLDATA
  }
}

