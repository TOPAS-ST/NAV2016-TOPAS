OBJECT Codeunit 82 Sales-Post + Print
{
  OBJECT-PROPERTIES
  {
    Date=03.08.17;
    Time=10:25:30;
    Modified=Yes;
    Version List=NAVW19.00.00.46773,TOP1.00;
  }
  PROPERTIES
  {
    TableNo=36;
    OnRun=BEGIN
            SalesHeader.COPY(Rec);
            Code;
            Rec := SalesHeader;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=&Liefern,&Fakturieren,Liefern &und fakturieren;ENU=&Ship,&Invoice,Ship &and Invoice';
      Text001@1001 : TextConst 'DEU=M”chten Sie die %1 buchen und drucken?;ENU=Do you want to post and print the %1?';
      PostAndEmailMsg@1016 : TextConst 'DEU=M”chten Sie %1 buchen und per E-Mail senden?;ENU=Do you want to post and email the %1?';
      Text002@1002 : TextConst 'DEU=&Liefern,&Fakturieren,Liefern &und fakturieren;ENU=&Receive,&Invoice,Receive &and Invoice';
      SalesHeader@1003 : Record 36;
      SalesShptHeader@1004 : Record 110;
      SalesInvHeader@1005 : Record 112;
      SalesCrMemoHeader@1006 : Record 114;
      ReturnRcptHeader@1007 : Record 6660;
      ReportSelection@1008 : Record 77;
      Selection@1010 : Integer;
      SendReportAsEmail@1009 : Boolean;
      ServerSaveAsPdfFailedErr@1011 : TextConst 'DEU=Der Bericht ist leer.;ENU=The report is empty.';
      DownloadInvoiceAlsoQst@1012 : TextConst 'DEU=Sie k”nnen jetzt auch den Beleg "Verkauf - Rechnung" herunterladen. Alternativ k”nnen Sie sp„ter ber das Fenster "Gebuchte Verkaufsrechnungen" auf den Beleg zugreifen.\\M”chten Sie den Beleg "Verkauf - Rechnung" jetzt herunterladen?;ENU=You can also download the Sales - Invoice document now. Alternatively, you can access it from the Posted Sales Invoices window later.\\Do you want to download the Sales - Invoice document now?';
      DownloadCrMemoAlsoQst@1013 : TextConst 'DEU=Sie k”nnen jetzt auch den Beleg "Verkauf - Gutschrift" herunterladen. Alternativ k”nnen Sie sp„ter ber das Fenster "Geb. Verkaufsgutschriften" auf den Beleg zugreifen.\\M”chten Sie den Beleg "Verkauf - Gutschrift" jetzt herunterladen?;ENU=You can also download the Sales - Credit Memo document now. Alternatively, you can access it from the Posted Sales Credit Memos window later.\\Do you want to download the Sales - Credit Memo document now?';
      Text50000@1000000001 : TextConst 'DEU=Sie drfen nicht gleichzeitig Liefern & Fakturieren beim Lagerortcode KONSI.';
      Text50001@1000000000 : TextConst 'DEU="Fr Debitor %1 bersteigt die Summe aus \\Saldo (MW)                                     = %2 und \\aktuellem Rechnungsbetrag (MW) = %3 das\\Kreditlimit (MW)                              = %4."';
      "***TOPAS_Var***"@1000000005 : Integer;
      SalesLine@1000000004 : Record 37;
      Cust@1000000003 : Record 18;
      TotalSalesLineLCY@1000000002 : Decimal;

    PROCEDURE PostAndEmail@10(VAR ParmSalesHeader@1000 : Record 36);
    BEGIN
      SendReportAsEmail := TRUE;
      SalesHeader.COPY(ParmSalesHeader);
      Code;
      ParmSalesHeader := SalesHeader;
    END;

    LOCAL PROCEDURE Code@2();
    VAR
      SalesSetup@1001 : Record 311;
      SalesPostViaJobQueue@1000 : Codeunit 88;
    BEGIN
      WITH SalesHeader DO BEGIN
        CASE "Document Type" OF
          "Document Type"::Order:
            BEGIN
              Selection := STRMENU(Text000,3);
              IF Selection = 0 THEN
                EXIT;
              Ship := Selection IN [1,3];
              Invoice := Selection IN [2,3];
              //TOPAS 09.09.09 ST - Lagerortcode KONSI nur Liefern oder nur Fakturieren erlauben
              IF (Selection IN [3,3]) AND (SalesHeader."Location Code" = 'KONSI') THEN
                ERROR(Text50000);

              // Zusatz Kreditlimitberprfung
              IF (Selection IN [2,3]) OR (Selection IN [3,3]) THEN BEGIN
                TotalSalesLineLCY := 0;
                Cust.GET(SalesHeader."Sell-to Customer No.");
                Cust.CALCFIELDS (Cust."Balance (LCY)");
                SalesLine.RESET;
                SalesLine.SETFILTER("Document No.",'%1',SalesHeader."No.");
                SalesLine.SETFILTER("Qty. to Invoice",'>%1',0);
                IF SalesLine.FINDFIRST THEN BEGIN
                  REPEAT
                    IF SalesLine."VAT %" = 19 THEN
                      TotalSalesLineLCY := TotalSalesLineLCY + SalesLine."Qty. to Invoice (Base)" * SalesLine."VK-Preis (MW)" * 1.19;
                    IF SalesLine."VAT %"  = 7 THEN
                      TotalSalesLineLCY := TotalSalesLineLCY + SalesLine."Qty. to Invoice (Base)" * SalesLine."VK-Preis (MW)" * 1.07;
                    IF (SalesLine."VAT %" <> 19) AND (SalesLine."VAT %" <> 7) THEN
                      TotalSalesLineLCY := TotalSalesLineLCY + SalesLine."Qty. to Invoice (Base)" * SalesLine."VK-Preis (MW)";
                  UNTIL SalesLine.NEXT = 0;
                END;
                IF (Cust."Balance (LCY)" + TotalSalesLineLCY) > Cust."Credit Limit (LCY)" THEN
                  ERROR (Text50001, Cust."No.",Cust."Balance (LCY)", TotalSalesLineLCY,Cust."Credit Limit (LCY)");
              END;
              //TOPAS Ende
            END;
          "Document Type"::"Return Order":
            BEGIN
              Selection := STRMENU(Text002,3);
              IF Selection = 0 THEN
                EXIT;
              Receive := Selection IN [1,3];
              Invoice := Selection IN [2,3];
            END
          ELSE
            IF NOT CONFIRM(ConfirmationMessage,FALSE,"Document Type") THEN
              EXIT;
        END;

        "Print Posted Documents" := TRUE;

        SalesSetup.GET;
        IF SalesSetup."Post & Print with Job Queue" AND NOT SendReportAsEmail THEN
          SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
        ELSE BEGIN
          CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
          GetReport(SalesHeader);
        END;
        COMMIT;
      END;
    END;

    PROCEDURE GetReport@3(VAR SalesHeader@1000 : Record 36);
    VAR
      CustomReportSelection@1001 : Record 9657;
      CustomReportID@1002 : Integer;
    BEGIN
      WITH SalesHeader DO
        CASE "Document Type" OF
          "Document Type"::Order:
            BEGIN
              IF Ship THEN BEGIN
                SalesShptHeader."No." := "Last Shipping No.";
                SalesShptHeader.SETRECFILTER;
                PrintReport(ReportSelection.Usage::"S.Shipment");
              END;
              IF IsPrintingBothDocumentsForNonWindowsClient(Ship AND Invoice) THEN
                IF NOT CONFIRM(DownloadInvoiceAlsoQst,TRUE) THEN
                  EXIT;
              IF Invoice THEN BEGIN
                SalesInvHeader."No." := "Last Posting No.";
                SalesInvHeader.SETRECFILTER;

                CustomReportID := CustomReportSelection.PrintCustomReports(SalesInvHeader,SendReportAsEmail,FALSE);
                IF CustomReportID = 0 THEN
                  PrintReport(ReportSelection.Usage::"S.Invoice");
              END;
            END;
          "Document Type"::Invoice:
            BEGIN
              IF "Last Posting No." = '' THEN
                SalesInvHeader."No." := "No."
              ELSE
                SalesInvHeader."No." := "Last Posting No.";
              SalesInvHeader.SETRECFILTER;

              CustomReportID := CustomReportSelection.PrintCustomReports(SalesInvHeader,SendReportAsEmail,FALSE);
              IF CustomReportID = 0 THEN
                PrintReport(ReportSelection.Usage::"S.Invoice");
            END;
          "Document Type"::"Return Order":
            BEGIN
              IF Receive THEN BEGIN
                ReturnRcptHeader."No." := "Last Return Receipt No.";
                ReturnRcptHeader.SETRECFILTER;
                PrintReport(ReportSelection.Usage::"S.Ret.Rcpt.");
              END;
              IF IsPrintingBothDocumentsForNonWindowsClient(Receive AND Invoice) THEN
                IF NOT CONFIRM(DownloadCrMemoAlsoQst,TRUE) THEN
                  EXIT;
              IF Invoice THEN BEGIN
                SalesCrMemoHeader."No." := "Last Posting No.";
                SalesCrMemoHeader.SETRECFILTER;

                CustomReportID := CustomReportSelection.PrintCustomReports(SalesCrMemoHeader,SendReportAsEmail,FALSE);
                IF CustomReportID = 0 THEN
                  PrintReport(ReportSelection.Usage::"S.Cr.Memo");
              END;
            END;
          "Document Type"::"Credit Memo":
            BEGIN
              IF "Last Posting No." = '' THEN
                SalesCrMemoHeader."No." := "No."
              ELSE
                SalesCrMemoHeader."No." := "Last Posting No.";
              SalesCrMemoHeader.SETRECFILTER;

              CustomReportID := CustomReportSelection.PrintCustomReports(SalesCrMemoHeader,SendReportAsEmail,FALSE);
              IF CustomReportID = 0 THEN
                PrintReport(ReportSelection.Usage::"S.Cr.Memo");
            END;
        END;
    END;

    LOCAL PROCEDURE PrintReport@1(ReportUsage@1000 : Integer);
    BEGIN
      ReportSelection.RESET;
      ReportSelection.SETRANGE(Usage,ReportUsage);
      ReportSelection.FINDSET;
      REPEAT
        ReportSelection.TESTFIELD("Report ID");
        IF SendReportAsEmail THEN
          DoSendReportAsEmail(ReportUsage,ReportSelection."Report ID")
        ELSE
          CASE ReportUsage OF
            ReportSelection.Usage::"SM.Invoice":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesInvHeader);
            ReportSelection.Usage::"SM.Credit Memo":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesCrMemoHeader);
            ReportSelection.Usage::"S.Invoice":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesInvHeader);
            ReportSelection.Usage::"S.Cr.Memo":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesCrMemoHeader);
            ReportSelection.Usage::"S.Shipment":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,SalesShptHeader);
            ReportSelection.Usage::"S.Ret.Rcpt.":
              REPORT.RUN(ReportSelection."Report ID",FALSE,FALSE,ReturnRcptHeader);
          END;
      UNTIL ReportSelection.NEXT = 0;
    END;

    LOCAL PROCEDURE DoSendReportAsEmail@6(ReportUsage@1000 : Integer;ReportId@1002 : Integer);
    VAR
      CustomReportSelection@1003 : Record 9657;
      DocumentMailing@1006 : Codeunit 260;
      ServerAttachmentFilePath@1001 : Text[250];
    BEGIN
      ServerAttachmentFilePath := SaveReportAsPdf(ReportUsage,ReportId);
      CustomReportSelection.INIT;
      CASE ReportUsage OF
        ReportSelection.Usage::"S.Shipment":
          DocumentMailing.EmailSalesShipmentFileFromOrderHeader(SalesHeader,ServerAttachmentFilePath);
        ReportSelection.Usage::"S.Invoice":
          DocumentMailing.EmailSalesInvoiceFileFromOrderHeader(SalesHeader,ServerAttachmentFilePath);
        ELSE
          DocumentMailing.EmailFileFromSalesHeader(SalesHeader,ServerAttachmentFilePath,CustomReportSelection);
      END;
    END;

    LOCAL PROCEDURE SaveReportAsPdf@9(ReportUsage@1000 : Integer;ReportId@1005 : Integer) : Text[250];
    VAR
      FileManagement@1003 : Codeunit 419;
      ServerAttachmentFilePath@1004 : Text;
    BEGIN
      ServerAttachmentFilePath := FileManagement.ServerTempFileName('pdf');

      CASE ReportUsage OF
        ReportSelection.Usage::"SM.Invoice":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesInvHeader);
        ReportSelection.Usage::"SM.Credit Memo":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesCrMemoHeader);
        ReportSelection.Usage::"S.Invoice":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesInvHeader);
        ReportSelection.Usage::"S.Cr.Memo":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesCrMemoHeader);
        ReportSelection.Usage::"S.Shipment":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,SalesShptHeader);
        ReportSelection.Usage::"S.Ret.Rcpt.":
          REPORT.SAVEASPDF(ReportId,ServerAttachmentFilePath,ReturnRcptHeader);
      END;
      IF NOT EXISTS(ServerAttachmentFilePath) THEN
        ERROR(ServerSaveAsPdfFailedErr);

      EXIT(ServerAttachmentFilePath);
    END;

    LOCAL PROCEDURE ConfirmationMessage@4() : Text;
    BEGIN
      IF SendReportAsEmail THEN
        EXIT(PostAndEmailMsg);
      EXIT(Text001);
    END;

    LOCAL PROCEDURE IsPrintingBothDocumentsForNonWindowsClient@5(PrintBothDocuments@1000 : Boolean) : Boolean;
    BEGIN
      EXIT(PrintBothDocuments AND (CURRENTCLIENTTYPE <> CLIENTTYPE::Windows));
    END;

    BEGIN
    {
      Lfd.Nr. Version   Datum     User    Beschreibung
      ===========================================================================
      1       TOP1.00   03.08.17  ST      TOPAS Buchungs Prfungen hinzugefgt
    }
    END.
  }
}

