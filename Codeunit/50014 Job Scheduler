OBJECT Codeunit 50014 Job Scheduler
{
  OBJECT-PROPERTIES
  {
    Date=10.04.24;
    Time=17:00:00;
    Modified=Yes;
    Version List=TOPAS;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=VAR
            Param@1000000000 : Text;
          BEGIN
            CASE "Parameter String" OF
              'Service' :
                CheckNewServiceAcc;
              'GWSystem' :
                ExportServiceBETCrosslinkAndSyncSystemeMB;
              'Datenschutz' :
                DataPrivacySetStatus;
              'Typo3_Update' :
                ExportTypo3AccountUpdateStatus;
              'System_Pricecelist' :
                AdjustServicePricesNewPricelist;
              'DocuWareExportDocs' :
                DocuwareExportDocs;
              'DocuWareExportInvoices' :
                DocuwareExportInvoices;
              'DocuWareStatusSync' :
                DocuwareStatusSync;
              'Cleanup' :
                CleanupJob;
              'ExportIDprove' :
                ExportIDprove;
            END;
          END;

  }
  CODE
  {
    VAR
      FileMgt@1000000005 : Codeunit 419;
      TOPAS_API@1000000000 : Codeunit 50001;
      SMPTMail@1000000004 : Codeunit 400;
      mail_subject@1000000001 : Text;
      mail_body@1000000002 : Text;
      chr@1000000003 : Char;

    LOCAL PROCEDURE CheckNewServiceAcc@1000000002();
    VAR
      Servicepositionen@1000000000 : Record 50024;
      wartungsnr_cache@1000000001 : Text;
      accounts_to_export@1000000002 : Integer;
      powermail_form@1000000005 : Text;
      powermail_forms_infos@1000000003 : Text;
      _File@1000000004 : File;
    BEGIN
      accounts_to_export := 0;
      Servicepositionen.RESET;
      Servicepositionen.SETRANGE(Art,Servicepositionen.Art::Service);
      Servicepositionen.SETRANGE(Inaktiv,FALSE);
      Servicepositionen.SETRANGE("Zu exportieren",TRUE);
      Servicepositionen.SETRANGE(Exportiert,FALSE);
      IF Servicepositionen.FIND('-') THEN
        REPEAT
          IF STRPOS(wartungsnr_cache,Servicepositionen."Wartungsvertragsnr.") = 0 THEN BEGIN
            wartungsnr_cache += Servicepositionen."Wartungsvertragsnr." + ',';
            accounts_to_export += 1;
          END;
        UNTIL Servicepositionen.NEXT = 0;

      ExecuteTypo3PowermailFormsScript;

      _File.OPEN('\\WIN-FILESRV\Software\software\TOPAS eigen\MySQL\Typo3_Powermail_Formulare\Powermail_Formulare.txt');
      _File.TEXTMODE(TRUE);
      chr := 10;
      powermail_forms_infos := FORMAT(chr) + FORMAT(chr) + 'Neue Powermail Formular Anmeldungen: '  + FORMAT(chr);

      REPEAT
         _File.READ(powermail_form);
         powermail_forms_infos += powermail_form + FORMAT(chr);
      UNTIL _File.POS = _File.LEN;
      _File.CLOSE;

      chr := 10;
      mail_subject := 'Neue Service Account Daten (' + FORMAT(accounts_to_export) + ') fr Typo3 vorhanden';
      mail_body := 'Es sind neue bzw. aktualisierte Service Accounts (' + FORMAT(accounts_to_export) + ') verfgbar.' + FORMAT(chr) +
                    'Um die Aktualisierung manuell anzustossen, nutzen Sie bitte im Navision die Maske Typo3 Verwaltungs Cockpit und die Funktion "Starte Update Job".';
      SMPTMail.CreateMessage('','typo3@topas.de','sb@topas.de;administrativ@topas.de',mail_subject,mail_body + powermail_forms_infos,FALSE);
      SMPTMail.Send;
    END;

    LOCAL PROCEDURE ExportServiceBETCrosslinkAndSyncSystemeMB@1000000000();
    VAR
      Wartungsvertrag@1000000003 : Record 50011;
      _File@1000000000 : File;
      _DatafileOutstream@1000000001 : OutStream;
      FolderPath@1000000004 : Text;
      IsExported@1000000002 : Boolean;
    BEGIN
      _File.CREATE('\\WIN-FILESRV\it\Navision 2016\Live\Daten\Service-BET-Crosslink.txt');
      _File.CREATEOUTSTREAM(_DatafileOutstream);
      IsExported := XMLPORT.EXPORT(50040, _DatafileOutstream);
      _File.CLOSE;

      IF  IsExported THEN BEGIN
        //ExecuteSystemeMailboxSyncScript(); //abgeschaltet zum 01.09.2023, da der neue NAV Server die GroupWise API nicht mehr ber die Aufgabenwarteschlange ansteuern kann
      END;

      //Neu: Status "Ordner vorhanden" wird nun in den Wartungsvertr„gen synchronisiert
      FolderPath := '\\WIN-FILESRV\Daten\Daten NEU\Gemeinsame Ordner\Customer Service\AudioCodes\';
      Wartungsvertrag.RESET;
      IF Wartungsvertrag.FIND('-') THEN
        REPEAT
          IF FileMgt.ServerDirectoryExists(FolderPath + FORMAT(Wartungsvertrag."Wartungsvertragsnr.")) THEN BEGIN
            IF Wartungsvertrag."Ordner vorhanden" = FALSE THEN BEGIN
              Wartungsvertrag."Ordner vorhanden" := TRUE;
              Wartungsvertrag.MODIFY;
            END;
          END ELSE BEGIN
            IF Wartungsvertrag."Ordner vorhanden" THEN BEGIN
              Wartungsvertrag."Ordner vorhanden" := FALSE;
              Wartungsvertrag.MODIFY;
            END;
          END;
        UNTIL Wartungsvertrag.NEXT = 0;
    END;

    LOCAL PROCEDURE DataPrivacySetStatus@1000000001();
    VAR
      Datenschutz@1000000000 : Codeunit 50015;
    BEGIN
      Datenschutz.CheckLastContactStatus(FALSE);
    END;

    PROCEDURE ExportTypo3AccountUpdateStatus@1000000004();
    VAR
      _File@1000000001 : File;
      _DatafileOutstream@1000000000 : OutStream;
      IsExported@1000000002 : Boolean;
    BEGIN
      _File.CREATE('\\WIN-FILESRV\it\Navision 2016\Live\Daten\Typo3 Account Update.txt');
      _File.CREATEOUTSTREAM(_DatafileOutstream);
      IsExported := XMLPORT.EXPORT(50041, _DatafileOutstream);
      _File.CLOSE;

      IF IsExported THEN BEGIN
        IF ExecuteTypo3AccountUpdateScript() = 1 THEN
          ImportTypo3AccountUpdateStatus();
      END;
    END;

    PROCEDURE ImportTypo3AccountUpdateStatus@1000000003();
    VAR
      _File@1000000001 : File;
      _DatafileInstream@1000000000 : InStream;
    BEGIN
      _File.OPEN('\\WIN-FILESRV\it\Navision 2016\Live\Daten\Typo3 Account Update.txt');
      _File.CREATEINSTREAM(_DatafileInstream);
      IF _File.LEN() > 0 THEN BEGIN
        XMLPORT.IMPORT(50041, _DatafileInstream);
      END;
      _File.CLOSE;
    END;

    LOCAL PROCEDURE ExecuteTypo3AccountUpdateScript@1000000010() : Integer;
    VAR
      ProcessShell@1000000004 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" SUPPRESSDISPOSE;
      WshShell@1000000003 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      wshExec@1000000002 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{08FED191-BE19-11D3-A28B-00104BD35090}:'Windows Script Host Object Model'.WshExec";
      wSHExecStatus@1000000001 : Integer;
      mysql_program@1000000000 : Text;
      ExitCode@1000000006 : Integer;
    BEGIN
      mysql_program := '"\\WIN-FILESRV\Software\software\TOPAS eigen\MySQL\Typo3 Account Update\Typo3_Update_myTOPAS.exe"';
      ProcessShell := ProcessShell.Process;
      ProcessShell.StartInfo.UseShellExecute := FALSE;
      ProcessShell.StartInfo.FileName := mysql_program;
      ProcessShell.StartInfo.Arguments := 'sync';
      ProcessShell.StartInfo.CreateNoWindow := TRUE;
      ProcessShell.Start();
      ProcessShell.WaitForExit(60000 * 2); //2 Minuten
      IF ProcessShell.HasExited = FALSE THEN BEGIN
        ProcessShell.Kill();
        ExitCode := ProcessShell.ExitCode;
        ERROR('Fehlercode: %1. Der Job musste nach einem Timeout beendet werden, scheinbar liegt ein Fehler im Update Script vor. Bitte wenden Sie sich an Ihren Administrator.',ExitCode);
      END;
      ExitCode := ProcessShell.ExitCode;
      IF ExitCode > 1 THEN ERROR('Fehlercode: %1. Weitere Informationen hierzu finden Sie im Status.log. Nach Fehlerbeseitigung muss der Administrator den Job wieder auf Bereit setzen.',ExitCode);
      CLEAR(ProcessShell);
      EXIT(1);
    END;

    LOCAL PROCEDURE ExecuteTypo3PowermailFormsScript@1000000014() : Integer;
    VAR
      ProcessShell@1000000004 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" SUPPRESSDISPOSE;
      WshShell@1000000003 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      wshExec@1000000002 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{08FED191-BE19-11D3-A28B-00104BD35090}:'Windows Script Host Object Model'.WshExec";
      wSHExecStatus@1000000001 : Integer;
      mysql_program@1000000000 : Text;
      ExitCode@1000000006 : Integer;
    BEGIN
      mysql_program := '"\\WIN-FILESRV\Software\software\TOPAS eigen\MySQL\Typo3_Powermail_Formulare\Typo3_Powermail_Formulare_check.exe"';
      ProcessShell := ProcessShell.Process;
      ProcessShell.StartInfo.UseShellExecute := FALSE;
      ProcessShell.StartInfo.FileName := mysql_program;
      ProcessShell.StartInfo.Arguments := 'formulare';
      ProcessShell.StartInfo.CreateNoWindow := TRUE;
      ProcessShell.Start();
      ProcessShell.WaitForExit(60000 * 1); //1 Minute
      IF ProcessShell.HasExited = FALSE THEN BEGIN
        ProcessShell.Kill();
        ExitCode := ProcessShell.ExitCode;
        ERROR('Fehlercode: %1. Der Job musste nach einem Timeout beendet werden, scheinbar liegt ein Fehler im Script vor. Bitte wenden Sie sich an Ihren Administrator.',ExitCode);
      END;
      ExitCode := ProcessShell.ExitCode;
      IF ExitCode > 1 THEN ERROR('Fehlercode: %1. Weitere Informationen hierzu finden Sie im Status.log. Nach Fehlerbeseitigung muss der Administrator den Job wieder auf Bereit setzen.',ExitCode);
      CLEAR(ProcessShell);
      EXIT(1);
    END;

    LOCAL PROCEDURE ExecuteSystemeMailboxSyncScript@1000000011() : Integer;
    VAR
      ProcessShell@1000000004 : DotNet "'System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Diagnostics.Process" SUPPRESSDISPOSE;
      WshShell@1000000003 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{72C24DD5-D70A-438B-8A42-98424B88AFB8}:'Windows Script Host Object Model'.WshShell";
      wshExec@1000000002 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{08FED191-BE19-11D3-A28B-00104BD35090}:'Windows Script Host Object Model'.WshExec";
      wSHExecStatus@1000000001 : Integer;
      sync_program@1000000000 : Text;
      ExitCode@1000000006 : Integer;
    BEGIN
      sync_program := '"\\WIN-FILESRV\Software\software\TOPAS eigen\GWAttachments\GWAttachmentsCollector.exe"';
      ProcessShell := ProcessShell.Process;
      ProcessShell.StartInfo.UseShellExecute := FALSE;
      ProcessShell.StartInfo.FileName := sync_program;
      ProcessShell.StartInfo.Arguments := 'auto';
      ProcessShell.StartInfo.CreateNoWindow := TRUE;
      ProcessShell.Start();
      ProcessShell.WaitForExit(60000 * 15); //15 Minuten
      IF ProcessShell.HasExited = FALSE THEN BEGIN
        ProcessShell.Kill();
        ExitCode := ProcessShell.ExitCode;
        ERROR('Fehlercode: %1. Der Job musste nach einem Timeout beendet werden, scheinbar liegt ein Fehler im Update Script vor. Bitte wenden Sie sich an Ihren Administrator.',ExitCode);
      END;
      ExitCode := ProcessShell.ExitCode;
      IF ExitCode > 1 THEN ERROR('Fehlercode: %1. Weitere Informationen hierzu finden Sie im Status.log.',ExitCode);
      CLEAR(ProcessShell);
      EXIT(1);
    END;

    PROCEDURE AdjustServicePricesNewPricelist@1000000005();
    VAR
      SalesHeader@1000000007 : Record 36;
      Services@1000000003 : Record 50028;
      Services_new@1000000004 : Record 50028;
      Services_del@1000000008 : Record 50028;
      Service_check@1000000012 : Record 50028;
      PreislistenStatus@1000000002 : Record 50001;
      PreislistenStatusUmst@1000000005 : Record 50001;
      Item@1000000011 : Record 27;
      PurchasePrice@1000000009 : Record 7012;
      SalesPrice@1000000010 : Record 7002;
      champs_services_pre@1000000000 : Integer;
      acts_services_pre@1000000001 : Integer;
      last_time_buy@1000000006 : Date;
      chr@1000000017 : Char;
      SMPTMail@1000000016 : Codeunit 400;
      mail_subject@1000000015 : Text;
      mail_body@1000000014 : Text;
      uncorrected@1000000013 : Text;
    BEGIN
      //Umstellung der Preislisten Information in der Optionstabelle
      champs_services_pre := 0;
      acts_services_pre := 0;
      uncorrected := '';
      chr := 10;

      Services_new.RESET;
      Services_new.SETRANGE("Update letzte Preisliste",TRUE);
      Services_new.SETRANGE(Status,Services_new.Status::vorab);
      Services_new.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
      Services_new.SETRANGE(Art,Services_new.Art::Champs);
      IF Services_new.FINDFIRST THEN champs_services_pre := Services_new.COUNT;
      Services_new.SETRANGE(Art,Services_new.Art::ACTS);
      IF Services_new.FINDFIRST THEN acts_services_pre := Services_new.COUNT;
      Services_new.SETRANGE(Art);
      IF (Services_new.FINDFIRST) AND (champs_services_pre > 0) AND (acts_services_pre > 0) THEN BEGIN

        //vorab Check Versionsnr., ob alle Preise den gleichen Stand haben und nicht ein paar schon umgestellt sind und andere nicht
        PreislistenStatus.RESET;
        PreislistenStatus.SETRANGE("Tabellen ID",36);
        PreislistenStatus.SETRANGE("Feld ID",50351);
        PreislistenStatus.SETRANGE(Code,'PREISLISTE');
        PreislistenStatus.SETRANGE("Lfd.-Nr.",0); //vorab
        IF PreislistenStatus.FINDFIRST THEN BEGIN
          Services.RESET;
          Services.SETRANGE("Update letzte Preisliste",TRUE);
          Services.SETRANGE(Status,Services.Status::neu);
          Services.SETFILTER(Preisliste,'%1&<>%2',PreislistenStatus."Nr.",'SCHAEFFLER');
          IF Services.FINDFIRST THEN BEGIN
            PreislistenStatus.SETRANGE("Lfd.-Nr.",1); // neu
            PreislistenStatus.FINDFIRST;
            ERROR('Inkosistenz in der Service Preistabelle gefunden:\' +
                  'Fr Artikel %1 stimmen Preislisten Status (%2) und Versionnr. (%3) nicht mit den globalen Vorgaben berein.\' +
                  'Richtig w„re aktuell fr Preislisten Status: %2 die Versionnr.: %4',Services."Artikelnr. 2",Services.Status,Services.Preisliste,PreislistenStatus."Nr.");
          END;

          //Korrektur fr Artikel, die vorher manuell angelegt wurden, weil diese in den alten Preislisten noch keine Servicepreise hatten, nun aber schon
          //Teil I - neu wird entfernt, wenn Status "Update letzte Preisliste" nein und Status vorab wieder in der Pipeline ist, also wieder in der Preisliste
          Services_del.RESET;
          Services_del.SETRANGE(Status,Services_del.Status::neu);
          Services_del.SETRANGE("Update letzte Preisliste",FALSE);
          Services_del.SETRANGE("Zuordnung obsolete",FALSE);
          Services_del.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
          IF Services_del.FIND('-') THEN BEGIN
            REPEAT
              Services.RESET;
              Services.SETRANGE(Status,Services.Status::vorab);
              Services.SETRANGE("Update letzte Preisliste",TRUE);
              Services.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
              Services.SETRANGE("SUP Artikelnr.",Services_del."SUP Artikelnr.");
              Services.SETRANGE("Artikelnr. 2",Services_del."Artikelnr. 2");
              IF Services.FIND('-') THEN BEGIN
                Services_del.DELETE;
              END;
            UNTIL Services_del.NEXT = 0;
          END;
          //Teil II - alt wird entfernt, wenn Status "Update letzte Preisliste" nein und Status vorab wieder in der Pipeline ist, also wieder in der Preisliste
          Services_del.RESET;
          Services_del.SETRANGE(Status,Services_del.Status::alt);
          Services_del.SETRANGE("Update letzte Preisliste",FALSE);
          Services_del.SETRANGE("Zuordnung obsolete",FALSE);
          Services_del.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
          IF Services_del.FIND('-') THEN BEGIN
            REPEAT
              Services.RESET;
              Services.SETRANGE(Status,Services.Status::vorab);
              Services.SETRANGE("Update letzte Preisliste",TRUE);
              Services.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
              Services.SETRANGE("SUP Artikelnr.",Services_del."SUP Artikelnr.");
              Services.SETRANGE("Artikelnr. 2",Services_del."Artikelnr. 2");
              IF Services.FIND('-') THEN BEGIN
                Services_del.DELETE;
              END;
            UNTIL Services_del.NEXT = 0;
          END;
        END;

        //Umstellung der globalen Konfiguration der Preislisten
        PreislistenStatus.RESET;
        PreislistenStatus.SETRANGE("Tabellen ID",36);
        PreislistenStatus.SETRANGE("Feld ID",50351);
        PreislistenStatus.SETRANGE(Code,'PREISLISTE');
        PreislistenStatus.SETRANGE("Lfd.-Nr.",0); //vorab Preisliste
        IF PreislistenStatus.FINDFIRST THEN BEGIN
          IF PreislistenStatus."Nr." = Services_new.Preisliste THEN BEGIN
            PreislistenStatusUmst.RESET;
            PreislistenStatusUmst.SETRANGE("Tabellen ID",36);
            PreislistenStatusUmst.SETRANGE("Feld ID",50351);
            PreislistenStatusUmst.SETRANGE(Code,'PREISLISTE');
            IF PreislistenStatusUmst.FIND('-') THEN
              REPEAT
                PreislistenStatusUmst."Lfd.-Nr." += 1;
                PreislistenStatusUmst.MODIFY;
                IF PreislistenStatusUmst."Lfd.-Nr." = 2 THEN BEGIN
                  Services.RESET;
                  Services.SETRANGE(Status,Services.Status::neu);
                  Services.SETRANGE("Update letzte Preisliste",TRUE);
                  Services.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
                  IF Services.FINDFIRST THEN BEGIN
                    last_time_buy := Services."Last Time Buy";
                    IF last_time_buy = 0D THEN BEGIN
                      last_time_buy := CALCDATE('<1M-1D>',PreislistenStatus.Startdatum);
                    END;
                    PreislistenStatusUmst.Enddatum := last_time_buy;
                    PreislistenStatusUmst.MODIFY;
                  END;
                END;
                IF PreislistenStatusUmst."Lfd.-Nr." >= 3 THEN //sehr alte Preisliste
                  PreislistenStatusUmst.DELETE;
              UNTIL PreislistenStatusUmst.NEXT = 0;

              PreislistenStatus.RESET;
              PreislistenStatus.SETRANGE("Tabellen ID",36);
              PreislistenStatus.SETRANGE("Feld ID",50351);
              PreislistenStatus.SETRANGE(Code,'PREISLISTE');
              PreislistenStatus.SETRANGE("Lfd.-Nr.",1); //neue neu Preisliste
              IF PreislistenStatus.FINDFIRST THEN BEGIN
                //Nun werden die Servicepreise umgestellt, auáer Spezialpreislisten wie Schaeffler
                Services.RESET;
                Services.SETRANGE(Status,Services.Status::neu);
                Services.SETRANGE("Update letzte Preisliste",TRUE);
                Services.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
                IF Services.FIND('-') THEN BEGIN
                  WITH Services DO BEGIN
                    IF Preisliste <> PreislistenStatus."Nr." THEN BEGIN
                      SETRANGE(Status,Services.Status::alt);
                      IF FIND('-') THEN BEGIN
                        DELETEALL;
                      END;
                      SETRANGE(Status,Services.Status::neu);
                      IF FIND('-') THEN BEGIN
                        REPEAT
                          Service_check.RESET;
                          Service_check.SETRANGE(Status,Services.Status::alt);
                          Service_check.SETRANGE("Service Artikelnr.","Service Artikelnr.");
                          Service_check.SETRANGE("SUP Artikelnr.","SUP Artikelnr.");
                          Service_check.SETRANGE("Artikelnr. 2","Artikelnr. 2");
                          Service_check.SETRANGE(W„hrungscode,W„hrungscode);
                          IF NOT Service_check.FINDFIRST THEN BEGIN
                            RENAME("Service Artikelnr.","SUP Artikelnr.","Artikelnr. 2",W„hrungscode,Services.Status::alt);
                            "Last Time Buy" := last_time_buy;
                            MODIFY;
                          END ELSE BEGIN
                            //Ausnahmefehler tritt ein, wenn Preise tempor„r ins System geraten sind fr nur eine W„hrung o.„, siehe Bsp.: 920-0002-001 und Hardware Replacement Service
                            uncorrected += 'Service Artikelnr.=' + "Service Artikelnr." + ' SUP Artikelnr.=' + "SUP Artikelnr." + ' Artikelnr. 2=' + "Artikelnr. 2" + ' W„hrungscode=' + W„hrungscode +
                                           ' Status=' + FORMAT(Status) + FORMAT(chr);
                          END;
                        UNTIL NEXT = 0;
                      END;
                      SETRANGE(Status,Services.Status::vorab);
                      IF FIND('-') THEN BEGIN
                        REPEAT
                          RENAME("Service Artikelnr.","SUP Artikelnr.","Artikelnr. 2",W„hrungscode,Services.Status::neu);
                        UNTIL NEXT = 0;
                      END;
                    END;
                  END;

                //EK- und VK-Preise von Startdatum auf Prerelease Datum ab„ndern, da die neue Preisliste nun LIVE geht
                Item.RESET;
                Item.SETRANGE("Manufacturer Code",'59');
                Item.SETRANGE("Special Equipment Code",''); // keine Schaeffler Artikel
                IF Item.FIND('-') THEN
                  REPEAT
                    //EK-Preise umstellen
                    PurchasePrice.RESET;
                    PurchasePrice.SETRANGE("Item No.",Item."No.");
                    PurchasePrice.SETRANGE("Starting Date",PreislistenStatus.Startdatum);
                    PurchasePrice.SETRANGE("Ending Date",0D);
                    IF PurchasePrice.FIND('-') THEN
                      REPEAT
                        PurchasePrice.RENAME(PurchasePrice."Item No.",PurchasePrice."Vendor No.",PreislistenStatus.Prerelease,PurchasePrice."Currency Code",PurchasePrice."Variant Code",
                        PurchasePrice."Unit of Measure Code",PurchasePrice."Minimum Quantity");
                      UNTIL PurchasePrice.NEXT = 0;
                    //VK-Preise umstellen
                    SalesPrice.SETRANGE("Item No.",Item."No.");
                    SalesPrice.SETRANGE("Starting Date",PreislistenStatus.Startdatum);
                    SalesPrice.SETRANGE("Ending Date",0D);
                    IF SalesPrice.FIND('-') THEN
                      REPEAT
                        SalesPrice.RENAME(SalesPrice."Item No.",SalesPrice."Sales Type",SalesPrice."Sales Code",PreislistenStatus.Prerelease,SalesPrice."Currency Code",SalesPrice."Variant Code",
                        SalesPrice."Unit of Measure Code",SalesPrice."Minimum Quantity");
                      UNTIL SalesPrice.NEXT = 0;
                  UNTIL Item.NEXT = 0;

                //Service Artikel, die nicht mehr in der neuen Preisliste zu finden sind, auch mit der neuen Version kompatibel sind
                Services.RESET;
                Services.SETRANGE(Status,Services.Status::alt);
                Services.SETRANGE("Zuordnung obsolete",FALSE);
                Services.SETRANGE("Update letzte Preisliste",TRUE);
                IF Services.FIND('-') THEN BEGIN
                  REPEAT
                    Services_new.RESET;
                    Services_new.SETRANGE("SUP Artikelnr.",Services."SUP Artikelnr.");
                    Services_new.SETRANGE("Artikelnr. 2",Services."Artikelnr. 2");
                    Services_new.SETRANGE(W„hrungscode,Services.W„hrungscode);
                    Services_new.SETRANGE("Zuordnung obsolete",FALSE);
                    Services_new.SETRANGE(Status,Services_new.Status::neu);
                    IF NOT Services_new.FINDFIRST THEN BEGIN
                      Services_new.INIT;
                      Services_new.TRANSFERFIELDS(Services);
                      Services_new."Last Time Buy" := 0D;
                      Services_new.Status := Services_new.Status::neu;
                      Services_new.Preisliste := 'old_services-' + Services_new.Preisliste;
                      Services_new."Update letzte Preisliste" := FALSE;
                      Services_new.INSERT(TRUE);

                      //Umstellung der Vorlage, damit diese nicht gel”scht werden beim n„chsten Preislistenlauf
                      Services."Last Time Buy" := 0D;
                      Services."Update letzte Preisliste" := FALSE;
                      Services.MODIFY(TRUE);
                    END;
                  UNTIL Services.NEXT = 0;
                END;

                //Aktuelle Belege auf Preislisten Kalkulation alt umstellen
                SalesHeader.RESET;
                SalesHeader.SETRANGE("Territory Code",'SYSTEM');
                SalesHeader.SETRANGE("Preislisten Kalkulation",SalesHeader."Preislisten Kalkulation"::neu);
                IF SalesHeader.FINDFIRST THEN BEGIN
                  SalesHeader.MODIFYALL("Preislisten Kalkulation",SalesHeader."Preislisten Kalkulation"::alt);
                END;

                IF uncorrected <> '' THEN BEGIN
                  chr := 10;
                  mail_subject := 'Warnung: System Preislisten Importjob';
                  mail_body :=    'Folgende Artikel wurden nicht richtig umgestellt, bitte prfen:' + FORMAT(chr) + FORMAT(chr) + uncorrected;
                  SMPTMail.CreateMessage('','nav2016@topas.de','administrativ@topas.de',mail_subject,mail_body,FALSE);
                  SMPTMail.Send;
                END;

              END;
            END;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE DocuwareExportDocs@1000000006();
    VAR
      DocuWare@1000000000 : Codeunit 50016;
    BEGIN
      DocuWare.ExportDocsToFolder(1,WORKDATE-1);
    END;

    LOCAL PROCEDURE DocuwareExportInvoices@1000000012();
    VAR
      DocuWare@1000000000 : Codeunit 50016;
    BEGIN
      DocuWare.ExportDocsToFolder(4,WORKDATE-1);
    END;

    LOCAL PROCEDURE DocuwareStatusSync@1000000009();
    VAR
      _File@1000000001 : File;
      _DatafileInstream@1000000000 : InStream;
    BEGIN
      _File.OPEN('\\WIN-FILESRV\Daten\Daten NEU\Gemeinsame Ordner\DocuWare\Daten\Export_30_Tage.csv');
      _File.CREATEINSTREAM(_DatafileInstream);
      IF _File.LEN() > 0 THEN BEGIN
        XMLPORT.IMPORT(50043, _DatafileInstream);
      END;
      _File.CLOSE;
    END;

    LOCAL PROCEDURE CleanupJob@1000000008();
    VAR
      TempRecRef@1000000015 : RecordRef;
      FieldRecRef@1000000016 : FieldRef;
      myCharVar@1000000005 : Char;
      chr@1000000006 : Char;
      SMPTMail@1000000002 : Codeunit 400;
      mail_subject@1000000001 : Text;
      mail_body@1000000000 : Text;
      uncorrected_info@1000000011 : Text;
      corrected_info@1000000012 : Text;
      item_no@1000000013 : Code[40];
      array1@1000000014 : ARRAY [3] OF Integer;
      count1@1000000007 : Integer;
      count2@1000000008 : Integer;
      varDB@1000000009 : Integer;
      i@1000000010 : Integer;
      k@1000000017 : Integer;
    BEGIN
      //Unicode Sonderzeichen Viertelgeviertstrich (E2 80 90) in Bindestrich „ndern bzw. bei Artikelnr. warnen per E-Mail
      count1 := 0;
      count2 := 0;
      myCharVar := 8208;
      varDB := DATABASE::Item;
      TempRecRef.OPEN(varDB);
      TempRecRef.FIND('-');
      uncorrected_info := '';
      corrected_info := '';
      item_no := '';
      chr := 10;
      REPEAT
        FOR i := 1 TO TempRecRef.FIELDCOUNT DO BEGIN
          FieldRecRef := TempRecRef.FIELDINDEX(i);
          IF i = 1 THEN item_no := FieldRecRef.VALUE;
          IF STRPOS(FORMAT(FieldRecRef.VALUE),FORMAT(myCharVar)) <> 0 THEN BEGIN
            count1 += 1;
            IF (FieldRecRef.NAME = 'No.') OR (FieldRecRef.NAME = 'No. 2') THEN BEGIN
              uncorrected_info += FieldRecRef.NAME + ': ' + FORMAT(FieldRecRef.VALUE) + FORMAT(chr);
            END ELSE BEGIN
              corrected_info += 'No.: ' + item_no + ' - ' + FieldRecRef.NAME + ': ' + FORMAT(FieldRecRef.VALUE) + FORMAT(chr);
              FieldRecRef.VALUE(TOPAS_API.replace_text(FORMAT(FieldRecRef.VALUE),FORMAT(myCharVar),'-'));
              TempRecRef.MODIFY;
              count2 += 1;
            END;
          END;
        END;
      UNTIL TempRecRef.NEXT = 0;
      TempRecRef.CLOSE;

      IF uncorrected_info <> '' THEN BEGIN
        chr := 10;
        mail_subject := 'Achtung: Unerwnschte Sonderzeichen im Artikelstamm vorhanden';
        mail_body :=    'Bitte ersetzen Sie in den folgenden Artikeln den Unicode Bindestrich gegen einen normalen Bindestrich:' + FORMAT(chr) + FORMAT(chr) +
                        uncorrected_info + FORMAT(chr) +
                        'weitere Žnderungen (hier wurden die Korrekturen bereits angewandt - nur Info), Anzahl: (' + FORMAT(count2) + ')' + FORMAT(chr) + FORMAT(chr) + corrected_info;
        SMPTMail.CreateMessage('','nav2016@topas.de','administrativ@topas.de',mail_subject,mail_body,FALSE);
        SMPTMail.Send;
      END;

      //Unicode Zeichen Nullbreite (E2 80 8B) l”schen
      array1[1] := 5050; // Contact
      array1[2] := 18; // Customer
      array1[3] := 36; // Sales Header
      myCharVar := 8203;
      corrected_info := '';
      FOR k := 1 TO ARRAYLEN(array1) DO BEGIN
        IF array1[k] = 0 THEN EXIT;
        count1 := 0;
        count2 := 0;
        TempRecRef.OPEN(array1[k]);
        TempRecRef.FIND('-');
        count1 := TempRecRef.COUNT;
        REPEAT
          FOR i := 1 TO TempRecRef.FIELDCOUNT DO BEGIN
            FieldRecRef := TempRecRef.FIELDINDEX(i);
            IF STRPOS(FORMAT(FieldRecRef.VALUE),FORMAT(myCharVar)) <> 0 THEN BEGIN
              count2 += 1;
              FieldRecRef.VALUE := DELCHR(FORMAT(FieldRecRef.VALUE),'=',FORMAT(myCharVar));
              TempRecRef.MODIFY;
              corrected_info += 'Tabelle: ' + TempRecRef.NAME + ' - Feld: ' + FieldRecRef.NAME + ' (' + FORMAT(FieldRecRef.NUMBER) + ') ' + DELCHR(FORMAT(FieldRecRef.VALUE),'=',FORMAT(myCharVar)) + FORMAT(chr);
            END;
          END;

        UNTIL TempRecRef.NEXT = 0;
        TempRecRef.CLOSE;
      END;

      IF corrected_info <> '' THEN BEGIN
        chr := 10;
        mail_subject := 'Info: Unerwnschte Sonderzeichen Unicode Zeichen Nullbreite korrigiert';
        mail_body :=    'Folgende Tabellen wurden automatisch korrigiert:' + FORMAT(chr) + FORMAT(chr) + corrected_info;
        SMPTMail.CreateMessage('','nav2016@topas.de','administrativ@topas.de',mail_subject,mail_body,FALSE);
        SMPTMail.Send;
      END;
    END;

    LOCAL PROCEDURE ExportIDprove@1000000013();
    VAR
      _File@1000000001 : File;
      _DatafileOutstream@1000000000 : OutStream;
      Filename@1000000002 : Text;
    BEGIN
      Filename := '\\WIN-FILESRV\it\id_prove\Import\nav_idprove_adr_personen.csv';
      _File.CREATE(Filename);
      _File.CREATEOUTSTREAM(_DatafileOutstream);
      XMLPORT.EXPORT(50098, _DatafileOutstream);
      _File.CLOSE;

      Filename := '\\WIN-FILESRV\it\id_prove\Import\nav_idprove_adr_mandanten.csv';
      _File.CREATE(Filename);
      _File.CREATEOUTSTREAM(_DatafileOutstream);
      XMLPORT.EXPORT(50099, _DatafileOutstream);
      _File.CLOSE;
    END;

    PROCEDURE RestartNAS@1000000007(Option@1000000001 : Text);
    VAR
      JobQueue@1000000000 : Record 470;
    BEGIN
      IF Option = '0' THEN BEGIN
        IF JobQueue.FINDFIRST THEN
          REPEAT
            JobQueue.StopQueue;
            SLEEP(2000);
          UNTIL JobQueue.NEXT = 0;
      END;

      IF Option = '1' THEN BEGIN
        IF JobQueue.FINDFIRST THEN
          REPEAT
            JobQueue.StartQueue(COMPANYNAME);
            SLEEP(2000);
          UNTIL JobQueue.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

