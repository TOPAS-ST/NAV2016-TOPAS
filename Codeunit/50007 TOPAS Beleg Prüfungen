OBJECT Codeunit 50007 TOPAS Beleg Prfungen
{
  OBJECT-PROPERTIES
  {
    Date=15.08.17;
    Time=17:43:49;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PurchaseHeader@1000000002 : Record 38;
      PurchaseLine@1000000003 : Record 39;
      Item@1000000000 : Record 27;
      Text000@1000000001 : TextConst 'DEU=Sie mssen in der %1 %2 %3 fr %4 %5 noch einen %6 hinterlegen.';
      Text100@1000000004 : TextConst 'DEU=Bitte hinterlegen Sie fr Artikelnr. %1 %2 eine Serviceklassifizierung im Artikelstamm.';
      Text101@1000000005 : TextConst 'DEU="Sie drfen nicht mehr als 1 %1 pro Basisger„t gleichzeitig ausliefern. Fr Artikelnr. %2, in Zeilennr. %3, muss %4 = 1 sein."';
      Text102@1000000006 : TextConst 'DEU=Sie drfen in einem SOR Auftrag keine Champ / ACTS / ACHAT Artikel buchen. Platzieren Sie einen neuen Auftrag oder „ndern Sie den %1.';
      Text103@1000000007 : TextConst 'DEU=Sie mssen auch den Artikel %1 in Zeile %2 mit ausliefern, da dies aus der entsprechenden Kalkulation hervorgeht und einander bedingt.';
      Text104@1000000008 : TextConst 'DEU=šberprfen Sie bitte die Kalkulation fr %1 in Zeile %2.\Die Angabe %3, Belegnr. %4, Zeilenr. %5 existiert nicht mehr im Beleg.';
      Text105@1000000009 : TextConst 'DEU="Die zuliefernde Menge des Artikels %1 in Zeile %2 stimmt nicht mit der in der Kalkulation aus Zeile %3 vorgegebenen Menge von %4 berein. "';
      Text106@1000000010 : TextConst 'DEU=%1 fr %2 Artikel %3 darf nicht gr”áer als 1 sein.';
      Text107@1000000011 : TextConst 'DEU=Fr Artikelnr. %1, in Zeilennr. %2, wurde noch keine Kalkulation angelegt.';
      Text108@1000000012 : TextConst 'DEU=Fr Artikelnr. %1, in Zeilennr. %2, konnte kein Basisger„t in der Kalkulation gefunden werden.\Als Alternative steht Ihnen die Verknpfung zu einem Wartungsvertrag zur Verfgung.\Gehen Sie dazu in die Kalkulation und hinterlegen Sie die entsprechende Wartungsvertragsnr.';
      Text109@1000000013 : TextConst 'DEU=Der angegebene Wartungsvertrag %1 in der Kalkulation in Zeile %2 ist abgelaufen (Ablauf: %3). Sie mssen den gesamten Wartungsvertrag verl„ngern, um diese Buchung durchfhren zu k”nnen.\\Hinweis: Sie k”nnen den Wartungsvertrag gleich mit verl„ngern, indem Sie die alle Positionen aus dem Wartungsvertrag mit in diese Kalkulation bernehmen.';
      Text110@1000000014 : TextConst 'DEU="Fr Artikelnr. %1 in Zeile %2 bersteigt die gesamte kalkulierte Menge aus der dazugeh”rigen Kalkulation die tats„chlich\Zu liefernde Menge bzw. gelieferte Menge der angegebenen Belegzeilen. Evtl. hat sich auch die Ausgangssituation der Auftragspositionen ge„ndert.\\Bitte berprfen Sie die Mengen Einteilung bzw. die Korrektheit der Kalkulation. "';
      Text111@1000000015 : TextConst 'DEU=In der Kalkulation %1 in Zeile %2 ist der angegebene Service Quote %3 abgelaufen bzw. nicht gltig oder existiert nicht mehr.';
      Text112@1000000016 : TextConst 'DEU=Fr Artikelnr. %1 in Zeile %2 darf die %3 in der dazugeh”rigen Kalkulation nicht 0 sein.';
      Text113@1000000017 : TextConst 'DEU=Falsche Mengenaufstellung in Kalkulation %1. Das Feld %2 (%3) im Auftrag und %4 (%5) in der Kalkulation drfen nicht gr”áer sein als %6 (%7).';
      Text114@1000000018 : TextConst 'DEU=Es empfiehlt sich nicht fremderworbene Basissysteme mit derselben Artikelnr. zu splitten. Bitte kumulieren Sie die Ger„te in einer Position und nutzen Sie die Mengen Angabe.';
      Text115@1000000019 : TextConst 'DEU=Fehler im Wartungsvertrag %1, bitte alle Basisger„t Positionen fr Seriennr. %2 auf inaktiv setzen. Bitte berprfen Sie die Kalkulation in Zeile %3.';
      Text116@1000000020 : TextConst 'DEU=Die %1 %2 ist inaktiv, bitte entfernen Sie die %1 Vorbelegung in der Kalkulation in Zeilennr. %3.';
      Text117@1000000021 : TextConst 'DEU=Sie mssen zun„chst den Artikel %1 (SN: %2) aus Lieferschein %3, Zeilennr. %4 in den Wartungsvertrag %5 berfhren.';
      Text118@1000000022 : TextConst 'DEU=In der Kalkulation %1 in Zeile %2 drfen nicht verschiedene Basisger„te ausgewiesen werden.';
      TOPAS_API@1000000023 : Codeunit 50001;
      Text119@1000000026 : TextConst 'DEU=Fr Artikelnr. %1 in Zeile %2 stimmt die Kalkulation nicht mit der Auswahl der Seriennr. berein.\\Bitte berprfen Sie die Mengen Einteilung der Kalkulation bzw. die Auswahl der Seriennummern.';
      Text120@1000000025 : TextConst 'DEU=Fr Artikelnr. %1 in Zeile %2 bersteigt die gesamte kalkulierte Menge aus der dazugeh”rigen Kalkulation die tats„chliche Anzahl der vorgemerkten Seriennummern.\\Bitte berprfen Sie die Mengen Einteilung der Kalkulation bzw. die Auswahl der Seriennummern.';
      Text130@1000000024 : TextConst 'DEU=Die Kalkulation fr Service Artikel %1 in Zeile %2 hat sich ge„ndert, m”chten Sie den aktuelleren DC bernehmen?';

    PROCEDURE CheckPurchaseBeforePost@1000000000(OrderNo@1000000001 : Code[20]) : Boolean;
    VAR
      ReservEntry@1000000000 : Record 337;
    BEGIN
      //TOPAS 01.07.17 ST

      //TOPAS 07.11.11 UB Beginn - šberprfung 13B2 'liefern'
      PurchaseLine.RESET;
      PurchaseLine.SETFILTER("Document No.",'%1',OrderNo);
      PurchaseLine.SETFILTER("Qty. to Receive",'>%1',0);
      IF PurchaseLine.FINDFIRST THEN BEGIN
        REPEAT
          IF ((PurchaseLine."Gen. Bus. Posting Group"='13B2') AND (PurchaseLine."VAT Prod. Posting Group"<>'13B2')) THEN
            ERROR('MWSt-Produktbuchungsgruppe und Gesch„ftsbuchungsgruppe mssen beide 13B2 enthalten, Zeilen bitte berprfen');
          IF ((PurchaseLine."VAT Prod. Posting Group"='13B2') AND (PurchaseLine."Gen. Bus. Posting Group"<>'13B2')) THEN
            ERROR('MWSt-Produktbuchungsgruppe und Gesch„ftsbuchungsgruppe mssen beide 13B2 enthalten, Zeilen bitte berprfen');
       UNTIL PurchaseLine.NEXT = 0;
      END;

      //'fakturieren'
      PurchaseLine.RESET;
      PurchaseLine.SETFILTER("Document No.",'%1',OrderNo);
      PurchaseLine.SETFILTER("Qty. to Invoice",'>%1',0);
      IF PurchaseLine.FINDFIRST THEN BEGIN
        REPEAT
          IF ((PurchaseLine."Gen. Bus. Posting Group"='13B2') AND (PurchaseLine."VAT Prod. Posting Group"<>'13B2')) THEN
            ERROR('MWSt-Produktbuchungsgruppe und Gesch„ftsbuchungsgruppe mssen beide 13B2 enthalten, Zeilen bitte berprfen');
          IF ((PurchaseLine."VAT Prod. Posting Group"='13B2') AND (PurchaseLine."Gen. Bus. Posting Group"<>'13B2')) THEN
            ERROR('MWSt-Produktbuchungsgruppe und Gesch„ftsbuchungsgruppe mssen beide 13B2 enthalten, Zeilen bitte berprfen');
        UNTIL PurchaseLine.NEXT = 0;
      END;

      //Reservierungsposten werden auf Fehler untersucht
      PurchaseLine.RESET;
      PurchaseLine.SETRANGE("Document No.",OrderNo);
      PurchaseLine.SETRANGE(Type,PurchaseLine.Type::Item);
      PurchaseLine.SETFILTER("Qty. to Receive",'<>0');
      IF PurchaseLine.FINDFIRST THEN
        REPEAT
          ReservEntry.SETCURRENTKEY(
            "Source ID","Source Ref. No.","Source Type","Source Subtype",
            "Source Batch Name","Source Prod. Order Line");
          ReservEntry.SETRANGE("Source ID",OrderNo);
          ReservEntry.SETRANGE("Source Ref. No.",PurchaseLine."Line No.");
          ReservEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
          ReservEntry.SETRANGE("Source Subtype",1);
          ReservEntry.SETRANGE("Source Batch Name",'');
          ReservEntry.SETFILTER("Qty. to Handle (Base)",'<>0');
          IF ReservEntry.FINDFIRST THEN
            REPEAT
              IF Item.GET(ReservEntry."Item No.") AND ((Item."Item Tracking Code" = 'PRODUCTKEY')
              OR (Item."Item Tracking Code" = 'SERIENNR+P')) AND (ReservEntry."Product Key" = '') THEN
                ERROR(Text000,PurchaseLine.TABLECAPTION,PurchaseLine.FIELDCAPTION("Line No."),PurchaseLine."Line No.",
                ReservEntry.FIELDCAPTION("Serial No."),ReservEntry."Serial No.",ReservEntry.FIELDCAPTION("Product Key"));
            UNTIL ReservEntry.NEXT = 0;
        UNTIL PurchaseLine.NEXT = 0;

      {
      IF SumUpItemTracking(ReservEntry,TempHandlingSpecification,FALSE,TRUE) THEN BEGIN
        ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Prospect);
        IF NOT ReservEntry.ISEMPTY THEN
          ReservEntry.DELETEALL;
        EXIT(TRUE);
      END;
      }
      EXIT(FALSE);
    END;

    PROCEDURE CheckPurchMinOrderAmountBeforePrint@1140000(OrderNo@1000000000 : Code[20]);
    VAR
      Hersteller@1140000 : Record 5720;
      EinkZeile@1140001 : Record 39;
      BestMenge@1140003 : Decimal;
      BestWert@1140004 : Decimal;
      Prfen@1140005 : Boolean;
    BEGIN
      //Prft den Mindestbestellwert pro Hersteller
      Hersteller.RESET;
      Hersteller.FIND('-');
      REPEAT
        EinkZeile.SETRANGE("Document Type",EinkZeile."Document Type"::Order);
        EinkZeile.SETRANGE("Document No.",OrderNo);
        EinkZeile.SETRANGE(Type, EinkZeile.Type::Item);
        EinkZeile.SETRANGE("Manufacturer Code", Hersteller.Code);
        EinkZeile.SETFILTER("Location Code",'<>%1','MUST');
        BestMenge := 0;
        BestWert := 0;
        Prfen := FALSE;
        IF EinkZeile.FIND('-') THEN
          REPEAT
            Prfen := TRUE;
            BestMenge := BestMenge + EinkZeile.Quantity;
            BestWert := BestWert + EinkZeile."Line Amount";
          UNTIL EinkZeile.NEXT = 0;

        IF Prfen THEN BEGIN
          IF BestWert < Hersteller.Mindestbestellwert THEN
            ERROR ('In Bestellung %1 ist der Mindestbestellwert %2' +
                   ' zu Herstellercode %3 unterschritten.', OrderNo,
                   Hersteller.Mindestbestellwert, Hersteller.Code);

          IF BestMenge < Hersteller.Mindestbestellmenge THEN
            ERROR ('In Bestellung %1 ist die Mindestbestellmenge %2' +
                   ' zu Herstellercode %3 unterschritten.', OrderNo,
                   Hersteller.Mindestbestellmenge, Hersteller.Code);
        END;
      UNTIL Hersteller.NEXT = 0;
    END;

    PROCEDURE CheckSalesOrderBeforePost@1140001(DocNo@1140000 : Code[20]);
    VAR
      AUkopf@1140014 : Record 36;
      AUzeile@1140001 : Record 37;
      Artikel@1140002 : Record 27;
      Ger„teArtikel@1140019 : Record 27;
      PrfeAUzeile@1140003 : Record 37;
      PrfeLiefzeile@1140004 : Record 111;
      HoleTempLizenzTab@1140005 : Record 50024;
      CheckSystemPos@1140013 : Record 50024;
      CheckServicePos@1140017 : Record 50024;
      Beleghistorie@1000000000 : Record 50008;
      ServiceZuordnungHolen@1140006 : Record 50027;
      ServiceZuordnungBeleg@1140016 : Record 50027;
      Wartungsvertrag@1140012 : Record 50011;
      menge_kalk_ges@1140007 : Decimal;
      menge_kalk_pos@1140010 : Decimal;
      menge_basissystem_pos@1140018 : Decimal;
      menge_basissysteme_fremd@1140022 : Decimal;
      menge_liefern_ges@1140008 : Decimal;
      menge_auswahl_ges@1140009 : Decimal;
      menge_auswahl_pos@1140011 : Decimal;
      basisger„t_kollision_ok@1140015 : Boolean;
      v_artikelnr@1140020 : Code[20];
      v_basissystem@1140021 : Code[20];
      v_belegnr_fremd@1140023 : Code[20];
    BEGIN
      //***************************************************************************************************
      //   TOPAS 01.03.11 ST - Prft, ob die Generierung von Lizenz Urkunden ACS m”glich ist (27.09.10)
      //***************************************************************************************************
      AUzeile.RESET;
      AUzeile.SETFILTER(AUzeile."Document No.",'%1',DocNo);
      AUzeile.SETFILTER(Type,'%1',AUzeile.Type::Item);
      AUzeile.SETFILTER(AUzeile."Qty. to Ship",'>%1',0);
      AUzeile.SETFILTER("Manufacturer Code",'%1|%2|%3|%4|%5|%6','53','57','59','98','5710','5720');
      IF AUzeile.FINDFIRST THEN BEGIN
        REPEAT

          //***************************************************************************************************
          //                                        Prfung Allgemein
          //***************************************************************************************************

          //***************************************************************************************************
          //    Allgemeine šberprfung der Serviceklassifizierung, diese darf fr ACS Produkte nicht fehlen
          //***************************************************************************************************

          Artikel.GET(AUzeile."No.");
          IF (Artikel."Manufacturer Code" = '59' ) AND (Artikel."Software Upgrade Protection" = FALSE)
          AND (Artikel.Serviceklassifizierung = '') THEN
            ERROR(Text100,AUzeile."No.");

          //***************************************************************************************************
          //          Ein System Basisger„te darf nicht mit Menge Zu liefern > 1 ausgebucht werden
          //***************************************************************************************************

          IF Artikel.Serviceklassifizierung = 'SYSTEM CHAMPS' THEN BEGIN
            IF AUzeile."Qty. to Ship" > 1 THEN
              ERROR(Text101,AUzeile."Unit of Measure",AUzeile."No.",AUzeile."Line No.",AUzeile.FIELDCAPTION("Qty. to Ship"));
          END;

          //***************************************************************************************************
          //                   SOR Auftr„ge drfen nicht mit Service fakturiert werden
          //***************************************************************************************************

          IF (AUkopf.GET(AUkopf."Document Type"::Order,AUzeile."Document No."))
          AND (Artikel."Software Upgrade Protection" = TRUE) AND (STRPOS(AUkopf."Payment Terms Code",'SOR') <> 0) THEN
            ERROR(Text102,AUkopf.FIELDCAPTION(AUkopf."Payment Terms Code"));

          //***************************************************************************************************
          //Prfung, ob Artikel in Kalkulation auftauchen und ob dieser Service Artikel auch geliefert wird
          //***************************************************************************************************

          ServiceZuordnungHolen.RESET;
          ServiceZuordnungHolen.SETRANGE(Art,ServiceZuordnungHolen.Art::"SUP-AU");
          ServiceZuordnungHolen.SETRANGE("Belegnr.",DocNo);
          ServiceZuordnungHolen.SETRANGE("Belegzeilennr.",AUzeile."Line No.");
          ServiceZuordnungHolen.SETRANGE("Nachtr„gliche Service Order",FALSE);
          ServiceZuordnungHolen.SETRANGE(Fremderwerb,FALSE);
          IF ServiceZuordnungHolen.FIND('-') THEN
            REPEAT
              PrfeAUzeile.RESET;
              PrfeAUzeile.SETRANGE("Document No.",ServiceZuordnungHolen."Nr.");
              PrfeAUzeile.SETRANGE("Line No.",ServiceZuordnungHolen."Zeilennr.");
              IF PrfeAUzeile.FINDFIRST THEN BEGIN
                IF PrfeAUzeile."Qty. to Ship" = 0 THEN
                  ERROR(Text103,PrfeAUzeile."No.",PrfeAUzeile."Line No.");
              END ELSE
                ERROR(Text104,AUzeile."No.",AUzeile."Line No.",ServiceZuordnungHolen."Ger„te Artikelnr.",
                              ServiceZuordnungHolen."Belegnr.",ServiceZuordnungHolen."Belegzeilennr.");
            UNTIL ServiceZuordnungHolen.NEXT = 0;

          //***************************************************************************************************
          //      Prfung, ob auch wirklich alle Artikel, die in der Service Kalkulation auftauchen, auch
          //         tats„chlich mit dem Service Artikel ausgeliefert werden, der obere Fall umgedreht
          //***************************************************************************************************

          ServiceZuordnungHolen.RESET;
          ServiceZuordnungHolen.SETRANGE(Art,ServiceZuordnungHolen.Art::"SUP-AU");
          ServiceZuordnungHolen.SETRANGE("Nr.",DocNo);
          ServiceZuordnungHolen.SETRANGE("Zeilennr.",AUzeile."Line No.");
          ServiceZuordnungHolen.SETRANGE("Nachtr„gliche Service Order",FALSE);
          ServiceZuordnungHolen.SETRANGE(Fremderwerb,FALSE);
          IF ServiceZuordnungHolen.FIND('-') THEN
            REPEAT
              PrfeAUzeile.RESET;
              PrfeAUzeile.SETRANGE("Document No.",ServiceZuordnungHolen."Belegnr.");
              PrfeAUzeile.SETRANGE("Line No.",ServiceZuordnungHolen."Belegzeilennr.");
              IF PrfeAUzeile.FINDFIRST THEN BEGIN
                IF PrfeAUzeile."Qty. to Ship" = 0 THEN
                  ERROR(Text103,PrfeAUzeile."No.",PrfeAUzeile."Line No.");

                //Zu liefernde Pos. im AU mssen mengenm„áig mit der Kalkulation bereinstimmen,
                //um šberbuchungen zu verhindern, betrifft keine Basisger„te (Sonderregel fr FLAT)
                IF (PrfeAUzeile."Qty. to Ship" <> ServiceZuordnungHolen."Menge kalk.")
                AND (ServiceZuordnungHolen.Basisger„t = FALSE) THEN
                  ERROR(Text105,PrfeAUzeile."No.",PrfeAUzeile."Line No.",ServiceZuordnungHolen."Zeilennr.",
                        ServiceZuordnungHolen."Menge kalk.");

              END ELSE
                ERROR(Text104,AUzeile."No.",AUzeile."Line No.",ServiceZuordnungHolen."Ger„te Artikelnr.",
                              ServiceZuordnungHolen."Belegnr.",ServiceZuordnungHolen."Belegzeilennr.");
            UNTIL ServiceZuordnungHolen.NEXT = 0;

          //***************************************************************************************************
          //          Ein Service Artikel kann nicht ohne Kalkulation gebucht werden, kann auch nur mit
          //                               Menge Zu liefern > 1 ausgebucht werden
          //***************************************************************************************************

          IF (Artikel."Software Upgrade Protection" = TRUE)  THEN BEGIN
            IF ((Artikel."Manufacturer Code" = '57') OR (Artikel."Manufacturer Code" = '5710') OR
            ((Artikel."Manufacturer Code" = '5720'))) AND (AUzeile."Qty. to Ship" > 1) THEN
              ERROR(Text106,AUzeile.FIELDCAPTION("Qty. to Ship"),Artikel.Artikelgruppe,AUzeile."No.");

            ServiceZuordnungHolen.RESET;
            ServiceZuordnungHolen.SETRANGE(Art,ServiceZuordnungHolen.Art::"SUP-AU");
            ServiceZuordnungHolen.SETRANGE("Nr.",DocNo);
            ServiceZuordnungHolen.SETRANGE("Zeilennr.",AUzeile."Line No.");
            IF NOT ServiceZuordnungHolen.FINDFIRST THEN
              ERROR(Text107,AUzeile."No.",AUzeile."Line No.");

            //***************************************************************************************************
            //                          Es muss ein System Basisger„te vorhanden sein
            //              Ausnahme: Alle Kalkulationszeilen haben eine Wartungsvertragsnr.
            //***************************************************************************************************

            ServiceZuordnungHolen.RESET;
            ServiceZuordnungHolen.SETFILTER(Art,'%1',ServiceZuordnungHolen.Art::"SUP-AU");
            ServiceZuordnungHolen.SETFILTER("Nr.",'%1',DocNo);
            ServiceZuordnungHolen.SETFILTER("Zeilennr.",'%1',AUzeile."Line No.");
            ServiceZuordnungHolen.SETFILTER(Basisger„t,'%1',TRUE);
            IF NOT ServiceZuordnungHolen.FINDFIRST THEN BEGIN
              ServiceZuordnungHolen.SETFILTER(Basisger„t,'%1|%2',TRUE,FALSE);
              IF ServiceZuordnungHolen.FINDFIRST THEN
                REPEAT
                  IF ServiceZuordnungHolen."Wartungsvertragsnr." = '' THEN
                    ERROR(Text108,AUzeile."No.",AUzeile."Line No.");

                  //***************************************************************************************************
                  //         Der Wartungsvertrag muss bei nachtr„glicher Zubuchung neuer Pos. noch gltig sein
                  //***************************************************************************************************

                  IF ServiceZuordnungHolen."Wartungsvertragsnr." <> '' THEN BEGIN
                    Wartungsvertrag.GET(ServiceZuordnungHolen."Wartungsvertragsnr.");
                    IF (Wartungsvertrag.Vertragsablaufdatum < WORKDATE) THEN
                      ERROR(Text109,Wartungsvertrag."Wartungsvertragsnr.",AUzeile."Line No.",Wartungsvertrag.Vertragsablaufdatum);
                  END;

                UNTIL ServiceZuordnungHolen.NEXT = 0;
            END;

            //***************************************************************************************************
            //      Gleicht die Menge kalk. des zuliefernden Support Artikels gegen die zu  liefernde Menge
            //           der einzeln zu liefernden Artikel bzw. die gelieferte Menge ab, Fall 1 und 2
            //***************************************************************************************************

            ServiceZuordnungHolen.RESET;
            ServiceZuordnungHolen.SETRANGE(Art,ServiceZuordnungHolen.Art::"SUP-AU");
            ServiceZuordnungHolen.SETRANGE("Nr.",DocNo);
            ServiceZuordnungHolen.SETRANGE("Zeilennr.",AUzeile."Line No.");
            ServiceZuordnungHolen.SETRANGE(Fremderwerb,FALSE);
            IF ServiceZuordnungHolen.FINDFIRST THEN BEGIN
              menge_kalk_ges := 0;
              menge_liefern_ges := 0;
              REPEAT
                menge_kalk_ges := menge_kalk_ges + ServiceZuordnungHolen."Menge kalk.";
                IF ServiceZuordnungHolen."Nachtr„gliche Service Order" = FALSE THEN BEGIN
                  PrfeAUzeile.RESET;
                  PrfeAUzeile.SETRANGE("Document No.",ServiceZuordnungHolen."Belegnr.");
                  PrfeAUzeile.SETRANGE("Line No.",ServiceZuordnungHolen."Belegzeilennr.");
                  //PrfeAUzeile.SETRANGE("No.",ServiceZuordnungHolen."Ger„te Artikelnr.");
                  IF PrfeAUzeile.FINDFIRST THEN
                    menge_liefern_ges += PrfeAUzeile."Qty. to Ship";
                END ELSE BEGIN
                  PrfeLiefzeile.RESET;
                  PrfeLiefzeile.SETRANGE("Document No.",ServiceZuordnungHolen."Belegnr.");
                  PrfeLiefzeile.SETRANGE("Line No.",ServiceZuordnungHolen."Belegzeilennr.");
                  //PrfeLiefzeile.SETRANGE("No.",ServiceZuordnungHolen."Ger„te Artikelnr.");
                  IF PrfeLiefzeile.FINDFIRST THEN
                    menge_liefern_ges += PrfeLiefzeile.Quantity
                  ELSE BEGIN
                    Beleghistorie.RESET;
                    Beleghistorie.SETRANGE(Belegart,Beleghistorie.Belegart::"Sales Shipment");
                    Beleghistorie.SETRANGE("Belegnr.",ServiceZuordnungHolen."Belegnr.");
                    Beleghistorie.SETRANGE("Zeilennr.",ServiceZuordnungHolen."Belegzeilennr.");
                    //Beleghistorie.SETRANGE(Artikelnr.,ServiceZuordnungHolen."Ger„te Artikelnr.");
                    IF Beleghistorie.FINDFIRST THEN
                      menge_liefern_ges += Beleghistorie.Menge;
                  END;
                END;
              UNTIL ServiceZuordnungHolen.NEXT = 0;

              IF (menge_kalk_ges * AUzeile."Qty. to Ship") > menge_liefern_ges THEN
                ERROR(Text110,AUzeile."No.",AUzeile."Line No.",ServiceZuordnungHolen.FIELDCAPTION("Menge kalk."));

            END;

            //***************************************************************************************************
            //                            Service Kalkulation auf Plausibilit„t prfen
            //***************************************************************************************************

            ServiceZuordnungHolen.RESET;
            ServiceZuordnungHolen.SETRANGE(Art,ServiceZuordnungHolen.Art::"SUP-AU");
            ServiceZuordnungHolen.SETRANGE("Nr.",DocNo);
            ServiceZuordnungHolen.SETRANGE("Zeilennr.",AUzeile."Line No.");
            IF ServiceZuordnungHolen.FIND('-') THEN BEGIN

              menge_kalk_ges := 0;
              menge_auswahl_ges := 0;
              menge_basissystem_pos := 0;
              menge_basissysteme_fremd := 0;
              v_basissystem := '';
              v_belegnr_fremd := '';
              v_artikelnr := '';

              REPEAT

                IF (CheckServicePos.ServiceQuoteIsValid(ServiceZuordnungHolen."Quotenr.") = FALSE)
                AND (ServiceZuordnungHolen."Quotenr." <> '') THEN
                  ERROR(Text111,AUzeile."No.",AUzeile."Line No.",ServiceZuordnungHolen."Quotenr.");

                Artikel.GET(ServiceZuordnungHolen."Ger„te Artikelnr.");
                IF Artikel.Serviceklassifizierung = '' THEN
                  ERROR(Text100,ServiceZuordnungHolen."Ger„te Artikelnr.",'(Service Kalkulation)');

                IF ServiceZuordnungHolen."Menge kalk." = 0 THEN
                  ERROR(Text112,AUzeile."No.",AUzeile."Line No.",ServiceZuordnungHolen.FIELDCAPTION("Menge kalk."));

                //Falsche Mengen Konstellation Auftrag und Menge kalk. bei FLAT Ger„ten wird abgefangen
                IF Artikel.Serviceklassifizierung = 'SYSTEM FLAT' THEN BEGIN
                  IF (AUzeile.Quantity > AUzeile."Qty. to Ship") AND (ServiceZuordnungHolen."Menge kalk." >
                  AUzeile."Qty. to Ship") THEN
                    ERROR(Text113,AUzeile."Line No.",AUzeile.FIELDCAPTION(Quantity),AUzeile.Quantity,
                    ServiceZuordnungHolen.FIELDCAPTION("Menge kalk."),ServiceZuordnungHolen."Menge kalk.",
                    AUzeile.FIELDCAPTION("Qty. to Ship"),AUzeile."Qty. to Ship");
                END;

                //***************************************************************************************************
                //            Prft auch darauf, ob nach der Buchung nur genau ein aktives Basisger„t vorliegt
                //***************************************************************************************************

                basisger„t_kollision_ok := FALSE;
                IF ServiceZuordnungHolen.Basisger„t THEN BEGIN
                  IF (Artikel.Serviceklassifizierung <> 'SYSTEM FLAT') AND (v_artikelnr <>
                  ServiceZuordnungHolen."Ger„te Artikelnr.") THEN
                    menge_basissystem_pos += 1;

                  IF (Artikel.Serviceklassifizierung = 'SYSTEM FLAT') AND (ServiceZuordnungHolen.Fremderwerb = TRUE)
                  AND (v_belegnr_fremd <> ServiceZuordnungHolen."Belegnr.") THEN
                    menge_basissysteme_fremd += 1;

                  IF (v_basissystem = ServiceZuordnungHolen."Ger„te Artikelnr.") AND (ServiceZuordnungHolen.Fremderwerb = TRUE)
                  AND (menge_basissysteme_fremd > 1) THEN
                    ERROR(Text114);

                  ServiceZuordnungBeleg.RESET;
                  ServiceZuordnungBeleg.SETRANGE(Art,ServiceZuordnungBeleg.Art::"SUP-AU");
                  ServiceZuordnungBeleg.SETRANGE("Nr.",DocNo);
                  ServiceZuordnungBeleg.SETRANGE("Zeilennr.",AUzeile."Line No.");
                  ServiceZuordnungBeleg.SETRANGE(Basisger„t,TRUE);
                  IF ServiceZuordnungBeleg.FIND('-') THEN
                    REPEAT
                      CheckServicePos.RESET;
                      CheckServicePos.SETFILTER(Art,'%1',CheckServicePos.Art::Tempor„r);
                      CheckServicePos.SETFILTER("Nr.",'%1',ServiceZuordnungBeleg."Belegnr.");
                      CheckServicePos.SETFILTER("Belegzeilennr.",'%1',ServiceZuordnungBeleg."Belegzeilennr.");
                      CheckServicePos.SETFILTER(Vormerkung,'%1',TRUE);
                      IF CheckServicePos.FINDFIRST THEN BEGIN
                        CheckSystemPos.RESET;
                        CheckSystemPos.SETFILTER(Art,'%1|%2',CheckSystemPos.Art::System,CheckSystemPos.Art::Service);
                        CheckSystemPos.SETFILTER("Seriennr.",'%1&<>%2',CheckServicePos."Seriennr.",'');
                        CheckSystemPos.SETFILTER("Artikelnr.",'%1',CheckServicePos."Artikelnr.");
                        IF CheckSystemPos.FINDFIRST THEN BEGIN
                          CheckServicePos.RESET;
                          CheckServicePos.SETFILTER(Art,'%1|%2',CheckServicePos.Art::System,CheckServicePos.Art::Service);
                          CheckServicePos.SETFILTER("Nr.",'<>%1','');
                          CheckServicePos.SETFILTER("Belegzeilennr.",'<>%1',0);
                          CheckServicePos.SETFILTER(Basisger„t,'%1',TRUE);
                          CheckServicePos.SETFILTER("Wartungsvertragsnr.",'%1',CheckSystemPos."Wartungsvertragsnr.");
                          CheckServicePos.SETFILTER(Inaktiv,'%1',FALSE);
                          IF CheckServicePos.FINDFIRST THEN
                            REPEAT
                              Ger„teArtikel.GET(CheckServicePos."Artikelnr.");
                              IF CheckServicePos.Art = CheckServicePos.Art::Service THEN BEGIN
                                IF (CheckServicePos."Urspr. Lieferscheinnr." <> ServiceZuordnungHolen."Belegnr.") THEN
                                  IF (Ger„teArtikel.Serviceklassifizierung <> 'SYSTEM FLAT') THEN
                                    ERROR(Text115,CheckServicePos."Wartungsvertragsnr.",CheckServicePos."Seriennr.",
                                          AUzeile."Line No.")
                                  ELSE
                                    IF ((v_artikelnr <> '') AND (CheckServicePos."Artikelnr." <> v_artikelnr)) THEN
                                      ERROR(Text115,CheckServicePos."Wartungsvertragsnr.",CheckServicePos."Seriennr.",
                                            AUzeile."Line No.")
                                    ELSE
                                      basisger„t_kollision_ok := TRUE;
                              END ELSE BEGIN
                                IF CheckServicePos.Art = CheckServicePos.Art::System THEN
                                  IF (CheckServicePos."Nr." <> ServiceZuordnungHolen."Belegnr.") THEN
                                    IF (Ger„teArtikel.Serviceklassifizierung <> 'SYSTEM FLAT') THEN
                                      ERROR(Text115,CheckServicePos."Wartungsvertragsnr.",CheckServicePos."Seriennr.",
                                            AUzeile."Line No.")
                                    ELSE
                                      IF ((v_artikelnr <> '') AND (CheckServicePos."Artikelnr." <> v_artikelnr)) THEN
                                        ERROR(Text115,CheckServicePos."Wartungsvertragsnr.",CheckServicePos."Seriennr.",
                                              AUzeile."Line No.")
                                      ELSE
                                        basisger„t_kollision_ok := TRUE;
                              END;
                              v_artikelnr := CheckServicePos."Artikelnr.";
                            UNTIL CheckServicePos.NEXT = 0;
                        END;
                      END;
                      v_basissystem := ServiceZuordnungHolen."Ger„te Artikelnr.";
                      IF ServiceZuordnungBeleg.Fremderwerb THEN
                        v_belegnr_fremd := ServiceZuordnungHolen."Belegnr.";
                    UNTIL (ServiceZuordnungBeleg.NEXT = 0) OR (basisger„t_kollision_ok);
                END;

                //***************************************************************************************************
                //         Prfung Menge kalk. gegen Auswahl Seriennr. der einzelnen Artikel, Fall 2 oder 3
                //***************************************************************************************************

                IF (ServiceZuordnungHolen."Nachtr„gliche Service Order" = TRUE) OR (ServiceZuordnungHolen.Fremderwerb = TRUE) THEN BEGIN
                  ServiceZuordnungHolen.TESTFIELD("Ger„te Artikelnr.");
                  menge_kalk_pos := 0;
                  //Ausnahme wieder fr FLAT Ger„te, bei denen mehr als 1 Ger„t ausgeliefert werden darf
                  Artikel.GET(ServiceZuordnungHolen."Ger„te Artikelnr.");
                  IF Artikel.Serviceklassifizierung = 'SYSTEM FLAT' THEN
                    menge_kalk_pos := menge_kalk_pos + (ServiceZuordnungHolen."Menge kalk." * AUzeile."Qty. to Ship")
                  ELSE
                    menge_kalk_pos := menge_kalk_pos + ServiceZuordnungHolen."Menge kalk.";

                  menge_kalk_ges := menge_kalk_ges + menge_kalk_pos;

                  HoleTempLizenzTab.RESET;
                  HoleTempLizenzTab.SETRANGE(Art,HoleTempLizenzTab.Art::Tempor„r);
                  HoleTempLizenzTab.SETRANGE("Nr.",ServiceZuordnungHolen."Belegnr.");
                  HoleTempLizenzTab.SETRANGE("Belegzeilennr.",ServiceZuordnungHolen."Belegzeilennr.");
                  HoleTempLizenzTab.SETRANGE("Auftragsnr.",ServiceZuordnungHolen."Nr.");
                  HoleTempLizenzTab.SETRANGE("Auftragszeilennr.",ServiceZuordnungHolen."Zeilennr.");
                  HoleTempLizenzTab.SETRANGE("Artikelnr.",ServiceZuordnungHolen."Ger„te Artikelnr.");
                  HoleTempLizenzTab.SETRANGE(Vormerkung,TRUE);
                  IF HoleTempLizenzTab.FINDFIRST THEN BEGIN
                    menge_auswahl_pos := 0;
                    REPEAT

                      //***************************************************************************************************
                      //   Prft auch darauf, ob die Seriennr. nur einmal in einem Vertrag als aktiv gekennzeichnet ist
                      //***************************************************************************************************

                      HoleTempLizenzTab.CheckDoubleSerialNo(HoleTempLizenzTab."Artikelnr.",HoleTempLizenzTab."Seriennr.");

                      //***************************************************************************************************
                      //                     Prft auch darauf, ob die Seriennr. noch aktiv sind
                      //***************************************************************************************************

                      CheckSystemPos.RESET;
                      CheckSystemPos.SETRANGE(Art,CheckSystemPos.Art::System);
                      CheckSystemPos.SETRANGE("Nr.",HoleTempLizenzTab."Nr.");
                      CheckSystemPos.SETRANGE("Belegzeilennr.",HoleTempLizenzTab."Belegzeilennr.");
                      CheckSystemPos.SETRANGE("Artikelnr.",HoleTempLizenzTab."Artikelnr.");
                      CheckSystemPos.SETRANGE("Seriennr.",HoleTempLizenzTab."Seriennr.");
                      IF (CheckSystemPos.FINDLAST) AND (CheckSystemPos.Inaktiv = TRUE) THEN
                        ERROR(Text116,HoleTempLizenzTab.FIELDCAPTION("Seriennr."),CheckSystemPos."Seriennr.",
                              ServiceZuordnungHolen."Zeilennr.");

                      IF (CheckSystemPos.FINDLAST) AND (ServiceZuordnungHolen."Wartungsvertragsnr." <> '')
                      AND ((CheckSystemPos."Wartungsvertragsnr." = '') OR (ServiceZuordnungHolen."Wartungsvertragsnr." <>
                      CheckSystemPos."Wartungsvertragsnr.")) THEN
                        ERROR(Text117,ServiceZuordnungHolen."Ger„te Artikelnr.",CheckSystemPos."Seriennr.",
                        ServiceZuordnungHolen."Belegnr.",ServiceZuordnungHolen."Belegzeilennr.",
                        ServiceZuordnungHolen."Wartungsvertragsnr.");

                      menge_auswahl_pos += HoleTempLizenzTab.Menge;
                      menge_auswahl_ges += HoleTempLizenzTab.Menge;

                    UNTIL HoleTempLizenzTab.NEXT = 0;
                  END;

                  IF menge_auswahl_pos <> menge_kalk_pos THEN
                    ERROR(Text119,AUzeile."No.",AUzeile."Line No.");

                END;
              UNTIL ServiceZuordnungHolen.NEXT = 0;

              IF menge_kalk_ges <> menge_auswahl_ges THEN
                ERROR(Text120,AUzeile."No.",AUzeile."Line No.");

              //Prft, ob nur eine Basisger„t Position vorhanden ist
              IF menge_basissystem_pos > 1 THEN
                ERROR(Text118,AUzeile."No.",AUzeile."Line No.");

            END;
          END;

        UNTIL AUzeile.NEXT = 0;

        //***************************************************************************************************
        //                                       12.02.14 ST TOPAS
        //   DCs der Service Artikel werden bei Abweichungen gegenber der Service Preisliste aktualisiert
        //***************************************************************************************************

        RefreshServiceDCinSalesOrder(DocNo);

      END;
    END;

    PROCEDURE RefreshServiceDCinSalesOrder@1140003(DocNo@1140000 : Code[20]);
    VAR
      Artikel@1140004 : Record 27;
      AUzeile@1140001 : Record 37;
      ServiceTab@1140006 : Record 50024;
      ServiceZuordnungHolen@1140005 : Record 50027;
      service_dc_einzeln_neu@1140002 : Decimal;
      service_dc_gesamt_neu@1140003 : Decimal;
      Window@1140007 : Dialog;
      kein_service_dc@1140008 : Boolean;
      v_ablaufdatum@1140009 : Date;
    BEGIN
      //***************************************************************************************************
      //             NEU: 12.02.14 ST Aktualisiert die DCs aller zu liefernden Service Artikel
      //               im Auftrag und fr die in der Kalkulation hinterlegten Ger„te Artikel
      //***************************************************************************************************

      IF DocNo = '' THEN EXIT;

      AUzeile.RESET;
      AUzeile.SETFILTER(AUzeile."Document No.",'%1',DocNo);
      AUzeile.SETFILTER(Type,'%1',AUzeile.Type::Item);
      AUzeile.SETFILTER(AUzeile."Qty. to Ship",'>%1',0);
      AUzeile.SETFILTER("Manufacturer Code",'%1|%2|%3|%4|%5|%6','53','57','59','98','5710','5720');
      IF AUzeile.FINDFIRST THEN BEGIN
        REPEAT
          service_dc_einzeln_neu := 0;
          service_dc_gesamt_neu := 0;
          kein_service_dc := FALSE;
          Artikel.GET(AUzeile."No.");
          IF Artikel."Software Upgrade Protection" = TRUE THEN BEGIN
            ServiceZuordnungHolen.RESET;
            ServiceZuordnungHolen.SETCURRENTKEY(Art,"Nr.","Zeilennr.",Gruppierung);
            ServiceZuordnungHolen.SETFILTER(Art,'%1',ServiceZuordnungHolen.Art::"SUP-AU");
            ServiceZuordnungHolen.SETFILTER("Nr.",'%1',DocNo);
            ServiceZuordnungHolen.SETFILTER("Zeilennr.",'%1',AUzeile."Line No.");
            IF ServiceZuordnungHolen.FINDFIRST THEN
              REPEAT

                WITH ServiceZuordnungHolen DO BEGIN
                  IF ("Laufzeit ab Buchungsdatum") AND (Startdatum <> 0D) THEN VALIDATE(Startdatum,WORKDATE);
                  IF "Wartungsvertragsnr." <> '' THEN BEGIN
                    IF Ablaufdatum = 0D THEN BEGIN
                      v_ablaufdatum := Ablaufdatum_generieren("SUP Artikelnr.","Wartungsvertragsnr.");
                      IF v_ablaufdatum <> 0D THEN BEGIN
                        IF Laufzeit <> FORMAT(TOPAS_API.CalculateTimeDiff('M',WORKDATE,v_ablaufdatum)) + 'M' THEN BEGIN
                          VALIDATE(Laufzeit,FORMAT(TOPAS_API.CalculateTimeDiff('M',WORKDATE,v_ablaufdatum)) + 'M');
                          MODIFY(TRUE);
                        END;
                      END;
                    END;
                  END;
                END;

                service_dc_einzeln_neu := ServiceTab.ServicePreiseNeuKalkulieren(ServiceZuordnungHolen."Ger„te Artikelnr.",
                                    ServiceZuordnungHolen."SUP Artikelnr.",ServiceZuordnungHolen.Laufzeit,'DC',FALSE,
                                    AUzeile.Einkaufsw„hrungscode,ServiceZuordnungHolen."Quotenr.");

                //***************************************************************************************************
                //    Prft, ob die Service Artikel in der Service Preisliste zu finden ist, wenn nein dann bricht
                //      er den Aktualisierungsvorgang komplett ab, so dass nicht der korrekte DC ge„ndert wird
                //***************************************************************************************************

                IF  service_dc_einzeln_neu = 0 THEN
                  kein_service_dc := TRUE;

                // Jetzt wird der DC neu berechnet
                IF kein_service_dc = FALSE THEN BEGIN
                  service_dc_gesamt_neu := service_dc_gesamt_neu + (service_dc_einzeln_neu * ServiceZuordnungHolen."Menge kalk.");
                  ServiceZuordnungHolen."Service DC einzeln" := service_dc_einzeln_neu;
                  ServiceZuordnungHolen."Service DC Gesamt" := service_dc_einzeln_neu * ServiceZuordnungHolen."Menge kalk.";
                  ServiceZuordnungHolen.MODIFY;
                END;

              UNTIL (ServiceZuordnungHolen.NEXT = 0) OR (kein_service_dc = TRUE);

            //***************************************************************************************************
            // Vergleicht Gesamt DC aus Kalkulation und Beleg DC, fhrt bei Abweichung eine Aktualisierung durch
            //***************************************************************************************************

            IF (AUzeile."DC-Preis (EKW)" <> service_dc_gesamt_neu) AND (kein_service_dc = FALSE)
            AND (Artikel."Software Upgrade Protection" = TRUE) THEN BEGIN
              IF CONFIRM(Text130,TRUE,AUzeile."No.",AUzeile."Line No.") THEN BEGIN
                AUzeile.VALIDATE(AUzeile."DC-Preis (EKW)",service_dc_gesamt_neu);
                AUzeile.MODIFY;

                Window.OPEN('#1################################\\'+
                            'Fortschritt @2@@@@@@@@');
                Window.UPDATE(1,'Der Service DC wird neu errechnet...');
                Window.UPDATE(2,9999);
                Window.CLOSE;
              END;
            END;
          END;
        UNTIL AUzeile.NEXT = 0;
      END;
    END;

    BEGIN
    END.
  }
}

