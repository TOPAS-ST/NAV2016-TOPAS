OBJECT Page 50037 Dokumentenversand šbersicht
{
  OBJECT-PROPERTIES
  {
    Date=03.07.20;
    Time=14:22:27;
    Modified=Yes;
    Version List=TOPAS;
  }
  PROPERTIES
  {
    SourceTable=Table50032;
    DelayedInsert=Yes;
    PageType=List;
    CardPageID=Dokumentenversand Karte;
    PromotedActionCategoriesML=[DEU=Neu,Vorgang,Bericht,Dokumente verwalten,Anzeige;
                                ENU=New,Process,Report,Documents manage,Display];
    OnOpenPage=BEGIN
                 erledigte_ausgeblendet := TRUE;
                 IF GETFILTER("Mandantennr.") = '' THEN BEGIN
                   IF STRPOS(UPPERCASE(USERID),'SBRINCKMANN') <> 0 THEN
                     SETFILTER(Aktion,'%1',Aktion::Schulung)
                   ELSE
                     SETFILTER(Status,'<>%1&<>%2&<>%3&<>%4&<>%5',Status :: Komplett,Status :: Abgebrochen,Status :: "Direkt Komplett",
                               Status :: teilgenommen,Status::Abgelehnt);
                 END;
               END;

    OnAfterGetRecord=BEGIN
                       betreuer_innen := '';
                       IF Kontakt.GET("Mandantennr.") THEN
                           betreuer_innen := Kontakt."Betreuer Innendienst";

                       IF Kontakt.GET("Kontaktnr.") THEN
                         Kontakt_EMail := Kontakt."E-Mail"
                       ELSE
                         Kontakt_EMail := '';

                       Verteiler.RESET;
                       Verteiler.SETFILTER("Contact No.",'%1',"Kontaktnr.");
                       Verteiler.SETFILTER("Mailing Group Code",'%1|%2','UNSUB','NO EMAIL');
                       IF Verteiler.FINDFIRST THEN
                         email_style := TRUE
                       ELSE
                         email_style := FALSE;

                       IF GETFILTER(Status) <> '' THEN
                         hinweis_text := 'Achtung Filter Status'
                       ELSE
                         hinweis_text := '';
                     END;

    OnNewRecord=BEGIN
                  Kontakt_EMail := '';
                  betreuer_innen := '';
                END;

    OnAfterGetCurrRecord=BEGIN
                           comment := FALSE;

                           "TOPAS-Bemerkungen".RESET;
                           "TOPAS-Bemerkungen".SETRANGE("Nr.","Lfd. Nr.");
                           "TOPAS-Bemerkungen".SETRANGE(Art,"TOPAS-Bemerkungen".Art::Dokumentenversand);
                           IF "TOPAS-Bemerkungen".FINDFIRST THEN
                             comment := TRUE;
                         END;

    ActionList=ACTIONS
    {
      { 1900000000;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1       ;1   ;ActionGroup;
                      CaptionML=[DEU=Allgmein;
                                 ENU=General] }
      { 1140037 ;2   ;Action    ;
                      Name=Karte;
                      CaptionML=DEU=&Karte;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=DocumentEdit;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF (Korrespondenzart <> Korrespondenzart::" ") OR ("Lfd. Nr." <> '') THEN BEGIN
                                   COMMIT;
                                   Doku.RESET;
                                   Doku.SETFILTER(Doku."Lfd. Nr.",'%1',"Lfd. Nr.");
                                   IF Doku.FINDFIRST THEN
                                     PAGE.RUN(PAGE::"Dokumentenversand Karte",Doku);
                                 END ELSE
                                   ERROR(Text002,FIELDCAPTION(Korrespondenzart));
                               END;
                                }
      { 1140064 ;2   ;Action    ;
                      Name=Bemerkung;
                      ToolTipML=DEU=RMA-Bemerkung Annahme;
                      RunObject=Page 50083;
                      RunPageView=WHERE(Art=FILTER(Dokumentenversand));
                      RunPageLink=Nr.=FIELD(Lfd. Nr.);
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ViewComments;
                      PromotedCategory=Process }
      { 1140047 ;2   ;Action    ;
                      Name=Anleitung;
                      CaptionML=DEU=&Anleitung;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Document;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF Linie = '' THEN
                                   ERROR(Text001,FIELDCAPTION(Linie))
                                 ELSE BEGIN
                                   "TOPAS-Bemerkungen".RESET;
                                   "TOPAS-Bemerkungen".SETFILTER("Nr.",'%1',Linie);
                                   "TOPAS-Bemerkungen".SETFILTER(Art,'%1',"TOPAS-Bemerkungen".Art::Anleitung);
                                   PAGE.RUN(PAGE::"TOPAS Bemerkungen","TOPAS-Bemerkungen");
                                 END;
                               END;
                                }
      { 1900000001;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1140054 ;1   ;ActionGroup;
                      Name=Funktionen;
                      CaptionML=DEU=Funktionen }
      { 1140065 ;2   ;Action    ;
                      Name=DateiAblegen;
                      CaptionML=DEU=Datei ablegen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ExportFile;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 Speicherort := TOPAS_API.Save_FileDialog(Speicherort);
                               END;
                                }
      { 1140066 ;2   ;Action    ;
                      Name=DateiOeffnen;
                      CaptionML=DEU=Datei ”ffnen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=TestFile;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 TOPAS_API.OpenFile(Speicherort);
                               END;
                                }
      { 1140074 ;2   ;Action    ;
                      Name=TemplateNeu;
                      CaptionML=DEU=Neues Template / Žndern;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Template;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 New_Template;
                               END;
                                }
      { 1140075 ;2   ;Action    ;
                      Name=TemplateAuswahl;
                      CaptionML=DEU=Template ausw„hlen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=EditJournal;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 Open_Template;
                                 Dateiname := Return_filename(Speicherort);
                                 MODIFY(TRUE);
                               END;
                                }
      { 1000000000;1 ;ActionGroup;
                      Name=Anzeige }
      { 1000000002;2 ;Action    ;
                      Name=ErledigteAnzeigen;
                      CaptionML=DEU=Erledigte ein-/ausblenden;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ShowList;
                      PromotedCategory=Category5;
                      OnAction=BEGIN
                                 IF erledigte_ausgeblendet THEN BEGIN
                                   SETRANGE(Status);
                                   erledigte_ausgeblendet := FALSE;
                                 END ELSE BEGIN
                                   SETFILTER(Status,'<>%1&<>%2&<>%3&<>%4&<>%5',Status::Komplett,Status::Abgebrochen,Status::"Direkt Komplett",
                                             Status::teilgenommen,Status::Abgelehnt);
                                   erledigte_ausgeblendet := TRUE;
                                 END;

                                 IF GETFILTER(Status) <> '' THEN
                                   hinweis_text := 'Achtung Filter Status'
                                 ELSE
                                   hinweis_text := '';
                               END;
                                }
      { 1000000011;1 ;ActionGroup;
                      Name=ADV }
      { 1000000010;2 ;Action    ;
                      Name=ADV berprfen;
                      CaptionML=DEU=ADV mit Debitor berprfen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=GetSourceDoc;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ADV_šberprfung;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000;0;Container ;
                ContainerType=ContentArea }

    { 1000000003;1;Group  ;
                Name=Info;
                Visible=erledigte_ausgeblendet;
                GroupType=Group }

    { 1000000005;2;Group  ;
                GroupType=FixedLayout }

    { 1000000006;3;Group  ;
                GroupType=Group }

    { 1000000004;4;Field  ;
                Name=Hinweis;
                SourceExpr=hinweis_text;
                Editable=FALSE;
                Style=Unfavorable;
                StyleExpr=TRUE }

    { 1900001;1;Group     ;
                GroupType=Repeater }

    { 1140001;2;Field     ;
                Name=Lfd. Nr.;
                SourceExpr="Lfd. Nr." }

    { 1140009;2;Field     ;
                Name=Belegdatum;
                SourceExpr=Belegdatum }

    { 1140069;2;Field     ;
                Name=Aktion;
                SourceExpr=Aktion }

    { 1140003;2;Field     ;
                Name=Korrespondenzart;
                SourceExpr=Korrespondenzart }

    { 1140005;2;Field     ;
                Name=Betreff;
                SourceExpr=Betreff }

    { 1140051;2;Field     ;
                Name=Linie;
                SourceExpr=Linie;
                Visible=FALSE }

    { 1140071;2;Field     ;
                Name=Linienkurzname;
                SourceExpr=Linienkurzname }

    { 1140021;2;Field     ;
                Name=Status;
                SourceExpr=Status;
                OnValidate=BEGIN
                             IF (Status <> xRec.Status) AND (Status <> Status ::" ") AND (Belegdatum <> WORKDATE) THEN
                               IF CONFIRM(Text000,TRUE,FIELDCAPTION(Belegdatum)) THEN
                                   Belegdatum := WORKDATE;
                           END;
                            }

    { 1140038;2;Field     ;
                Name=Statustext;
                SourceExpr=Statustext }

    { 1140011;2;Field     ;
                Name=Kontaktnr.;
                SourceExpr="Kontaktnr.";
                OnValidate=BEGIN
                             CALCFIELDS(Kontaktname,Mandantenname);
                           END;
                            }

    { 1140013;2;Field     ;
                Name=Kontaktname;
                SourceExpr=Kontaktname }

    { 1000000007;2;Field  ;
                Name=Kontakt E-Mail;
                SourceExpr=Kontakt_EMail;
                Editable=FALSE;
                Style=Unfavorable;
                StyleExpr=email_style }

    { 1140050;2;Field     ;
                Name=betreuer_innen;
                CaptionML=DEU=Betreuer Innendienst;
                SourceExpr=betreuer_innen }

    { 1140015;2;Field     ;
                Name=Mandantennr.;
                SourceExpr="Mandantennr.";
                Visible=FALSE;
                OnValidate=BEGIN
                             IF ("Mandantennr." <> xRec."Mandantennr.") AND (xRec."Mandantennr." <> '') THEN
                               ERROR(Text001,FIELDCAPTION("Mandantennr."));
                           END;
                            }

    { 1140017;2;Field     ;
                Name=Mandantenname;
                SourceExpr=Mandantenname }

    { 1140058;2;Field     ;
                Name=Kontaktnr. Hersteller;
                SourceExpr="Kontaktnr. Hersteller";
                OnValidate=BEGIN
                             CALCFIELDS("Kontaktname Hersteller");
                           END;
                            }

    { 1140060;2;Field     ;
                Name=Kontaktname Hersteller;
                SourceExpr="Kontaktname Hersteller" }

    { 1000000001;2;Field  ;
                Name=Bemerkung vorhanden;
                SourceExpr=comment }

    { 1140007;2;Field     ;
                Name=Speicherort;
                SourceExpr=Speicherort;
                OnLookup=BEGIN
                           TOPAS_API.OpenFile(Speicherort);
                         END;

                OnAssistEdit=BEGIN
                               Speicherort := TOPAS_API.Save_FileDialog(Speicherort);
                             END;
                              }

    { 1140056;2;Field     ;
                Name=Dateiname;
                SourceExpr=Dateiname }

    { 1140029;2;Field     ;
                Name=Laufzeit;
                SourceExpr=Laufzeit }

    { 1140031;2;Field     ;
                Name=Ablaufdatum;
                SourceExpr=Ablaufdatum }

    { 1140039;2;Field     ;
                Name=Schulung;
                SourceExpr=Schulung;
                Visible=FALSE }

    { 1140048;2;Field     ;
                Name=Schulungsdatum;
                SourceExpr=Schulungsdatum;
                Visible=FALSE }

    { 1140041;2;Field     ;
                Name=Datei 1;
                SourceExpr="Datei 1";
                Visible=FALSE;
                OnLookup=BEGIN
                           TOPAS_API.OpenFile("Datei 1");
                         END;

                OnAssistEdit=BEGIN
                               "Datei 1" := TOPAS_API.Save_FileDialog("Datei 1");
                             END;
                              }

    { 1140043;2;Field     ;
                Name=Datei 2;
                SourceExpr="Datei 2";
                Visible=FALSE;
                OnLookup=BEGIN
                           TOPAS_API.OpenFile("Datei 2");
                         END;

                OnAssistEdit=BEGIN
                               "Datei 2" := TOPAS_API.Save_FileDialog("Datei 2");
                             END;
                              }

    { 1140045;2;Field     ;
                Name=Datei 3;
                SourceExpr="Datei 3";
                Visible=FALSE;
                OnLookup=BEGIN
                           TOPAS_API.OpenFile("Datei 3");
                         END;

                OnAssistEdit=BEGIN
                               "Datei 3" := TOPAS_API.Save_FileDialog("Datei 3");
                             END;
                              }

    { 1140019;2;Field     ;
                Name=Versandadresse;
                SourceExpr=Versandadresse;
                Visible=FALSE }

    { 1140023;2;Field     ;
                Name=Feedback;
                SourceExpr=Feedback;
                Visible=FALSE }

    { 1140025;2;Field     ;
                Name=Feedbacktext;
                SourceExpr=Feedbacktext }

    { 1000000008;2;Field  ;
                SourceExpr="Interne Info" }

    { 1140027;2;Field     ;
                Name=Fehlermeldung;
                SourceExpr=Fehlermeldung;
                Visible=FALSE }

    { 1140033;2;Field     ;
                Name=Belegart;
                SourceExpr=Belegart;
                Visible=FALSE }

    { 1140035;2;Field     ;
                Name=Belegnr.;
                SourceExpr="Belegnr.";
                Visible=FALSE }

    { 1140078;2;Field     ;
                Name=Anzahl;
                SourceExpr=Anzahl }

    { 1140080;2;Field     ;
                Name=Zust„ndig Bearb;
                SourceExpr="Zust„ndig Bearb" }

  }
  CODE
  {
    VAR
      Doku@1140007 : Record 50032;
      Kontakt@1140014 : Record 5050;
      "TOPAS-Bemerkungen"@1000000006 : Record 50023;
      Verteiler@1000000005 : Record 5056;
      TOPAS_API@1000000000 : Codeunit 50001;
      hinweis_text@1140010 : Text[250];
      erledigte_ausgeblendet@1000000001 : Boolean;
      comment@1140005 : Boolean;
      Text000@1140001 : TextConst 'DEU=M”chten Sie das %1 automatisch anpassen lassen?';
      Text001@1140002 : TextConst 'DEU=Sie k”nnen von hier nicht die %1 „ndern.';
      Text002@1140003 : TextConst 'DEU=Bitte geben Sie zuerst eine %1 an.';
      Text003@1140011 : TextConst 'DEU=Es wurden abgeschlossene Eintr„ge ausgeblendet. Klicken Sie oben auf die Funktion "Erledigte ein-/ausblenden" um diese wieder sichtbar zu machen.';
      betreuer_innen@1140013 : Code[20];
      Kontakt_EMail@1000000003 : Text;
      email_style@1000000004 : Boolean;
      RowNo@1000000013 : Integer;
      ColumnNo@1000000012 : Integer;
      TempExcelBuffer@1000000018 : TEMPORARY Record 370;
      FileMgt@1000000017 : Codeunit 419;
      ServerFileName@1000000016 : Text;
      SheetName@1000000015 : Text[250];
      DoUpdateExistingWorksheet@1000000014 : Boolean;
      ExcelFileExtensionTok@1000000019 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      Window@1000000020 : Dialog;
      Testmode@1000000021 : Boolean;
      deb@1000000022 : Record 18;
      dok@1000000023 : Record 50032;
      beziehung@1000000024 : Record 5054;
      beziehung1@1000000026 : Record 5054;
      kred@1000000025 : Record 23;
      debkred@1000000027 : Boolean;
      service@1000000028 : Record 50024;
      keinEintrag@1000000029 : Boolean;
      Text111@1000000030 : TextConst 'DEU=Es wird ein Excel-File erstellt. Bitte etwas Geduld.';

    LOCAL PROCEDURE ADV_šberprfung@1000000000();
    BEGIN
      //MESSAGE('Es funktioniert!');
      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,'Teil 1','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Liste der Debitoren mit ADV-Eintrag','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      EnterCell(RowNo,6,'Stand:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,FORMAT(WORKDATE),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      RowNo := 2;
      EnterCell(RowNo,1,'Deb/Kred','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Debitor Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Debitor Name','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Verk„ufer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Betreuer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Gebiet','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Eintrag Doku-Versand','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Datum Doku-Versand','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'Doku Kontakt Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Doku Mandant Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'Doku lfd.Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      deb.RESET;
      deb.SETFILTER(deb.ADV,'%1',TRUE);
      IF deb.FINDFIRST THEN BEGIN
        REPEAT
      //*    RowNo := RowNo +1;
      //*    EnterCell(RowNo,1,'Deb','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*    EnterCell(RowNo,2,deb."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*    EnterCell(RowNo,3,deb.Name,'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
      //*    EnterCell(RowNo,4,deb."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*    EnterCell(RowNo,5,deb."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*    EnterCell(RowNo,6,deb."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          beziehung.RESET;
          beziehung.SETFILTER(beziehung."Business Relation Code",'%1','DEB');
          beziehung.SETFILTER(beziehung."No.",'%1',deb."No.");
          IF beziehung.FINDFIRST THEN BEGIN
            dok.RESET;
            dok.SETFILTER(dok.Aktion,'%1',dok.Aktion::ADV);
            dok.SETFILTER(dok."Mandantennr.",'%1',beziehung."Contact No.");
            IF dok.FINDFIRST THEN BEGIN
      //*          EnterCell(RowNo,7,FORMAT(dok.Aktion),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,8,FORMAT(dok.Belegdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      //*          EnterCell(RowNo,9,dok."Kontaktnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,10,dok."Mandantennr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,11,dok."Lfd. Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            END ELSE BEGIN
              RowNo := RowNo +1;
              EnterCell(RowNo,1,'Deb','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,2,deb."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,3,deb.Name,'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,4,deb."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,5,deb."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,6,deb."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            END;

          END; // beziehung.FINDFIRST

        UNTIL deb.NEXT = 0;
      END;
      ////////   Die Zeilen mit //* wrden alle Eintr„ge zeigen. Damit doppelte vermieden werden k”nnen, mssen im letzten Abschnitt die Zeilen 1-6 auskommentiert werden.


      RowNo := RowNo +3;
      EnterCell(RowNo,3,'Liste der Kreditoren mit ADV-Eintrag','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo +1;
      EnterCell(RowNo,1,'Deb/Kred','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Kreditor Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Kreditor Name','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Verk„ufer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Betreuer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Gebiet','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Eintrag Doku-Versand','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Datum Doku-Versand','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'Doku Kontakt Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Doku Mandant Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'Doku lfd.Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      kred.RESET;
      kred.SETFILTER(kred.ADV,'%1',TRUE);
      IF kred.FINDFIRST THEN BEGIN
        REPEAT
      //*    RowNo := RowNo +1;
      //*    EnterCell(RowNo,1,'Kred','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*    EnterCell(RowNo,2,kred."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*    EnterCell(RowNo,3,kred.Name,'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
      //*    EnterCell(RowNo,4,kred."Purchaser Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ////    EnterCell(RowNo,5,kred."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*    EnterCell(RowNo,6,kred."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          beziehung.RESET;
          beziehung.SETFILTER(beziehung."Business Relation Code",'%1','KRED');
          beziehung.SETFILTER(beziehung."No.",'%1',kred."No.");
          IF beziehung.FINDFIRST THEN BEGIN
            dok.RESET;
            dok.SETFILTER(dok.Aktion,'%1',dok.Aktion::ADV);
            dok.SETFILTER(dok."Mandantennr.",'%1',beziehung."Contact No.");
            IF dok.FINDFIRST THEN BEGIN
      //*          EnterCell(RowNo,7,FORMAT(dok.Aktion),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,8,FORMAT(dok.Belegdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      //*          EnterCell(RowNo,9,dok."Kontaktnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,10,dok."Mandantennr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,11,dok."Lfd. Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

            END ELSE BEGIN
              RowNo := RowNo +1;
              EnterCell(RowNo,1,'Kred','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,2,kred."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,3,kred.Name,'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,4,kred."Purchaser Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //        EnterCell(RowNo,5,kred."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,6,kred."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            END;

          END; // beziehung.FINDFIRST

        UNTIL kred.NEXT = 0;
      END;
      ////////   Die Zeilen mit //* wrden alle Eintr„ge zeigen. Damit doppelte vermieden werden k”nnen, mssen im letzten Abschnitt die Zeilen 1-6 auskommentiert werden.


      {
      // 2. Anfang der Listung aller ADV-Eintr„ge

      debkred:=FALSE;

      RowNo := RowNo +3;
      EnterCell(RowNo,1,'Teil 2','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Liste der ADV-Eintr„ge mit dazugeh”rigen Debitroen/Kreditoren','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo +1;
      EnterCell(RowNo,1,'Deb/Kred','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Debitor Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Debitor Name','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Verk„ufer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Betreuer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Gebiet','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Eintrag Doku-Versand','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Datum Doku-Versand','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'Doku Kontakt Nr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Doku Mandant Nr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      dok.RESET;
      dok.SETFILTER(dok.Aktion,'%1',dok.Aktion::ADV);
      //dok.SETFILTER(dok."Mandantennr.",'%1',beziehung."Contact No.");
      IF dok.FINDFIRST THEN BEGIN
        REPEAT
          RowNo := RowNo +1;
          EnterCell(RowNo,7,FORMAT(dok.Aktion),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,8,FORMAT(dok.Belegdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
          EnterCell(RowNo,9,dok."Kontaktnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,10,dok."Mandantennr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,11,dok."Lfd. Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          beziehung.RESET;
          beziehung.SETFILTER(beziehung."Business Relation Code",'%1','KRED');
          beziehung.SETFILTER(beziehung."Contact No.",'%1',dok."Mandantennr.");
          IF beziehung.FINDFIRST THEN BEGIN
            kred.RESET;
            kred.SETFILTER(kred."No.",'%1',beziehung."No.");
            kred.SETFILTER(kred.ADV,'%1',TRUE);
            IF kred.FINDFIRST THEN BEGIN
              EnterCell(RowNo,1,'Kred','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,2,kred."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,3,kred.Name,'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,4,kred."Purchaser Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //          EnterCell(RowNo,5,kred."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,6,kred."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              debkred:=TRUE;
            END;
          END;
          IF debkred=FALSE THEN BEGIN
            beziehung1.RESET;
            beziehung1.SETFILTER(beziehung1."Business Relation Code",'%1','DEB');
            beziehung1.SETFILTER(beziehung1."Contact No.",'%1',dok."Mandantennr.");
            IF beziehung1.FINDFIRST THEN BEGIN
              deb.RESET;
              deb.SETFILTER(deb."No.",'%1',beziehung1."No.");
              deb.SETFILTER(deb.ADV,'%1',TRUE);
              IF deb.FINDFIRST THEN BEGIN
                EnterCell(RowNo,1,'Deb','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,2,deb."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,3,deb.Name,'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
                EnterCell(RowNo,4,deb."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,5,deb."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,6,deb."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;
            END;
          END;
          debkred:=FALSE;
        UNTIL dok.NEXT=0;
      END;
      }
      // 2. Ende der Listung aller ADV-Eintr„ge  Testneu ADV


      debkred:=FALSE;

      RowNo := RowNo +3;
      EnterCell(RowNo,1,'Teil 2','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Liste der ADV-Eintr„ge mit dazugeh”rigen Debitroen/Kreditoren','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo +1;
      EnterCell(RowNo,1,'Deb/Kred','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Debitor Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Debitor Name','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Verk„ufer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Betreuer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Gebiet','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Eintrag Doku-Versand','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Datum Doku-Versand','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'Doku Kontakt Nr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Doku Mandant Nr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'Doku lfd.Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'ADV-Eintrag beim Deb/Kred vorhanden','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      dok.RESET;
      dok.SETFILTER(dok.Aktion,'%1',dok.Aktion::ADV);
      //dok.SETFILTER(dok."Mandantennr.",'%1',beziehung."Contact No.");
      IF dok.FINDFIRST THEN BEGIN
        REPEAT
      //*    RowNo := RowNo +1;
      //*    EnterCell(RowNo,7,FORMAT(dok.Aktion),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*    EnterCell(RowNo,8,FORMAT(dok.Belegdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      //*    EnterCell(RowNo,9,dok."Kontaktnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*    EnterCell(RowNo,10,dok."Mandantennr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*    EnterCell(RowNo,11,dok."Lfd. Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      ////////   Die Zeilen mit //* wrden alle Eintr„ge zeigen. Damit doppelte vermieden werden k”nnen, mssen in den unteren Abschnitten die Zeilen 7-11 auskommentiert werden.

          beziehung.RESET;
      //    beziehung.SETFILTER(beziehung."Business Relation Code",'%1','KRED');
          beziehung.SETFILTER(beziehung."Contact No.",'%1',dok."Mandantennr.");
          IF beziehung.FINDFIRST THEN BEGIN
            IF beziehung."Business Relation Code"='KRED' THEN BEGIN
              kred.RESET;
              kred.SETFILTER(kred."No.",'%1',beziehung."No.");
      //        kred.SETFILTER(kred.ADV,'%1',TRUE);
              IF kred.FINDFIRST THEN BEGIN
      //*          EnterCell(RowNo,1,'Kred','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,2,kred."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,3,kred.Name,'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
      //*          EnterCell(RowNo,4,kred."Purchaser Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //////          EnterCell(RowNo,5,kred."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,6,kred."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,12,FORMAT(kred.ADV),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                debkred:=TRUE;
              END ELSE BEGIN
                RowNo := RowNo +1;
                EnterCell(RowNo,7,FORMAT(dok.Aktion),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,8,FORMAT(dok.Belegdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,9,dok."Kontaktnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,10,dok."Mandantennr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,11,dok."Lfd. Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;

            END ELSE BEGIN
            IF beziehung."Business Relation Code"='DEB' THEN BEGIN
              IF debkred=TRUE THEN RowNo := RowNo +1;
              deb.RESET;
              deb.SETFILTER(deb."No.",'%1',beziehung."No.");
      //        deb.SETFILTER(deb.ADV,'%1',TRUE);
              IF deb.FINDFIRST THEN BEGIN
      //*          EnterCell(RowNo,1,'Deb','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,2,deb."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,3,deb.Name,'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
      //*          EnterCell(RowNo,4,deb."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,5,deb."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,6,deb."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //*          EnterCell(RowNo,12,FORMAT(deb.ADV),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              END ELSE BEGIN
                RowNo := RowNo +1;
                EnterCell(RowNo,7,FORMAT(dok.Aktion),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,8,FORMAT(dok.Belegdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
                EnterCell(RowNo,9,dok."Kontaktnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,10,dok."Mandantennr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,11,dok."Lfd. Nr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;
            END;

          END;

        END;
        debkred:=FALSE;
        UNTIL dok.NEXT=0;
      END;


      // Teil 3
      RowNo := RowNo +3;
      EnterCell(RowNo,1,'Teil 3','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Liste der Debitoren ohne ADV-Eintrag aber mit Servicevertrag','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Stand:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,FORMAT(WORKDATE),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      RowNo := RowNo +1;
      EnterCell(RowNo,1,'Deb/Kred','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Debitor Nr.','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Debitor Name','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Verk„ufer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Betreuer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Gebiet','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Service Nr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Service Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'Artikel','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Ablaufdatum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'KontaktNr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      deb.RESET;
      deb.SETFILTER(deb.ADV,'%1',FALSE);
      IF deb.FINDFIRST THEN BEGIN
        REPEAT
          service.RESET;
          service.SETFILTER(service.Art,'%1',service.Art::Service);
          service.SETFILTER(service."Debitornr.",'%1',deb."No.");
          service.SETFILTER(service."Ablaufdatum Serviceleistung",'>%1',WORKDATE);
          service.SETFILTER(service."SUP Artikelnr.",'CHAMPS-SUPP*');
          service.SETFILTER(service.Inaktiv,'%1',FALSE);
          IF service.FINDFIRST THEN BEGIN
            RowNo := RowNo +1;
            EnterCell(RowNo,1,'Deb','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,2,deb."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,deb.Name,'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,4,deb."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,deb."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,6,deb."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,7,FORMAT(service."Wartungsvertragsnr."),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,8,FORMAT(service.Belegdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            EnterCell(RowNo,9,service."Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,10,FORMAT(service."Ablaufdatum Serviceleistung"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
            beziehung.RESET;
            beziehung.SETFILTER(beziehung."No.",'%1',deb."No.");
            IF beziehung.FINDFIRST THEN BEGIN
              EnterCell(RowNo,11,beziehung."Contact No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text)
            END;
          END ELSE BEGIN
           keinEintrag:=TRUE;
          END; // service.FINDFIRST

        UNTIL deb.NEXT = 0;

      END;

      RowNo := RowNo +1;
      IF keinEintrag=TRUE THEN EnterCell(RowNo,1,'kein weiterer Eintrag gefunden','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      CloseExcel('ADV šberwachung','ADV šberwachung','');
    END;

    LOCAL PROCEDURE CreateExcel@1000000010();
    BEGIN
      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;

      Window.OPEN(
        Text111 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');

      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);
    END;

    LOCAL PROCEDURE CloseExcel@1000000011(Sheetname@1000000000 : Text;FileName@1000000001 : Text;FilePath@1000000002 : Text);
    BEGIN
      Window.CLOSE;

      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,Sheetname);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,Sheetname);
        TempExcelBuffer.WriteSheet(Sheetname,COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          IF (FileName = '') OR (FilePath = '') THEN
            TempExcelBuffer.OpenExcel //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
        ELSE
            TempExcelBuffer.OpenExcelWithoutAutoFit(Sheetname,FileName + ExcelFileExtensionTok,FilePath,TRUE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;

    END;

    LOCAL PROCEDURE EnterCell@1000000012(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text[250];Formular@1000000008 : Text[250];Bold@1000000003 : Boolean;Italic@1000000004 : Boolean;UnderLine@1000000005 : Boolean;NumberFormat@1000000006 : Text[30];CellType@1000000007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE UpdateCell@1000000013(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text[250]);
    BEGIN
      IF TempExcelBuffer.GET(RowNo,ColumnNo)  THEN BEGIN
        TempExcelBuffer."Cell Value as Text" := CellValue;
        TempExcelBuffer.MODIFY;
      END;
    END;

    BEGIN
    {
      Lfd.Nr. Version   Datum         User  Beschreibung
      =================================================================
      1       TOP1.00   04.05.2020    UB    LOCAL ADV_šberprfung() Vergleicht Deb/Kred ADV eintrag mit Dokumentenversnd
      2       TOP1.01   03.07.2020    ST    Dateilinks setzen mit Paramter šbergabe und Abbruch bewirkt kein šberschreiben mehr
    }
    END.
  }
}

