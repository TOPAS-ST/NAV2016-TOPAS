OBJECT Page 50110 ACS_Syst_Service Imp EURO USD
{
  OBJECT-PROPERTIES
  {
    Date=03.04.18;
    Time=14:19:05;
    Modified=Yes;
    Version List=TOPAS;
  }
  PROPERTIES
  {
    CaptionML=DEU=AudioCodes Systemartikel-, ACTS- und CHAMPS Preis Import Tool;
    ActionList=ACTIONS
    {
      { 1000000004;  ;ActionContainer;
                      CaptionML=DEU=Funktionen;
                      ActionContainerType=ActionItems }
      { 1000000005;1 ;Action    ;
                      Name=Import;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ImportExcel;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Run_Import;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;;Container;
                ContainerType=ContentArea }

    { 1000000007;1;Group  ;
                CaptionML=DEU=Info;
                GroupType=Group }

    { 1000000003;2;Field  ;
                CaptionML=DEU=Mit diesem Tool k”nnen die AudioCodes System-,  ACTS-,  ACTS Schaeffler- und Champs Servicepreise eingespielt werden. }

    { 1000000002;1;Group  ;
                CaptionML=DEU=Pfad angeben;
                GroupType=Group }

    { 1000000001;2;Field  ;
                CaptionML=DEU=Datei;
                SourceExpr=DialogFileName;
                OnLookup=BEGIN
                           TOPAS_API.OpenFile(DialogFileName);
                         END;

                OnAssistEdit=BEGIN
                               DialogFileName := TOPAS_API.Save_FileDialog;
                             END;
                              }

  }
  CODE
  {
    VAR
      Servicepreise@1000000031 : Record 50028;
      Artikelnr_obsolete@1000000030 : Record 50028;
      verkaufspreis@1000000049 : Record 7002;
      einkaufspreis@1000000029 : Record 7012;
      Artikel@1000000040 : Record 27;
      Kreditor@1000000039 : Record 23;
      TempExcelBuffer@1000000057 : TEMPORARY Record 370;
      TempExcelBufferExport@1000000079 : TEMPORARY Record 370;
      TOPAS_API@1000000001 : Codeunit 50001;
      FileMgt@1000000074 : Codeunit 419;
      ServerFileName@1000000073 : Text;
      SheetName@1000000072 : Text[250];
      DoUpdateExistingWorksheet@1000000071 : Boolean;
      Testmode@1000000070 : Boolean;
      Window@1000000069 : Dialog;
      RecNo@1000000068 : Integer;
      TotalRecNo@1000000067 : Integer;
      RowNo@1000000066 : Integer;
      ColumnNo@1000000065 : Integer;
      XlWrkBkReader@1000000008 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookReader";
      XlWrkShtReader@1000000047 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetReader";
      XlWrkBkWriter@1000000063 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookWriter";
      XlWrkShtWriter@1000000062 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetWriter";
      DialogFileName@1000000000 : Text;
      PL_Version@1000000037 : Text[30];
      PL_Version_Systeme@1000000036 : Text[30];
      Artikelname@1000000035 : Text[120];
      ServiceArtikelname@1000000034 : Text[50];
      SUPArtikelname@1000000033 : Text[50];
      ServiceJahre@1000000060 : Text;
      excel_datens„tze@1000000011 : Integer;
      ge„nderte_eintr„ge@1000000010 : Integer;
      obsolete_eintr„ge@1000000009 : Integer;
      obsolete_korrigiert@1000000038 : Integer;
      obsolete_items@1000000064 : Text;
      leere_zeilen@1000000041 : Integer;
      ServerUploadFile@1000000005 : Text;
      DownloadFileName@1000000006 : Text;
      auswahl@1000000012 : 'Champs,ACTS,Systeme,Systeme Schaeffler,Champs alt,ACTS alt';
      Spalte_Part@1000000027 : TextConst 'DEU=A';
      Spalte_Serviceartikelnr@1000000026 : TextConst 'DEU=B';
      Spalte_MSRP@1000000025 : TextConst 'DEU=C';
      Spalte_YR@1000000024 : TextConst 'DEU=D';
      Spalte_SUP_lang@1000000023 : TextConst 'DEU=E';
      Spalte_SUP@1000000022 : TextConst 'DEU=F';
      Spalte_PL_Version@1000000021 : TextConst 'DEU=G';
      Spalte_W„h@1000000020 : TextConst 'DEU=H';
      Spalte_Art@1000000019 : TextConst 'DEU=I';
      Spalte_DC_Systeme@1000000018 : TextConst 'DEU=D';
      Spalte_W„h_Systeme@1000000017 : TextConst 'DEU=5';
      Spalte_Startdatum@1000000016 : TextConst 'DEU=F';
      Spalte_PL_Version_Systeme@1000000015 : TextConst 'DEU=G';
      Kred_EURO@1000000050 : TextConst 'DEU=880045';
      Kred_USD@1000000002 : TextConst 'DEU=880072';
      Max_Datens„tze@1000000042 : TextConst 'DEU=40000';
      Text000@1000000077 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000076 : TextConst 'DEU=Service Artikel';
      Text002@1000000075 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text020@1000000086 : TextConst 'DEU=Artikelnr.';
      Text021@1000000085 : TextConst 'DEU=Service Artikelnr.';
      Text022@1000000084 : TextConst 'DEU=MSRP alt';
      Text023@1000000083 : TextConst 'DEU=MSRP neu';
      Text024@1000000082 : TextConst 'DEU=Differenz';
      Text100@1000000013 : TextConst 'DEU=CHAMPS Import,ACTS / ACTS Schaeffler Import,Systemartikel DC und MSRP Import,Schaeffler Systemartikel DC und MSRP Import,CHAMPS alt aktualisieren,ACTS alt aktualisieren';
      startdatum@1000000046 : Date;
      laufzeit@1000000055 : Integer;
      v_art@1000000028 : 'Champs,ACTS';
      PL_W„h@1000000014 : Code[20];
      PL_Bezeichnung@1000000056 : Text[30];
      PL_Kreditor@1000000003 : Code[20];
      excel_msrp@1000000032 : Decimal;
      excel_dc@1000000044 : Decimal;
      row_part@1000000061 : Integer;
      cell_part@1000000053 : Text[30];
      cell_msrp@1000000052 : Text[30];
      system_ek_w„hrung@1000000043 : Code[20];
      w„h_text@1000000054 : Text[30];
      EOL@1000000045 : Boolean;
      RowCount@1000000051 : Integer;
      TotalRows@1000000058 : Integer;
      i@1000000059 : Integer;
      Text998@1000000004 : TextConst 'DEU=Es konnte keine Kreditornr. zur angegeben W„hrung ermittelt werden.';
      Text999@1000000048 : TextConst 'DEU=Der W„hrungscode des Kreditors %1 und der in der Excel Liste angebene W„hrungscode weichen voneinander ab.';
      ExcelFileExtensionTok@1000000078 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      SheetName_UploadPriceBook@1000000007 : TextConst 'DEU=Uploadable Flat Price Book';

    LOCAL PROCEDURE Run_Import@1000000001();
    BEGIN
      IF DialogFileName = '' THEN ERROR('Es wurde keine Importdatei angegeben.');

      ServerUploadFile := FileMgt.UploadFileSilent(DialogFileName);

      ge„nderte_eintr„ge := 0;
      obsolete_eintr„ge := 0;
      excel_datens„tze := 0;

      auswahl := STRMENU(Text100,7);
      IF auswahl = 0 THEN
        EXIT;

      //CHAMPS oder ACTS
      IF (auswahl = 1) OR (auswahl = 2) THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        TempExcelBuffer.OpenBook(ServerUploadFile,'Einspielen');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName('Einspielen');

        EVALUATE(PL_W„h,UPPERCASE(GetValueAtCell(1,8)));
        EVALUATE(v_art,GetValueAtCell(1,9));

       IF (auswahl = 1) AND (FORMAT(v_art) <> 'Champs') THEN BEGIN
          ERROR('Falsche Syntax in Liste');
        END;
        IF (auswahl = 2) AND (FORMAT(v_art) <> 'ACTS') THEN BEGIN
          ERROR('Falsche Syntax in Liste');
        END;

        //********************************************************************************************
        //                         Eigentliches Update der Service Artikel
        //********************************************************************************************

        IF TotalRows > 999 THEN BEGIN
          IF CONFIRM('Es konnte mehr als 1000 Eintr„ge in der Quelldatei gefunden werden.\' +
                      'Soll der Status Update letzte Preisliste fr alle Artikel zurckgesetzt und neu ' +
                      'bewertet werden?',TRUE) THEN BEGIN
            Servicepreise.RESET;
            IF auswahl = 1 THEN
              Servicepreise.SETRANGE(Art,Servicepreise.Art::Champs);
            IF auswahl = 2 THEN
              Servicepreise.SETRANGE(Art,Servicepreise.Art::ACTS);
            Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
            IF Servicepreise.FINDFIRST THEN
              Servicepreise.MODIFYALL("Update letzte Preisliste",FALSE);
          END;
        END;

        Window.OPEN(
          Text000 +
          '@1@@@@@@@@@@@@@@@@@@@@@\');

        FOR i := 1 TO TotalRows DO BEGIN

          excel_msrp := 0;

          Artikelname := UPPERCASE(GetValueAtCell(i,1));
          ServiceArtikelname := UPPERCASE(GetValueAtCell(i,2));
          ServiceJahre := GetValueAtCell(i,4);
          SUPArtikelname := UPPERCASE(GetValueAtCell(i,6));
          IF GetValueAtCell(i,3) <> '' THEN
            EVALUATE(excel_msrp,GetValueAtCell(i,3));
          PL_Version := GetValueAtCell(i,7);

          XlWrkShtWriter.SetCellValueText(i, 'K', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'L', '', XlWrkShtWriter.DefaultCellDecorator);

          IF Artikelname <> '' THEN BEGIN
            //Kennzeichnung der alten Pos., dass die Zuordnung obsolete geworden ist, da Service Artikelnr. ge„ndert wurde
            obsolete_items := '';
            Artikelnr_obsolete.RESET;
            IF auswahl = 1 THEN
              Artikelnr_obsolete.SETFILTER(Art,'%1',Artikelnr_obsolete.Art::Champs);
            IF auswahl = 2 THEN
              Artikelnr_obsolete.SETFILTER(Art,'%1',Artikelnr_obsolete.Art::ACTS);
            Artikelnr_obsolete.SETFILTER("Artikelnr. 2",'%1',Artikelname);
            Artikelnr_obsolete.SETFILTER("SUP Artikelnr.",'%1',SUPArtikelname);
            Artikelnr_obsolete.SETFILTER(W„hrungscode,'%1',PL_W„h);
            Artikelnr_obsolete.SETFILTER("Zuordnung obsolete",'%1',FALSE);
            IF Artikelnr_obsolete.FINDFIRST THEN
              REPEAT
                IF Artikelnr_obsolete."Service Artikelnr." <> ServiceArtikelname THEN BEGIN
                  Artikelnr_obsolete."Zuordnung obsolete" := TRUE;
                  Artikelnr_obsolete.MODIFY(TRUE);
                  obsolete_eintr„ge += 1;
                  obsolete_items += Artikelnr_obsolete."Service Artikelnr." + ';';
                END;
              UNTIL Artikelnr_obsolete.NEXT = 0;
            XlWrkShtWriter.SetCellValueText(i, 'K', obsolete_items, XlWrkShtWriter.DefaultCellDecorator);

            Servicepreise.RESET;
            IF auswahl = 1 THEN
              Servicepreise.SETFILTER(Art,'%1',Servicepreise.Art::Champs);
            IF auswahl = 2 THEN
              Servicepreise.SETFILTER(Art,'%1',Servicepreise.Art::ACTS);
            Servicepreise.SETFILTER("Artikelnr. 2",'%1',Artikelname);
            Servicepreise.SETFILTER("Service Artikelnr.",'%1',ServiceArtikelname);
            Servicepreise.SETFILTER("SUP Artikelnr.",'%1',SUPArtikelname);
            Servicepreise.SETFILTER(W„hrungscode,'%1',PL_W„h);
            IF Servicepreise.FINDFIRST THEN BEGIN
              IF (Servicepreise.MSRP <> ROUND(excel_msrp,0.01)) AND (excel_msrp <> 0) THEN BEGIN
                ge„nderte_eintr„ge += 1;
                Servicepreise.MSRP := ROUND(excel_msrp,0.01);
                Servicepreise.MODIFY(TRUE);
              END;
              Servicepreise."Update letzte Preisliste" := TRUE;
              Servicepreise.Preisliste := PL_Version;
              IF Servicepreise."Zuordnung obsolete" = TRUE THEN BEGIN
                Servicepreise."Zuordnung obsolete" := FALSE;
                obsolete_korrigiert += 1;
                XlWrkShtWriter.SetCellValueText(i, 'L', 'obsolete korrigiert', XlWrkShtWriter.DefaultCellDecorator);
              END;
              Servicepreise.MODIFY;
            END ELSE BEGIN
              Servicepreise.INIT;
              Servicepreise."Service Artikelnr." := ServiceArtikelname;
              Servicepreise."SUP Artikelnr." := SUPArtikelname;
              Artikel.RESET;
              Artikel.SETFILTER("No. 2",'%1',Artikelname);
              IF Artikel.FINDFIRST THEN BEGIN
                Servicepreise.VALIDATE("Artikelnr.",Artikel."No.");
              END ELSE BEGIN
                Servicepreise."Artikelnr." := '';
                Servicepreise."Artikelnr. 2" := Artikelname;
              END;
              Servicepreise.MSRP := ROUND(excel_msrp,0.01);
              Servicepreise."Update letzte Preisliste" := TRUE;
              Servicepreise.Preisliste := PL_Version;
              Servicepreise.W„hrungscode := PL_W„h;
              EVALUATE(Servicepreise."Laufzeit in Jahren",ServiceJahre);
              IF auswahl = 1 THEN
                Servicepreise.Art := Servicepreise.Art::Champs;
              IF auswahl = 2 THEN
                Servicepreise.Art := Servicepreise.Art::ACTS;
              Servicepreise.INSERT(TRUE);
              ge„nderte_eintr„ge += 1;
            END;

          END;

          Window.UPDATE(1,ROUND(i / TotalRows * 10000,1));

        END;

        Window.CLOSE;

        XlWrkBkWriter.Close;
        DownloadFileName := FileMgt.DownloadTempFile(ServerUploadFile);
        FileMgt.MoveAndRenameClientFile(DownloadFileName,DialogFileName,FORMAT(CREATEGUID));
        FileMgt.DeleteServerFile(ServerUploadFile);
        FileMgt.DeleteClientFile(DownloadFileName);
        CLEAR(XlWrkShtWriter);
        CLEAR(XlWrkBkWriter);

      END;


      //Systeme MSRP
      IF auswahl = 3 THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        TempExcelBuffer.OpenBook(ServerUploadFile,'Einspielen');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        //Fhrende Einkaufsw„hrung
        system_ek_w„hrung := '';

        EVALUATE(PL_W„h,UPPERCASE(GetValueAtCell(2,5)));

        PL_Kreditor := '';
        IF PL_W„h = 'USD' THEN
          PL_Kreditor := Kred_USD;
        IF PL_W„h = '' THEN
          PL_Kreditor := Kred_EURO;
        IF PL_Kreditor = '' THEN
          ERROR(Text998);

        IF UPPERCASE(GetValueAtCell(1,3)) <> 'MSRP' THEN BEGIN
          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_MSRP + ' muss MSRP sein.');
        END;
        IF UPPERCASE(GetValueAtCell(1,4)) <> 'DC' THEN BEGIN
          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_DC_Systeme + ' muss DC sein.');
        END;

        //********************************************************************************************
        //                         Eigentliches Update der System Artikel
        //********************************************************************************************

        IF TotalRows > 499 THEN BEGIN
          IF CONFIRM('Es konnte mehr als 500 Eintr„ge in der Quelldatei gefunden werden.\' +
                      'Soll der Status Update letzte Preisliste fr alle Artikel zurckgesetzt und neu ' +
                      'bewertet werden?',TRUE) THEN BEGIN
            Artikel.RESET;
            Artikel.SETFILTER("Manufacturer Code",'%1','59');
            IF Artikel.FINDFIRST THEN
              Artikel.MODIFYALL(Artikel."Update letzte Preisliste",FALSE);
          END;
        END;

        FOR i := 2 TO TotalRows DO BEGIN

          excel_dc := 0;
          excel_msrp := 0;
          EOL := FALSE;

          Artikelname := UPPERCASE(GetValueAtCell(i,1));
          IF GetValueAtCell(i,3) <> 'EOL' THEN BEGIN
            IF GetValueAtCell(i,4) <> '' THEN
              EVALUATE(excel_dc,GetValueAtCell(i,4));
            excel_dc := ROUND(excel_dc,0.01);
            IF GetValueAtCell(i,3) <> '' THEN
              EVALUATE(excel_msrp,GetValueAtCell(i,3));
            excel_msrp := ROUND(excel_msrp,0.01);
          END ELSE
            EOL := TRUE;

          //Ausnahme EMS/UPG/TO-ACSRVR
          CASE Artikelname OF
            'EMS/UPG/TO-ACSRVR' :
            BEGIN
              excel_dc := excel_msrp;
              excel_msrp := 0;
            END;
          END;

          PL_W„h := UPPERCASE(GetValueAtCell(i,5));
          IF GetValueAtCell(i,6) <> '' THEN
            EVALUATE(startdatum,GetValueAtCell(i,6));
          IF Artikelname <> '' THEN
            PL_Version_Systeme := GetValueAtCell(i,7);

          IF (Artikelname = '') OR (STRLEN(Artikelname) > 40) THEN BEGIN
          END ELSE BEGIN
            Kreditor.GET(PL_Kreditor);
            IF PL_W„h <> Kreditor."Currency Code" THEN BEGIN
              ERROR(Text999,PL_Kreditor);
            END;

            Artikel.RESET;
            Artikel.SETFILTER("No. 2",'%1',Artikelname);
            IF Artikel.FINDFIRST THEN BEGIN

              //*********************************************************************************************
              //                                    EK-Preise updaten
              //*********************************************************************************************

              einkaufspreis.RESET;
              einkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
              einkaufspreis.SETFILTER("Vendor No.",'%1',PL_Kreditor);
              einkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
              einkaufspreis.SETFILTER("Ending Date",'%1',0D);
              einkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
              IF einkaufspreis.FINDFIRST THEN BEGIN
                einkaufspreis."Ending Date" := startdatum - 1;
                einkaufspreis.MODIFY(TRUE);
              END;

              IF (excel_dc <> 0) THEN BEGIN
                einkaufspreis.RESET;
                einkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                einkaufspreis.SETFILTER("Vendor No.",'%1',PL_Kreditor);
                einkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
                einkaufspreis.SETFILTER("Starting Date",'%1',startdatum);
                IF NOT einkaufspreis.FINDFIRST THEN BEGIN
                  einkaufspreis.INIT;
                  einkaufspreis."Item No." := Artikel."No.";
                  einkaufspreis."Vendor No." := PL_Kreditor;
                  einkaufspreis."Starting Date" := startdatum;
                  einkaufspreis."Currency Code" := PL_W„h;
                  einkaufspreis."Unit of Measure Code" := 'STšCK';
                  einkaufspreis."Direct Unit Cost" := excel_dc;
                  einkaufspreis.INSERT(TRUE);
                  ge„nderte_eintr„ge += 1;
                END ELSE BEGIN
                  //Falls der 1. Lauf noch inkorrekte DCs hatte, z.B. bei einigen Artikeln nun 80% anstatt 60% vom MSRP
                  IF einkaufspreis."Direct Unit Cost" <> excel_dc THEN BEGIN
                    einkaufspreis."Direct Unit Cost" := excel_dc;
                    einkaufspreis.MODIFY;
                    ge„nderte_eintr„ge += 1;
                  END;
                END;

              END;

              Artikel."Update letzte Preisliste" := TRUE;
              Artikel.MODIFY(TRUE);


              //*********************************************************************************************
              //                                    VK-Preise updaten
              //*********************************************************************************************

              verkaufspreis.RESET;
              verkaufspreis.SETFILTER("Sales Type",'%1',verkaufspreis."Sales Type"::"All Customers");
              verkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
              verkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
              verkaufspreis.SETFILTER("Ending Date",'%1',0D);
              verkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
              IF verkaufspreis.FINDFIRST THEN BEGIN
                verkaufspreis."Ending Date" := startdatum - 1;
                verkaufspreis.MODIFY(TRUE);
              END;

              IF excel_msrp <> 0 THEN BEGIN
                verkaufspreis.RESET;
                verkaufspreis.SETFILTER("Sales Type",'%1',verkaufspreis."Sales Type"::"All Customers");
                verkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                verkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
                verkaufspreis.SETFILTER("Starting Date",'%1',startdatum);
                IF NOT verkaufspreis.FINDFIRST THEN BEGIN
                  verkaufspreis.INIT;
                  verkaufspreis."Sales Type" := verkaufspreis."Sales Type"::"All Customers";
                  verkaufspreis."Item No.":= Artikel."No.";
                  verkaufspreis."Starting Date" := startdatum;
                  verkaufspreis."Currency Code" := PL_W„h;
                  verkaufspreis."Unit of Measure Code" := 'STšCK';
                  verkaufspreis."Unit Price" := excel_msrp;
                  verkaufspreis.INSERT(TRUE);
                END;
              END;

              IF (STRPOS(Artikel.Bezeichnung2_lang,'Nicht in der Preisliste') <> 0)
              OR (STRPOS(Artikel.Bezeichnung2_lang,'Stand Preisliste') <> 0)
              OR (Artikel.Bezeichnung2_lang = '') THEN BEGIN
                Artikel.Bezeichnung2_lang := 'Stand Preisliste: ' + PL_Version_Systeme;
                Artikel.MODIFY(TRUE);
              END;

              IF EOL THEN
                IF STRPOS(Artikel.Preisinfo,'EOL') = 0 THEN
                  Artikel.Preisinfo := Artikel.Preisinfo + ' EOL - PL ' + PL_Version_Systeme;
            END;

          END;

        END;

        FileMgt.DeleteServerFile(ServerUploadFile);

        Artikel.RESET;
        Artikel.SETFILTER("Manufacturer Code",'%1','59');
        Artikel.SETFILTER("Update letzte Preisliste",'%1',FALSE);
        Artikel.SETFILTER(Bezeichnung2_lang,'%1|%2|%3','','*' + 'Nicht in der Preisliste' + '*','*' + 'Stand Preisliste' + '*');
        IF Artikel.FINDFIRST THEN
          Artikel.MODIFYALL(Bezeichnung2_lang,'Nicht in der Preisliste ' + PL_Version_Systeme + ' vorhanden.');

      END;

      //Systeme MSRP Schaeffler
      IF auswahl = 4 THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        TempExcelBuffer.OpenBook(ServerUploadFile,'Einspielen');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        EVALUATE(PL_W„h,UPPERCASE(GetValueAtCell(2,5)));

        PL_Kreditor := Kred_EURO;
        IF PL_Kreditor = '' THEN
          ERROR(Text998);

        IF UPPERCASE(GetValueAtCell(1,3)) <> 'MSRP' THEN BEGIN
          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_MSRP + ' muss MSRP sein.');
        END;
        IF UPPERCASE(GetValueAtCell(1,4)) <> 'DC' THEN BEGIN
          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_DC_Systeme + ' muss DC sein.');
        END;

        //********************************************************************************************
        //                         Eigentliches Update der System Artikel
        //********************************************************************************************

        FOR i := 2 TO TotalRows DO BEGIN

          excel_dc := 0;
          excel_msrp := 0;
          EOL := FALSE;

          Artikelname := UPPERCASE(GetValueAtCell(i,1));
          IF UPPERCASE(GetValueAtCell(i,3)) <> 'EOS' THEN BEGIN
            IF GetValueAtCell(i,4) <> '' THEN
              EVALUATE(excel_dc,GetValueAtCell(i,4));
            excel_dc := ROUND(excel_dc,0.01);
            IF GetValueAtCell(i,3) <> '' THEN
              EVALUATE(excel_msrp,GetValueAtCell(i,3));
            excel_msrp := ROUND(excel_msrp,0.01);
          END ELSE
            EOL := TRUE;

          PL_W„h := UPPERCASE(GetValueAtCell(i,5));
          IF GetValueAtCell(i,6) <> '' THEN
            EVALUATE(startdatum,GetValueAtCell(i,6));
          IF Artikelname <> '' THEN
            PL_Version_Systeme := GetValueAtCell(i,7);

          IF (Artikelname = '') OR (STRLEN(Artikelname) > 40) THEN BEGIN
          END ELSE BEGIN
            Kreditor.GET(PL_Kreditor);
            IF PL_W„h <> Kreditor."Currency Code" THEN BEGIN
              ERROR(Text999,PL_Kreditor);
            END;

            Artikel.RESET;
            Artikel.SETFILTER("No. 2",'%1',Artikelname);
            IF Artikel.FINDFIRST THEN BEGIN

              //*********************************************************************************************
              //                                    EK-Preise updaten
              //*********************************************************************************************

              IF PL_W„h = '' THEN BEGIN
                einkaufspreis.RESET;
                einkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                einkaufspreis.SETFILTER("Vendor No.",'%1',PL_Kreditor);
                einkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
                einkaufspreis.SETFILTER("Ending Date",'%1',0D);
                einkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
                IF einkaufspreis.FINDFIRST THEN BEGIN
                  einkaufspreis."Ending Date" := startdatum - 1;
                  einkaufspreis.MODIFY(TRUE);
                END;

                IF (excel_dc <> 0) THEN BEGIN
                  einkaufspreis.RESET;
                  einkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                  einkaufspreis.SETFILTER("Vendor No.",'%1',PL_Kreditor);
                  einkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
                  einkaufspreis.SETFILTER("Starting Date",'%1',startdatum);
                  IF NOT einkaufspreis.FINDFIRST THEN BEGIN
                    einkaufspreis.INIT;
                    einkaufspreis."Item No." := Artikel."No.";
                    einkaufspreis."Vendor No." := PL_Kreditor;
                    einkaufspreis."Starting Date" := startdatum;
                    einkaufspreis."Currency Code" := PL_W„h;
                    einkaufspreis."Unit of Measure Code" := 'STšCK';
                    einkaufspreis."Direct Unit Cost" := excel_dc;
                    einkaufspreis.INSERT(TRUE);
                    ge„nderte_eintr„ge += 1;
                  END ELSE BEGIN
                    //Falls der 1. Lauf noch inkorrekte DCs hatte, z.B. bei einigen Artikeln nun 80% anstatt 60% vom MSRP
                    IF einkaufspreis."Direct Unit Cost" <> excel_dc THEN BEGIN
                      einkaufspreis."Direct Unit Cost" := excel_dc;
                      einkaufspreis.MODIFY;
                      ge„nderte_eintr„ge += 1;
                    END;
                  END;

                END;

                Artikel."Update letzte Preisliste" := TRUE;
                Artikel.MODIFY(TRUE);

              END;

              //*********************************************************************************************
              //                                    VK-Preise updaten
              //*********************************************************************************************

              verkaufspreis.RESET;
              verkaufspreis.SETFILTER("Sales Type",'%1',verkaufspreis."Sales Type"::"All Customers");
              verkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
              verkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
              verkaufspreis.SETFILTER("Ending Date",'%1',0D);
              verkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
              IF verkaufspreis.FINDFIRST THEN BEGIN
                verkaufspreis."Ending Date" := startdatum - 1;
                verkaufspreis.MODIFY(TRUE);
              END;

              IF excel_msrp <> 0 THEN BEGIN
                verkaufspreis.RESET;
                verkaufspreis.SETFILTER("Sales Type",'%1',verkaufspreis."Sales Type"::"All Customers");
                verkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                verkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
                verkaufspreis.SETFILTER("Starting Date",'%1',startdatum);
                IF NOT verkaufspreis.FINDFIRST THEN BEGIN
                  verkaufspreis.INIT;
                  verkaufspreis."Sales Type" := verkaufspreis."Sales Type"::"All Customers";
                  verkaufspreis."Item No.":= Artikel."No.";
                  verkaufspreis."Starting Date" := startdatum;
                  verkaufspreis."Currency Code" := PL_W„h;
                  verkaufspreis."Unit of Measure Code" := 'STšCK';
                  verkaufspreis."Unit Price" := excel_msrp;
                  verkaufspreis.INSERT(TRUE);
                END ELSE BEGIN
                  //Falls sich die MSRPs doch ge„ndert haben sollten
                  IF verkaufspreis."Unit Price" <> excel_msrp THEN BEGIN
                    verkaufspreis."Unit Price" := excel_msrp;
                    verkaufspreis.MODIFY;
                  END;
                END;
              END;

              IF (STRPOS(Artikel.Bezeichnung2_lang,'Nicht in der Preisliste') <> 0)
              OR (STRPOS(Artikel.Bezeichnung2_lang,'Stand Preisliste') <> 0)
              OR (Artikel.Bezeichnung2_lang = '') THEN BEGIN
                Artikel.Bezeichnung2_lang := 'Stand Preisliste: ' + PL_Version_Systeme;
                Artikel.MODIFY(TRUE);
              END;

              IF EOL THEN
                IF STRPOS(Artikel.Preisinfo,'EOL') = 0 THEN
                  Artikel.Preisinfo := Artikel.Preisinfo + ' EOL - PL ' + PL_Version_Systeme;
            END;

          END;

        END;

        FileMgt.DeleteServerFile(ServerUploadFile);

        { // Nach Rckstellung auf 4.7.04 von 4.8.11.1 gibt es hier Probleme, da er auch alle anderen Artikel anfassen wrde
        Artikel.RESET;
        Artikel.SETFILTER("Manufacturer Code",'%1','59');
        Artikel.SETFILTER("Update letzte Preisliste",'%1',FALSE);
        Artikel.SETFILTER(Bezeichnung2_lang,'%1|%2|%3','','*' + 'Nicht in der Preisliste' + '*','*' + 'Stand Preisliste' + '*');
        IF Artikel.FINDFIRST THEN
          Artikel.MODIFYALL(Bezeichnung2_lang,'Nicht in der Preisliste ' + PL_Version_Systeme + ' vorhanden.');
        }

      END;

      //CHAMPS Servicepreise einspielen fr Artikel, die nicht mehr in der Preisliste sind
      IF auswahl = 5 THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        TempExcelBuffer.OpenBook(ServerUploadFile,'Cover');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        EVALUATE(PL_Version,'-old_' + CONVERTSTR(FORMAT(GetValueAtCell(8,7)),'.','_'));
        IF UPPERCASE(GetValueAtCell(10,7)) <> 'CHAMPS' THEN BEGIN
          ERROR('Dies ist keine AudioCodes CHAMPS Preisliste.');
        END;
        IF (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EURO') OR (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EUR') THEN
          PL_W„h := ''
        ELSE
          PL_W„h := UPPERCASE(GetValueAtCell(9,7));

        PL_Kreditor := '';
        IF PL_W„h = 'USD' THEN
          PL_Kreditor := Kred_USD;
        IF PL_W„h = '' THEN
          PL_Kreditor := Kred_EURO;
        IF PL_Kreditor = '' THEN
          ERROR(Text998);

        //+ Das Sheet wird aufbereitet, damit keine Fehlermeldung erzeugt wird, wenn eine Spalte eine L„nge gr”áer 250 Zeichen aufweist
        XlWrkBkReader := XlWrkBkReader.Open(ServerUploadFile);
        XlWrkShtReader := XlWrkBkReader.GetWorksheetByName(SheetName_UploadPriceBook);
        RowCount := XlWrkShtReader.RowCount;
        XlWrkBkReader.Close;

        XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName(SheetName_UploadPriceBook);

        FOR i := 1 TO RowCount DO BEGIN
          XlWrkShtWriter.SetCellValueText(i, 'F', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'H', '', XlWrkShtWriter.DefaultCellDecorator);
        END;

        XlWrkBkWriter.Close;
        //-

        TempExcelBuffer.DELETEALL;
        TempExcelBuffer.OpenBook(ServerUploadFile,SheetName_UploadPriceBook);
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        IF (UPPERCASE(GetValueAtCell(1,7)) <> 'MSRP EURO') AND (UPPERCASE(GetValueAtCell(1,7)) <> 'MSRP EUR') THEN BEGIN
          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte G muss MSRP EUR sein.');
        END;

        Kreditor.GET(PL_Kreditor);
        IF PL_W„h <> Kreditor."Currency Code" THEN BEGIN
          ERROR(Text999,PL_Kreditor);
        END;

        //********************************************************************************************
        //                               Definiert die Protokolldatei
        //********************************************************************************************

        IF DoUpdateExistingWorksheet THEN BEGIN
          IF ServerFileName = '' THEN
            ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
          IF ServerFileName = '' THEN
            EXIT;
          SheetName := TempExcelBufferExport.SelectSheetsName(ServerFileName);
          IF SheetName = '' THEN
            EXIT;
        END;

        Window.OPEN(
          Text000 +
          '@1@@@@@@@@@@@@@@@@@@@@@\');

        TempExcelBufferExport.DELETEALL;
        CLEAR(TempExcelBufferExport);

        //Protokoll Header
        RecNo := 0;
        RowNo := 1;
        ColumnNo := 1;
        EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        RowNo := 2;

        //********************************************************************************************
        //                         Eigentliches Update der Service Artikel
        //********************************************************************************************

        Servicepreise.RESET;
        Servicepreise.SETRANGE(Art,Servicepreise.Art::Champs);
        Servicepreise.SETRANGE("Zuordnung obsolete",FALSE);
        Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
        Servicepreise.SETRANGE("Update letzte Preisliste",FALSE);
        Servicepreise.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
        IF Servicepreise.FIND('-') THEN BEGIN
          TotalRecNo := Servicepreise.COUNT;
          REPEAT
            excel_msrp := 0;
            row_part := FindRowNew(Servicepreise."Service Artikelnr.",'Cell','A','Z');
            IF (row_part <> 0) THEN BEGIN
              IF FORMAT(GetValueAtCell(row_part,7)) <> 'Quotation' THEN BEGIN
                IF FORMAT(GetValueAtCell(row_part,7)) <> '' THEN
                  EVALUATE(excel_msrp,GetValueAtCell(row_part,7));
                excel_msrp := ROUND(excel_msrp,0.01);
                IF excel_msrp <> Servicepreise.MSRP THEN BEGIN
                  ColumnNo := 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Artikelnr. 2",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Service Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);

                  ColumnNo := ColumnNo + 1;
                  IF  Servicepreise.MSRP > excel_msrp THEN
                    EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[Color10]',TempExcelBufferExport."Cell Type"::Number); // dunkelgrn
                  IF  Servicepreise.MSRP < excel_msrp THEN
                    EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[red]',TempExcelBufferExport."Cell Type"::Number); //rot
                  RowNo := RowNo + 1;
                  Servicepreise.MSRP := excel_msrp;
                  IF STRPOS(Servicepreise.Preisliste,'-') > 0 THEN
                    Servicepreise.Preisliste := COPYSTR(Servicepreise.Preisliste,1,STRPOS(Servicepreise.Preisliste,'-') -1) + PL_Version
                  ELSE
                    Servicepreise.Preisliste := Servicepreise.Preisliste + PL_Version;
                  Servicepreise.MODIFY(TRUE);
                  ge„nderte_eintr„ge += 1;
                END;
              END;
            END;
            RecNo := RecNo + 1;
            Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));

          UNTIL Servicepreise.NEXT = 0;
        END;

        FileMgt.DeleteServerFile(ServerUploadFile);

        IF DoUpdateExistingWorksheet THEN BEGIN
          TempExcelBufferExport.UpdateBook(ServerFileName,SheetName);
          TempExcelBufferExport.WriteSheet('',COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN
            TempExcelBufferExport.DownloadAndOpenExcel;
        END ELSE BEGIN
          TempExcelBufferExport.CreateBook(ServerFileName,Text001);
          TempExcelBufferExport.WriteSheet(
            PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN BEGIN
            TempExcelBufferExport.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
            //TempExcelBufferExport.OpenExcelWithoutAutoFit(Text001,Text001 + ExcelFileExtensionTok,'',TRUE);
          END;
        END;
        IF NOT Testmode THEN
          TempExcelBufferExport.GiveUserControl;

        Window.CLOSE;
      END;

      //ACTS Servicepreise einspielen fr Artikel, die nicht mehr in der Preisliste sind
      IF auswahl = 6 THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        TempExcelBuffer.OpenBook(ServerUploadFile,'Cover');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        EVALUATE(PL_Version,'-old_' + CONVERTSTR(FORMAT(GetValueAtCell(8,7)),'.','_'));
        IF UPPERCASE(GetValueAtCell(10,7)) <> 'ACTS' THEN BEGIN
          ERROR('Dies ist keine AudioCodes ACTS Preisliste.');
        END;
        IF (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EURO') OR (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EUR') THEN
          PL_W„h := ''
        ELSE
          PL_W„h := UPPERCASE(GetValueAtCell(9,7));

        PL_Kreditor := '';
        IF PL_W„h = 'USD' THEN
          PL_Kreditor := Kred_USD;
        IF PL_W„h = '' THEN
          PL_Kreditor := Kred_EURO;
        IF PL_Kreditor = '' THEN
          ERROR(Text998);

        //+ Das Sheet wird aufbereitet, damit keine Fehlermeldung erzeugt wird, wenn eine Spalte eine L„nge gr”áer 250 Zeichen aufweist
        XlWrkBkReader := XlWrkBkReader.Open(ServerUploadFile);
        XlWrkShtReader := XlWrkBkReader.GetWorksheetByName(SheetName_UploadPriceBook);
        RowCount := XlWrkShtReader.RowCount;
        XlWrkBkReader.Close;

        XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName(SheetName_UploadPriceBook);

        FOR i := 1 TO RowCount DO BEGIN
          XlWrkShtWriter.SetCellValueText(i, 'F', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'H', '', XlWrkShtWriter.DefaultCellDecorator);
        END;

        XlWrkBkWriter.Close;
        //-

        TempExcelBuffer.DELETEALL;
        TempExcelBuffer.OpenBook(ServerUploadFile,SheetName_UploadPriceBook);
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        IF (UPPERCASE(GetValueAtCell(1,7)) <> 'MSRP EUR') AND (UPPERCASE(GetValueAtCell(1,7)) <> 'MSRP EURO') THEN BEGIN
          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte G muss MSRP EUR oder MSRP EURO sein.');
        END;

        Kreditor.GET(PL_Kreditor);
        IF PL_W„h <> Kreditor."Currency Code" THEN BEGIN
          ERROR(Text999,PL_Kreditor);
        END;

        //********************************************************************************************
        //                               Definiert die Protokolldatei
        //********************************************************************************************

        IF DoUpdateExistingWorksheet THEN BEGIN
          IF ServerFileName = '' THEN
            ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
          IF ServerFileName = '' THEN
            EXIT;
          SheetName := TempExcelBufferExport.SelectSheetsName(ServerFileName);
          IF SheetName = '' THEN
            EXIT;
        END;

        Window.OPEN(
          Text000 +
          '@1@@@@@@@@@@@@@@@@@@@@@\');

        TempExcelBufferExport.DELETEALL;
        CLEAR(TempExcelBufferExport);

        //Protokoll Header
        RecNo := 0;
        RowNo := 1;
        ColumnNo := 1;
        EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        RowNo := 2;

        //********************************************************************************************
        //                         Eigentliches Update der Service Artikel
        //********************************************************************************************

        Servicepreise.RESET;
        Servicepreise.SETRANGE(Art,Servicepreise.Art::ACTS);
        Servicepreise.SETRANGE("Zuordnung obsolete",FALSE);
        Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
        Servicepreise.SETRANGE("Update letzte Preisliste",FALSE);
        Servicepreise.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
        IF Servicepreise.FIND('-') THEN BEGIN
          TotalRecNo := Servicepreise.COUNT;
          REPEAT
            excel_msrp := 0;
            row_part := FindRowNew(Servicepreise."Service Artikelnr.",'Cell','A','Z');
            IF (row_part <> 0) THEN BEGIN
              IF FORMAT(GetValueAtCell(row_part,7)) <> 'Quotation' THEN BEGIN
                IF FORMAT(GetValueAtCell(row_part,7)) <> '' THEN
                  EVALUATE(excel_msrp,GetValueAtCell(row_part,7));
                excel_msrp := ROUND(excel_msrp,0.01);
                IF excel_msrp <> Servicepreise.MSRP THEN BEGIN
                  ColumnNo := 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Artikelnr. 2",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Service Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);

                  ColumnNo := ColumnNo + 1;
                  IF  Servicepreise.MSRP > excel_msrp THEN
                    EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[Color10]',TempExcelBufferExport."Cell Type"::Number); // dunkelgrn
                  IF  Servicepreise.MSRP < excel_msrp THEN
                  EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[red]',TempExcelBufferExport."Cell Type"::Number); //rot
                  RowNo := RowNo + 1;
                  Servicepreise.MSRP := excel_msrp;
                  IF STRPOS(Servicepreise.Preisliste,'-') > 0 THEN
                    Servicepreise.Preisliste := COPYSTR(Servicepreise.Preisliste,1,STRPOS(Servicepreise.Preisliste,'-') -1) + PL_Version
                  ELSE
                    Servicepreise.Preisliste := Servicepreise.Preisliste + PL_Version;
                  Servicepreise.MODIFY(TRUE);
                  ge„nderte_eintr„ge += 1;
                END;
              END;
            END;
            RecNo := RecNo + 1;
            Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
          UNTIL Servicepreise.NEXT = 0;
        END;

        FileMgt.DeleteServerFile(ServerUploadFile);

        IF DoUpdateExistingWorksheet THEN BEGIN
          TempExcelBufferExport.UpdateBook(ServerFileName,SheetName);
          TempExcelBufferExport.WriteSheet('',COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN
            TempExcelBufferExport.DownloadAndOpenExcel;
        END ELSE BEGIN
          TempExcelBufferExport.CreateBook(ServerFileName,Text001);
          TempExcelBufferExport.WriteSheet(
            PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN BEGIN
            TempExcelBufferExport.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
            //TempExcelBufferExport.OpenExcelWithoutAutoFit(Text001,Text001 + ExcelFileExtensionTok,'',TRUE);
          END;
        END;
        IF NOT Testmode THEN
          TempExcelBufferExport.GiveUserControl;

        Window.CLOSE;
      END;

      //Ausgabe des Einspiel Ergebnisses

      IF PL_W„h = '' THEN
        w„h_text := 'EURO';
      IF PL_W„h = 'USD' THEN
        w„h_text := 'USD';

      CASE auswahl OF
        1..4 :
          BEGIN
            IF auswahl = 1 THEN PL_Bezeichnung := 'CHAMPS ' + w„h_text;
            IF auswahl = 2 THEN PL_Bezeichnung := 'ACTS ' + w„h_text;
            IF auswahl = 3 THEN PL_Bezeichnung := 'System ' + w„h_text;
            IF auswahl = 4 THEN PL_Bezeichnung := 'ACTS Schaeffler';
            MESSAGE('Import der %1 Artikel abgeschlossen.'+ '\' + 'Neue bzw. ge„nderte Datens„tze: %2\\' +
           'Excel Datens„tze: %3\Obsolete Bezeichnungen: %4 (korrigiert: %5)'
           ,PL_Bezeichnung,ge„nderte_eintr„ge,TotalRows,obsolete_eintr„ge,obsolete_korrigiert);
          END;
        5..6 : MESSAGE('Import der Servicepreise abgeschlossen.' + '\' + 'Neue bzw. ge„nderte Datens„tze: %1',ge„nderte_eintr„ge);
      END;
    END;

    PROCEDURE FindRowNew@1000000086(What@1140000 : Text[80];Art@1140001 : Text[30];Col1@1140006 : Text[30];Col2@1140008 : Text[30]) : Integer;
    VAR
      Range1@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      Cell@1140003 : Code[40];
      i@1140007 : Integer;
    BEGIN
      WITH TempExcelBuffer DO BEGIN
        SETFILTER("Cell Value as Text",'%1',What);
        IF FINDFIRST THEN
          EXIT("Row No.");
      END;
    END;

    LOCAL PROCEDURE GetValueAtCell@1000000025(RowNo@1000000000 : Integer;ColNo@1000000001 : Integer) : Text;
    BEGIN
      IF TempExcelBuffer.GET(RowNo,ColNo) THEN
        EXIT(TempExcelBuffer."Cell Value as Text");
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBufferExport.INIT;
      TempExcelBufferExport.VALIDATE("Row No.",RowNo);
      TempExcelBufferExport.VALIDATE("Column No.",ColumnNo);
      TempExcelBufferExport."Cell Value as Text" := CellValue;
      TempExcelBufferExport.Formula := Formular;
      TempExcelBufferExport.Bold := Bold;
      TempExcelBufferExport.Italic := Italic;
      TempExcelBufferExport.Underline := UnderLine;
      TempExcelBufferExport.NumberFormat := NumberFormat;
      TempExcelBufferExport."Cell Type" := CellType;
      TempExcelBufferExport.INSERT;
    END;

    BEGIN
    {
      Lfd.Nr. Version   Datum       User  Beschreibung
      ===========================================================================
      1       TOP       26.03.18    ST    Excel Automation komplett durch deutlich schnellere Excel Buffer Technik ersetzt
    }
    END.
  }
}

