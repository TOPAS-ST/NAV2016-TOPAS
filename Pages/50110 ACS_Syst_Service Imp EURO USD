OBJECT Page 50110 ACS_Syst_Service Imp EURO USD
{
  OBJECT-PROPERTIES
  {
    Date=13.10.21;
    Time=09:53:10;
    Modified=Yes;
    Version List=TOPAS;
  }
  PROPERTIES
  {
    CaptionML=DEU=AudioCodes Systemartikel-, ACTS- und CHAMPS Preis Import Tool;
    OnOpenPage=BEGIN
                 //Z„hlt die aktuell vorhandenen Serviceartikel
                 Servicepreise.RESET;
                 IF Servicepreise.FIND('-') THEN BEGIN
                   service_items_total := Servicepreise.COUNT;
                 END;
               END;

    ActionList=ACTIONS
    {
      { 1000000004;  ;ActionContainer;
                      CaptionML=DEU=Funktionen;
                      ActionContainerType=ActionItems }
      { 1000000005;1 ;Action    ;
                      Name=Import;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ImportExcel;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF (testlauf) AND (replace) THEN
                                   ERROR(Text202);

                                 IF classic THEN
                                   Run_Import_Classic
                                 ELSE
                                   Run_Import_Direct;
                               END;
                                }
      { 1000000011;1 ;Action    ;
                      Name=Anleitung;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Help;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CREATE(ShellHandle,FALSE,TRUE);
                                 ShellHandle.Open(Doku_Import);
                                 CLEAR(ShellHandle);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;;Container;
                ContainerType=ContentArea }

    { 1000000007;1;Group  ;
                CaptionML=DEU=Info;
                GroupType=Group }

    { 1000000013;2;Group  ;
                GroupType=Group }

    { 1000000003;3;Field  ;
                CaptionML=DEU=Mit diesem Tool k”nnen die AudioCodes System-,  ACTS-,  ACTS Schaeffler- und Champs Servicepreise eingespielt werden. }

    { 1000000012;3;Field  ;
                Name=service_items_total;
                CaptionML=DEU=Aktuelle Anzahl Servicepreise;
                SourceExpr=service_items_total;
                Editable=FALSE }

    { 1000000006;1;Group  ;
                CaptionML=DEU=Option;
                Visible=classic = FALSE;
                GroupType=Group }

    { 1000000015;2;Group  ;
                GroupType=Group }

    { 1000000010;3;Field  ;
                CaptionML=DEU=Testlauf;
                SourceExpr=testlauf }

    { 1000000014;3;Field  ;
                CaptionML=DEU=Ersetze aktuelle Preisliste (ggf. neue hinzu);
                SourceExpr=replace }

    { 1000000002;1;Group  ;
                CaptionML=DEU=Pfad angeben;
                GroupType=Group }

    { 1000000001;2;Field  ;
                CaptionML=DEU=Datei;
                SourceExpr=DialogFileName;
                OnLookup=BEGIN
                           TOPAS_API.OpenFile(DialogFileName);
                         END;

                OnAssistEdit=BEGIN
                               DialogFileName := TOPAS_API.Save_FileDialog(DialogFileName);
                             END;
                              }

    { 1000000008;1;Group  ;
                CaptionML=DEU=Optional;
                GroupType=Group }

    { 1000000009;2;Field  ;
                CaptionML=DEU=Klassischer Import;
                SourceExpr=classic;
                OnValidate=BEGIN
                             CurrPage.UPDATE;
                           END;
                            }

  }
  CODE
  {
    VAR
      Servicepreise@1000000031 : Record 50028;
      Artikelnr_obsolete@1000000030 : Record 50028;
      verkaufspreis@1000000049 : Record 7002;
      einkaufspreis@1000000029 : Record 7012;
      Artikel@1000000040 : Record 27;
      TroubleshootingSetup@1000000095 : Record 5945;
      TroubleshootingSetupTest@1000000135 : Record 5945;
      TroubleshootingSetupUnter@1000000096 : Record 5945;
      Kreditor@1000000039 : Record 23;
      Opt_laufzeit@1000000099 : Record 50001;
      PreislistenStatus@1000000141 : Record 50001;
      TempExcelBuffer@1000000105 : TEMPORARY Record 370;
      TempExcelBufferExport@1000000079 : TEMPORARY Record 370;
      PriceBookActual@1000000057 : TEMPORARY Record 370;
      PriceBookNormal@1000000104 : TEMPORARY Record 370;
      PriceBookEOL@1000000100 : TEMPORARY Record 370;
      TOPAS_API@1000000001 : Codeunit 50001;
      FileMgt@1000000074 : Codeunit 419;
      ServerFileName@1000000073 : Text;
      SheetName@1000000072 : Text;
      SheetNamePriceBook@1000000103 : Text;
      SheetNameEOL@1000000102 : Text;
      DoUpdateExistingWorksheet@1000000071 : Boolean;
      Testmode@1000000070 : Boolean;
      Window@1000000069 : Dialog;
      RecNo@1000000068 : Integer;
      TotalRecNo@1000000067 : Integer;
      RowNo@1000000066 : Integer;
      ColumnNo@1000000065 : Integer;
      XlWrkBkReader@1000000008 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookReader";
      XlWrkShtReader@1000000047 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetReader";
      XlWrkBkWriter@1000000063 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookWriter";
      XlWrkShtWriter@1000000062 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetWriter";
      CellData@1000000094 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.CellData";
      Enumerator@1000000093 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      ShellHandle@1000000133 : Automation "{50A7E9B0-70EF-11D1-B75A-00A0C90564FE} 1.0:{13709620-C279-11CE-A49E-444553540000}:'Microsoft Shell Controls And Automation'.Shell";
      DialogFileName@1000000000 : Text;
      PL_Version@1000000037 : Text[30];
      PL_Version_Systeme@1000000036 : Text[30];
      Artikelname@1000000035 : Text[120];
      ServiceArtikelname@1000000034 : Text[50];
      SUPArtikelname@1000000033 : Text[50];
      ServiceJahre@1000000060 : Text;
      SourceSheet@1000000117 : Text;
      excel_datens„tze@1000000011 : Integer;
      ge„nderte_eintr„ge@1000000010 : Integer;
      neuer_preis@1000000108 : Boolean;
      neuer_service@1000000109 : Boolean;
      obsolete_eintr„ge@1000000009 : Integer;
      obsolete_korrigiert@1000000038 : Integer;
      obsolete_items@1000000064 : Text;
      leere_zeilen@1000000041 : Integer;
      ServerUploadFile@1000000005 : Text;
      DownloadFileName@1000000006 : Text;
      auswahl@1000000012 : 'Champs,ACTS,Systeme,Systeme Schaeffler,Champs alt,ACTS alt,CHAMPS EURO Korrektur,ACTS EURO Korrektur';
      Spalte_Part@1000000027 : TextConst 'DEU=A';
      Spalte_Serviceartikelnr@1000000026 : TextConst 'DEU=B';
      Spalte_MSRP@1000000025 : TextConst 'DEU=C';
      Spalte_YR@1000000024 : TextConst 'DEU=D';
      Spalte_SUP_lang@1000000023 : TextConst 'DEU=E';
      Spalte_SUP@1000000022 : TextConst 'DEU=F';
      Spalte_PL_Version@1000000021 : TextConst 'DEU=G';
      Spalte_W„h@1000000020 : TextConst 'DEU=H';
      Spalte_Art@1000000019 : TextConst 'DEU=I';
      Spalte_DC_Systeme@1000000018 : TextConst 'DEU=D';
      Spalte_W„h_Systeme@1000000017 : TextConst 'DEU=5';
      Spalte_Startdatum@1000000016 : TextConst 'DEU=F';
      Spalte_PL_Version_Systeme@1000000015 : TextConst 'DEU=G';
      Kred_EURO@1000000050 : TextConst 'DEU=880045';
      Kred_USD@1000000002 : TextConst 'DEU=880072';
      Max_Datens„tze@1000000042 : TextConst 'DEU=40000';
      Text000@1000000077 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000076 : TextConst 'DEU=Service Artikel';
      Text002@1000000075 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text020@1000000086 : TextConst 'DEU=Artikelnr.';
      Text021@1000000085 : TextConst 'DEU=Service Artikelnr.';
      Text022@1000000084 : TextConst 'DEU=MSRP alt';
      Text023@1000000083 : TextConst 'DEU=MSRP neu';
      Text024@1000000082 : TextConst 'DEU=Differenz';
      Text025@1000000112 : TextConst 'DEU=W„hrung';
      Text026@1000000113 : TextConst 'DEU=Status';
      Text027@1000000114 : TextConst 'DEU=Sheet';
      Text028@1000000115 : TextConst 'DEU=Service Artikelnr. alt';
      Text029@1000000116 : TextConst 'DEU=Ger„te Artikelnr.';
      Text030@1000000145 : TextConst 'DEU=Change %';
      Text100@1000000013 : TextConst 'DEU=CHAMPS Import,ACTS Import,Systemartikel DC und MSRP Import,Schaeffler Systemartikel DC und MSRP Import,CHAMPS alt aktualisieren,ACTS alt aktualisieren,CHAMPS Korrektur,ACTS Korrektur,ACTS Schaeffler (nur ber Classic)';
      startdatum@1000000046 : Date;
      prerelease_date@1000000136 : Date;
      laufzeit@1000000055 : Integer;
      v_art@1000000028 : 'Champs,ACTS';
      PL_W„h@1000000014 : Code[20];
      PL_Bezeichnung@1000000056 : Text[30];
      PL_Kreditor@1000000003 : Code[20];
      PL_LTB@1000000137 : Date;
      nav_msrp@1000000111 : Decimal;
      excel_msrp@1000000032 : Decimal;
      excel_dc@1000000044 : Decimal;
      row_part@1000000061 : Integer;
      cell_part@1000000053 : Text[30];
      cell_msrp@1000000052 : Text[30];
      system_ek_w„hrung@1000000043 : Code[20];
      w„h_text@1000000054 : Text[30];
      EOL@1000000045 : Boolean;
      testlauf@1000000110 : Boolean;
      classic@1000000127 : Boolean;
      replace@1000000142 : Boolean;
      RowCount@1000000051 : Integer;
      TotalRows@1000000058 : Integer;
      TotalRowsPriceBook@1000000106 : Integer;
      TotalRowsEOS@1000000101 : Integer;
      i@1000000059 : Integer;
      Text200@1000000138 : TextConst 'DEU=Es wurde keine Importdatei angegeben.';
      Text201@1000000139 : TextConst 'DEU=Bitte eine Laufzeit fr Artikel %1 in der %2 hinterlegen.';
      Text202@1000000143 : TextConst 'DEU=Sie k”nnen nur in einen Zusatzmodus starten, entweder im Testlauf oder die aktuelle Preisliste ersetzen.';
      Text203@1000000144 : TextConst 'DEU=%1 kann nicht gr”áer sein als %2.';
      Text998@1000000004 : TextConst 'DEU=Es konnte keine Kreditornr. zur angegeben W„hrung ermittelt werden.';
      Text999@1000000048 : TextConst 'DEU=Der W„hrungscode des Kreditors %1 und der in der Excel Liste angebene W„hrungscode weichen voneinander ab.';
      ExcelFileExtensionTok@1000000078 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      SheetName_UploadPriceBook@1000000007 : TextConst 'DEU=Uploadable Flat Price Book';
      CHAMPS_PriceBookName_USD@1000000080 : TextConst 'DEU=CHAMPS_USD_PRICEBOOK';
      CHAMPS_PriceBookName_EUR@1000000089 : TextConst 'DEU=CHAMPS_EUR_PRICEBOOK';
      CHAMPS_EOSName_USD@1000000081 : TextConst 'DEU=EOS Products Support Pricing';
      CHAMPS_EOSName_EUR@1000000090 : TextConst 'DEU=EOS Products Support Pricing';
      ACTS_PriceBookName_USD@1000000087 : TextConst 'DEU=ACTS_USD_PRICEBOOK';
      ACTS_PriceBookName_EUR@1000000092 : TextConst 'DEU=ACTS_EUR_PRICEBOOK';
      ACTS_EOSName_USD@1000000088 : TextConst 'DEU=EOS Products Support Pricing';
      ACTS_EOSName_EUR@1000000091 : TextConst 'DEU=EOS Products Support Pricing';
      durchlauf@1000000107 : Integer;
      ColumnNo_MSRP@1000000097 : Integer;
      ColumnNo_HW_MSRP@1000000134 : Integer;
      ColumnNo_ServiceName@1000000098 : Integer;
      PriceBookErrMsg@1000000118 : TextConst 'DEU=Fehler in Spaltennr. %1. Die Bezeichnung msste %2 lauten.';
      CHAMPS_ColText9x5@1000000119 : TextConst 'DEU=CHAMPS 9X5 Part Number';
      CHAMPS_ColText24x7@1000000120 : TextConst 'DEU=CHAMPS 24X7 Part Number';
      CHAMPS_ColTextAHR@1000000121 : TextConst 'DEU=AHR Part Number';
      ACTS_ColText9x5@1000000122 : TextConst 'DEU=ACTS 9X5 Part Number';
      ACTS_ColText24x7@1000000123 : TextConst 'DEU=ACTS 24X7 Part Number';
      ACTS_ColTextAHR@1000000124 : TextConst 'DEU=AHR Part Number';
      ACTS_ColTextMS9x5@1000000125 : TextConst 'DEU=Managed Spares 9X5XND Part Number';
      ACTS_ColTextMS24x7@1000000126 : TextConst 'DEU=Managed Spares 24X7X4 Part Number';
      DiscountLevel@1000000129 : Text;
      error_level@1000000128 : Integer;
      service_item_counter@1000000130 : Integer;
      service_items_total@1000000140 : Integer;
      step@1000000131 : Integer;
      Doku_Import@1000000132 : TextConst 'DEU=F:\Daten NEU\Gemeinsame Ordner\Preislisten\AudioCodes\Preislisten Importe\Import AudioCodes Preislisten - How to.docx';

    LOCAL PROCEDURE Run_Import_Direct@1000000006();
    BEGIN
      IF DialogFileName = '' THEN ERROR(Text200);

      ServerUploadFile := FileMgt.UploadFileSilent(DialogFileName);

      ge„nderte_eintr„ge := 0;
      obsolete_eintr„ge := 0;
      excel_datens„tze := 0;
      error_level := 0;
      service_item_counter := 0;
      step := 0;

      auswahl := STRMENU(Text100,0);
      IF auswahl = 0 THEN
        EXIT;

      //CHAMPS oder ACTS
      IF (auswahl = 1) OR (auswahl = 2) THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        TempExcelBuffer.OpenBook(ServerUploadFile,'Cover');
        TempExcelBuffer.ReadSheet();

        EVALUATE(PL_W„h,UPPERCASE(GetValueAtCell(9,7)));
        IF STRPOS(PL_W„h,'EUR') <> 0 THEN
          PL_W„h := '';
        EVALUATE(v_art,GetValueAtCell(10,7));

       IF (auswahl = 1) AND (FORMAT(v_art) <> 'Champs') THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR('Falsche Syntax in Liste');
        END;
        IF (auswahl = 2) AND (FORMAT(v_art) <> 'ACTS') THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR('Falsche Syntax in Liste');
        END;

        PL_Version := TOPAS_API.replace_text(GetValueAtCell(8,7),',','.');

        IF GetValueAtCell(13,7) <> '' THEN
          prerelease_date := ConvertDateString(GetValueAtCell(13,7));

        IF GetValueAtCell(14,7) <> '' THEN
          startdatum := ConvertDateString(GetValueAtCell(14,7));

        IF GetValueAtCell(15,7) <> '' THEN
          PL_LTB := ConvertDateString(GetValueAtCell(15,7)) - 1;

        //Datumsangaben auf Plausibilit„t prfen
        IF prerelease_date > startdatum THEN ERROR(Text203,'Prerelease','Effective');
        IF startdatum > PL_LTB THEN ERROR(Text203,'Effective','Last Time Buy');

        //+ Das Sheet wird aufbereitet, damit keine Fehlermeldung erzeugt wird, wenn eine Spalte eine L„nge gr”áer 250 Zeichen aufweist
        IF auswahl = 1 THEN BEGIN
          IF PL_W„h = '' THEN BEGIN
            SheetNamePriceBook := CHAMPS_PriceBookName_EUR;
            SheetNameEOL := CHAMPS_EOSName_EUR;
          END;
          IF PL_W„h = 'USD' THEN BEGIN
            SheetNamePriceBook := CHAMPS_PriceBookName_USD;
            SheetNameEOL := CHAMPS_EOSName_USD;
          END;
        END;
        IF auswahl = 2 THEN BEGIN
          IF PL_W„h = '' THEN BEGIN
            SheetNamePriceBook := ACTS_PriceBookName_EUR;
            SheetNameEOL := ACTS_EOSName_EUR;
          END;
          IF PL_W„h = 'USD' THEN BEGIN
            SheetNamePriceBook := ACTS_PriceBookName_USD;
            SheetNameEOL := ACTS_EOSName_USD;
          END;
        END;

        XlWrkBkReader := XlWrkBkReader.Open(ServerUploadFile);
        XlWrkShtReader := XlWrkBkReader.GetWorksheetByName(SheetNamePriceBook);
        RowCount := XlWrkShtReader.RowCount;
        XlWrkBkReader.Close;

        //+ Das Sheet wird aufbereitet, damit keine Fehlermeldung erzeugt wird, wenn eine Spalte eine L„nge gr”áer 250 Zeichen aufweist
        XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName(SheetNamePriceBook);

        FOR i := 2 TO RowCount DO BEGIN
          XlWrkShtWriter.SetCellValueText(i, 'E', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'G', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'I', '', XlWrkShtWriter.DefaultCellDecorator);
        END;

        XlWrkBkWriter.Close;
        //-

        XlWrkBkReader := XlWrkBkReader.Open(ServerUploadFile);
        XlWrkShtReader := XlWrkBkReader.GetWorksheetByName(SheetNameEOL);
        RowCount := XlWrkShtReader.RowCount;
        XlWrkBkReader.Close;

        //+ Das Sheet wird aufbereitet, damit keine Fehlermeldung erzeugt wird, wenn eine Spalte eine L„nge gr”áer 250 Zeichen aufweist
        XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName(SheetNameEOL);

        FOR i := 2 TO RowCount DO BEGIN
          XlWrkShtWriter.SetCellValueText(i, 'E', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'G', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'I', '', XlWrkShtWriter.DefaultCellDecorator);
        END;

        XlWrkBkWriter.Close;
        //-

        PriceBookNormal.DELETEALL;
        PriceBookNormal.OpenBook(ServerUploadFile,SheetNamePriceBook);
        PriceBookNormal.ReadSheet();
        IF PriceBookNormal.FINDLAST THEN
          EVALUATE(TotalRowsPriceBook,FORMAT(PriceBookNormal.xlRowID));

        //Weitere Prfungen der Preisliste
        IF auswahl = 1 THEN BEGIN
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookNormal,1,10)) <> UPPERCASE(CHAMPS_ColText9x5) THEN ERROR(PriceBookErrMsg,10,CHAMPS_ColText9x5);
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookNormal,1,12)) <> UPPERCASE(CHAMPS_ColText24x7) THEN ERROR(PriceBookErrMsg,12,CHAMPS_ColText24x7);
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookNormal,1,14)) <> UPPERCASE(CHAMPS_ColTextAHR) THEN ERROR(PriceBookErrMsg,14,CHAMPS_ColTextAHR);
        END;
        IF auswahl = 2 THEN BEGIN
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookNormal,1,10)) <> UPPERCASE(ACTS_ColText9x5) THEN ERROR(PriceBookErrMsg,10,ACTS_ColText9x5);
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookNormal,1,12)) <> UPPERCASE(ACTS_ColText24x7) THEN ERROR(PriceBookErrMsg,12,ACTS_ColText24x7);
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookNormal,1,14)) <> UPPERCASE(ACTS_ColTextAHR) THEN ERROR(PriceBookErrMsg,14,ACTS_ColTextAHR);
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookNormal,1,16)) <> UPPERCASE(ACTS_ColTextMS24x7) THEN ERROR(PriceBookErrMsg,16,ACTS_ColTextMS24x7);
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookNormal,1,18)) <> UPPERCASE(ACTS_ColTextMS9x5) THEN ERROR(PriceBookErrMsg,18,ACTS_ColTextMS9x5);
        END;

        PriceBookEOL.DELETEALL;
        PriceBookEOL.OpenBook(ServerUploadFile,SheetNameEOL);
        PriceBookEOL.ReadSheet();
        IF PriceBookEOL.FINDLAST THEN
          EVALUATE(TotalRowsEOS,FORMAT(PriceBookEOL.xlRowID));

        IF auswahl = 1 THEN BEGIN
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookEOL,1,10)) <> UPPERCASE(CHAMPS_ColText9x5) THEN ERROR(PriceBookErrMsg,10,CHAMPS_ColText9x5);
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookEOL,1,12)) <> UPPERCASE(CHAMPS_ColText24x7) THEN ERROR(PriceBookErrMsg,12,CHAMPS_ColText24x7);
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookEOL,1,14)) <> UPPERCASE(CHAMPS_ColTextAHR) THEN ERROR(PriceBookErrMsg,14,CHAMPS_ColTextAHR);
        END;
        IF auswahl = 2 THEN BEGIN
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookEOL,1,10)) <> UPPERCASE(ACTS_ColText9x5) THEN ERROR(PriceBookErrMsg,10,ACTS_ColText9x5);
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookEOL,1,12)) <> UPPERCASE(ACTS_ColText24x7) THEN ERROR(PriceBookErrMsg,12,ACTS_ColText24x7);
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookEOL,1,14)) <> UPPERCASE(ACTS_ColTextAHR) THEN ERROR(PriceBookErrMsg,14,ACTS_ColTextAHR);
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookEOL,1,16)) <> UPPERCASE(ACTS_ColTextMS24x7) THEN ERROR(PriceBookErrMsg,16,ACTS_ColTextMS24x7);
          IF UPPERCASE(GetValueAtCellPriceBook(PriceBookEOL,1,18)) <> UPPERCASE(ACTS_ColTextMS9x5) THEN ERROR(PriceBookErrMsg,18,ACTS_ColTextMS9x5);
        END;

        //********************************************************************************************
        //                         Eigentliches Update der Service Artikel
        //********************************************************************************************

        IF (testlauf = FALSE) AND (replace = FALSE) THEN BEGIN

          Servicepreise.RESET;
          IF auswahl = 1 THEN
            Servicepreise.SETRANGE(Art,Servicepreise.Art::Champs);
          IF auswahl = 2 THEN
            Servicepreise.SETRANGE(Art,Servicepreise.Art::ACTS);
          Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
          Servicepreise.SETRANGE(Status,Servicepreise.Status::vorab);
          Servicepreise.SETRANGE("Update letzte Preisliste",TRUE);
          Servicepreise.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
          IF Servicepreise.FIND('-') THEN
            WITH Servicepreise DO BEGIN
              IF Preisliste <> PL_Version THEN BEGIN
                SETRANGE(Status,Servicepreise.Status::vorab);
                IF FIND('-') THEN
                  DELETEALL;
                {
                SETRANGE(Status,Servicepreise.Status::neu);
                IF FIND('-') THEN BEGIN
                  REPEAT
                    RENAME("Service Artikelnr.","SUP Artikelnr.","Artikelnr. 2",W„hrungscode,Servicepreise.Status::alt);
                    "Last Time Buy" := PL_LTB;
                    MODIFY;
                  UNTIL NEXT = 0;
                END;
                }
              END;
            END;

          {
          //wird durch die neue Routine s.o. berflssig
          IF TotalRowsPriceBook > 999 THEN BEGIN
            IF CONFIRM('Es konnte mehr als 1000 Eintr„ge in der Quelldatei gefunden werden.\' +
                        'Soll der Status Update letzte Preisliste fr alle Artikel zurckgesetzt und neu ' +
                        'bewertet werden?',TRUE) THEN BEGIN
              Servicepreise.RESET;
              IF auswahl = 1 THEN
                Servicepreise.SETRANGE(Art,Servicepreise.Art::Champs);
              IF auswahl = 2 THEN
                Servicepreise.SETRANGE(Art,Servicepreise.Art::ACTS);
              Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
              //Servicepreise.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
              IF Servicepreise.FINDFIRST THEN
                Servicepreise.MODIFYALL("Update letzte Preisliste",FALSE);
            END;
          END;
          }
        END;

        //Excel Protokoll wird initialisiert
        IF (testlauf) OR (replace) THEN
          CreateExcelProtocol;

        TroubleshootingSetup.SETRANGE(Type,TroubleshootingSetup.Type::Item);
        IF auswahl = 1 THEN
          TroubleshootingSetup.SETRANGE("Troubleshooting No.",'CHAMPS');
        IF auswahl = 2 THEN
          TroubleshootingSetup.SETRANGE("Troubleshooting No.",'ACTS');
        //Fr Testzwecke und mehr Performance nachfolgenden Filter aktivieren
        //TroubleshootingSetup.SETRANGE("Troubleshooting No.",'SUPP_9X5');
        IF TroubleshootingSetup.FINDSET THEN BEGIN
          service_item_counter := TroubleshootingSetup.COUNT;
          REPEAT
            ColumnNo_ServiceName := 0;
            ColumnNo_MSRP := 0;
            TotalRows := 0;
            SourceSheet := '';
            step += 1;

            ColumnNo_HW_MSRP := 8;
            TroubleshootingSetupUnter.SETRANGE(Type,TroubleshootingSetup.Type::Item);
            TroubleshootingSetupUnter.SETRANGE("No.",TroubleshootingSetup."No.");
            TroubleshootingSetupUnter.SETFILTER("Troubleshooting No.",'<>%1&<>%2',TroubleshootingSetup."Troubleshooting No.",'PAUSCHALE');
            IF TroubleshootingSetupUnter.FINDFIRST THEN BEGIN
              IF TroubleshootingSetupUnter."Troubleshooting No." = 'SUPP_9X5' THEN BEGIN
                ColumnNo_ServiceName := 10;
                ColumnNo_MSRP := 11;
              END;
              IF TroubleshootingSetupUnter."Troubleshooting No." = 'SUPP_24X7' THEN BEGIN
                ColumnNo_ServiceName := 12;
                ColumnNo_MSRP := 13;
              END;
              IF TroubleshootingSetupUnter."Troubleshooting No." = 'AHR' THEN BEGIN
                ColumnNo_ServiceName := 14;
                ColumnNo_MSRP := 15;
              END;
              IF TroubleshootingSetupUnter."Troubleshooting No." = 'MS_24X7' THEN BEGIN
                ColumnNo_ServiceName := 16;
                ColumnNo_MSRP := 17;
              END;
              IF TroubleshootingSetupUnter."Troubleshooting No." = 'MS_9X5' THEN BEGIN
                ColumnNo_ServiceName := 18;
                ColumnNo_MSRP := 19;
              END;
            END;

            IF (ColumnNo_ServiceName <> 0) AND (ColumnNo_MSRP <> 0) THEN BEGIN

              Window.OPEN(
                Text000 +
                'fr #1#####################\ #2########\' +
                '@3@@@@@@@@@@@@@@@@@@@@@\' +
                'Artikel #4 von #5 Excel Zeilen: #6');
              Window.UPDATE(1,TroubleshootingSetup."No.");
              Window.UPDATE(4,step);
              Window.UPDATE(5,service_item_counter);
              FOR durchlauf := 1 TO 2 DO BEGIN

                CASE durchlauf OF
                  1 : BEGIN
                        PriceBookActual.COPY(PriceBookNormal,TRUE);
                        TotalRows := TotalRowsPriceBook;
                        SourceSheet := 'Normal';
                        Window.UPDATE(2,'Preisliste: ' + SourceSheet);
                      END;
                  2 : BEGIN
                        PriceBookActual.COPY(PriceBookEOL,TRUE);
                        TotalRows := TotalRowsEOS;
                        SourceSheet := 'EOL';
                        Window.UPDATE(2,'Preisliste: ' + SourceSheet);
                      END;
                END;
                Window.UPDATE(6,TotalRows);

                FOR i := 2 TO TotalRows DO BEGIN

                  excel_msrp := 0;
                  nav_msrp := 0;
                  neuer_preis := FALSE;
                  neuer_service := FALSE;

                  Artikelname := UPPERCASE(GetValueAtCellPriceBook(PriceBookActual,i,6));
                  SUPArtikelname := TroubleshootingSetup."No.";
                  Opt_laufzeit.RESET;
                  Opt_laufzeit.SETRANGE("Tabellen ID",50024);
                  Opt_laufzeit.SETRANGE("Feld ID",44);
                  Opt_laufzeit.SETRANGE("Nr.",SUPArtikelname);
                  IF Opt_laufzeit.FINDFIRST THEN
                    EVALUATE(ServiceJahre,COPYSTR(Opt_laufzeit.Code,1,STRPOS(Opt_laufzeit.Code,'M')-1))
                  ELSE
                    ERROR(Text201,Artikelname,Opt_laufzeit.TABLECAPTION);

                  IF STRLEN(GetValueAtCellPriceBook(PriceBookActual,i,ColumnNo_ServiceName)) <= 50 THEN
                    ServiceArtikelname := UPPERCASE(GetValueAtCellPriceBook(PriceBookActual,i,ColumnNo_ServiceName));
                  IF (STRPOS(UPPERCASE(ServiceArtikelname),'CONTACT') <> 0) OR (STRPOS(UPPERCASE(ServiceArtikelname),'PRICE') <> 0)
                  OR (STRPOS(UPPERCASE(ServiceArtikelname),'DETAILS') <> 0)
                  OR (ServiceArtikelname = '0') OR (STRLEN(ServiceArtikelname) <= 2) OR (STRLEN(ServiceArtikelname) > 50) THEN
                    ServiceArtikelname := '';
                  IF (GetValueAtCellPriceBook(PriceBookActual,i,ColumnNo_MSRP) <> '')
                  AND (STRLEN(DELCHR(GetValueAtCellPriceBook(PriceBookActual,i,ColumnNo_MSRP),'=','ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz')) =
                      (STRLEN(GetValueAtCellPriceBook(PriceBookActual,i,ColumnNo_MSRP)))) THEN
                    EVALUATE(excel_msrp,GetValueAtCellPriceBook(PriceBookActual,i,ColumnNo_MSRP));

                  //Korrektur da EOL Preislisten noch den falschen Umrechnungsfaktor von 1,15 haben
                  //IF (durchlauf = 2) AND ("PL_W„h" = '') THEN
                  //  excel_msrp := (excel_msrp * 1.15) / 1.17;

                  //Ausnahmen fr PSEUDO bzw. Pauschalartikel, hier sind die MSRPs die Servicepreis MSRPs und nur fr ACTS
                  IF (auswahl = 2) AND ((TroubleshootingSetupUnter."Troubleshooting No." = 'SUPP_9X5') OR
                  (TroubleshootingSetupUnter."Troubleshooting No." = 'SUPP_24X7')) THEN BEGIN
                    Artikel.RESET;
                    Artikel.SETRANGE("No. 2",Artikelname);
                    IF Artikel.FINDFIRST THEN BEGIN
                      TroubleshootingSetupTest.RESET;
                      TroubleshootingSetupTest.SETRANGE(Type,TroubleshootingSetupTest.Type::Item);
                      TroubleshootingSetupTest.SETRANGE("No.",Artikel."No.");
                      TroubleshootingSetupTest.SETRANGE("Troubleshooting No.",'PAUSCHALE');
                      TroubleshootingSetupTest.SETRANGE(TroubleshootingSetupTest."Troubleshooting No.",TroubleshootingSetupUnter."Troubleshooting No.");
                      IF TroubleshootingSetupTest.FINDFIRST THEN BEGIN
                        IF (GetValueAtCellPriceBook(PriceBookActual,i,ColumnNo_HW_MSRP) <> '')
                        AND (STRLEN(DELCHR(GetValueAtCellPriceBook(PriceBookActual,i,ColumnNo_HW_MSRP),'=','ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz')) =
                            (STRLEN(GetValueAtCellPriceBook(PriceBookActual,i,ColumnNo_HW_MSRP)))) THEN BEGIN
                          EVALUATE(excel_msrp,GetValueAtCellPriceBook(PriceBookActual,i,ColumnNo_HW_MSRP));
                          ServiceArtikelname := Artikelname;
                        END;
                      END;
                    END;
                  END;

                  IF (Artikelname <> '') AND (ServiceArtikelname <> '') THEN BEGIN
                    //Kennzeichnung der alten Pos., dass die Zuordnung obsolete geworden ist, da Service Artikelnr. ge„ndert wurde
                    obsolete_items := '';
                    Artikelnr_obsolete.RESET;
                    IF auswahl = 1 THEN
                      Artikelnr_obsolete.SETRANGE(Art,Artikelnr_obsolete.Art::Champs);
                    IF auswahl = 2 THEN
                      Artikelnr_obsolete.SETRANGE(Art,Artikelnr_obsolete.Art::ACTS);
                    Artikelnr_obsolete.SETRANGE("Artikelnr. 2",Artikelname);
                    Artikelnr_obsolete.SETRANGE("SUP Artikelnr.",SUPArtikelname);
                    Artikelnr_obsolete.SETRANGE(W„hrungscode,PL_W„h);
                    Artikelnr_obsolete.SETRANGE("Zuordnung obsolete",FALSE);
                    Artikelnr_obsolete.SETRANGE(Status,Artikelnr_obsolete.Status::neu);
                    IF Artikelnr_obsolete.FIND('-') THEN
                      REPEAT
                        IF Artikelnr_obsolete."Service Artikelnr." <> ServiceArtikelname THEN BEGIN
                          IF replace THEN BEGIN
                            Artikelnr_obsolete.DELETE;
                          END;
                          {
                          //obsolete Kennzeichnung wird eigentlich nicht mehr ben”tigt durch die verschiedenen Preislisten Optionen
                          IF testlauf = FALSE THEN BEGIN
                            Artikelnr_obsolete."Zuordnung obsolete" := TRUE;
                            Artikelnr_obsolete.MODIFY(TRUE);
                          END;
                          }
                          obsolete_eintr„ge += 1;
                          obsolete_items += Artikelnr_obsolete."Service Artikelnr." + ';';
                        END;
                      UNTIL Artikelnr_obsolete.NEXT = 0;

                    Servicepreise.RESET;
                    IF auswahl = 1 THEN
                      Servicepreise.SETRANGE(Art,Servicepreise.Art::Champs);
                    IF auswahl = 2 THEN
                      Servicepreise.SETRANGE(Art,Servicepreise.Art::ACTS);
                    Servicepreise.SETRANGE("Artikelnr. 2",Artikelname);
                    IF (testlauf = FALSE) OR (replace) THEN
                      Servicepreise.SETRANGE("Service Artikelnr.",ServiceArtikelname)
                    ELSE
                      Servicepreise.SETRANGE("Zuordnung obsolete",FALSE);
                    Servicepreise.SETRANGE("SUP Artikelnr.",SUPArtikelname);
                    Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
                    IF replace = FALSE THEN
                      Servicepreise.SETRANGE("Update letzte Preisliste",TRUE);
                    IF (testlauf) OR (replace) THEN
                      Servicepreise.SETRANGE(Status,Servicepreise.Status::neu)
                    ELSE
                      Servicepreise.SETRANGE(Status,Servicepreise.Status::vorab);
                    IF Servicepreise.FINDFIRST THEN BEGIN
                      IF (Servicepreise.MSRP <> ROUND(excel_msrp,0.01)) AND (excel_msrp <> 0) THEN BEGIN
                        ge„nderte_eintr„ge += 1;
                        nav_msrp := Servicepreise.MSRP;
                        IF (testlauf = FALSE) OR (replace)THEN BEGIN
                          Servicepreise.MSRP := ROUND(excel_msrp,0.01);
                          Servicepreise.MODIFY(TRUE);
                        END;
                        neuer_preis := TRUE;
                      END;
                      Servicepreise."Update letzte Preisliste" := TRUE;
                      Servicepreise.Preisliste := PL_Version;
                      IF Servicepreise."Zuordnung obsolete" = TRUE THEN BEGIN
                        Servicepreise."Zuordnung obsolete" := FALSE;
                        obsolete_korrigiert += 1;
                      END;
                      IF (testlauf = FALSE) OR (replace) THEN BEGIN
                        Servicepreise.MODIFY(TRUE);
                      END;
                    END ELSE BEGIN
                      IF (testlauf = FALSE) OR (replace) THEN BEGIN
                        Servicepreise.INIT;
                        Servicepreise."Service Artikelnr." := ServiceArtikelname;
                        Servicepreise."SUP Artikelnr." := SUPArtikelname;
                        Artikel.RESET;
                        Artikel.SETRANGE("No. 2",Artikelname);
                        IF Artikel.FINDFIRST THEN BEGIN
                          Servicepreise.VALIDATE("Artikelnr.",Artikel."No.");
                        END ELSE BEGIN
                          Servicepreise."Artikelnr." := '';
                          Servicepreise."Artikelnr. 2" := Artikelname;
                        END;
                        Servicepreise.MSRP := ROUND(excel_msrp,0.01);
                        Servicepreise."Update letzte Preisliste" := TRUE;
                        Servicepreise.Preisliste := PL_Version;
                        Servicepreise.W„hrungscode := PL_W„h;
                        IF replace THEN
                          Servicepreise.Status := Servicepreise.Status::neu
                        ELSE
                          Servicepreise.Status := Servicepreise.Status::vorab;
                        EVALUATE(Servicepreise."Laufzeit in Jahren",ServiceJahre);
                        Servicepreise."Laufzeit in Jahren" := Servicepreise."Laufzeit in Jahren" / 12;
                        IF auswahl = 1 THEN
                          Servicepreise.Art := Servicepreise.Art::Champs;
                        IF auswahl = 2 THEN
                          Servicepreise.Art := Servicepreise.Art::ACTS;
                        Servicepreise.INSERT(TRUE);
                      END;
                      ge„nderte_eintr„ge += 1;
                      neuer_service := TRUE;
                    END;
                    //Excel Protokoll
                    IF ((neuer_preis) OR (neuer_service) OR (obsolete_items <> '')) AND ((testlauf) OR (replace)) THEN BEGIN
                      ColumnNo := 1;
                      EnterCell(RowNo,ColumnNo,Artikelname,'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                      ColumnNo := ColumnNo + 1;
                      EnterCell(RowNo,ColumnNo,SUPArtikelname,'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                      ColumnNo := ColumnNo + 1;
                      EnterCell(RowNo,ColumnNo,ServiceArtikelname,'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                      ColumnNo := ColumnNo + 1;
                      EnterCell(RowNo,ColumnNo,FORMAT(nav_msrp),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBufferExport."Cell Type"::Number);
                      ColumnNo := ColumnNo + 1;
                      EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBufferExport."Cell Type"::Number);
                      ColumnNo := ColumnNo + 1;
                      IF neuer_preis THEN
                        EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - nav_msrp),'',FALSE,FALSE,FALSE,'0.00[Red][>0];-0.00[Color10]',TempExcelBufferExport."Cell Type"::Number);
                      ColumnNo := ColumnNo + 1;
                      EnterCell(RowNo,ColumnNo,PL_W„h,'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                      ColumnNo := ColumnNo + 1;
                      IF neuer_preis THEN
                        EnterCell(RowNo,ColumnNo,'Preis„nderung','',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text)
                      ELSE
                        IF obsolete_items <> '' THEN
                          EnterCell(RowNo,ColumnNo,'Service„nderung','',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                      IF (neuer_service) AND (obsolete_items = '') THEN
                        EnterCell(RowNo,ColumnNo,'NEU','',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                      ColumnNo := ColumnNo + 1;
                      EnterCell(RowNo,ColumnNo,SourceSheet,'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                      ColumnNo := ColumnNo + 1;
                      IF obsolete_items <> '' THEN
                        EnterCell(RowNo,ColumnNo,obsolete_items,'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                      RowNo := RowNo + 1;
                    END;
                  END;
                  Window.UPDATE(3,ROUND(i / TotalRows * 10000,1));
                END;
              END;
              Window.CLOSE;
            END;
          UNTIL TroubleshootingSetup.NEXT = 0;
        END;

        TotalRows := TotalRowsPriceBook + TotalRowsEOS;
        //XlWrkBkWriter.Close;
        //DownloadFileName := FileMgt.DownloadTempFile(ServerUploadFile);
        //FileMgt.MoveAndRenameClientFile(DownloadFileName,DialogFileName,FORMAT(CREATEGUID));
        FileMgt.DeleteServerFile(ServerUploadFile);
        //FileMgt.DeleteClientFile(DownloadFileName);
        CLEAR(XlWrkShtReader);
        CLEAR(XlWrkBkWriter);

        IF (testlauf) OR (replace) THEN
          FinishExcelProtocol;

      END;


      //Systeme MSRP
      IF auswahl = 3 THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        TempExcelBuffer.OpenBook(ServerUploadFile,'Cover');
        TempExcelBuffer.ReadSheet();

        PL_Version_Systeme := TOPAS_API.replace_text(GetValueAtCell(8,7),',','.');
        EVALUATE(PL_W„h,UPPERCASE(GetValueAtCell(9,7)));
        IF STRPOS(PL_W„h,'EUR') <> 0 THEN
          PL_W„h := '';
        EVALUATE(v_art,GetValueAtCell(10,7));

        IF GetValueAtCell(13,7) <> '' THEN
          prerelease_date := ConvertDateString(GetValueAtCell(13,7));

        IF GetValueAtCell(14,7) <> '' THEN
          startdatum := ConvertDateString(GetValueAtCell(14,7));

        IF GetValueAtCell(15,7) <> '' THEN
          PL_LTB := ConvertDateString(GetValueAtCell(15,7)) - 1;

        //Datumsangaben auf Plausibilit„t prfen
        IF prerelease_date > startdatum THEN ERROR(Text203,'Prerelease','Effective');
        IF startdatum > PL_LTB THEN ERROR(Text203,'Effective','Last Time Buy');

        //Fhrende Einkaufsw„hrung
        system_ek_w„hrung := '';

        PL_Kreditor := '';
        IF PL_W„h = 'USD' THEN
          PL_Kreditor := Kred_USD;
        IF PL_W„h = '' THEN
          PL_Kreditor := Kred_EURO;
        IF PL_Kreditor = '' THEN
          ERROR(Text998);

        XlWrkBkReader := XlWrkBkReader.Open(ServerUploadFile);
        XlWrkShtReader := XlWrkBkReader.GetWorksheetByName(SheetName_UploadPriceBook);
        RowCount := XlWrkShtReader.RowCount;
        XlWrkBkReader.Close;

        //+ Das Sheet wird aufbereitet, damit keine Fehlermeldung erzeugt wird, wenn eine Spalte eine L„nge gr”áer 250 Zeichen aufweist
        XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName(SheetName_UploadPriceBook);

        FOR i := 2 TO RowCount DO BEGIN
          XlWrkShtWriter.SetCellValueText(i, 'F', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'H', '', XlWrkShtWriter.DefaultCellDecorator);
        END;

        XlWrkBkWriter.Close;
        //-

        TempExcelBuffer.DELETEALL;
        TempExcelBuffer.OpenBook(ServerUploadFile,SheetName_UploadPriceBook);
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        IF STRPOS(UPPERCASE(GetValueAtCell(1,4)),'CPN') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,4,'CPN');
        END;
        IF STRPOS(UPPERCASE(GetValueAtCell(1,5)),'DISCOUNT') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,5,'Discount');
        END;
        IF STRPOS(UPPERCASE(GetValueAtCell(1,7)),'MSRP') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,7,'MSRP');
        END;

        //********************************************************************************************
        //                         Eigentliches Update der System Artikel
        //********************************************************************************************

        IF testlauf = FALSE THEN BEGIN
          IF TotalRows > 499 THEN BEGIN
            IF CONFIRM('Es konnte mehr als 500 Eintr„ge in der Quelldatei gefunden werden.\' +
                        'Soll der Status Update letzte Preisliste fr alle Artikel zurckgesetzt und neu ' +
                        'bewertet werden?',TRUE) THEN BEGIN
              Artikel.RESET;
              Artikel.SETRANGE("Special Equipment Code",''); //keine Schaeffler Artikel
              Artikel.SETRANGE("Manufacturer Code",'59');
              IF Artikel.FIND('-') THEN
                Artikel.MODIFYALL(Artikel."Update letzte Preisliste",FALSE);
            END;
          END;
          //Umstellung der Preislisten Information in der Optionstabelle
          IF replace = FALSE THEN BEGIN
            PreislistenStatus.RESET;
            PreislistenStatus.SETRANGE("Tabellen ID",36);
            PreislistenStatus.SETRANGE("Feld ID",50351);
            PreislistenStatus.SETRANGE(Code,'PREISLISTE');
            PreislistenStatus.SETRANGE("Nr.",PL_Version_Systeme);
            PreislistenStatus.SETRANGE("Lfd.-Nr.",0); //vorab Preisliste
            IF NOT PreislistenStatus.FINDFIRST THEN BEGIN
              PreislistenStatus.INIT;
              PreislistenStatus."Tabellen ID" := 36;
              PreislistenStatus."Feld ID" := 50351;
              PreislistenStatus.Code := 'PREISLISTE';
              PreislistenStatus."Lfd.-Nr." := 0;
              PreislistenStatus.Beschreibung := 'AudioCodes Preisliste';
              PreislistenStatus.Feldzuordnung := 'Preisliste';
              PreislistenStatus."Nr." := PL_Version_Systeme;
              PreislistenStatus.Startdatum := startdatum;
              PreislistenStatus.Prerelease := prerelease_date;
              PreislistenStatus.INSERT;
            END;
          END ELSE BEGIN
            PreislistenStatus.RESET;
            PreislistenStatus.SETRANGE("Tabellen ID",36);
            PreislistenStatus.SETRANGE("Feld ID",50351);
            PreislistenStatus.SETRANGE(Code,'PREISLISTE');
            PreislistenStatus.SETRANGE("Lfd.-Nr.",1); //neue Preisliste
            IF PreislistenStatus.FINDSET(TRUE,TRUE) THEN BEGIN
              PreislistenStatus.RENAME(PreislistenStatus."Tabellen ID",PreislistenStatus."Feld ID",PreislistenStatus.Code,PL_Version_Systeme);
            END;
          END;
        END;



        //Excel Protokoll wird initialisiert
        CreateExcelProtocol;

        FOR i := 2 TO TotalRows DO BEGIN

          excel_dc := 0;
          excel_msrp := 0;
          nav_msrp := 0;
          EOL := FALSE;
          neuer_preis := FALSE;

          Artikelname := UPPERCASE(GetValueAtCell(i,4));
          IF (STRLEN(DELCHR(GetValueAtCell(i,7),'=','ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz')) <> (STRLEN(GetValueAtCell(i,7)))) THEN
            Artikelname := '';
          IF (Artikelname = '') OR (STRLEN(Artikelname) > 40) THEN BEGIN
          END ELSE BEGIN
            DiscountLevel := UPPERCASE(GetValueAtCell(i,5));
            IF GetValueAtCell(i,7) <> 'EOL' THEN BEGIN
              IF GetValueAtCell(i,7) <> '' THEN
                EVALUATE(excel_msrp,GetValueAtCell(i,7));
              excel_msrp := ROUND(excel_msrp,0.01);
              excel_dc   := ROUND(excel_msrp * (1-GetDiscountLevel(DiscountLevel)),0.01);
            END ELSE
              EOL := TRUE;

            //Ausnahme EMS/UPG/TO-ACSRVR
            CASE Artikelname OF
              'EMS/UPG/TO-ACSRVR' :
              BEGIN
                excel_dc := excel_msrp;
                excel_msrp := 0;
              END;
            END;

            Kreditor.GET(PL_Kreditor);
            IF PL_W„h <> Kreditor."Currency Code" THEN BEGIN
              ERROR(Text999,PL_Kreditor);
            END;

            Artikel.RESET;
            Artikel.SETRANGE("No. 2",Artikelname);
            IF Artikel.FINDFIRST THEN BEGIN

              //*********************************************************************************************
              //                                    EK-Preise updaten
              //*********************************************************************************************

              //Ausnahmen fr PSEUDO bzw. Pauschalartikel, diese nicht im EK und VK aktualisieren
              TroubleshootingSetup.SETRANGE(Type,TroubleshootingSetup.Type::Item);
              TroubleshootingSetup.SETRANGE("No.",Artikel."No.");
              TroubleshootingSetup.SETRANGE("Troubleshooting No.",'PAUSCHALE');
              IF TroubleshootingSetup.FINDFIRST THEN BEGIN
                excel_dc := 0;
                excel_msrp := 0;
              END;

              IF (testlauf = FALSE) AND (replace = FALSE) THEN BEGIN
                einkaufspreis.RESET;
                einkaufspreis.SETRANGE("Item No.",Artikel."No.");
                einkaufspreis.SETRANGE("Vendor No.",PL_Kreditor);
                einkaufspreis.SETRANGE("Currency Code",PL_W„h);
                einkaufspreis.SETRANGE("Ending Date",0D);
                einkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
                IF einkaufspreis.FINDFIRST THEN BEGIN
                  einkaufspreis."Ending Date" := PL_LTB;
                  einkaufspreis.MODIFY(TRUE);
                END;
              END;

              IF (excel_dc <> 0) THEN BEGIN
                einkaufspreis.RESET;
                einkaufspreis.SETRANGE("Item No.",Artikel."No.");
                einkaufspreis.SETRANGE("Vendor No.",PL_Kreditor);
                einkaufspreis.SETRANGE("Currency Code",PL_W„h);
                IF replace THEN
                einkaufspreis.SETRANGE("Starting Date",prerelease_date)
                ELSE
                  einkaufspreis.SETRANGE("Starting Date",startdatum);
                IF NOT einkaufspreis.FINDFIRST THEN BEGIN
                  IF testlauf = FALSE THEN BEGIN
                    einkaufspreis.INIT;
                    einkaufspreis."Item No." := Artikel."No.";
                    einkaufspreis."Vendor No." := PL_Kreditor;
                    einkaufspreis."Starting Date" := startdatum;
                    einkaufspreis."Currency Code" := PL_W„h;
                    einkaufspreis."Unit of Measure Code" := 'STšCK';
                    einkaufspreis."Direct Unit Cost" := excel_dc;
                    einkaufspreis.INSERT(TRUE);
                  END;
                  ge„nderte_eintr„ge += 1;
                END ELSE BEGIN
                  //Falls der 1. Lauf noch inkorrekte DCs hatte, z.B. bei einigen Artikeln nun 80% anstatt 60% vom MSRP
                    IF einkaufspreis."Direct Unit Cost" <> excel_dc THEN BEGIN
                      IF testlauf = FALSE THEN BEGIN
                        einkaufspreis."Direct Unit Cost" := excel_dc;
                        einkaufspreis.MODIFY;
                      END;
                      ge„nderte_eintr„ge += 1;
                    END;
                END;
              END;

              IF testlauf = FALSE THEN BEGIN
                Artikel."Update letzte Preisliste" := TRUE;
                Artikel.MODIFY(TRUE);
              END;

              //*********************************************************************************************
              //                                    VK-Preise updaten
              //*********************************************************************************************

              IF (testlauf = FALSE) AND (replace = FALSE) THEN BEGIN
                verkaufspreis.RESET;
                verkaufspreis.SETRANGE("Sales Type",verkaufspreis."Sales Type"::"All Customers");
                verkaufspreis.SETRANGE("Item No.",Artikel."No.");
                verkaufspreis.SETRANGE("Currency Code",PL_W„h);
                verkaufspreis.SETRANGE("Ending Date",0D);
                verkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
                IF verkaufspreis.FINDFIRST THEN BEGIN
                  verkaufspreis."Ending Date" := PL_LTB;
                  verkaufspreis.MODIFY(TRUE);
                END;
              END;

              IF excel_msrp <> 0 THEN BEGIN
                 verkaufspreis.RESET;
                verkaufspreis.SETRANGE("Sales Type",verkaufspreis."Sales Type"::"All Customers");
                verkaufspreis.SETRANGE("Item No.",Artikel."No.");
                verkaufspreis.SETRANGE("Currency Code",PL_W„h);
                //verkaufspreis.SETFILTER("Starting Date",'%1',CALCDATE('<-3M>',startdatum));
                IF verkaufspreis.FINDLAST THEN
                  nav_msrp := verkaufspreis."Unit Price";

                verkaufspreis.RESET;
                verkaufspreis.SETRANGE("Sales Type",verkaufspreis."Sales Type"::"All Customers");
                verkaufspreis.SETRANGE("Item No.",Artikel."No.");
                verkaufspreis.SETRANGE("Currency Code",PL_W„h);
                IF replace THEN
                  verkaufspreis.SETRANGE("Starting Date",prerelease_date)
                ELSE
                  verkaufspreis.SETRANGE("Starting Date",startdatum);
                IF NOT verkaufspreis.FINDFIRST THEN BEGIN
                  IF testlauf = FALSE THEN BEGIN
                    verkaufspreis.INIT;
                    verkaufspreis."Sales Type" := verkaufspreis."Sales Type"::"All Customers";
                    verkaufspreis."Item No.":= Artikel."No.";
                    verkaufspreis."Starting Date" := startdatum;
                    verkaufspreis."Currency Code" := PL_W„h;
                    verkaufspreis."Unit of Measure Code" := 'STšCK';
                    verkaufspreis."Unit Price" := excel_msrp;
                    verkaufspreis.INSERT(TRUE);
                  END;
                END ELSE BEGIN
                  IF testlauf = FALSE THEN BEGIN
                    IF verkaufspreis."Unit Price" <> excel_msrp THEN BEGIN
                      verkaufspreis."Unit Price" := excel_msrp;
                      verkaufspreis.MODIFY;
                    END;
                  END;
                END;
                IF (nav_msrp <> 0) AND (nav_msrp <> excel_msrp) THEN
                  neuer_preis := TRUE;
              END;

              IF testlauf = FALSE THEN BEGIN
                IF (STRPOS(Artikel.Bezeichnung2_lang,'Nicht in der Preisliste') <> 0)
                OR (STRPOS(Artikel.Bezeichnung2_lang,'Stand Preisliste') <> 0)
                OR (Artikel.Bezeichnung2_lang = '') THEN BEGIN
                  Artikel.Bezeichnung2_lang := 'Stand Preisliste: ' + PL_Version_Systeme;
                  Artikel.MODIFY(TRUE);
                END;

                IF EOL THEN
                  IF STRPOS(Artikel.Preisinfo,'EOL') = 0 THEN
                    Artikel.Preisinfo := Artikel.Preisinfo + ' EOL - PL ' + PL_Version_Systeme;
              END;

              //Excel Protokoll
              IF (neuer_preis) THEN BEGIN
                ColumnNo := 1;
                EnterCell(RowNo,ColumnNo,Artikelname,'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                ColumnNo := ColumnNo + 1;
                EnterCell(RowNo,ColumnNo,FORMAT(nav_msrp),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBufferExport."Cell Type"::Number);
                ColumnNo := ColumnNo + 1;
                EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBufferExport."Cell Type"::Number);
                ColumnNo := ColumnNo + 1;
                EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - nav_msrp),'',FALSE,FALSE,FALSE,'0.00[Red][>0];-0.00[Color10]',TempExcelBufferExport."Cell Type"::Number);
                ColumnNo := ColumnNo + 1;
                EnterCell(RowNo,ColumnNo,PL_W„h,'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                ColumnNo := ColumnNo + 1;
                IF (neuer_preis) AND (nav_msrp > excel_msrp) THEN
                  EnterCell(RowNo,ColumnNo,'Gnstiger','',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                IF (neuer_preis) AND (nav_msrp < excel_msrp) THEN
                  EnterCell(RowNo,ColumnNo,'Teurer','',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                RowNo := RowNo + 1;
              END;
            END;

          END;

        END;

        FileMgt.DeleteServerFile(ServerUploadFile);

        IF testlauf = FALSE THEN BEGIN
          Artikel.RESET;
          Artikel.SETRANGE("Manufacturer Code",'59');
          Artikel.SETRANGE("Update letzte Preisliste",FALSE);
          Artikel.SETFILTER(Bezeichnung2_lang,'%1|%2|%3','','*' + 'Nicht in der Preisliste' + '*','*' + 'Stand Preisliste' + '*');
          IF Artikel.FINDFIRST THEN
            Artikel.MODIFYALL(Bezeichnung2_lang,'Nicht in der Preisliste ' + PL_Version_Systeme + ' vorhanden.');
        END;

        FinishExcelProtocol;

      END;

      //Systeme MSRP Schaeffler
      IF auswahl = 4 THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        CLEAR(TempExcelBuffer);
        TempExcelBuffer.OpenBook(ServerUploadFile,'Einspielen');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        EVALUATE(PL_W„h,UPPERCASE(GetValueAtCell(2,5)));

        PL_Kreditor := Kred_EURO;
        IF PL_Kreditor = '' THEN
          ERROR(Text998);

        IF UPPERCASE(GetValueAtCell(1,3)) <> 'MSRP' THEN BEGIN
          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_MSRP + ' muss MSRP sein.');
        END;
        IF UPPERCASE(GetValueAtCell(1,4)) <> 'DC' THEN BEGIN
          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_DC_Systeme + ' muss DC sein.');
        END;

        //********************************************************************************************
        //                         Eigentliches Update der System Artikel
        //********************************************************************************************

        FOR i := 2 TO TotalRows DO BEGIN

          excel_dc := 0;
          excel_msrp := 0;
          EOL := FALSE;

          Artikelname := UPPERCASE(GetValueAtCell(i,1));
          IF UPPERCASE(GetValueAtCell(i,3)) <> 'EOS' THEN BEGIN
            IF GetValueAtCell(i,4) <> '' THEN
              EVALUATE(excel_dc,GetValueAtCell(i,4));
            excel_dc := ROUND(excel_dc,0.01);
            IF GetValueAtCell(i,3) <> '' THEN
              EVALUATE(excel_msrp,GetValueAtCell(i,3));
            excel_msrp := ROUND(excel_msrp,0.01);
          END ELSE
            EOL := TRUE;

          PL_W„h := UPPERCASE(GetValueAtCell(i,5));
          IF GetValueAtCell(i,6) <> '' THEN
            EVALUATE(startdatum,GetValueAtCell(i,6));
          IF Artikelname <> '' THEN
            PL_Version_Systeme := TOPAS_API.replace_text(GetValueAtCell(i,7),',','.');

          IF (Artikelname = '') OR (STRLEN(Artikelname) > 40) THEN BEGIN
          END ELSE BEGIN
            Kreditor.GET(PL_Kreditor);
            IF PL_W„h <> Kreditor."Currency Code" THEN BEGIN
              ERROR(Text999,PL_Kreditor);
            END;

            Artikel.RESET;
            Artikel.SETRANGE("No. 2",Artikelname);
            IF Artikel.FINDFIRST THEN BEGIN

              //*********************************************************************************************
              //                                    EK-Preise updaten
              //*********************************************************************************************

              IF PL_W„h = '' THEN BEGIN
                einkaufspreis.RESET;
                einkaufspreis.SETRANGE("Item No.",Artikel."No.");
                einkaufspreis.SETRANGE("Vendor No.",PL_Kreditor);
                einkaufspreis.SETRANGE("Currency Code",PL_W„h);
                einkaufspreis.SETRANGE("Ending Date",0D);
                einkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
                IF einkaufspreis.FINDFIRST THEN BEGIN
                  einkaufspreis."Ending Date" := startdatum - 1;
                  einkaufspreis.MODIFY(TRUE);
                END;

                IF (excel_dc <> 0) THEN BEGIN
                  einkaufspreis.RESET;
                  einkaufspreis.SETRANGE("Item No.",Artikel."No.");
                  einkaufspreis.SETRANGE("Vendor No.",PL_Kreditor);
                  einkaufspreis.SETRANGE("Currency Code",PL_W„h);
                  einkaufspreis.SETRANGE("Starting Date",startdatum);
                  IF NOT einkaufspreis.FINDFIRST THEN BEGIN
                    einkaufspreis.INIT;
                    einkaufspreis."Item No." := Artikel."No.";
                    einkaufspreis."Vendor No." := PL_Kreditor;
                    einkaufspreis."Starting Date" := startdatum;
                    einkaufspreis."Currency Code" := PL_W„h;
                    einkaufspreis."Unit of Measure Code" := 'STšCK';
                    einkaufspreis."Direct Unit Cost" := excel_dc;
                    einkaufspreis.INSERT(TRUE);
                    ge„nderte_eintr„ge += 1;
                  END ELSE BEGIN
                    //Falls der 1. Lauf noch inkorrekte DCs hatte, z.B. bei einigen Artikeln nun 80% anstatt 60% vom MSRP
                    IF einkaufspreis."Direct Unit Cost" <> excel_dc THEN BEGIN
                      einkaufspreis."Direct Unit Cost" := excel_dc;
                      einkaufspreis.MODIFY;
                      ge„nderte_eintr„ge += 1;
                    END;
                  END;

                END;

                Artikel."Update letzte Preisliste" := TRUE;
                Artikel.MODIFY(TRUE);

              END;

              //*********************************************************************************************
              //                                    VK-Preise updaten
              //*********************************************************************************************

              verkaufspreis.RESET;
              verkaufspreis.SETRANGE("Sales Type",verkaufspreis."Sales Type"::"All Customers");
              verkaufspreis.SETRANGE("Item No.",Artikel."No.");
              verkaufspreis.SETRANGE("Currency Code",PL_W„h);
              verkaufspreis.SETRANGE("Ending Date",0D);
              verkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
              IF verkaufspreis.FINDFIRST THEN BEGIN
                verkaufspreis."Ending Date" := startdatum - 1;
                verkaufspreis.MODIFY(TRUE);
              END;

              IF excel_msrp <> 0 THEN BEGIN
                verkaufspreis.RESET;
                verkaufspreis.SETRANGE("Sales Type",verkaufspreis."Sales Type"::"All Customers");
                verkaufspreis.SETRANGE("Item No.",Artikel."No.");
                verkaufspreis.SETRANGE("Currency Code",PL_W„h);
                verkaufspreis.SETRANGE("Starting Date",startdatum);
                IF NOT verkaufspreis.FINDFIRST THEN BEGIN
                  verkaufspreis.INIT;
                  verkaufspreis."Sales Type" := verkaufspreis."Sales Type"::"All Customers";
                  verkaufspreis."Item No.":= Artikel."No.";
                  verkaufspreis."Starting Date" := startdatum;
                  verkaufspreis."Currency Code" := PL_W„h;
                  verkaufspreis."Unit of Measure Code" := 'STšCK';
                  verkaufspreis."Unit Price" := excel_msrp;
                  verkaufspreis.INSERT(TRUE);
                END ELSE BEGIN
                  //Falls sich die MSRPs doch ge„ndert haben sollten
                  IF verkaufspreis."Unit Price" <> excel_msrp THEN BEGIN
                    verkaufspreis."Unit Price" := excel_msrp;
                    verkaufspreis.MODIFY;
                  END;
                END;
              END;

              IF (STRPOS(Artikel.Bezeichnung2_lang,'Nicht in der Preisliste') <> 0)
              OR (STRPOS(Artikel.Bezeichnung2_lang,'Stand Preisliste') <> 0)
              OR (Artikel.Bezeichnung2_lang = '') THEN BEGIN
                Artikel.Bezeichnung2_lang := 'Stand Preisliste: ' + PL_Version_Systeme;
                Artikel.MODIFY(TRUE);
              END;

              IF EOL THEN
                IF STRPOS(Artikel.Preisinfo,'EOL') = 0 THEN
                  Artikel.Preisinfo := Artikel.Preisinfo + ' EOL - PL ' + PL_Version_Systeme;
            END;

          END;

        END;

        FileMgt.DeleteServerFile(ServerUploadFile);

        { // Nach Rckstellung auf 4.7.04 von 4.8.11.1 gibt es hier Probleme, da er auch alle anderen Artikel anfassen wrde
        Artikel.RESET;
        Artikel.SETRANGE("Manufacturer Code",'59');
        Artikel.SETRANGE("Update letzte Preisliste",FALSE);
        Artikel.SETFILTER(Bezeichnung2_lang,'%1|%2|%3','','*' + 'Nicht in der Preisliste' + '*','*' + 'Stand Preisliste' + '*');
        IF Artikel.FINDFIRST THEN
          Artikel.MODIFYALL(Bezeichnung2_lang,'Nicht in der Preisliste ' + PL_Version_Systeme + ' vorhanden.');
        }

      END;

      //CHAMPS Servicepreise einspielen fr Artikel, die nicht mehr in der Preisliste sind
      IF auswahl = 5 THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        CLEAR(TempExcelBuffer);
        TempExcelBuffer.OpenBook(ServerUploadFile,'Cover');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        EVALUATE(PL_Version,'-old_' + CONVERTSTR(FORMAT(GetValueAtCell(8,7)),'.','_'));
        IF UPPERCASE(GetValueAtCell(10,7)) <> 'CHAMPS' THEN BEGIN
          ERROR('Dies ist keine AudioCodes CHAMPS Preisliste.');
        END;
        IF (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EURO') OR (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EUR') THEN
          PL_W„h := ''
        ELSE
          PL_W„h := UPPERCASE(GetValueAtCell(9,7));

        PL_Kreditor := '';
        IF PL_W„h = 'USD' THEN
          PL_Kreditor := Kred_USD;
        IF PL_W„h = '' THEN
          PL_Kreditor := Kred_EURO;
        IF PL_Kreditor = '' THEN
          ERROR(Text998);

        //+ Das Sheet wird aufbereitet, damit keine Fehlermeldung erzeugt wird, wenn eine Spalte eine L„nge gr”áer 250 Zeichen aufweist
        XlWrkBkReader := XlWrkBkReader.Open(ServerUploadFile);
        XlWrkShtReader := XlWrkBkReader.GetWorksheetByName(SheetName_UploadPriceBook);
        RowCount := XlWrkShtReader.RowCount;
        XlWrkBkReader.Close;

        XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName(SheetName_UploadPriceBook);

        FOR i := 1 TO RowCount DO BEGIN
          XlWrkShtWriter.SetCellValueText(i, 'F', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'H', '', XlWrkShtWriter.DefaultCellDecorator);
        END;

        XlWrkBkWriter.Close;
        //-

        TempExcelBuffer.DELETEALL;
        CLEAR(TempExcelBuffer);
        TempExcelBuffer.OpenBook(ServerUploadFile,SheetName_UploadPriceBook);
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

       IF STRPOS(UPPERCASE(GetValueAtCell(1,4)),'CPN') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,4,'CPN');
        END;
        IF STRPOS(UPPERCASE(GetValueAtCell(1,5)),'DISCOUNT') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,5,'Discount');
        END;
        IF STRPOS(UPPERCASE(GetValueAtCell(1,7)),'MSRP') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,7,'MSRP');
        END;

        Kreditor.GET(PL_Kreditor);
        IF PL_W„h <> Kreditor."Currency Code" THEN BEGIN
          ERROR(Text999,PL_Kreditor);
        END;

        //********************************************************************************************
        //                               Definiert die Protokolldatei
        //********************************************************************************************

        IF DoUpdateExistingWorksheet THEN BEGIN
          IF ServerFileName = '' THEN
            ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
          IF ServerFileName = '' THEN
            EXIT;
          SheetName := TempExcelBufferExport.SelectSheetsName(ServerFileName);
          IF SheetName = '' THEN
            EXIT;
        END;

        Window.OPEN(
          Text000 +
          '@1@@@@@@@@@@@@@@@@@@@@@\');

        TempExcelBufferExport.DELETEALL;
        CLEAR(TempExcelBufferExport);

        //Protokoll Header
        RecNo := 0;
        RowNo := 1;
        ColumnNo := 1;
        EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text030,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        RowNo := 2;

        //********************************************************************************************
        //                         Eigentliches Update der Service Artikel
        //********************************************************************************************

        Servicepreise.RESET;
        Servicepreise.SETRANGE(Art,Servicepreise.Art::Champs);
        Servicepreise.SETRANGE("Zuordnung obsolete",FALSE);
        Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
        Servicepreise.SETRANGE("Update letzte Preisliste",FALSE);
        Servicepreise.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
        IF Servicepreise.FIND('-') THEN BEGIN
          TotalRecNo := Servicepreise.COUNT;
          REPEAT
            excel_msrp := 0;
            row_part := FindRowNew(Servicepreise."Service Artikelnr.",'Cell','A','Z');
            IF (row_part <> 0) THEN BEGIN
              IF FORMAT(GetValueAtCell(row_part,7)) <> 'Quotation' THEN BEGIN
                IF FORMAT(GetValueAtCell(row_part,7)) <> '' THEN
                  EVALUATE(excel_msrp,GetValueAtCell(row_part,7));
                excel_msrp := ROUND(excel_msrp,0.01);
                IF excel_msrp <> Servicepreise.MSRP THEN BEGIN
                  ColumnNo := 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Artikelnr. 2",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Service Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);

                  ColumnNo := ColumnNo + 1;
                  IF  Servicepreise.MSRP > excel_msrp THEN
                    EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[Color10]',TempExcelBufferExport."Cell Type"::Number); // dunkelgrn
                  IF  Servicepreise.MSRP < excel_msrp THEN
                    EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[red]',TempExcelBufferExport."Cell Type"::Number); //rot
                  ColumnNo := ColumnNo + 1;
                  IF Servicepreise.MSRP <> 0 THEN
                    EnterCell(RowNo,ColumnNo,'','=ABS(1-(D'+FORMAT(RowNo) + '/C' + FORMAT(RowNo)+'))',FALSE,FALSE,FALSE,'0.0%',TempExcelBufferExport."Cell Type"::Number); //Prozent
                  RowNo := RowNo + 1;
                  IF testlauf = FALSE THEN BEGIN
                    Servicepreise.MSRP := excel_msrp;
                    IF STRPOS(Servicepreise.Preisliste,'-') > 0 THEN
                      Servicepreise.Preisliste := COPYSTR(Servicepreise.Preisliste,1,STRPOS(Servicepreise.Preisliste,'-') -1) + PL_Version
                    ELSE
                      Servicepreise.Preisliste := 'EOL_' + PL_Version;
                    Servicepreise.MODIFY(TRUE);
                  END;
                  ge„nderte_eintr„ge += 1;
                END;
              END;
            END;
            RecNo := RecNo + 1;
            Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));

          UNTIL Servicepreise.NEXT = 0;
        END;

        FileMgt.DeleteServerFile(ServerUploadFile);

        CLEAR(XlWrkShtReader);
        CLEAR(XlWrkBkWriter);

        IF DoUpdateExistingWorksheet THEN BEGIN
          TempExcelBufferExport.UpdateBook(ServerFileName,SheetName);
          TempExcelBufferExport.WriteSheet('',COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN
            TempExcelBufferExport.DownloadAndOpenExcel;
        END ELSE BEGIN
          TempExcelBufferExport.CreateBook(ServerFileName,Text001);
          TempExcelBufferExport.WriteSheet(
            PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN BEGIN
            TempExcelBufferExport.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
            //TempExcelBufferExport.OpenExcelWithoutAutoFit(Text001,Text001 + ExcelFileExtensionTok,'',TRUE);
          END;
        END;
        IF NOT Testmode THEN
          TempExcelBufferExport.GiveUserControl;

        Window.CLOSE;

      END;

      //ACTS Servicepreise einspielen fr Artikel, die nicht mehr in der Preisliste sind
      IF auswahl = 6 THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        CLEAR(TempExcelBuffer);
        TempExcelBuffer.OpenBook(ServerUploadFile,'Cover');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        EVALUATE(PL_Version,'-old_' + CONVERTSTR(FORMAT(GetValueAtCell(8,7)),'.','_'));
        IF UPPERCASE(GetValueAtCell(10,7)) <> 'ACTS' THEN BEGIN
          ERROR('Dies ist keine AudioCodes ACTS Preisliste.');
        END;
        IF (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EURO') OR (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EUR') THEN
          PL_W„h := ''
        ELSE
          PL_W„h := UPPERCASE(GetValueAtCell(9,7));

        PL_Kreditor := '';
        IF PL_W„h = 'USD' THEN
          PL_Kreditor := Kred_USD;
        IF PL_W„h = '' THEN
          PL_Kreditor := Kred_EURO;
        IF PL_Kreditor = '' THEN
          ERROR(Text998);

        //+ Das Sheet wird aufbereitet, damit keine Fehlermeldung erzeugt wird, wenn eine Spalte eine L„nge gr”áer 250 Zeichen aufweist
        XlWrkBkReader := XlWrkBkReader.Open(ServerUploadFile);
        XlWrkShtReader := XlWrkBkReader.GetWorksheetByName(SheetName_UploadPriceBook);
        RowCount := XlWrkShtReader.RowCount;
        XlWrkBkReader.Close;

        XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName(SheetName_UploadPriceBook);

        FOR i := 1 TO RowCount DO BEGIN
          XlWrkShtWriter.SetCellValueText(i, 'F', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'H', '', XlWrkShtWriter.DefaultCellDecorator);
        END;

        XlWrkBkWriter.Close;
        //-

        TempExcelBuffer.DELETEALL;
        CLEAR(TempExcelBuffer);
        TempExcelBuffer.OpenBook(ServerUploadFile,SheetName_UploadPriceBook);
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

       IF STRPOS(UPPERCASE(GetValueAtCell(1,4)),'CPN') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,4,'CPN');
        END;
        IF STRPOS(UPPERCASE(GetValueAtCell(1,5)),'DISCOUNT') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,5,'Discount');
        END;
        IF STRPOS(UPPERCASE(GetValueAtCell(1,7)),'MSRP') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,7,'MSRP');
        END;

        Kreditor.GET(PL_Kreditor);
        IF PL_W„h <> Kreditor."Currency Code" THEN BEGIN
          ERROR(Text999,PL_Kreditor);
        END;

        //********************************************************************************************
        //                               Definiert die Protokolldatei
        //********************************************************************************************

        IF DoUpdateExistingWorksheet THEN BEGIN
          IF ServerFileName = '' THEN
            ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
          IF ServerFileName = '' THEN
            EXIT;
          SheetName := TempExcelBufferExport.SelectSheetsName(ServerFileName);
          IF SheetName = '' THEN
            EXIT;
        END;

        Window.OPEN(
          Text000 +
          '@1@@@@@@@@@@@@@@@@@@@@@\');

        TempExcelBufferExport.DELETEALL;
        CLEAR(TempExcelBufferExport);

        //Protokoll Header
        RecNo := 0;
        RowNo := 1;
        ColumnNo := 1;
        EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text030,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        RowNo := 2;

        //********************************************************************************************
        //                         Eigentliches Update der Service Artikel
        //********************************************************************************************

        Servicepreise.RESET;
        Servicepreise.SETRANGE(Art,Servicepreise.Art::ACTS);
        Servicepreise.SETRANGE("Zuordnung obsolete",FALSE);
        Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
        Servicepreise.SETRANGE("Update letzte Preisliste",FALSE);
        Servicepreise.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
        IF Servicepreise.FIND('-') THEN BEGIN
          TotalRecNo := Servicepreise.COUNT;
          REPEAT
            excel_msrp := 0;
            row_part := FindRowNew(Servicepreise."Service Artikelnr.",'Cell','A','Z');
            IF (row_part <> 0) THEN BEGIN
              IF FORMAT(GetValueAtCell(row_part,7)) <> 'Quotation' THEN BEGIN
                IF FORMAT(GetValueAtCell(row_part,7)) <> '' THEN
                  EVALUATE(excel_msrp,GetValueAtCell(row_part,7));
                excel_msrp := ROUND(excel_msrp,0.01);
                IF excel_msrp <> Servicepreise.MSRP THEN BEGIN
                  ColumnNo := 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Artikelnr. 2",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Service Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);

                  ColumnNo := ColumnNo + 1;
                  IF  Servicepreise.MSRP > excel_msrp THEN
                    EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[Color10]',TempExcelBufferExport."Cell Type"::Number); // dunkelgrn
                  IF  Servicepreise.MSRP < excel_msrp THEN
                  EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[red]',TempExcelBufferExport."Cell Type"::Number); //rot
                  ColumnNo := ColumnNo + 1;
                  IF Servicepreise.MSRP <> 0 THEN
                    EnterCell(RowNo,ColumnNo,'','=ABS(1-(D'+FORMAT(RowNo) + '/C' + FORMAT(RowNo)+'))',FALSE,FALSE,FALSE,'0.0%',TempExcelBufferExport."Cell Type"::Number); //Prozent
                  RowNo := RowNo + 1;
                  IF testlauf = FALSE THEN BEGIN
                    Servicepreise.MSRP := excel_msrp;
                    IF STRPOS(Servicepreise.Preisliste,'-') > 0 THEN
                      Servicepreise.Preisliste := COPYSTR(Servicepreise.Preisliste,1,STRPOS(Servicepreise.Preisliste,'-') -1) + PL_Version
                    ELSE
                      Servicepreise.Preisliste := 'EOL_' + PL_Version;
                    Servicepreise.MODIFY(TRUE);
                  END;
                  ge„nderte_eintr„ge += 1;
                END;
              END;
            END;
            RecNo := RecNo + 1;
            Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
          UNTIL Servicepreise.NEXT = 0;
        END;

        FileMgt.DeleteServerFile(ServerUploadFile);

        CLEAR(XlWrkShtReader);
        CLEAR(XlWrkBkWriter);

        IF DoUpdateExistingWorksheet THEN BEGIN
          TempExcelBufferExport.UpdateBook(ServerFileName,SheetName);
          TempExcelBufferExport.WriteSheet('',COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN
            TempExcelBufferExport.DownloadAndOpenExcel;
        END ELSE BEGIN
          TempExcelBufferExport.CreateBook(ServerFileName,Text001);
          TempExcelBufferExport.WriteSheet(
            PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN BEGIN
            TempExcelBufferExport.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
            //TempExcelBufferExport.OpenExcelWithoutAutoFit(Text001,Text001 + ExcelFileExtensionTok,'',TRUE);
          END;
        END;
        IF NOT Testmode THEN
          TempExcelBufferExport.GiveUserControl;

        Window.CLOSE;
      END;


      //CHAMPS Servicepreise Korrektur Job
      IF auswahl = 7 THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        CLEAR(TempExcelBuffer);
        TempExcelBuffer.OpenBook(ServerUploadFile,'Cover');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        PL_Version := TOPAS_API.replace_text(GetValueAtCell(8,7),',','.');
        IF UPPERCASE(GetValueAtCell(10,7)) <> 'CHAMPS' THEN BEGIN
          ERROR('Dies ist keine AudioCodes CHAMPS Preisliste.');
        END;
        IF (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EURO') OR (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EUR') THEN
          PL_W„h := ''
        ELSE
          PL_W„h := UPPERCASE(GetValueAtCell(9,7));

        PL_Kreditor := '';
        IF PL_W„h = 'USD' THEN
          PL_Kreditor := Kred_USD;
        IF PL_W„h = '' THEN
          PL_Kreditor := Kred_EURO;
        IF PL_Kreditor = '' THEN
          ERROR(Text998);

        //+ Das Sheet wird aufbereitet, damit keine Fehlermeldung erzeugt wird, wenn eine Spalte eine L„nge gr”áer 250 Zeichen aufweist
        XlWrkBkReader := XlWrkBkReader.Open(ServerUploadFile);
        XlWrkShtReader := XlWrkBkReader.GetWorksheetByName(SheetName_UploadPriceBook);
        RowCount := XlWrkShtReader.RowCount;
        XlWrkBkReader.Close;

        XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName(SheetName_UploadPriceBook);

        FOR i := 1 TO RowCount DO BEGIN
          XlWrkShtWriter.SetCellValueText(i, 'F', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'H', '', XlWrkShtWriter.DefaultCellDecorator);
        END;

        XlWrkBkWriter.Close;
        //-

        TempExcelBuffer.DELETEALL;
        CLEAR(TempExcelBuffer);
        TempExcelBuffer.OpenBook(ServerUploadFile,SheetName_UploadPriceBook);
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

       IF STRPOS(UPPERCASE(GetValueAtCell(1,4)),'CPN') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,4,'CPN');
        END;
        IF STRPOS(UPPERCASE(GetValueAtCell(1,5)),'DISCOUNT') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,5,'Discount');
        END;
        IF STRPOS(UPPERCASE(GetValueAtCell(1,7)),'MSRP') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,7,'MSRP');
        END;

        Kreditor.GET(PL_Kreditor);
        IF PL_W„h <> Kreditor."Currency Code" THEN BEGIN
          ERROR(Text999,PL_Kreditor);
        END;

        //********************************************************************************************
        //                               Definiert die Protokolldatei
        //********************************************************************************************

        IF DoUpdateExistingWorksheet THEN BEGIN
          IF ServerFileName = '' THEN
            ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
          IF ServerFileName = '' THEN
            EXIT;
          SheetName := TempExcelBufferExport.SelectSheetsName(ServerFileName);
          IF SheetName = '' THEN
            EXIT;
        END;

        Window.OPEN(
          Text000 +
          '@1@@@@@@@@@@@@@@@@@@@@@\');

        TempExcelBufferExport.DELETEALL;
        CLEAR(TempExcelBufferExport);

        //Protokoll Header
        RecNo := 0;
        RowNo := 1;
        ColumnNo := 1;
        EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text030,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        RowNo := 2;

        //********************************************************************************************
        //                         Eigentliches Update der Service Artikel
        //********************************************************************************************

        Servicepreise.RESET;
        Servicepreise.SETRANGE(Art,Servicepreise.Art::Champs);
        Servicepreise.SETRANGE("Zuordnung obsolete",FALSE);
        Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
        Servicepreise.SETRANGE("Update letzte Preisliste",TRUE);
        Servicepreise.SETRANGE(Status,Servicepreise.Status::neu);
        Servicepreise.SETRANGE(Preisliste,PL_Version);
        //Servicepreise.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
        IF Servicepreise.FIND('-') THEN BEGIN
          TotalRecNo := Servicepreise.COUNT;
          REPEAT
            excel_msrp := 0;
            row_part := FindRowNew(Servicepreise."Service Artikelnr.",'Cell','A','Z');
            IF (row_part <> 0) THEN BEGIN
              IF FORMAT(GetValueAtCell(row_part,7)) <> 'Quotation' THEN BEGIN
                IF FORMAT(GetValueAtCell(row_part,7)) <> '' THEN
                  EVALUATE(excel_msrp,GetValueAtCell(row_part,7));
                excel_msrp := ROUND(excel_msrp,0.01);
                IF excel_msrp <> Servicepreise.MSRP THEN BEGIN
                  ColumnNo := 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Artikelnr. 2",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Service Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);

                  ColumnNo := ColumnNo + 1;
                  IF  Servicepreise.MSRP > excel_msrp THEN
                    EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[Color10]',TempExcelBufferExport."Cell Type"::Number); // dunkelgrn
                  IF  Servicepreise.MSRP < excel_msrp THEN
                    EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[red]',TempExcelBufferExport."Cell Type"::Number); //rot
                  ColumnNo := ColumnNo + 1;
                  IF Servicepreise.MSRP <> 0 THEN
                    EnterCell(RowNo,ColumnNo,'','=ABS(1-(D'+FORMAT(RowNo) + '/C' + FORMAT(RowNo)+'))',FALSE,FALSE,FALSE,'0.0%',TempExcelBufferExport."Cell Type"::Number); //Prozent
                  RowNo := RowNo + 1;
                  IF testlauf = FALSE THEN BEGIN
                    Servicepreise.MSRP := excel_msrp;
                    IF STRPOS(Servicepreise.Preisliste,'-') > 0 THEN
                      Servicepreise.Preisliste := COPYSTR(Servicepreise.Preisliste,1,STRPOS(Servicepreise.Preisliste,'-') -1) + PL_Version
                    ELSE
                      Servicepreise.Preisliste := 'EOL_' + PL_Version;
                    Servicepreise.MODIFY(TRUE);
                  END;
                  ge„nderte_eintr„ge += 1;
                END;
              END;
            END;
            RecNo := RecNo + 1;
            Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));

          UNTIL Servicepreise.NEXT = 0;
        END;

        FileMgt.DeleteServerFile(ServerUploadFile);

        CLEAR(XlWrkShtReader);
        CLEAR(XlWrkBkWriter);

        IF DoUpdateExistingWorksheet THEN BEGIN
          TempExcelBufferExport.UpdateBook(ServerFileName,SheetName);
          TempExcelBufferExport.WriteSheet('',COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN
            TempExcelBufferExport.DownloadAndOpenExcel;
        END ELSE BEGIN
          TempExcelBufferExport.CreateBook(ServerFileName,Text001);
          TempExcelBufferExport.WriteSheet(
            PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN BEGIN
            TempExcelBufferExport.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
            //TempExcelBufferExport.OpenExcelWithoutAutoFit(Text001,Text001 + ExcelFileExtensionTok,'',TRUE);
          END;
        END;
        IF NOT Testmode THEN
          TempExcelBufferExport.GiveUserControl;

        Window.CLOSE;

      END;


      //ACTS Servicepreise Korrektur Job
      IF auswahl = 8 THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        CLEAR(TempExcelBuffer);
        TempExcelBuffer.OpenBook(ServerUploadFile,'Cover');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        PL_Version := TOPAS_API.replace_text(GetValueAtCell(8,7),',','.');
        IF UPPERCASE(GetValueAtCell(10,7)) <> 'ACTS' THEN BEGIN
          ERROR('Dies ist keine AudioCodes ACTS Preisliste.');
        END;
        IF (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EURO') OR (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EUR') THEN
          PL_W„h := ''
        ELSE
          PL_W„h := UPPERCASE(GetValueAtCell(9,7));

        PL_Kreditor := '';
        IF PL_W„h = 'USD' THEN
          PL_Kreditor := Kred_USD;
        IF PL_W„h = '' THEN
          PL_Kreditor := Kred_EURO;
        IF PL_Kreditor = '' THEN
          ERROR(Text998);

        //+ Das Sheet wird aufbereitet, damit keine Fehlermeldung erzeugt wird, wenn eine Spalte eine L„nge gr”áer 250 Zeichen aufweist
        XlWrkBkReader := XlWrkBkReader.Open(ServerUploadFile);
        XlWrkShtReader := XlWrkBkReader.GetWorksheetByName(SheetName_UploadPriceBook);
        RowCount := XlWrkShtReader.RowCount;
        XlWrkBkReader.Close;

        XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName(SheetName_UploadPriceBook);

        FOR i := 1 TO RowCount DO BEGIN
          XlWrkShtWriter.SetCellValueText(i, 'F', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'H', '', XlWrkShtWriter.DefaultCellDecorator);
        END;

        XlWrkBkWriter.Close;
        //-

        TempExcelBuffer.DELETEALL;
        CLEAR(TempExcelBuffer);
        TempExcelBuffer.OpenBook(ServerUploadFile,SheetName_UploadPriceBook);
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

       IF STRPOS(UPPERCASE(GetValueAtCell(1,4)),'CPN') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,4,'CPN');
        END;
        IF STRPOS(UPPERCASE(GetValueAtCell(1,5)),'DISCOUNT') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,5,'Discount');
        END;
        IF STRPOS(UPPERCASE(GetValueAtCell(1,7)),'MSRP') = 0 THEN BEGIN
          FileMgt.DeleteServerFile(ServerUploadFile);
          ERROR(PriceBookErrMsg,7,'MSRP');
        END;

        Kreditor.GET(PL_Kreditor);
        IF PL_W„h <> Kreditor."Currency Code" THEN BEGIN
          ERROR(Text999,PL_Kreditor);
        END;

        //********************************************************************************************
        //                               Definiert die Protokolldatei
        //********************************************************************************************

        IF DoUpdateExistingWorksheet THEN BEGIN
          IF ServerFileName = '' THEN
            ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
          IF ServerFileName = '' THEN
            EXIT;
          SheetName := TempExcelBufferExport.SelectSheetsName(ServerFileName);
          IF SheetName = '' THEN
            EXIT;
        END;

        Window.OPEN(
          Text000 +
          '@1@@@@@@@@@@@@@@@@@@@@@\');

        TempExcelBufferExport.DELETEALL;
        CLEAR(TempExcelBufferExport);

        //Protokoll Header
        RecNo := 0;
        RowNo := 1;
        ColumnNo := 1;
        EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text030,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        RowNo := 2;

        //********************************************************************************************
        //                         Eigentliches Update der Service Artikel
        //********************************************************************************************

        Servicepreise.RESET;
        Servicepreise.SETRANGE(Art,Servicepreise.Art::ACTS);
        Servicepreise.SETRANGE("Zuordnung obsolete",FALSE);
        Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
        Servicepreise.SETRANGE("Update letzte Preisliste",TRUE);
        Servicepreise.SETRANGE(Status,Servicepreise.Status::neu);
        Servicepreise.SETRANGE(Preisliste,PL_Version);
        //Servicepreise.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
        IF Servicepreise.FIND('-') THEN BEGIN
          TotalRecNo := Servicepreise.COUNT;
          REPEAT
            excel_msrp := 0;
            row_part := FindRowNew(Servicepreise."Service Artikelnr.",'Cell','A','Z');
            IF (row_part <> 0) THEN BEGIN
              IF FORMAT(GetValueAtCell(row_part,7)) <> 'Quotation' THEN BEGIN
                IF FORMAT(GetValueAtCell(row_part,7)) <> '' THEN
                  EVALUATE(excel_msrp,GetValueAtCell(row_part,7));
                excel_msrp := ROUND(excel_msrp,0.01);
                IF excel_msrp <> Servicepreise.MSRP THEN BEGIN
                  ColumnNo := 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Artikelnr. 2",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Service Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);

                  ColumnNo := ColumnNo + 1;
                  IF  Servicepreise.MSRP > excel_msrp THEN
                    EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[Color10]',TempExcelBufferExport."Cell Type"::Number); // dunkelgrn
                  IF  Servicepreise.MSRP < excel_msrp THEN
                  EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[red]',TempExcelBufferExport."Cell Type"::Number); //rot
                  ColumnNo := ColumnNo + 1;
                  IF Servicepreise.MSRP <> 0 THEN
                    EnterCell(RowNo,ColumnNo,'','=ABS(1-(D'+FORMAT(RowNo) + '/C' + FORMAT(RowNo)+'))',FALSE,FALSE,FALSE,'0.0%',TempExcelBufferExport."Cell Type"::Number); //Prozent
                  RowNo := RowNo + 1;
                  IF testlauf = FALSE THEN BEGIN
                    Servicepreise.MSRP := excel_msrp;
                    IF STRPOS(Servicepreise.Preisliste,'-') > 0 THEN
                      Servicepreise.Preisliste := COPYSTR(Servicepreise.Preisliste,1,STRPOS(Servicepreise.Preisliste,'-') -1) + PL_Version
                    ELSE
                      Servicepreise.Preisliste := 'EOL_' + PL_Version;
                    Servicepreise.MODIFY(TRUE);
                  END;
                  ge„nderte_eintr„ge += 1;
                END;
              END;
            END;
            RecNo := RecNo + 1;
            Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
          UNTIL Servicepreise.NEXT = 0;
        END;

        FileMgt.DeleteServerFile(ServerUploadFile);

        CLEAR(XlWrkShtReader);
        CLEAR(XlWrkBkWriter);

        IF DoUpdateExistingWorksheet THEN BEGIN
          TempExcelBufferExport.UpdateBook(ServerFileName,SheetName);
          TempExcelBufferExport.WriteSheet('',COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN
            TempExcelBufferExport.DownloadAndOpenExcel;
        END ELSE BEGIN
          TempExcelBufferExport.CreateBook(ServerFileName,Text001);
          TempExcelBufferExport.WriteSheet(
            PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN BEGIN
            TempExcelBufferExport.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
            //TempExcelBufferExport.OpenExcelWithoutAutoFit(Text001,Text001 + ExcelFileExtensionTok,'',TRUE);
          END;
        END;
        IF NOT Testmode THEN
          TempExcelBufferExport.GiveUserControl;

        Window.CLOSE;
      END;


      //Ausgabe des Einspiel Ergebnisses

      IF PL_W„h = '' THEN
        w„h_text := 'EURO';
      IF PL_W„h = 'USD' THEN
        w„h_text := 'USD';

      CASE auswahl OF
        1..4 :
          BEGIN
            IF auswahl = 1 THEN PL_Bezeichnung := 'CHAMPS ' + w„h_text;
            IF auswahl = 2 THEN PL_Bezeichnung := 'ACTS ' + w„h_text;
            IF auswahl = 3 THEN PL_Bezeichnung := 'System ' + w„h_text;
            IF auswahl = 4 THEN PL_Bezeichnung := 'ACTS Schaeffler';
            MESSAGE('Import der %1 Artikel abgeschlossen.'+ '\' + 'Neue bzw. ge„nderte Datens„tze: %2\\' +
           'Excel Datens„tze: %3\Obsolete Bezeichnungen: %4 (korrigiert: %5)'
           ,PL_Bezeichnung,ge„nderte_eintr„ge,TotalRows,obsolete_eintr„ge,obsolete_korrigiert);
          END;
        5..6 : MESSAGE('Import der Servicepreise abgeschlossen.' + '\' + 'Neue bzw. ge„nderte Datens„tze: %1',ge„nderte_eintr„ge);
      END;
    END;

    LOCAL PROCEDURE Run_Import_Classic@1000000001();
    BEGIN
      IF DialogFileName = '' THEN ERROR(Text200);

      ServerUploadFile := FileMgt.UploadFileSilent(DialogFileName);

      ge„nderte_eintr„ge := 0;
      obsolete_eintr„ge := 0;
      excel_datens„tze := 0;

      auswahl := STRMENU(Text100,7);
      IF auswahl = 0 THEN
        EXIT;

      //CHAMPS oder ACTS
      IF (auswahl = 1) OR (auswahl = 2) OR (auswahl = 9) THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        TempExcelBuffer.OpenBook(ServerUploadFile,'Einspielen');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName('Einspielen');

        EVALUATE(PL_W„h,UPPERCASE(GetValueAtCell(1,8)));
        EVALUATE(v_art,GetValueAtCell(1,9));

       IF (auswahl = 1) AND (FORMAT(v_art) <> 'Champs') THEN BEGIN
          ERROR('Falsche Syntax in Liste');
        END;
        IF (auswahl = 2) AND (FORMAT(v_art) <> 'ACTS') THEN BEGIN
          ERROR('Falsche Syntax in Liste');
        END;

        //********************************************************************************************
        //                         Eigentliches Update der Service Artikel
        //********************************************************************************************

        IF TotalRows > 999 THEN BEGIN
          IF CONFIRM('Es konnte mehr als 1000 Eintr„ge in der Quelldatei gefunden werden.\' +
                      'Soll der Status Update letzte Preisliste fr alle Artikel zurckgesetzt und neu ' +
                      'bewertet werden?',TRUE) THEN BEGIN
            Servicepreise.RESET;
            IF auswahl = 1 THEN
              Servicepreise.SETRANGE(Art,Servicepreise.Art::Champs);
            IF auswahl = 2 THEN
              Servicepreise.SETRANGE(Art,Servicepreise.Art::ACTS);
            Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
            IF Servicepreise.FINDFIRST THEN
              Servicepreise.MODIFYALL("Update letzte Preisliste",FALSE);
          END;
        END;

        Window.OPEN(
          Text000 +
          '@1@@@@@@@@@@@@@@@@@@@@@\');

        FOR i := 1 TO TotalRows DO BEGIN

          excel_msrp := 0;

          Artikelname := UPPERCASE(GetValueAtCell(i,1));
          ServiceArtikelname := UPPERCASE(GetValueAtCell(i,2));
          ServiceJahre := GetValueAtCell(i,4);
          SUPArtikelname := UPPERCASE(GetValueAtCell(i,6));
          IF GetValueAtCell(i,3) <> '' THEN
            EVALUATE(excel_msrp,GetValueAtCell(i,3));
          PL_Version := TOPAS_API.replace_text(GetValueAtCell(i,7),',','.');

          XlWrkShtWriter.SetCellValueText(i, 'K', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'L', '', XlWrkShtWriter.DefaultCellDecorator);

          IF Artikelname <> '' THEN BEGIN
            //Kennzeichnung der alten Pos., dass die Zuordnung obsolete geworden ist, da Service Artikelnr. ge„ndert wurde
            obsolete_items := '';
            Artikelnr_obsolete.RESET;
            IF auswahl = 1 THEN
              Artikelnr_obsolete.SETRANGE(Art,Artikelnr_obsolete.Art::Champs);
            IF auswahl = 2 THEN
              Artikelnr_obsolete.SETRANGE(Art,Artikelnr_obsolete.Art::ACTS);
            Artikelnr_obsolete.SETRANGE("Artikelnr. 2",Artikelname);
            Artikelnr_obsolete.SETRANGE("SUP Artikelnr.",SUPArtikelname);
            Artikelnr_obsolete.SETRANGE(W„hrungscode,PL_W„h);
            Artikelnr_obsolete.SETRANGE("Zuordnung obsolete",FALSE);
            IF Artikelnr_obsolete.FINDFIRST THEN
              REPEAT
                IF Artikelnr_obsolete."Service Artikelnr." <> ServiceArtikelname THEN BEGIN
                  Artikelnr_obsolete."Zuordnung obsolete" := TRUE;
                  Artikelnr_obsolete.MODIFY(TRUE);
                  obsolete_eintr„ge += 1;
                  obsolete_items += Artikelnr_obsolete."Service Artikelnr." + ';';
                END;
              UNTIL Artikelnr_obsolete.NEXT = 0;
            XlWrkShtWriter.SetCellValueText(i, 'K', obsolete_items, XlWrkShtWriter.DefaultCellDecorator);

            Servicepreise.RESET;
            IF auswahl = 1 THEN
              Servicepreise.SETRANGE(Art,Servicepreise.Art::Champs);
            IF auswahl = 2 THEN
              Servicepreise.SETRANGE(Art,Servicepreise.Art::ACTS);
            Servicepreise.SETRANGE("Artikelnr. 2",Artikelname);
            Servicepreise.SETRANGE("Service Artikelnr.",ServiceArtikelname);
            Servicepreise.SETRANGE("SUP Artikelnr.",SUPArtikelname);
            Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
            IF Servicepreise.FINDFIRST THEN BEGIN
              IF (Servicepreise.MSRP <> ROUND(excel_msrp,0.01)) AND (excel_msrp <> 0) THEN BEGIN
                ge„nderte_eintr„ge += 1;
                Servicepreise.MSRP := ROUND(excel_msrp,0.01);
                Servicepreise.MODIFY(TRUE);
              END;
              Servicepreise."Update letzte Preisliste" := TRUE;
              Servicepreise.Preisliste := PL_Version;
              IF Servicepreise."Zuordnung obsolete" = TRUE THEN BEGIN
                Servicepreise."Zuordnung obsolete" := FALSE;
                obsolete_korrigiert += 1;
                XlWrkShtWriter.SetCellValueText(i, 'L', 'obsolete korrigiert', XlWrkShtWriter.DefaultCellDecorator);
              END;
              Servicepreise.MODIFY;
            END ELSE BEGIN
              Servicepreise.INIT;
              Servicepreise."Service Artikelnr." := ServiceArtikelname;
              Servicepreise."SUP Artikelnr." := SUPArtikelname;
              Artikel.RESET;
              Artikel.SETRANGE("No. 2",Artikelname);
              IF Artikel.FINDFIRST THEN BEGIN
                Servicepreise.VALIDATE("Artikelnr.",Artikel."No.");
              END ELSE BEGIN
                Servicepreise."Artikelnr." := '';
                Servicepreise."Artikelnr. 2" := Artikelname;
              END;
              Servicepreise.MSRP := ROUND(excel_msrp,0.01);
              Servicepreise."Update letzte Preisliste" := TRUE;
              Servicepreise.Preisliste := PL_Version;
              Servicepreise.W„hrungscode := PL_W„h;
              EVALUATE(Servicepreise."Laufzeit in Jahren",ServiceJahre);
              IF auswahl = 1 THEN
                Servicepreise.Art := Servicepreise.Art::Champs;
              IF auswahl = 2 THEN
                Servicepreise.Art := Servicepreise.Art::ACTS;
              Servicepreise.INSERT(TRUE);
              ge„nderte_eintr„ge += 1;
            END;

          END;

          Window.UPDATE(1,ROUND(i / TotalRows * 10000,1));

        END;

        Window.CLOSE;

        XlWrkBkWriter.Close;
        DownloadFileName := FileMgt.DownloadTempFile(ServerUploadFile);
        FileMgt.MoveAndRenameClientFile(DownloadFileName,DialogFileName,FORMAT(CREATEGUID));
        FileMgt.DeleteServerFile(ServerUploadFile);
        FileMgt.DeleteClientFile(DownloadFileName);
        CLEAR(XlWrkShtWriter);
        CLEAR(XlWrkBkWriter);

      END;


      //Systeme MSRP
      IF auswahl = 3 THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        TempExcelBuffer.OpenBook(ServerUploadFile,'Einspielen');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        //Fhrende Einkaufsw„hrung
        system_ek_w„hrung := '';

        EVALUATE(PL_W„h,UPPERCASE(GetValueAtCell(2,5)));

        PL_Kreditor := '';
        IF PL_W„h = 'USD' THEN
          PL_Kreditor := Kred_USD;
        IF PL_W„h = '' THEN
          PL_Kreditor := Kred_EURO;
        IF PL_Kreditor = '' THEN
          ERROR(Text998);

        IF UPPERCASE(GetValueAtCell(1,3)) <> 'MSRP' THEN BEGIN
          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_MSRP + ' muss MSRP sein.');
        END;
        IF UPPERCASE(GetValueAtCell(1,4)) <> 'DC' THEN BEGIN
          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_DC_Systeme + ' muss DC sein.');
        END;

        //********************************************************************************************
        //                         Eigentliches Update der System Artikel
        //********************************************************************************************

        IF TotalRows > 499 THEN BEGIN
          IF CONFIRM('Es konnte mehr als 500 Eintr„ge in der Quelldatei gefunden werden.\' +
                      'Soll der Status Update letzte Preisliste fr alle Artikel zurckgesetzt und neu ' +
                      'bewertet werden?',TRUE) THEN BEGIN
            Artikel.RESET;
            Artikel.SETRANGE("Special Equipment Code",''); //keine Schaeffler Artikel
            Artikel.SETRANGE("Manufacturer Code",'59');
            IF Artikel.FINDFIRST THEN
              Artikel.MODIFYALL(Artikel."Update letzte Preisliste",FALSE);
          END;
        END;

        FOR i := 2 TO TotalRows DO BEGIN

          excel_dc := 0;
          excel_msrp := 0;
          EOL := FALSE;

          Artikelname := UPPERCASE(GetValueAtCell(i,1));
          IF GetValueAtCell(i,3) <> 'EOL' THEN BEGIN
            IF GetValueAtCell(i,4) <> '' THEN
              EVALUATE(excel_dc,GetValueAtCell(i,4));
            excel_dc := ROUND(excel_dc,0.01);
            IF GetValueAtCell(i,3) <> '' THEN
              EVALUATE(excel_msrp,GetValueAtCell(i,3));
            excel_msrp := ROUND(excel_msrp,0.01);
          END ELSE
            EOL := TRUE;

          //Ausnahme EMS/UPG/TO-ACSRVR
          CASE Artikelname OF
            'EMS/UPG/TO-ACSRVR' :
            BEGIN
              excel_dc := excel_msrp;
              excel_msrp := 0;
            END;
          END;

          PL_W„h := UPPERCASE(GetValueAtCell(i,5));
          IF GetValueAtCell(i,6) <> '' THEN
            EVALUATE(startdatum,GetValueAtCell(i,6));
          IF Artikelname <> '' THEN
            PL_Version_Systeme := TOPAS_API.replace_text(GetValueAtCell(i,7),',','.');

          IF (Artikelname = '') OR (STRLEN(Artikelname) > 40) THEN BEGIN
          END ELSE BEGIN
            Kreditor.GET(PL_Kreditor);
            IF PL_W„h <> Kreditor."Currency Code" THEN BEGIN
              ERROR(Text999,PL_Kreditor);
            END;

            Artikel.RESET;
            Artikel.SETRANGE("No. 2",Artikelname);
            IF Artikel.FINDFIRST THEN BEGIN

              //*********************************************************************************************
              //                                    EK-Preise updaten
              //*********************************************************************************************

              einkaufspreis.RESET;
              einkaufspreis.SETRANGE("Item No.",Artikel."No.");
              einkaufspreis.SETRANGE("Vendor No.",PL_Kreditor);
              einkaufspreis.SETRANGE("Currency Code",PL_W„h);
              einkaufspreis.SETRANGE("Ending Date",0D);
              einkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
              IF einkaufspreis.FINDFIRST THEN BEGIN
                IF einkaufspreis."Starting Date" < startdatum - 1 THEN BEGIN
                  einkaufspreis."Ending Date" := startdatum - 1;
                  einkaufspreis.MODIFY(TRUE);
                END;
              END;

              IF (excel_dc <> 0) THEN BEGIN
                einkaufspreis.RESET;
                einkaufspreis.SETRANGE("Item No.",Artikel."No.");
                einkaufspreis.SETRANGE("Vendor No.",PL_Kreditor);
                einkaufspreis.SETRANGE("Currency Code",PL_W„h);
                einkaufspreis.SETRANGE("Starting Date",startdatum);
                IF NOT einkaufspreis.FINDFIRST THEN BEGIN
                  einkaufspreis.INIT;
                  einkaufspreis."Item No." := Artikel."No.";
                  einkaufspreis."Vendor No." := PL_Kreditor;
                  einkaufspreis."Starting Date" := startdatum;
                  einkaufspreis."Currency Code" := PL_W„h;
                  einkaufspreis."Unit of Measure Code" := 'STšCK';
                  einkaufspreis."Direct Unit Cost" := excel_dc;
                  einkaufspreis.INSERT(TRUE);
                  ge„nderte_eintr„ge += 1;
                END ELSE BEGIN
                  //Falls der 1. Lauf noch inkorrekte DCs hatte, z.B. bei einigen Artikeln nun 80% anstatt 60% vom MSRP
                  IF einkaufspreis."Direct Unit Cost" <> excel_dc THEN BEGIN
                    einkaufspreis."Direct Unit Cost" := excel_dc;
                    einkaufspreis.MODIFY;
                    ge„nderte_eintr„ge += 1;
                  END;
                END;

              END;

              Artikel."Update letzte Preisliste" := TRUE;
              Artikel.MODIFY(TRUE);

              //*********************************************************************************************
              //                                    VK-Preise updaten
              //*********************************************************************************************

              verkaufspreis.RESET;
              verkaufspreis.SETRANGE("Sales Type",verkaufspreis."Sales Type"::"All Customers");
              verkaufspreis.SETRANGE("Item No.",Artikel."No.");
              verkaufspreis.SETRANGE("Currency Code",PL_W„h);
              verkaufspreis.SETRANGE("Ending Date",0D);
              verkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
              IF verkaufspreis.FINDFIRST THEN BEGIN
                IF verkaufspreis."Starting Date" < startdatum - 1 THEN BEGIN
                  verkaufspreis."Ending Date" := startdatum - 1;
                  verkaufspreis.MODIFY(TRUE);
                END;
              END;

              IF excel_msrp <> 0 THEN BEGIN
                verkaufspreis.RESET;
                verkaufspreis.SETRANGE("Sales Type",verkaufspreis."Sales Type"::"All Customers");
                verkaufspreis.SETRANGE("Item No.",Artikel."No.");
                verkaufspreis.SETRANGE("Currency Code",PL_W„h);
                verkaufspreis.SETRANGE("Starting Date",startdatum);
                IF NOT verkaufspreis.FINDFIRST THEN BEGIN
                  verkaufspreis.INIT;
                  verkaufspreis."Sales Type" := verkaufspreis."Sales Type"::"All Customers";
                  verkaufspreis."Item No.":= Artikel."No.";
                  verkaufspreis."Starting Date" := startdatum;
                  verkaufspreis."Currency Code" := PL_W„h;
                  verkaufspreis."Unit of Measure Code" := 'STšCK';
                  verkaufspreis."Unit Price" := excel_msrp;
                  verkaufspreis.INSERT(TRUE);
                END;
              END;

              IF (STRPOS(Artikel.Bezeichnung2_lang,'Nicht in der Preisliste') <> 0)
              OR (STRPOS(Artikel.Bezeichnung2_lang,'Stand Preisliste') <> 0)
              OR (Artikel.Bezeichnung2_lang = '') THEN BEGIN
                Artikel.Bezeichnung2_lang := 'Stand Preisliste: ' + PL_Version_Systeme;
                Artikel.MODIFY(TRUE);
              END;

              IF EOL THEN
                IF STRPOS(Artikel.Preisinfo,'EOL') = 0 THEN
                  Artikel.Preisinfo := Artikel.Preisinfo + ' EOL - PL ' + PL_Version_Systeme;
            END;

          END;

        END;

        FileMgt.DeleteServerFile(ServerUploadFile);

        Artikel.RESET;
        Artikel.SETRANGE("Manufacturer Code",'59');
        Artikel.SETRANGE("Update letzte Preisliste",FALSE);
        Artikel.SETFILTER(Bezeichnung2_lang,'%1|%2|%3','','*' + 'Nicht in der Preisliste' + '*','*' + 'Stand Preisliste' + '*');
        IF Artikel.FINDFIRST THEN
          Artikel.MODIFYALL(Bezeichnung2_lang,'Nicht in der Preisliste ' + PL_Version_Systeme + ' vorhanden.');

      END;

      //Systeme MSRP Schaeffler
      IF auswahl = 4 THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        TempExcelBuffer.OpenBook(ServerUploadFile,'Einspielen');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        EVALUATE(PL_W„h,UPPERCASE(GetValueAtCell(2,5)));

        PL_Kreditor := Kred_EURO;
        IF PL_Kreditor = '' THEN
          ERROR(Text998);

        IF UPPERCASE(GetValueAtCell(1,3)) <> 'MSRP' THEN BEGIN
          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_MSRP + ' muss MSRP sein.');
        END;
        IF UPPERCASE(GetValueAtCell(1,4)) <> 'DC' THEN BEGIN
          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_DC_Systeme + ' muss DC sein.');
        END;

        //********************************************************************************************
        //                         Eigentliches Update der System Artikel
        //********************************************************************************************

        FOR i := 2 TO TotalRows DO BEGIN

          excel_dc := 0;
          excel_msrp := 0;
          EOL := FALSE;

          Artikelname := UPPERCASE(GetValueAtCell(i,1));
          IF UPPERCASE(GetValueAtCell(i,3)) <> 'EOS' THEN BEGIN
            IF GetValueAtCell(i,4) <> '' THEN
              EVALUATE(excel_dc,GetValueAtCell(i,4));
            excel_dc := ROUND(excel_dc,0.01);
            IF GetValueAtCell(i,3) <> '' THEN
              EVALUATE(excel_msrp,GetValueAtCell(i,3));
            excel_msrp := ROUND(excel_msrp,0.01);
          END ELSE
            EOL := TRUE;

          PL_W„h := UPPERCASE(GetValueAtCell(i,5));
          IF GetValueAtCell(i,6) <> '' THEN
            EVALUATE(startdatum,GetValueAtCell(i,6));
          IF Artikelname <> '' THEN
            PL_Version_Systeme := TOPAS_API.replace_text(GetValueAtCell(i,7),',','.');

          IF (Artikelname = '') OR (STRLEN(Artikelname) > 40) THEN BEGIN
          END ELSE BEGIN
            Kreditor.GET(PL_Kreditor);
            IF PL_W„h <> Kreditor."Currency Code" THEN BEGIN
              ERROR(Text999,PL_Kreditor);
            END;

            Artikel.RESET;
            Artikel.SETRANGE("No. 2",Artikelname);
            IF Artikel.FINDFIRST THEN BEGIN

              //*********************************************************************************************
              //                                    EK-Preise updaten
              //*********************************************************************************************

              IF PL_W„h = '' THEN BEGIN
                einkaufspreis.RESET;
                einkaufspreis.SETRANGE("Item No.",Artikel."No.");
                einkaufspreis.SETRANGE("Vendor No.",PL_Kreditor);
                einkaufspreis.SETRANGE("Currency Code",PL_W„h);
                einkaufspreis.SETRANGE("Ending Date",0D);
                einkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
                IF einkaufspreis.FINDFIRST THEN BEGIN
                  IF einkaufspreis."Starting Date" < startdatum - 1 THEN BEGIN
                    einkaufspreis."Ending Date" := startdatum - 1;
                    einkaufspreis.MODIFY(TRUE);
                  END;
                END;

                IF (excel_dc <> 0) THEN BEGIN
                  einkaufspreis.RESET;
                  einkaufspreis.SETRANGE("Item No.",Artikel."No.");
                  einkaufspreis.SETRANGE("Vendor No.",PL_Kreditor);
                  einkaufspreis.SETRANGE("Currency Code",PL_W„h);
                  einkaufspreis.SETRANGE("Starting Date",startdatum);
                  IF NOT einkaufspreis.FINDFIRST THEN BEGIN
                    einkaufspreis.INIT;
                    einkaufspreis."Item No." := Artikel."No.";
                    einkaufspreis."Vendor No." := PL_Kreditor;
                    einkaufspreis."Starting Date" := startdatum;
                    einkaufspreis."Currency Code" := PL_W„h;
                    einkaufspreis."Unit of Measure Code" := 'STšCK';
                    einkaufspreis."Direct Unit Cost" := excel_dc;
                    einkaufspreis.INSERT(TRUE);
                    ge„nderte_eintr„ge += 1;
                  END ELSE BEGIN
                    //Falls der 1. Lauf noch inkorrekte DCs hatte, z.B. bei einigen Artikeln nun 80% anstatt 60% vom MSRP
                    IF einkaufspreis."Direct Unit Cost" <> excel_dc THEN BEGIN
                      einkaufspreis."Direct Unit Cost" := excel_dc;
                      einkaufspreis.MODIFY;
                      ge„nderte_eintr„ge += 1;
                    END;
                  END;

                END;

                Artikel."Update letzte Preisliste" := TRUE;
                Artikel.MODIFY(TRUE);

              END;

              //*********************************************************************************************
              //                                    VK-Preise updaten
              //*********************************************************************************************

              verkaufspreis.RESET;
              verkaufspreis.SETRANGE("Sales Type",verkaufspreis."Sales Type"::"All Customers");
              verkaufspreis.SETRANGE("Item No.",Artikel."No.");
              verkaufspreis.SETRANGE("Currency Code",PL_W„h);
              verkaufspreis.SETRANGE("Ending Date",0D);
              verkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
              IF verkaufspreis.FINDFIRST THEN BEGIN
                IF verkaufspreis."Starting Date" < startdatum - 1 THEN BEGIN
                  verkaufspreis."Ending Date" := startdatum - 1;
                  verkaufspreis.MODIFY(TRUE);
                END;
              END;

              IF excel_msrp <> 0 THEN BEGIN
                verkaufspreis.RESET;
                verkaufspreis.SETRANGE("Sales Type",verkaufspreis."Sales Type"::"All Customers");
                verkaufspreis.SETRANGE("Item No.",Artikel."No.");
                verkaufspreis.SETRANGE("Currency Code",PL_W„h);
                verkaufspreis.SETRANGE("Starting Date",startdatum);
                IF NOT verkaufspreis.FINDFIRST THEN BEGIN
                  verkaufspreis.INIT;
                  verkaufspreis."Sales Type" := verkaufspreis."Sales Type"::"All Customers";
                  verkaufspreis."Item No.":= Artikel."No.";
                  verkaufspreis."Starting Date" := startdatum;
                  verkaufspreis."Currency Code" := PL_W„h;
                  verkaufspreis."Unit of Measure Code" := 'STšCK';
                  verkaufspreis."Unit Price" := excel_msrp;
                  verkaufspreis.INSERT(TRUE);
                END ELSE BEGIN
                  //Falls sich die MSRPs doch ge„ndert haben sollten
                  IF verkaufspreis."Unit Price" <> excel_msrp THEN BEGIN
                    verkaufspreis."Unit Price" := excel_msrp;
                    verkaufspreis.MODIFY;
                  END;
                END;
              END;

              IF (STRPOS(Artikel.Bezeichnung2_lang,'Nicht in der Preisliste') <> 0)
              OR (STRPOS(Artikel.Bezeichnung2_lang,'Stand Preisliste') <> 0)
              OR (Artikel.Bezeichnung2_lang = '') THEN BEGIN
                Artikel.Bezeichnung2_lang := 'Stand Preisliste: ' + PL_Version_Systeme;
                Artikel.MODIFY(TRUE);
              END;

              IF EOL THEN
                IF STRPOS(Artikel.Preisinfo,'EOL') = 0 THEN
                  Artikel.Preisinfo := Artikel.Preisinfo + ' EOL - PL ' + PL_Version_Systeme;
            END;

          END;

        END;

        FileMgt.DeleteServerFile(ServerUploadFile);

        { // Nach Rckstellung auf 4.7.04 von 4.8.11.1 gibt es hier Probleme, da er auch alle anderen Artikel anfassen wrde
        Artikel.RESET;
        Artikel.SETRANGE("Manufacturer Code",'59');
        Artikel.SETRANGE("Update letzte Preisliste",FALSE);
        Artikel.SETFILTER(Bezeichnung2_lang,'%1|%2|%3','','*' + 'Nicht in der Preisliste' + '*','*' + 'Stand Preisliste' + '*');
        IF Artikel.FINDFIRST THEN
          Artikel.MODIFYALL(Bezeichnung2_lang,'Nicht in der Preisliste ' + PL_Version_Systeme + ' vorhanden.');
        }

      END;

      //CHAMPS Servicepreise einspielen fr Artikel, die nicht mehr in der Preisliste sind
      IF auswahl = 5 THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        CLEAR(TempExcelBuffer);
        TempExcelBuffer.OpenBook(ServerUploadFile,'Cover');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        EVALUATE(PL_Version,'-old_' + CONVERTSTR(FORMAT(GetValueAtCell(8,7)),'.','_'));
        IF UPPERCASE(GetValueAtCell(10,7)) <> 'CHAMPS' THEN BEGIN
          ERROR('Dies ist keine AudioCodes CHAMPS Preisliste.');
        END;
        IF (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EURO') OR (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EUR') THEN
          PL_W„h := ''
        ELSE
          PL_W„h := UPPERCASE(GetValueAtCell(9,7));

        PL_Kreditor := '';
        IF PL_W„h = 'USD' THEN
          PL_Kreditor := Kred_USD;
        IF PL_W„h = '' THEN
          PL_Kreditor := Kred_EURO;
        IF PL_Kreditor = '' THEN
          ERROR(Text998);

        //+ Das Sheet wird aufbereitet, damit keine Fehlermeldung erzeugt wird, wenn eine Spalte eine L„nge gr”áer 250 Zeichen aufweist
        XlWrkBkReader := XlWrkBkReader.Open(ServerUploadFile);
        XlWrkShtReader := XlWrkBkReader.GetWorksheetByName(SheetName_UploadPriceBook);
        RowCount := XlWrkShtReader.RowCount;
        XlWrkBkReader.Close;
        CLEAR(XlWrkBkReader);
        XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName(SheetName_UploadPriceBook);

        FOR i := 1 TO RowCount DO BEGIN
          XlWrkShtWriter.SetCellValueText(i, 'F', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'H', '', XlWrkShtWriter.DefaultCellDecorator);
        END;

        XlWrkBkWriter.Close;
        CLEAR(XlWrkBkWriter);
        //-

        TempExcelBuffer.DELETEALL;
        CLEAR(TempExcelBuffer);
        TempExcelBuffer.OpenBook(ServerUploadFile,SheetName_UploadPriceBook);
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        IF (UPPERCASE(GetValueAtCell(1,7)) <> 'MSRP EURO') AND (UPPERCASE(GetValueAtCell(1,7)) <> 'MSRP EUR') THEN BEGIN
          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte G muss MSRP EUR sein.');
        END;

        Kreditor.GET(PL_Kreditor);
        IF PL_W„h <> Kreditor."Currency Code" THEN BEGIN
          ERROR(Text999,PL_Kreditor);
        END;

        //********************************************************************************************
        //                               Definiert die Protokolldatei
        //********************************************************************************************

        IF DoUpdateExistingWorksheet THEN BEGIN
          IF ServerFileName = '' THEN
            ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
          IF ServerFileName = '' THEN
            EXIT;
          SheetName := TempExcelBufferExport.SelectSheetsName(ServerFileName);
          IF SheetName = '' THEN
            EXIT;
        END;

        Window.OPEN(
          Text000 +
          '@1@@@@@@@@@@@@@@@@@@@@@\');

        TempExcelBufferExport.DELETEALL;
        CLEAR(TempExcelBufferExport);

        //Protokoll Header
        RecNo := 0;
        RowNo := 1;
        ColumnNo := 1;
        EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        RowNo := 2;

        //********************************************************************************************
        //                         Eigentliches Update der Service Artikel
        //********************************************************************************************

        Servicepreise.RESET;
        Servicepreise.SETRANGE(Art,Servicepreise.Art::Champs);
        Servicepreise.SETRANGE("Zuordnung obsolete",FALSE);
        Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
        Servicepreise.SETRANGE("Update letzte Preisliste",FALSE);
        Servicepreise.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
        IF Servicepreise.FIND('-') THEN BEGIN
          TotalRecNo := Servicepreise.COUNT;
          REPEAT
            excel_msrp := 0;
            row_part := FindRowNew(Servicepreise."Service Artikelnr.",'Cell','A','Z');
            IF (row_part <> 0) THEN BEGIN
              IF FORMAT(GetValueAtCell(row_part,7)) <> 'Quotation' THEN BEGIN
                IF FORMAT(GetValueAtCell(row_part,7)) <> '' THEN
                  EVALUATE(excel_msrp,GetValueAtCell(row_part,7));
                excel_msrp := ROUND(excel_msrp,0.01);
                IF excel_msrp <> Servicepreise.MSRP THEN BEGIN
                  ColumnNo := 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Artikelnr. 2",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Service Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);

                  ColumnNo := ColumnNo + 1;
                  IF  Servicepreise.MSRP > excel_msrp THEN
                    EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[Color10]',TempExcelBufferExport."Cell Type"::Number); // dunkelgrn
                  IF  Servicepreise.MSRP < excel_msrp THEN
                    EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[red]',TempExcelBufferExport."Cell Type"::Number); //rot
                  RowNo := RowNo + 1;
                  Servicepreise.MSRP := excel_msrp;
                  IF STRPOS(Servicepreise.Preisliste,'-') > 0 THEN
                    Servicepreise.Preisliste := COPYSTR(Servicepreise.Preisliste,1,STRPOS(Servicepreise.Preisliste,'-') -1) + PL_Version
                  ELSE
                    Servicepreise.Preisliste := Servicepreise.Preisliste + PL_Version;
                  Servicepreise.MODIFY(TRUE);
                  ge„nderte_eintr„ge += 1;
                END;
              END;
            END;
            RecNo := RecNo + 1;
            Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));

          UNTIL Servicepreise.NEXT = 0;
        END;

        FileMgt.DeleteServerFile(ServerUploadFile);

        IF DoUpdateExistingWorksheet THEN BEGIN
          TempExcelBufferExport.UpdateBook(ServerFileName,SheetName);
          TempExcelBufferExport.WriteSheet('',COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN
            TempExcelBufferExport.DownloadAndOpenExcel;
        END ELSE BEGIN
          TempExcelBufferExport.CreateBook(ServerFileName,Text001);
          TempExcelBufferExport.WriteSheet(
            PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN BEGIN
            TempExcelBufferExport.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
            //TempExcelBufferExport.OpenExcelWithoutAutoFit(Text001,Text001 + ExcelFileExtensionTok,'',TRUE);
          END;
        END;
        IF NOT Testmode THEN
          TempExcelBufferExport.GiveUserControl;

        Window.CLOSE;
      END;

      //ACTS Servicepreise einspielen fr Artikel, die nicht mehr in der Preisliste sind
      IF auswahl = 6 THEN BEGIN

        //********************************************************************************************
        //                           Syntax Prfungen der Quell Datei
        //********************************************************************************************

        TempExcelBuffer.DELETEALL;
        CLEAR(TempExcelBuffer);
        TempExcelBuffer.OpenBook(ServerUploadFile,'Cover');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        EVALUATE(PL_Version,'-old_' + CONVERTSTR(FORMAT(GetValueAtCell(8,7)),'.','_'));
        IF UPPERCASE(GetValueAtCell(10,7)) <> 'ACTS' THEN BEGIN
          ERROR('Dies ist keine AudioCodes ACTS Preisliste.');
        END;
        IF (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EURO') OR (UPPERCASE(FORMAT(GetValueAtCell(9,7))) = 'EUR') THEN
          PL_W„h := ''
        ELSE
          PL_W„h := UPPERCASE(GetValueAtCell(9,7));

        PL_Kreditor := '';
        IF PL_W„h = 'USD' THEN
          PL_Kreditor := Kred_USD;
        IF PL_W„h = '' THEN
          PL_Kreditor := Kred_EURO;
        IF PL_Kreditor = '' THEN
          ERROR(Text998);

        //+ Das Sheet wird aufbereitet, damit keine Fehlermeldung erzeugt wird, wenn eine Spalte eine L„nge gr”áer 250 Zeichen aufweist
        XlWrkBkReader := XlWrkBkReader.Open(ServerUploadFile);
        XlWrkShtReader := XlWrkBkReader.GetWorksheetByName(SheetName_UploadPriceBook);
        RowCount := XlWrkShtReader.RowCount;
        XlWrkBkReader.Close;

        XlWrkBkWriter := XlWrkBkWriter.Open(ServerUploadFile);
        XlWrkShtWriter := XlWrkBkWriter.GetWorksheetByName(SheetName_UploadPriceBook);

        FOR i := 1 TO RowCount DO BEGIN
          XlWrkShtWriter.SetCellValueText(i, 'F', '', XlWrkShtWriter.DefaultCellDecorator);
          XlWrkShtWriter.SetCellValueText(i, 'H', '', XlWrkShtWriter.DefaultCellDecorator);
        END;

        XlWrkBkWriter.Close;
        //-

        TempExcelBuffer.DELETEALL;
        CLEAR(TempExcelBuffer);
        TempExcelBuffer.OpenBook(ServerUploadFile,SheetName_UploadPriceBook);
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

        IF (UPPERCASE(GetValueAtCell(1,7)) <> 'MSRP EUR') AND (UPPERCASE(GetValueAtCell(1,7)) <> 'MSRP EURO') THEN BEGIN
          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte G muss MSRP EUR oder MSRP EURO sein.');
        END;

        Kreditor.GET(PL_Kreditor);
        IF PL_W„h <> Kreditor."Currency Code" THEN BEGIN
          ERROR(Text999,PL_Kreditor);
        END;

        //********************************************************************************************
        //                               Definiert die Protokolldatei
        //********************************************************************************************

        IF DoUpdateExistingWorksheet THEN BEGIN
          IF ServerFileName = '' THEN
            ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
          IF ServerFileName = '' THEN
            EXIT;
          SheetName := TempExcelBufferExport.SelectSheetsName(ServerFileName);
          IF SheetName = '' THEN
            EXIT;
        END;

        Window.OPEN(
          Text000 +
          '@1@@@@@@@@@@@@@@@@@@@@@\');

        TempExcelBufferExport.DELETEALL;
        CLEAR(TempExcelBufferExport);

        //Protokoll Header
        RecNo := 0;
        RowNo := 1;
        ColumnNo := 1;
        EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        RowNo := 2;

        //********************************************************************************************
        //                         Eigentliches Update der Service Artikel
        //********************************************************************************************

        Servicepreise.RESET;
        Servicepreise.SETRANGE(Art,Servicepreise.Art::ACTS);
        Servicepreise.SETRANGE("Zuordnung obsolete",FALSE);
        Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
        Servicepreise.SETRANGE("Update letzte Preisliste",FALSE);
        Servicepreise.SETFILTER(Preisliste,'<>%1','SCHAEFFLER');
        IF Servicepreise.FIND('-') THEN BEGIN
          TotalRecNo := Servicepreise.COUNT;
          REPEAT
            excel_msrp := 0;
            row_part := FindRowNew(Servicepreise."Service Artikelnr.",'Cell','A','Z');
            IF (row_part <> 0) THEN BEGIN
              IF FORMAT(GetValueAtCell(row_part,7)) <> 'Quotation' THEN BEGIN
                IF FORMAT(GetValueAtCell(row_part,7)) <> '' THEN
                  EVALUATE(excel_msrp,GetValueAtCell(row_part,7));
                excel_msrp := ROUND(excel_msrp,0.01);
                IF excel_msrp <> Servicepreise.MSRP THEN BEGIN
                  ColumnNo := 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Artikelnr. 2",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,Servicepreise."Service Artikelnr.",'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Text);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);
                  ColumnNo := ColumnNo + 1;
                  EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp),'',FALSE,FALSE,FALSE,'',TempExcelBufferExport."Cell Type"::Number);

                  ColumnNo := ColumnNo + 1;
                  IF  Servicepreise.MSRP > excel_msrp THEN
                    EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[Color10]',TempExcelBufferExport."Cell Type"::Number); // dunkelgrn
                  IF  Servicepreise.MSRP < excel_msrp THEN
                  EnterCell(RowNo,ColumnNo,FORMAT(excel_msrp - Servicepreise.MSRP),'',FALSE,FALSE,FALSE,'[red]',TempExcelBufferExport."Cell Type"::Number); //rot
                  RowNo := RowNo + 1;
                  Servicepreise.MSRP := excel_msrp;
                  IF STRPOS(Servicepreise.Preisliste,'-') > 0 THEN
                    Servicepreise.Preisliste := COPYSTR(Servicepreise.Preisliste,1,STRPOS(Servicepreise.Preisliste,'-') -1) + PL_Version
                  ELSE
                    Servicepreise.Preisliste := Servicepreise.Preisliste + PL_Version;
                  Servicepreise.MODIFY(TRUE);
                  ge„nderte_eintr„ge += 1;
                END;
              END;
            END;
            RecNo := RecNo + 1;
            Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
          UNTIL Servicepreise.NEXT = 0;
        END;

        FileMgt.DeleteServerFile(ServerUploadFile);

        IF DoUpdateExistingWorksheet THEN BEGIN
          TempExcelBufferExport.UpdateBook(ServerFileName,SheetName);
          TempExcelBufferExport.WriteSheet('',COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN
            TempExcelBufferExport.DownloadAndOpenExcel;
        END ELSE BEGIN
          TempExcelBufferExport.CreateBook(ServerFileName,Text001);
          TempExcelBufferExport.WriteSheet(
            PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
          TempExcelBufferExport.CloseBook;
          IF NOT Testmode THEN BEGIN
            TempExcelBufferExport.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
            //TempExcelBufferExport.OpenExcelWithoutAutoFit(Text001,Text001 + ExcelFileExtensionTok,'',TRUE);
          END;
        END;
        IF NOT Testmode THEN
          TempExcelBufferExport.GiveUserControl;

        Window.CLOSE;
      END;

      //Ausgabe des Einspiel Ergebnisses

      IF PL_W„h = '' THEN
        w„h_text := 'EURO';
      IF PL_W„h = 'USD' THEN
        w„h_text := 'USD';

      CASE auswahl OF
        1..4 :
          BEGIN
            IF auswahl = 1 THEN PL_Bezeichnung := 'CHAMPS ' + w„h_text;
            IF auswahl = 2 THEN PL_Bezeichnung := 'ACTS ' + w„h_text;
            IF auswahl = 3 THEN PL_Bezeichnung := 'System ' + w„h_text;
            IF auswahl = 4 THEN PL_Bezeichnung := 'ACTS Schaeffler';
            MESSAGE('Import der %1 Artikel abgeschlossen.'+ '\' + 'Neue bzw. ge„nderte Datens„tze: %2\\' +
           'Excel Datens„tze: %3\Obsolete Bezeichnungen: %4 (korrigiert: %5)'
           ,PL_Bezeichnung,ge„nderte_eintr„ge,TotalRows,obsolete_eintr„ge,obsolete_korrigiert);
          END;
        5..6 : MESSAGE('Import der Servicepreise abgeschlossen.' + '\' + 'Neue bzw. ge„nderte Datens„tze: %1',ge„nderte_eintr„ge);
      END;
    END;

    LOCAL PROCEDURE CreateExcelProtocol@1000000045();
    BEGIN
      //Excel Protokoll wird initialisiert
        IF DoUpdateExistingWorksheet THEN BEGIN
          IF ServerFileName = '' THEN
            ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
          IF ServerFileName = '' THEN
            EXIT;
          SheetName := TempExcelBufferExport.SelectSheetsName(ServerFileName);
          IF SheetName = '' THEN
            EXIT;
        END;
        TempExcelBufferExport.DELETEALL;
        CLEAR(TempExcelBufferExport);

      //Header
      RowNo := 1;
      ColumnNo := 1;
      IF (auswahl = 1) OR (auswahl = 2) THEN BEGIN
        EnterCell(RowNo,ColumnNo,Text029,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text025,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text026,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text027,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text028,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
      END;
      IF auswahl = 3 THEN BEGIN
        EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text025,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
        ColumnNo := ColumnNo + 1;
        EnterCell(RowNo,ColumnNo,Text026,'',TRUE,FALSE,TRUE,'',TempExcelBufferExport."Cell Type"::Text);
      END;
      RowNo := 2;
    END;

    LOCAL PROCEDURE FinishExcelProtocol@1000000003();
    BEGIN
      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBufferExport.UpdateBook(ServerFileName,SheetName);
        TempExcelBufferExport.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBufferExport.CloseBook;
        IF NOT Testmode THEN
          TempExcelBufferExport.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBufferExport.CreateBook(ServerFileName,Text001);
        TempExcelBufferExport.WriteSheet(
          PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
        TempExcelBufferExport.CloseBook;
        IF NOT Testmode THEN BEGIN
          TempExcelBufferExport.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
          //TempExcelBufferExport.OpenExcelWithoutAutoFit(Text001,Text001 + ExcelFileExtensionTok,'',TRUE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBufferExport.GiveUserControl;
    END;

    PROCEDURE FindRowNew@1000000086(What@1140000 : Text[80];Art@1140001 : Text[30];Col1@1140006 : Text[30];Col2@1140008 : Text[30]) : Integer;
    BEGIN
      WITH TempExcelBuffer DO BEGIN
        SETFILTER("Cell Value as Text",'%1',What);
        IF FINDFIRST THEN
          EXIT("Row No.");
      END;
    END;

    LOCAL PROCEDURE GetValueAtCell@1000000025(RowNo@1000000000 : Integer;ColNo@1000000001 : Integer) : Text;
    BEGIN
      IF TempExcelBuffer.GET(RowNo,ColNo) THEN
        EXIT(TempExcelBuffer."Cell Value as Text");
    END;

    LOCAL PROCEDURE GetValueAtCellPriceBook@1000000011(VAR SearchExcelBuffer@1000000002 : TEMPORARY Record 370;RowNo@1000000000 : Integer;ColNo@1000000001 : Integer) : Text;
    BEGIN
      IF SearchExcelBuffer.GET(RowNo,ColNo) THEN
        EXIT(SearchExcelBuffer."Cell Value as Text");
    END;

    LOCAL PROCEDURE GetDiscountLevel@1000000009(Discount@1000000000 : Text) : Decimal;
    BEGIN
      CASE Discount OF
        'A' : EXIT(0.4);
        'F' : EXIT(0.2);
        'G' : EXIT(0.1);
        'H' : EXIT(0.1);
        'J' : EXIT(0.2);
        'K' : EXIT(0.1);
        'N' : EXIT(0);
      END;
    END;

    LOCAL PROCEDURE ConvertDateString@1000000024(dateString@1000000000 : Text[12]) : Date;
    VAR
      dayValue@1000000001 : Integer;
      months@1000000002 : Text;
      monthValue@1000000003 : Integer;
      monthText@1000000007 : Text;
      yearValue@1000000004 : Integer;
      dateValue@1000000005 : Date;
      mPos@1000000006 : Integer;
    BEGIN
      IF STRPOS(dateString,'-') > 0 THEN BEGIN
        dateString := CONVERTSTR(dateString,'-',',');
        EVALUATE(dayValue,SELECTSTR(1,dateString));
        months := 'jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec';
        monthText := COPYSTR(LOWERCASE(SELECTSTR(2,dateString)),1,3);
        IF STRLEN(monthText) <> 3 THEN
          ERROR('Invalid month expression: ' + monthText);
        mPos := STRPOS(months,monthText);
        IF mPos > 0 THEN BEGIN
          monthValue := (mPos + 3) / 4;
          EVALUATE(yearValue,SELECTSTR(3,dateString));
          {
          IF yearValue > 14 THEN
            yearValue := yearValue + 1900
          ELSE
            yearValue := yearValue + 2000;
          }
          dateValue := DMY2DATE(dayValue,monthValue,yearValue);
          EXIT(dateValue);
        END ELSE
          ERROR('Kein gltiger Monat: ' + monthText);
      END;
      EXIT(0D);
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBufferExport.INIT;
      TempExcelBufferExport.VALIDATE("Row No.",RowNo);
      TempExcelBufferExport.VALIDATE("Column No.",ColumnNo);
      TempExcelBufferExport."Cell Value as Text" := CellValue;
      TempExcelBufferExport.Formula := Formular;
      TempExcelBufferExport.Bold := Bold;
      TempExcelBufferExport.Italic := Italic;
      TempExcelBufferExport.Underline := UnderLine;
      TempExcelBufferExport.NumberFormat := NumberFormat;
      TempExcelBufferExport."Cell Type" := CellType;
      TempExcelBufferExport.INSERT;
    END;

    BEGIN
    {
      Lfd.Nr. Version   Datum       User  Beschreibung
      ===========================================================================
      1       TOP       26.03.18    ST    Excel Automation komplett durch deutlich schnellere Excel Buffer Technik ersetzt
      2       TOP       19.06.18    ST    Abl”sung der manuellen Preislisten Vorbereitung durch automatisches Einspielen der Original Preisliste
      3       TOP       08.01.19    ST    Pauschalartikel wie z.B. ACTS9X5-IPP_PK-A/YR werden nun beim Abgleich bercksichtigt, hier ist der Service gleich HW MSRP, EK und VK = 0
      4       TOP       19.03.19    ST    Neues Preislisten System mit neu und alt integriert, um so zwischen verschiedenen Versionen wechseln zu k”nnen
      5       TOP       19.01.21    ST    Neuer Modus "Ersetze aktuelle Preisliste" implementiert, um eine Neu Auflage der aktuell gltigen Preisliste zu realisieren und Žnderungen einzuspielen
      6       TOP       08.04.21    ST    Neue Korrektur Modi, um bestimmte Fehler in den Preislisten zu korrigieren, die durch Diskrepanzen zwischen den Normal / EOS Sheets und dem Uploadable Flat Price Book entstehen
    }
    END.
  }
}

