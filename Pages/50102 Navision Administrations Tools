OBJECT Page 50102 Navision Administrations Tools
{
  OBJECT-PROPERTIES
  {
    Date=27.11.19;
    Time=11:55:24;
    Modified=Yes;
    Version List=TOPAS;
  }
  PROPERTIES
  {
    OnOpenPage=BEGIN
                 hinweis[1] := 'Korrigiere Artikel Einheit - Stck - Klick dazu auf Aktion "Artikeleinheit korrigieren"';
                 hinweis[2] := 'Ausgeschiedene Kontakte korrigieren - siehe Aktion "Kontakte korrigieren"';
                 hinweis[3] := 'Servicepreise neu kalkulieren (Lfd Nr. von ... - bis ...)';
                 hinweis[4] := 'Zu importierende Seriennummern in vorhandene Auftrags-Kalkulation - Klick dazu auf Aktion "Import Seriennr."';
                 hinweis[5] := 'Hinweis: Spalte A = Artikelnummer, Spalte B = Seriennummer (šberschrift bernehmen)';
                 hinweis[6] := 'Service Statistik (Detailliert = Statistik + Fehler Bereinigung) - Klick dazu auf Aktion "Statistik"';
                 hinweis[7] := 'Benutzer auf neuen Mandanten umstellen - Klick dazu auf Aktion "Benutzer umstellen"';
                 hinweis[8] := 'Kunden Mailings werden in den Dokumentenversand eingespielt';
                 hinweis[9] := 'Kopiert Servicepreise von einer Artikelnr. zu einer gewnschten Ziel Artikelnr. (keine Servicepreise vorhanden)';
                 hinweis[10] := 'Artikelverfolgung im Artikel „ndern - šberschriften wie folgt verwenden: Spalte A - Nr., Spalte B - Seriennummer, Spalte C - Product Key und dann pro Artikel ein X = ja setzen';
               END;

    ActionList=ACTIONS
    {
      { 1900000000;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1       ;1   ;ActionGroup;
                      CaptionML=[DEU=Allgemein;
                                 ENU=General] }
      { 1140010 ;2   ;Action    ;
                      Name=Packdaten_holen;
                      CaptionML=DEU=Packdaten holen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=GetSourceDoc;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF au_nr1 = '' THEN
                                   ERROR(Text002);

                                 TOPASLagerManagement.HolePackDaten(au_nr1);
                               END;
                                }
      { 1140007 ;2   ;Action    ;
                      Name=Einheitencode_korrigieren;
                      CaptionML=DEU=Einheitencode korrgieren;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=UnitOfMeasure;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Korrigiere_EinheitenStck;
                               END;
                                }
      { 1140036 ;2   ;Action    ;
                      Name=LabelDaten_buchen;
                      CaptionML=DEU=Label Daten buchen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=BarCode;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 LabelDatenBuchen;
                               END;
                                }
      { 1140019 ;2   ;Action    ;
                      Name=Unsubscribes_einspielen;
                      CaptionML=DEU=Unsubscribes einspielen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CustomerContact;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Unsubscribes_einspielen(unsub_speicherort);
                               END;
                                }
      { 1000000038;2 ;Action    ;
                      Name=Mailings_einspielen;
                      CaptionML=DEU=Mailings einspielen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SendMail;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Mailings_einspielen(mailing_betreff,mailing_datum,mailing_adressen_speicherort);
                               END;
                                }
      { 1140009 ;2   ;Action    ;
                      Name=UN_verlassen_korrigieren;
                      CaptionML=DEU=Kontakte korrgieren;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CustomerContact;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Korrigiere_AusgeschiedeneKto;
                               END;
                                }
      { 1000000035;2 ;Action    ;
                      Name=Debitornr_umbuchen;
                      CaptionML=DEU=Debitornr. umbuchen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Customer;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Debitornr_umbuchen(alte_debnr,neue_debnr);
                               END;
                                }
      { 1140011 ;2   ;Action    ;
                      Name=Service_neubuchen;
                      CaptionML=DEU=Service neu buchen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=PostedServiceOrder;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF lieferscheinnr2 = '' THEN
                                   ERROR(Text002);

                                 Service_neu_aufbauen(lieferscheinnr2);
                               END;
                                }
      { 1140024 ;2   ;Action    ;
                      Name=Service_neukalkulieren;
                      CaptionML=DEU=Service neu kalkulieren;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CalculateSimulation;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF (start_lfdnr = '') OR (end_lfdnr = '') THEN
                                   ERROR(Text002);

                                 Service_neu_kalkulieren(start_lfdnr,end_lfdnr);
                               END;
                                }
      { 1140026 ;2   ;Action    ;
                      Name=Service_SN_umbuchen;
                      CaptionML=DEU=Service SN umbuchen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=CreateSerialNo;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ServiceSeriennrUmbuchen(artikelnr,alte_sn,neue_sn,'RMAXXXXX')
                               END;
                                }
      { 1140045 ;2   ;Action    ;
                      Name=Import_SN_in_Kalkulation;
                      CaptionML=DEU=Import Seriennr.;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ImportCodes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ImportSeriennrInBeleg(auftragsnr,auftragszeilennr);
                               END;
                                }
      { 1000000044;2 ;Action    ;
                      Name=Servicepreise_kopieren;
                      CaptionML=DEU=Servicepreise kopieren;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Copy;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 IF (servicepreis_kopieren_von = '') OR (servicepreis_kopieren_nach = '') THEN
                                   ERROR(Text002);

                                 ServicepreiseKopieren(servicepreis_kopieren_von,servicepreis_kopieren_nach);
                               END;
                                }
      { 1140048 ;2   ;Action    ;
                      Name=Service_Statistiken;
                      CaptionML=DEU=Service Statistiken;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Statistics;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 selection@1140000 : Integer;
                               BEGIN
                                 selection := STRMENU(Text200,1);
                                 CASE selection OF
                                   0: ;
                                   1:
                                     BEGIN
                                       Statistiken.Z„hle_Service_einfach(0,FALSE);
                                       Statistiken.Z„hle_Service_einfach(1,FALSE);
                                     END;
                                   2:
                                     BEGIN
                                       Statistiken.Z„hle_Service_detailiert(0,FALSE);
                                       Statistiken.Z„hle_Service_detailiert(1,FALSE);
                                     END;
                                 END;
                               END;
                                }
      { 1000000029;2 ;Action    ;
                      Name=Artikelverfolgung_umstellen;
                      CaptionML=DEU=Artikelverfolgung umstellen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=ItemTracking;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Artverfolg_einspielen(artverf_speicherort);
                               END;
                                }
      { 1000000026;2 ;Action    ;
                      Name=Berichtstabelle_leeren;
                      CaptionML=DEU=Berichtstabelle leeren;
                      Promoted=Yes;
                      Image=ClearLog;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Berichtstabelle_leeren;
                               END;
                                }
      { 1000000025;2 ;Action    ;
                      Name=SwitchBenutzerMandant;
                      CaptionML=DEU=Benutzer auf Mandanten umstellen;
                      Promoted=Yes;
                      Image=Company;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 //23.05.17 ST - Benutzer k”nnen hiermit schnell auf einen neuen Mandanten umgestellt werden
                                 IF mandant = '' THEN BEGIN
                                   ERROR(Text011);
                                   EXIT;
                                 END;

                                 IF UserTab.FINDFIRST THEN
                                   REPEAT
                                     UserPersonalization.RESET;
                                     UserPersonalization.SETRANGE("User ID",UserTab."User Name");
                                     IF UserPersonalization.FINDFIRST THEN BEGIN
                                       IF mandant <> UserPersonalization.Company THEN BEGIN
                                         UserPersonalization.VALIDATE(Company,mandant);
                                       END;
                                       UserPersonalization.VALIDATE("Language ID",1031);
                                       UserPersonalization.VALIDATE("Locale ID",1031);
                                       UserPersonalization.VALIDATE("Time Zone",'W. Europe Standard Time');
                                       UserPersonalization.MODIFY;
                                     END ELSE BEGIN
                                       UserPersonalization.INIT;
                                       UserPersonalization.VALIDATE("User SID",UserTab."User Security ID");
                                       UserPersonalization.VALIDATE(Company,mandant);
                                       UserPersonalization.VALIDATE("Language ID",1031);
                                       UserPersonalization.VALIDATE("Locale ID",1031);
                                       UserPersonalization.VALIDATE("Time Zone",'W. Europe Standard Time');
                                       UserPersonalization.INSERT(TRUE);
                                     END;
                                   UNTIL UserTab.NEXT = 0;

                                 MESSAGE(Text012, mandant);
                               END;
                                }
      { 1000000048;2 ;Action    ;
                      Name=Lieferbedingungscode_„ndern;
                      CaptionML=DEU=Lieferbedingungscode „ndern;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=UpdateShipment;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 Korrigiere_Lieferbedingungscode;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000;0;Container ;
                ContainerType=ContentArea }

    { 1900001;1;Group     ;
                CaptionML=DEU=Allgemein;
                GroupType=Group }

    { 1000000000;2;Group  ;
                CaptionML=DEU=Packkontrolle;
                GroupType=Group }

    { 1140003;3;Field     ;
                Name=Auftragsnr.;
                CaptionML=DEU=Packdaten neu bertragen (Angabe Auftrags-Nr.);
                SourceExpr=au_nr1 }

    { 1140037;3;Field     ;
                Name=Lieferscheinnr.;
                CaptionML=DEU=Laben Daten neu bertragen (Angabe Lieferscheinnr.);
                SourceExpr=lieferscheinnr }

    { 1000000003;2;Group  ;
                CaptionML=DEU=Artikel;
                GroupType=Group }

    { 1000000002;3;Field  ;
                SourceExpr=hinweis[1];
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1900002;1;Group     ;
                CaptionML=DEU=Kontakte }

    { 1000000001;2;Group  ;
                CaptionML=DEU=Kontakte korrigieren;
                GroupType=Group }

    { 1000000004;3;Field  ;
                SourceExpr=hinweis[2];
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1000000005;2;Group  ;
                CaptionML=DEU=Unsubscribes einspielen;
                GroupType=Group }

    { 1140016;3;Field     ;
                Name=Datei_Unsub;
                CaptionML=DEU=Datei;
                SourceExpr=unsub_speicherort;
                OnLookup=BEGIN
                           TOPAS_API.OpenFile(unsub_speicherort);
                         END;

                OnAssistEdit=BEGIN
                               unsub_speicherort := TOPAS_API.Save_FileDialog;
                             END;
                              }

    { 1000000036;2;Group  ;
                CaptionML=DEU=Kunden Mailings einspielen;
                GroupType=Group }

    { 1000000046;3;Field  ;
                SourceExpr=hinweis[8];
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1000000039;3;Field  ;
                Name=Betreff des Mailings;
                SourceExpr=mailing_betreff }

    { 1000000040;3;Field  ;
                Name=Versanddatum des Mailings;
                SourceExpr=mailing_datum }

    { 1000000037;3;Field  ;
                Name=Datei_Adressen;
                CaptionML=DEU=Datei;
                SourceExpr=mailing_adressen_speicherort;
                OnLookup=BEGIN
                           TOPAS_API.OpenFile(mailing_adressen_speicherort);
                         END;

                OnAssistEdit=BEGIN
                               mailing_adressen_speicherort := TOPAS_API.Save_FileDialog;
                             END;
                              }

    { 1000000031;1;Group  ;
                CaptionML=DEU=Debitoren;
                GroupType=Group }

    { 1000000032;2;Group  ;
                CaptionML=DEU=Debitornr. „ndern;
                GroupType=Group }

    { 1000000033;3;Field  ;
                CaptionML=DEU=von Debitornr.;
                SourceExpr=alte_debnr }

    { 1000000034;3;Field  ;
                CaptionML=DEU=auf Debitornr. (aus NAV5.0) „ndern;
                SourceExpr=neue_debnr }

    { 1900003;1;Group     ;
                CaptionML=DEU=Service }

    { 1000000010;2;Group  ;
                CaptionML=DEU=Service erneu buchen;
                GroupType=Group }

    { 1140005;3;Field     ;
                CaptionML=DEU=Service erneut buchen (Angabe Lieferscheinnr.);
                SourceExpr=lieferscheinnr2 }

    { 1000000006;2;Group  ;
                CaptionML=DEU=Service neu kalkulieren;
                GroupType=Group }

    { 1000000007;3;Group  ;
                GroupType=Group }

    { 1000000009;4;Field  ;
                SourceExpr=hinweis[3];
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1140021;4;Field     ;
                Name=von Lfd. Nr.;
                SourceExpr=start_lfdnr }

    { 1140022;4;Field     ;
                Name=bis Lfd. Nr.;
                SourceExpr=end_lfdnr }

    { 1000000008;2;Group  ;
                CaptionML=DEU=Seriennr.  umbuchen;
                GroupType=Group }

    { 1000000022;3;Group  ;
                GroupType=Group }

    { 1140030;4;Field     ;
                Name=Artikelnr.;
                CaptionML=DEU=Artikelnr.;
                SourceExpr=artikelnr;
                TableRelation=Item }

    { 1140028;4;Field     ;
                Name=Alte Seriennr.;
                SourceExpr=alte_sn }

    { 1140029;4;Field     ;
                Name=Neue Seriennr.;
                SourceExpr=neue_sn }

    { 1000000015;2;Group  ;
                CaptionML=DEU=Import Seriennr.;
                GroupType=Group }

    { 1000000014;3;Field  ;
                SourceExpr=hinweis[4];
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1000000013;3;Field  ;
                SourceExpr=hinweis[5];
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1000000011;3;Group  ;
                GroupType=Group }

    { 1140035;4;Field     ;
                Name=Auftragsnr._;
                CaptionML=DEU=Auftragsnr.;
                SourceExpr=auftragsnr }

    { 1140039;4;Field     ;
                Name=Auftragszeilennr.;
                SourceExpr=auftragszeilennr }

    { 1140044;4;Field     ;
                Name=Datei_ImportSN;
                CaptionML=DEU=Datei;
                SourceExpr=import_sn_datei;
                OnLookup=BEGIN
                           TOPAS_API.OpenFile(import_sn_datei);
                         END;

                OnAssistEdit=BEGIN
                               import_sn_datei := TOPAS_API.Save_FileDialog;
                             END;
                              }

    { 1000000041;2;Group  ;
                CaptionML=DEU=Servicepreise kopieren;
                GroupType=Group }

    { 1000000045;3;Field  ;
                SourceExpr=hinweis[9];
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1000000042;3;Field  ;
                Name=Vorlage Artikelnr.;
                SourceExpr=servicepreis_kopieren_von }

    { 1000000043;3;Field  ;
                Name=Ziel Artikelnr.;
                SourceExpr=servicepreis_kopieren_nach }

    { 1000000019;2;Group  ;
                CaptionML=DEU=Statistik;
                GroupType=Group }

    { 1000000012;3;Group  ;
                GroupType=Group }

    { 1000000020;4;Field  ;
                SourceExpr=hinweis[6];
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1000000030;1;Group  ;
                CaptionML=DEU=Artikelverfolgung;
                GroupType=Group }

    { 1000000027;2;Group  ;
                GroupType=Group }

    { 1000000047;3;Field  ;
                SourceExpr=hinweis[10];
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1000000028;3;Field  ;
                CaptionML=DEU=Datei;
                SourceExpr=artverf_speicherort;
                OnLookup=BEGIN
                           TOPAS_API.OpenFile(artverf_speicherort);
                         END;

                OnAssistEdit=BEGIN
                               artverf_speicherort := TOPAS_API.Save_FileDialog;
                             END;
                              }

    { 1000000018;1;Group  ;
                CaptionML=DEU=Benutzeranpassung;
                GroupType=Group }

    { 1000000021;2;Group  ;
                GroupType=FixedLayout }

    { 1000000016;3;Group  ;
                GroupType=Group }

    { 1000000017;4;Field  ;
                SourceExpr=hinweis[7];
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1000000024;2;Group  ;
                GroupType=Group }

    { 1000000023;3;Field  ;
                SourceExpr=mandant;
                TableRelation=Company }

    { 1000000049;1;Group  ;
                CaptionML=DEU=Lieferbedingscode „ndern;
                GroupType=Group }

    { 1000000050;2;Group  ;
                CaptionML=DEU=Lieferbedingungscode „ndern;
                GroupType=Group }

  }
  CODE
  {
    VAR
      Packkontrolle@1000000011 : Record 50038;
      Berichtstabelle@1000000008 : Record 50037;
      Artikel@1000000012 : Record 27;
      UserTab@1000000004 : Record 2000000120;
      UserPersonalization@1000000002 : Record 2000000073;
      TempExcelBuffer@1000000031 : TEMPORARY Record 370;
      FileMgt@1000000013 : Codeunit 419;
      Statistiken@1000000010 : Codeunit 50002;
      TOPAS_API@1000000000 : Codeunit 50001;
      TOPASLagerManagement@1000000014 : Codeunit 50010;
      Excel@1140012 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      Book@1140011 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      Range@1140010 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      Sheet@1140009 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      j@1140008 : Text[30];
      ServerFileName@1000000028 : Text;
      SheetName@1000000027 : Text[250];
      DoUpdateExistingWorksheet@1000000026 : Boolean;
      Testmode@1000000025 : Boolean;
      RecNo@1000000023 : Integer;
      TotalRecNo@1000000022 : Integer;
      RowNo@1000000021 : Integer;
      ColumnNo@1000000020 : Integer;
      TotalRows@1000000024 : Integer;
      XlWrkBkWriter@1000000019 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorkbookWriter";
      XlWrkShtWriter@1000000018 : DotNet "'Microsoft.Dynamics.Nav.OpenXml, Version=9.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.OpenXml.Spreadsheet.WorksheetWriter";
      i@1000000029 : Integer;
      au_nr1@1140000 : Code[20];
      zaehler@1140003 : Integer;
      zaehler2@1140004 : Integer;
      unsub_speicherort@1140005 : Text;
      Text000@1000000030 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1140006 : TextConst 'DEU=Unsubscribes Import #1##########';
      artverf_speicherort@1000000007 : Text;
      mailing_betreff@1000000033 : Text[50];
      mailing_datum@1000000032 : Date;
      mailing_adressen_speicherort@1000000017 : Text;
      Window@1140007 : Dialog;
      Text002@1140024 : TextConst 'DEU=Die Eingabedaten sind unvollst„ndig.';
      Text003@1140023 : TextConst 'DEU=Die Seriennr. Umbuchung ist nicht m”glich, da die Seriennr. %1 noch in %2 verwendet wird.';
      Text004@1140022 : TextConst 'DEU=Seriennr. im Servicevertrag umbuchen,Keine Buchung';
      Text005@1140021 : TextConst 'DEU=Die Seriennr. wurde von %1 auf %2 abge„ndert und sind dabei einen Ersatz zu generieren. Wenn Sie jetzt best„tigen werden s„mtliche System bzw. Sericevertragspositionen umgebucht und auf die neue Seriennr. korrigiert. Wollen Sie Aktion jetzt durchfhren?';
      Text006@1140020 : TextConst 'DEU="Die reklamierte Seriennr. %1 wurde durch Seriennr. %2 ersetzt. Der dazugeh”rige Wartungsvertrag %3 wurde entsprechend umgestellt. Alte Pos. %4 => Inaktiv"';
      Text007@1140019 : TextConst 'DEU=Eine bereits durchgefhrte Service Umbuchung konnte aktualisiert werden.Wartungsvertragnr.: %1\Urspr. Seriennr.: %2 (%3)\ALT: %4 (%5)\NEU: %6 (%5)';
      Text008@1140018 : TextConst 'DEU=Aktualisierung der urspr. Seriennr. fr %1 (Pos. %2) durchgefhrt.';
      Text009@1140017 : TextConst 'DEU=Es konnte eine tempor„re Seriennr. Vorbelegung fr die Kalkulation im Beleg %1, Zeilennr. %2 gefunden werden, diese wurde entsprechend im Servicesystem angepasst.';
      Text010@1140016 : TextConst 'DEU=Die tempor„r vorbelegte Seriennr. %1 konnte fr die Kalkulation im Beleg %2, Zeilennr. %3 ge„ndert werden.';
      Text011@1000000005 : TextConst 'DEU=Sie mssen zun„chst einen Mandanten ausw„hlen.';
      Text012@1000000006 : TextConst 'DEU=Alle Benutzer erfolgreich auf %1 umgestellt.';
      Text013@1000000039 : TextConst 'DEU=Die Servicepreise wurden erfolgreich bertragen.';
      Text014@1000000038 : TextConst 'DEU=Es konnten keine Servicepreise fr Artikel %1 gefunden werden.';
      Text015@1000000037 : TextConst 'DEU=Es wurden bereits Servicepreise fr den Artikel %1 angelegt. Bitte l”schen Sie zun„chst alle Zuordnungen fr diesen Artikel und fhren die Funktion danach erneut aus.';
      Text020@1140029 : TextConst 'DEU=Das Feld Lieferscheinnr. darf nicht leer sein.';
      Text100@1140013 : TextConst 'DEU=Die Datei oder der Pfad %1 konnte nicht gefunden werden.';
      start_lfdnr@1140014 : Code[20];
      end_lfdnr@1140015 : Code[20];
      artikelnr@1140027 : Code[20];
      alte_sn@1140026 : Code[20];
      neue_sn@1140025 : Code[20];
      alte_debnr@1000000015 : Code[20];
      neue_debnr@1000000016 : Code[20];
      lieferscheinnr@1140028 : Code[20];
      lieferscheinnr2@1000000009 : Code[20];
      import_sn_datei@1140033 : Text;
      auftragsnr@1140032 : Code[20];
      auftragszeilennr@1140031 : Integer;
      leerzeilen@1140030 : Integer;
      Text200@1140036 : TextConst 'DEU=Einfach,Detailliert';
      hinweis@1000000001 : ARRAY [10] OF Text;
      mandant@1000000003 : Text[30];
      Text300@1000000035 : TextConst 'DEU=Import erfolgreich abgeschlossen.';
      servicepreis_kopieren_von@1000000034 : Code[20];
      servicepreis_kopieren_nach@1000000036 : Code[20];
      selection@1000000041 : Integer;
      ServiceSelection@1000000042 : TextConst 'DEU=Alle,ACTS EURO,ACTS USD,CHAMPS EURO,CHAMPS USD';

    PROCEDURE Service_neu_aufbauen@1140002(ShipmentNo@1140000 : Code[20]);
    VAR
      LizenzTab@1140001 : Record 50024;
    BEGIN
      //******************************************************************************************************************************
      // 28.02.13 ST - Falls Fehler im Service System vorlagen, alle Pos. l”schen und mit AU Nr. neu laufen lassen -> Neu Aufbau
      //******************************************************************************************************************************

      LizenzTab.CreateSystemFromSalesHeader(ShipmentNo,FALSE);
      LizenzTab.CreateServiceFromSalesHeader(ShipmentNo,FALSE);
    END;

    PROCEDURE Service_neu_kalkulieren@1140007(start_lfdnr@1140003 : Code[20];end_lfdnr@1140004 : Code[20]);
    VAR
      Servicepositionen@1140000 : Record 50024;
      neuer_ek@1140001 : Decimal;
      neuer_msrp@1140002 : Decimal;
    BEGIN
      //Umstellung Servicepositionen auf neueste Service Preise

      Servicepositionen.RESET;
      Servicepositionen.SETFILTER(Art,'%1',Servicepositionen.Art::Service);
      Servicepositionen.SETFILTER("Lfd. Nr.",'%1..%2',start_lfdnr,end_lfdnr);
      IF Servicepositionen.FIND('-') THEN
        REPEAT
          neuer_ek := Servicepositionen.ServicePreiseNeuKalkulieren(Servicepositionen."Artikelnr.",Servicepositionen."SUP Artikelnr.",
          Servicepositionen."Dauer Serviceleistung",'DC',FALSE,Servicepositionen."Service W„hrungscode",Servicepositionen."Quotenr.",0);
          neuer_msrp := Servicepositionen.ServicePreiseNeuKalkulieren(Servicepositionen."Artikelnr.",Servicepositionen."SUP Artikelnr.",
          Servicepositionen."Dauer Serviceleistung",'MSRP',FALSE,Servicepositionen."Service W„hrungscode",Servicepositionen."Quotenr.",0);
          MESSAGE('Pos %1 Neuer EK fr %2 (SN: %3): %4 (Alt: %5)',
          Servicepositionen."Lfd. Nr.",Servicepositionen."Artikelnr.",Servicepositionen."Seriennr.",neuer_ek,
          Servicepositionen."Service DC");
          Servicepositionen."Service DC" := neuer_ek;
          Servicepositionen."Service MSRP" := neuer_msrp;
          Servicepositionen."Service Artikelnr." := Servicepositionen.ServiceArtikelnrErmitteln(Servicepositionen."Artikelnr.",Servicepositionen."SUP Artikelnr.",Servicepositionen."Service W„hrungscode",0);
          Servicepositionen.MODIFY(TRUE);
        UNTIL Servicepositionen.NEXT = 0;
    END;

    PROCEDURE Korrigiere_EinheitenStck@1140005();
    VAR
      Artikel@1140001 : Record 27;
      Artikel_einheit@1140002 : Record 5404;
      zaehler@1140000 : Integer;
    BEGIN
      zaehler := 0;
      Artikel.RESET;
      Artikel.SETFILTER("No.",'<>%1','');
      Artikel.SETFILTER("Base Unit of Measure",'%1','STšCK');
      IF Artikel.FIND('-') THEN
        REPEAT
          Artikel_einheit.RESET;
          Artikel_einheit.SETFILTER(Artikel_einheit."Item No.",'%1',Artikel."No.");
          IF NOT Artikel_einheit.FINDFIRST THEN BEGIN
            //MESSAGE('%1 Einheit: %2',Artikel."No.",Artikel."Base Unit of Measure");
            Artikel_einheit.INIT;
            Artikel_einheit."Item No." := Artikel."No.";
            Artikel_einheit.Code := 'STšCK';
            Artikel_einheit."Qty. per Unit of Measure" := 1;
            Artikel_einheit.INSERT(TRUE);
            zaehler += 1;
          END;
        UNTIL Artikel.NEXT = 0;

      MESSAGE('Korrigierte Artikel Einheiten: %1',zaehler);
    END;

    PROCEDURE Korrigiere_AusgeschiedeneKto@1140000();
    VAR
      Kontakte@1140000 : Record 5050;
    BEGIN
      //Bei Kontaktpersonen mit Unternehmen verlassen die Telnr. l”schen, sonst k”nnen diese f„lschlicherweise
      //von Navigate UC herangezogen werden

      zaehler  := 0;
      zaehler2 := 0;

      Kontakte.RESET;
      Kontakte.SETRANGE(Type,Kontakte.Type::Person);
      Kontakte.SETRANGE("Unternehmen verlassen",TRUE);
      IF Kontakte.FIND('-') THEN
        REPEAT
          zaehler += 1;
          IF Kontakte."Phone No." <> '' THEN BEGIN
            Kontakte."Phone No." := '';
            Kontakte.MODIFY;
            zaehler2 += 1;
          END;
        UNTIL Kontakte.NEXT = 0;

      MESSAGE('Ausgeschiedene Kontakte korrigiert: %1 (von %2)',zaehler2, zaehler);
    END;

    LOCAL PROCEDURE Korrigiere_Lieferbedingungscode@1000000005();
    VAR
      Debitor@1000000000 : Record 18;
    BEGIN
      //Debitoren mit Lieferbedingungscode AB_HAN auf AB_25°K_FH umstellen

      zaehler  := 0;
      zaehler2 := 0;

      Debitor.RESET;
      Debitor.SETRANGE("Shipment Method Code",'AB_HAN');
      //Debitor.SETRANGE(Blocked,FALSE);

      IF Debitor.FIND('-') THEN
        REPEAT
          zaehler += 1;
          IF Debitor."Shipment Method Code" = 'AB_HAN' THEN BEGIN
            Debitor."Shipment Method Code" := 'AB_25°K_FH';
            Debitor.MODIFY;
            zaehler2 += 1;
          END;
        UNTIL Debitor.NEXT = 0;

      MESSAGE('Von %1 gefundenen Debitoren wurden  %2 umgestellt',zaehler2, zaehler);
    END;

    PROCEDURE Debitornr_umbuchen@1000000003(Alte_Debnr@1000000000 : Code[20];Neue_Debnr@1000000001 : Code[20]);
    VAR
      Customer@1000000002 : Record 18;
    BEGIN
      IF (Alte_Debnr = '') OR (Neue_Debnr = '') THEN
        ERROR(Text002);

      IF Customer.GET(Alte_Debnr) THEN
        Customer.RENAME(Neue_Debnr);

      MESSAGE('Debitornr. erfolgreich auf %1 umgestellt.',Neue_Debnr);
    END;

    PROCEDURE Unsubscribes_einspielen@1140004(Speicherort@1140002 : Text[250]);
    VAR
      Kontakte@1140003 : Record 5050;
      Unsub_Verteiler@1140001 : Record 5056;
      leerzeilen@1140000 : Integer;
    BEGIN
      IF Speicherort = '' THEN ERROR(Text002);

      zaehler := 0;
      zaehler2 := 0;

      // Definiert die zu importierende Datei
      IF ISCLEAR(Excel) THEN
        IF CREATE(Excel,FALSE,TRUE) THEN BEGIN END ELSE ERROR('Cannot start Excel Application.');
      Book := Excel.Workbooks._Open(Speicherort,0,FALSE);
      Sheet := Book.Worksheets.Item('Unsubscribes');
      leerzeilen := 0;
      j := '1';
      IF (FORMAT(Sheet.Range('C'+j).Value) <> 'Im Navision')
      OR (FORMAT(Sheet.Range('D'+j).Value) <> 'Kontaktnr') THEN BEGIN
        Book.Close;
        ERROR('Spalte "Kontaktnr" (D) oder Spalte "Im Navision" (C) konnte nicht gefunden werden > falsche Syntax.');
      END ELSE BEGIN
        j := '2';
        REPEAT
          IF (FORMAT(Sheet.Range('D'+j).Value) = '-2146826246') //Interner Wert fr #NV, dann berspringen
          OR (STRLEN(FORMAT(Sheet.Range('D'+j).Value)) > 20) THEN j := INCSTR(j);
          IF (FORMAT(Sheet.Range('A'+j).Value) = '') OR (FORMAT(Sheet.Range('D'+j).Value) = '') THEN
            leerzeilen += 1
          ELSE BEGIN
            Kontakte.RESET;
            Kontakte.SETFILTER("E-Mail",'@' + CONVERTSTR(FORMAT(Sheet.Range('A'+j).Value),'@','?'));
            IF Kontakte.FINDFIRST THEN BEGIN
              REPEAT
                zaehler += 1;
                Unsub_Verteiler.RESET;
                Unsub_Verteiler.SETFILTER("Contact No.",'%1',Kontakte."No.");
                Unsub_Verteiler.SETFILTER("Mailing Group Code",'%1','UNSUB');
                IF NOT Unsub_Verteiler.FINDFIRST THEN BEGIN
                  Unsub_Verteiler.INIT;
                  Unsub_Verteiler."Contact No." := Kontakte."No.";
                  Unsub_Verteiler."Mailing Group Code" := 'UNSUB';
                  Unsub_Verteiler.INSERT(TRUE);
                  zaehler2 += 1;
                END;
                Sheet.Range('C'+j).Value := 'x';
                //Sheet.Range('D'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(Kontakte.TABLENAME,1,5050,FORMAT(Sheet.Range('D'+j).Value));
                Sheet.Range('F'+j).Value := Kontakte.COUNT;
              UNTIL Kontakte.NEXT = 0;
            END ELSE
              Sheet.Range('C'+j).Value := '-';
          END;
          j := INCSTR(j);
        UNTIL leerzeilen = 1;
        //Book.Save;
        Book.Close(TRUE);
      END;

      MESSAGE('Gesamt untersucht: %1, eingetragen ins NAV: %2',zaehler, zaehler2);
    END;

    PROCEDURE Mailings_einspielen@1000000004(Betreff@1000000005 : Text[50];Datum@1000000006 : Date;Speicherort@1000000000 : Text);
    VAR
      Contact@1000000010 : Record 5050;
      Dokumentenversand@1000000009 : Record 50032;
      User1@1000000003 : Code[20];
      Email@1000000004 : Text[80];
      Spalte_Adressen_User1_Nr@1000000007 : Integer;
      Spalte_Adressen_EMail_Nr@1000000008 : Integer;
      ServerUploadFile@1000000011 : Text;
      Spalte_Adressen_User1@1000000002 : TextConst 'DEU=A';
      Spalte_Adressen_EMail@1000000001 : TextConst 'DEU=T';
    BEGIN
      IF (Betreff = '') OR (Datum = 0D) OR (Speicherort = '') THEN ERROR(Text002);

      ServerUploadFile := FileMgt.UploadFileSilent(Speicherort);

      TempExcelBuffer.DELETEALL;
        TempExcelBuffer.OpenBook(ServerUploadFile,'Mailingadressen');
        TempExcelBuffer.ReadSheet();
        IF TempExcelBuffer.FINDLAST THEN
          EVALUATE(TotalRows,FORMAT(TempExcelBuffer.xlRowID));

      Spalte_Adressen_User1_Nr := 1;
      Spalte_Adressen_EMail_Nr := 20;

      IF UPPERCASE(GetValueAtCell(1,Spalte_Adressen_User1_Nr)) <> 'USER1' THEN BEGIN
          ERROR('Fehlerhafte Syntax in der Adressliste > Spalte ' + Spalte_Adressen_User1 + ' muss USER1 sein.');
        END;
        IF UPPERCASE(GetValueAtCell(1,Spalte_Adressen_EMail_Nr)) <> 'EMAIL' THEN BEGIN
          ERROR('Fehlerhafte Syntax in der Adressliste > Spalte ' + Spalte_Adressen_EMail + ' muss Email sein.');
        END;

      //********************************************************************************************
      //                         Eigentlicher Import des Mailings
      //********************************************************************************************

      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');

      FOR i := 2 TO TotalRows DO BEGIN

        EVALUATE(User1,GetValueAtCell(i,Spalte_Adressen_User1_Nr));
        Email := GetValueAtCell(i,Spalte_Adressen_EMail_Nr);

        IF Contact.GET(User1) THEN BEGIN
          //Zusatz Dokumentation in der Tabelle Dokumentenversand
          {
          Dokumentenversand.INIT;
          Dokumentenversand.Belegdatum := Datum;
          Dokumentenversand.Aktion := Dokumentenversand.Aktion::Mailing;
          Dokumentenversand.Korrespondenzart := Dokumentenversand.Korrespondenzart::Email;
          Dokumentenversand.Betreff := Betreff;
          Dokumentenversand.Status := Dokumentenversand.Status::Komplett;
          Dokumentenversand.VALIDATE("Kontaktnr.",User1);
          Dokumentenversand.INSERT(TRUE);
          }
          IF Datum > Contact."Letzte Kontaktaufnahme" THEN BEGIN
            Contact."Letzte Kontaktaufnahme" := Datum;
            Contact.Kontaktgrund := Betreff;
            Contact.MODIFY;
          END;
        END;

        Window.UPDATE(1,ROUND(i / TotalRows * 10000,1));

      END;

      Window.CLOSE;

      IF TotalRows > 2 THEN
        MESSAGE(Text300);
    END;

    PROCEDURE Artverfolg_einspielen@1000000000(Speicherort@1140002 : Text[250]);
    VAR
      Item@1140003 : Record 27;
      leerzeilen@1140000 : Integer;
    BEGIN
      IF Speicherort = '' THEN ERROR(Text002);

      zaehler := 0;
      zaehler2 := 0;

      // Definiert die zu importierende Datei
      IF ISCLEAR(Excel) THEN
        IF CREATE(Excel,FALSE,TRUE) THEN BEGIN END ELSE ERROR('Cannot start Excel Application.');
      Book := Excel.Workbooks._Open(Speicherort,0,FALSE);
      Sheet := Book.Worksheets.Item(2);
      leerzeilen := 0;
      j := '1';
      IF (FORMAT(Sheet.Range('A'+j).Value) <> 'Nr.')
      OR (FORMAT(Sheet.Range('B'+j).Value) <> 'Seriennummer')
      OR (FORMAT(Sheet.Range('C'+j).Value) <> 'Product Key') THEN BEGIN
        Book.Close;
        ERROR('Spalte "Nr." (A) oder Spalte "Seriennummer" (AB)  oder "Product Key" (AC) konnte nicht gefunden werden > falsche Syntax.');
      END ELSE BEGIN
        j := '2';
        REPEAT
          IF FORMAT(Sheet.Range('A'+j).Value) = '' THEN
            leerzeilen += 1
          ELSE BEGIN
            IF Item.GET(FORMAT(Sheet.Range('A'+j).Value)) THEN BEGIN
              IF (UPPERCASE(FORMAT(Sheet.Range('AB'+j).Value)) = 'X') AND (UPPERCASE(FORMAT(Sheet.Range('AC'+j).Value)) = '')  THEN BEGIN
                IF Item."Item Tracking Code" <> 'SERIENNR' THEN BEGIN
                  Item.VALIDATE("Item Tracking Code",'SERIENNR');
                  Sheet.Range('AG'+j).Value := Item."Item Tracking Code";
                  Item.MODIFY;
                  zaehler2 += 1;
                END;
              END;
              IF (UPPERCASE(FORMAT(Sheet.Range('AB'+j).Value)) = '')  AND (UPPERCASE(FORMAT(Sheet.Range('AC'+j).Value)) = 'X') THEN BEGIN
                IF Item."Item Tracking Code" <> 'PRODUCTKEY' THEN BEGIN
                  Item.VALIDATE("Item Tracking Code",'PRODUCTKEY');
                  Sheet.Range('AG'+j).Value := Item."Item Tracking Code";
                  Item.MODIFY;
                  zaehler2 += 1;
                END;
              END;
              IF (UPPERCASE(FORMAT(Sheet.Range('B'+j).Value)) = 'X')  AND (UPPERCASE(FORMAT(Sheet.Range('C'+j).Value)) = 'X') THEN BEGIN
                IF Item."Item Tracking Code" <> 'SERIENNR+P' THEN BEGIN
                  Item.VALIDATE("Item Tracking Code",'SERIENNR+P');
                  Sheet.Range('E'+j).Value := Item."Item Tracking Code";
                  Item.MODIFY;
                  zaehler2 += 1;
                END;
              END;
              zaehler += 1;
            END ELSE BEGIN
              Sheet.Range('AG'+j).Value := '-';
            END;
          END;
          j := INCSTR(j);
        UNTIL leerzeilen = 10;
        //Book.Save;
        //Book.Close(TRUE);
        Excel.Visible(TRUE);

      END;

      MESSAGE('Gesamt untersucht: %1, eingetragen ins NAV: %2',zaehler, zaehler2);
    END;

    PROCEDURE ServiceSeriennrUmbuchen@1140006(Artikelnr@1140000 : Code[20];Alte_SN@1140001 : Code[20];Neue_SN@1140002 : Code[20];RMA_Nr@1140005 : Code[20]);
    VAR
      ServicePos@1140003 : Record 50024;
      ServicePosRekl@1140007 : Record 50024;
      RMA_pruefung@1140004 : Record 50021;
      selection@1140006 : Integer;
    BEGIN
      IF (Artikelnr = '') OR (Alte_SN = '') OR (Neue_SN = '') THEN
        ERROR(Text002);

      // SICHERHEITSSPERRE
      // Wenn fr eine bereits ersetzte Seriennr. die Seriennr. nachtr„glich wieder ge„ndert wird,
      // muss das System die Žnderung abbrechen, da es sonst zu Inkonsistenzen im System kommt,
      // die Seriennr. muss manuell in der neuen RMA Pos. auf die neue Seriennr. vorbereitet werden
      // bevor die alte RMA Pos. ge„ndert werden kann

      RMA_pruefung.RESET;
      RMA_pruefung.SETFILTER(RMA_pruefung.Belegart,'%1|%2',RMA_pruefung.Belegart::Rechnung,
      RMA_pruefung.Belegart::"vom Kunden");
      RMA_pruefung.SETFILTER("Artikelnr.",'%1',Artikelnr);
      RMA_pruefung.SETFILTER("SN-Nr. / DC",'%1',Alte_SN);
      IF RMA_pruefung.FINDFIRST THEN
        ERROR(Text003,Alte_SN,RMA_pruefung."RMA-Nr.");

      // Fhrt Umbuchungen der Seriennr. im System durch, wenn diese noch nicht gekennzeichnet sind
      ServicePos.RESET;
      ServicePos.SETFILTER(Art,'%1|%2',ServicePos.Art::System,ServicePos.Art::Service);
      ServicePos.SETFILTER("Artikelnr.",'%1',Artikelnr);
      ServicePos.SETFILTER("Seriennr.",'%1',Alte_SN);
      ServicePos.SETFILTER(Reklamiert,'%1',FALSE);
      IF ServicePos.FINDFIRST THEN BEGIN
        selection := STRMENU(Text004,1);
        IF selection = 1 THEN
        IF CONFIRM(Text005,FALSE,Alte_SN,Neue_SN) THEN
          REPEAT
            ServicePos.NewPosFromRMA(ServicePos."Lfd. Nr.",Alte_SN,Neue_SN,RMA_Nr,ServicePos,FALSE,'');
            MESSAGE(Text006,Alte_SN,Neue_SN,ServicePos."Wartungsvertragsnr.",ServicePos."Lfd. Nr.");
          UNTIL ServicePos.NEXT = 0
        ELSE ERROR('Abbruch');
      END ELSE BEGIN
        // Bereits neue gebuchte Pos. mit neuer SN wird nochmals ge„ndert, z.B. aufgrund von Tippfehler etc.
        ServicePosRekl.RESET;
        ServicePosRekl.SETFILTER(Art,'%1|%2',ServicePosRekl.Art::System,ServicePosRekl.Art::Service);
        ServicePosRekl.SETFILTER("Artikelnr.",'%1',Artikelnr);
        ServicePosRekl.SETFILTER("Seriennr.",'%1',Alte_SN);
        ServicePosRekl.SETFILTER(Reklamiert,'%1',TRUE);
        ServicePosRekl.SETFILTER("RMA-Nr.",'%1',RMA_Nr);
        ServicePosRekl.SETFILTER(Ersatzverfahren,'%1',TRUE);
        IF ServicePosRekl.FINDFIRST THEN BEGIN
          ServicePos.RESET;
          ServicePos.SETFILTER(Art,'%1|%2',ServicePos.Art::System,ServicePos.Art::Service);
          ServicePos.SETFILTER("Artikelnr.",'%1',Artikelnr);
          ServicePos.SETFILTER("Urspr. Seriennr.",'%1',Alte_SN);
          ServicePos.SETFILTER("Ersatz fr Lfd. Nr.",'%1',ServicePosRekl."Lfd. Nr.");
          ServicePos.SETFILTER(Ersatzverfahren,'%1',TRUE);
          IF ServicePos.FINDFIRST THEN BEGIN
            IF CONFIRM(Text005,FALSE,Alte_SN,Neue_SN) THEN
              REPEAT
                ServicePos."Seriennr." := Neue_SN;
                ServicePos.MODIFY(TRUE);
                MESSAGE(Text007, ServicePos."Wartungsvertragsnr.", ServicePosRekl."Seriennr.",
                        ServicePosRekl."Lfd. Nr.", Alte_SN, ServicePos."Lfd. Nr.", ServicePos."Seriennr.");
              UNTIL ServicePos.NEXT = 0
            ELSE ERROR('Abbruch');
          END;
        END;

        // Nachlauf - vorherige, bereits ge„nderte Seriennr. hat keinen Vorg„nger in den Servicepositionen
        // wird immer dann auftreten, wenn die Systemposition ge„ndert wurde durch eine RMA, aber Champs erst danach
        // abgeschlossen wird

        ServicePos.RESET;
        ServicePos.SETFILTER(Art,'%1',ServicePos.Art::Service);
        ServicePos.SETFILTER("Artikelnr.",'%1',Artikelnr);
        ServicePos.SETFILTER("Urspr. Seriennr.",'%1',Alte_SN);
        ServicePos.SETFILTER(Ersatzverfahren,'%1',TRUE);
        IF ServicePos.FINDFIRST THEN BEGIN
          IF CONFIRM(Text005,FALSE,Alte_SN,Neue_SN) THEN
            REPEAT
              ServicePos."Seriennr." := Neue_SN;
              ServicePos.MODIFY(TRUE);
              MESSAGE(Text007, ServicePos."Wartungsvertragsnr.", 'Kein Vorg„nger (Service)','',
                                Alte_SN, ServicePos."Lfd. Nr.", ServicePos."Seriennr.");
            UNTIL ServicePos.NEXT = 0
          ELSE ERROR('Abbruch');
        END;

        // Wenn fr eine bereits ersetzte Seriennr. die Seriennr. nachtr„glich wieder ge„ndert wird, dann muss
        // die urspr. Seriennr. in der Nachfolge Position aktualisiert werden, auch tempor„re

        ServicePos.RESET;
        ServicePos.SETFILTER("Artikelnr.",'%1',Artikelnr);
        ServicePos.SETFILTER("Urspr. Seriennr.",'%1',Alte_SN);
        ServicePos.SETFILTER(Ersatzverfahren,'%1',TRUE);
        IF ServicePos.FINDFIRST THEN BEGIN
          REPEAT
            ServicePos."Urspr. Seriennr." := Neue_SN;
            ServicePos.MODIFY(TRUE);
            MESSAGE(Text008,ServicePos."Seriennr.",ServicePos."Lfd. Nr.");
          UNTIL ServicePos.NEXT = 0;
        END;

      END;

      // Durchsucht nun auch die Temp Datens„tze

      // Žndert bereits vorhandene temp. Datens„tze, die noch nicht reklamiert bzw. ersetzt wurden
      // auf die neue Seriennr. und definiert Ersatzverfahren
      ServicePos.RESET;
      ServicePos.SETFILTER(Art,'%1',ServicePos.Art::Tempor„r);
      ServicePos.SETFILTER("Artikelnr.",'%1',Artikelnr);
      ServicePos.SETFILTER("Seriennr.",'%1',Alte_SN);
      ServicePos.SETFILTER(Ersatzverfahren,'%1',FALSE);
      IF ServicePos.FINDFIRST THEN BEGIN
        REPEAT
          ServicePos."Seriennr." := Neue_SN;
          ServicePos.Ersatzverfahren := TRUE;
          ServicePos."Urspr. Seriennr." := Alte_SN;
          ServicePos.MODIFY(TRUE);
          MESSAGE(Text009,ServicePos."Auftragsnr.",ServicePos."Auftragszeilennr.");
        UNTIL ServicePos.NEXT = 0;
      END ELSE BEGIN
        // Bereits ersetzte, tempor„re angelegte Seriennr. wird lediglich aktualisiert
        ServicePosRekl.RESET;
        ServicePosRekl.SETFILTER(Art,'%1|%2',ServicePosRekl.Art::System,ServicePosRekl.Art::Service);
        ServicePosRekl.SETFILTER("Artikelnr.",'%1',Artikelnr);
        ServicePosRekl.SETFILTER("Seriennr.",'%1',Alte_SN);
        ServicePosRekl.SETFILTER("RMA-Nr.",'%1',RMA_Nr);
        ServicePosRekl.SETFILTER(Ersatzverfahren,'%1',TRUE);
        IF ServicePosRekl.FINDFIRST THEN BEGIN
          ServicePos.RESET;
          ServicePos.SETFILTER(Art,'%1',ServicePos.Art::Tempor„r);
          ServicePos.SETFILTER("Artikelnr.",'%1',Artikelnr);
          ServicePos.SETFILTER("Seriennr.",'%1',Alte_SN);
          ServicePos.SETFILTER("Urspr. Seriennr.",'%1',ServicePosRekl."Urspr. Seriennr.");
          ServicePos.SETFILTER(Ersatzverfahren,'%1',TRUE);
          IF ServicePos.FINDFIRST THEN
            REPEAT
              ServicePos."Seriennr." := Neue_SN;
              ServicePos.MODIFY(TRUE);
              MESSAGE(Text009,ServicePos."Auftragsnr.",ServicePos."Auftragszeilennr.");
            UNTIL ServicePos.NEXT = 0;
        END;
      END;

      ServicePos.RESET;
      ServicePos.SETFILTER(Art,'%1',ServicePos.Art::Tempor„r);
      ServicePos.SETFILTER("Artikelnr.",'%1',Artikelnr);
      ServicePos.SETFILTER("Seriennr.",'%1',Alte_SN);
      ServicePos.SETFILTER(Ersatzverfahren,'%1',TRUE);
      ServicePos.SETFILTER("Urspr. Seriennr.",'<>%1','');
      IF ServicePos.FINDFIRST THEN
        REPEAT
          ServicePos."Seriennr." := Neue_SN;
          ServicePos."Urspr. Seriennr." := Alte_SN;
          ServicePos.MODIFY(TRUE);
          MESSAGE(Text010,Alte_SN,ServicePos."Auftragsnr.",ServicePos."Auftragszeilennr.");
        UNTIL ServicePos.NEXT = 0;
    END;

    LOCAL PROCEDURE ServicepreiseKopieren@1000000002(item_service_copy@1000000004 : Code[20];item_service_paste@1000000003 : Code[20]);
    VAR
      Item@1000000002 : Record 27;
      ServicePreistabelleCopy@1000000001 : Record 50028;
      ServicePreistabellePaste@1000000000 : Record 50028;
    BEGIN
      CLEAR(ServicePreistabelleCopy);
      CLEAR(ServicePreistabellePaste);
      selection := DIALOG.STRMENU(ServiceSelection,1,'Bitte w„hlen Sie eine Option aus.');
      IF selection = 0 THEN EXIT;
      ServicePreistabellePaste.SETRANGE("Artikelnr.",item_service_paste);
      ServicePreistabellePaste.SETRANGE("Zuordnung obsolete",FALSE);
      IF selection IN [2,3] THEN
        ServicePreistabellePaste.SETRANGE(Art,ServicePreistabellePaste.Art::ACTS);
      IF selection IN [4,5] THEN
        ServicePreistabellePaste.SETRANGE(Art,ServicePreistabellePaste.Art::Champs);
      IF selection IN [2,4] THEN
        ServicePreistabellePaste.SETRANGE(W„hrungscode,'');
      IF selection IN [3,5] THEN
        ServicePreistabellePaste.SETRANGE(W„hrungscode,'USD');
      IF NOT ServicePreistabellePaste.FINDFIRST THEN BEGIN
        IF selection IN [2,3] THEN
          ServicePreistabelleCopy.SETRANGE(Art,ServicePreistabelleCopy.Art::ACTS);
        IF selection IN [4,5] THEN
          ServicePreistabelleCopy.SETRANGE(Art,ServicePreistabelleCopy.Art::Champs);
        IF selection IN [2,4] THEN
          ServicePreistabelleCopy.SETRANGE(W„hrungscode,'');
        IF selection IN [3,5] THEN
          ServicePreistabelleCopy.SETRANGE(W„hrungscode,'USD');
        ServicePreistabelleCopy.SETRANGE("Artikelnr.",item_service_copy);
        ServicePreistabelleCopy.SETRANGE("Zuordnung obsolete",FALSE);
        IF ServicePreistabelleCopy.FINDFIRST THEN BEGIN
            REPEAT
              ServicePreistabellePaste.INIT;
              ServicePreistabellePaste.TRANSFERFIELDS(ServicePreistabelleCopy);
              CLEAR(Item);
              IF Item.GET(item_service_paste) THEN BEGIN
                ServicePreistabellePaste.VALIDATE("Artikelnr.",Item."No.");
              END ELSE BEGIN
                ServicePreistabellePaste."Artikelnr." := '';
                ServicePreistabellePaste."Artikelnr. 2" := item_service_paste;
              END;
              ServicePreistabellePaste."Update letzte Preisliste" := FALSE;
              ServicePreistabellePaste.Preisliste := 'manuell_' + item_service_copy;
              ServicePreistabellePaste.INSERT(TRUE);
          UNTIL ServicePreistabelleCopy.NEXT = 0;
          MESSAGE(Text013);
        END ELSE MESSAGE(Text014,item_service_copy);
      END ELSE
        MESSAGE(Text015,item_service_paste);
    END;

    PROCEDURE LabelDatenBuchen@1140008();
    BEGIN
      IF lieferscheinnr = '' THEN ERROR(Text020);
      TOPASLagerManagement.Label_Daten_start(lieferscheinnr,0,TRUE);
    END;

    PROCEDURE ImportSeriennrInBeleg@1140009(au_nr@1140002 : Code[20];au_zeilennr@1140003 : Integer);
    VAR
      ServiceBelegZuordnung@1140000 : Record 50027;
      TempSystemposition@1140001 : Record 50024;
    BEGIN
      IF (au_nr = '') OR (au_zeilennr = 0) OR (import_sn_datei = '') THEN
        ERROR(Text002);

      // Definiert die zu importierende Datei
      IF ISCLEAR(Excel) THEN
        IF CREATE(Excel,FALSE,TRUE) THEN BEGIN END ELSE ERROR('Cannot start Excel Application.');
      Book := Excel.Workbooks._Open(import_sn_datei,0,FALSE);
      Sheet := Book.Worksheets.Item(1);
      leerzeilen := 0;
      zaehler := 0;
      zaehler2 := 0;
      j := '1';

      IF (FORMAT(Sheet.Range('A'+j).Value) <> 'Artikelnummer') OR (FORMAT(Sheet.Range('B'+j).Value) <> 'Seriennummer') THEN BEGIN
        Book.Close;
        ERROR('Spalte Artikelnummer (A) oder Spalte Seriennummer (B) konnte nicht gefunden werden > falsche Syntax.');
      END ELSE BEGIN
        j := '2';
        ServiceBelegZuordnung.RESET;
        ServiceBelegZuordnung.SETRANGE(Art,ServiceBelegZuordnung.Art::"SUP-AU");
        ServiceBelegZuordnung.SETRANGE("Nr.",au_nr);
        ServiceBelegZuordnung.SETRANGE("Zeilennr.",au_zeilennr);
        ServiceBelegZuordnung.SETRANGE(Fremderwerb,TRUE);
        IF ServiceBelegZuordnung.FINDFIRST THEN BEGIN
          REPEAT
            IF FORMAT(Sheet.Range('A'+j).Value) = '' THEN
              leerzeilen += 1
            ELSE BEGIN
              zaehler += 1;
              IF FORMAT(Sheet.Range('B'+j).Value) <> '' THEN BEGIN
                TempSystemposition.INIT;
                TempSystemposition.Art := TempSystemposition.Art::Tempor„r;
                TempSystemposition."Nr." := ServiceBelegZuordnung."Belegnr.";
                TempSystemposition."Belegzeilennr." := ServiceBelegZuordnung."Belegzeilennr.";
                TempSystemposition.INSERT(TRUE);
                TempSystemposition."Debitornr." := ServiceBelegZuordnung."Debitornr.";
                TempSystemposition.VALIDATE("Artikelnr.",ServiceBelegZuordnung."Ger„te Artikelnr.");
                TempSystemposition.Serviceleistung := 'WARTUNGSVERTRAG';
                IF Artikel."Item Tracking Code" = 'KEINE' THEN
                  TempSystemposition.Menge := ServiceBelegZuordnung."Menge kalk."
                ELSE
                  TempSystemposition.Menge := 1;
                Artikel.GET(ServiceBelegZuordnung."Ger„te Artikelnr.");
                TempSystemposition.Ursprungsland := Artikel."Country/Region of Origin Code";
                TempSystemposition."Auftragsnr." := ServiceBelegZuordnung."Nr.";
                TempSystemposition."Auftragszeilennr." := ServiceBelegZuordnung."Zeilennr.";
                TempSystemposition."Urspr. Auftragsnr." := 'AU_' + DELCHR(ServiceBelegZuordnung."Belegnr.",'<','LS_');
                TempSystemposition."Urspr. Auftragszeilennr." := ServiceBelegZuordnung."Belegzeilennr.";
                TempSystemposition.Basisger„t := ServiceBelegZuordnung.Basisger„t;
                TempSystemposition.VALIDATE("Seriennr.",FORMAT(Sheet.Range('B'+j).Value));
                TempSystemposition.Fremderwerb := TRUE;
                TempSystemposition.Verl„ngerung := TempSystemposition.PrfeWartungvorhanden(
                                                   ServiceBelegZuordnung."SUP Artikelnr.",ServiceBelegZuordnung."Belegnr.",
                                                   ServiceBelegZuordnung."Belegzeilennr.",TempSystemposition."Seriennr.",
                                                   ServiceBelegZuordnung."Debitornr.");
                TempSystemposition.VALIDATE(Vormerkung,TRUE);
                TempSystemposition.MODIFY;
                Sheet.Range('E'+j).Value := 'x';
                j := INCSTR(j);
                zaehler2 += 1;
              END;
            END;
          UNTIL leerzeilen = 1;
        END;
        Book.Close(TRUE);
      END;

      MESSAGE('Gesamt untersucht: %1, eingetragen ins NAV: %2',zaehler, zaehler2);
    END;

    LOCAL PROCEDURE Berichtstabelle_leeren@1000000001();
    BEGIN
      //Falls es zu Problemen mit der Tabelle Berichtstabelle kommen sollte, kann diese mit
      //dieser Funktion wieder geleert werden damit andere User bestimmte Berichte nutzen k”nnen
      Berichtstabelle.RESET;
      //Berichtstabelle.LOCKTABLE;
      Berichtstabelle.FIND('-');
      IF Berichtstabelle.ISEMPTY = FALSE THEN BEGIN
        IF CONFIRM('Die Berichtstabelle ist seit %1 durch Anwender %2 gesperrt. Wollen Sie die Tabelle jetzt leeren?',
        TRUE,Berichtstabelle.Uhrzeit,Berichtstabelle.User,TRUE) THEN
          IF Berichtstabelle.TABLECAPTION = 'Berichtstabelle' THEN BEGIN//Sicherheitsabfrage
            Berichtstabelle.DELETEALL(TRUE);
            IF Berichtstabelle.ISEMPTY THEN
              MESSAGE('Berichtstabelle konnte erfolgreich geleert werden.')
            ELSE
              MESSAGE('Berichtstabelle konnte nicht geleert werden. Bitte starten Sie das Navision komplett neu und versuchen es dann erneut.');
         END;
      END;
      //COMMIT;
    END;

    LOCAL PROCEDURE "-----------NEUES EXCEL-----------"@1000000012();
    BEGIN
    END;

    LOCAL PROCEDURE GetValueAtCell@1000000025(RowNo@1000000000 : Integer;ColNo@1000000001 : Integer) : Text;
    BEGIN
      IF TempExcelBuffer.GET(RowNo,ColNo) THEN
        EXIT(TempExcelBuffer."Cell Value as Text");
    END;

    EVENT Sheet@1140009::SelectionChange@1543(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet@1140009::BeforeDoubleClick@1537(Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1140009::BeforeRightClick@1534(Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1140009::Activate@304();
    BEGIN
    END;

    EVENT Sheet@1140009::Deactivate@1530();
    BEGIN
    END;

    EVENT Sheet@1140009::Calculate@279();
    BEGIN
    END;

    EVENT Sheet@1140009::Change@1545(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet@1140009::FollowHyperlink@1470(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT Sheet@1140009::PivotTableUpdate@2156(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Sheet@1140009::PivotTableAfterValueChange@2886(TargetPivotTable@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet@1140009::PivotTableBeforeAllocateChange@2889(TargetPivotTable@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1140002 : Integer;ValueChangeEnd@1140001 : Integer;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1140009::PivotTableBeforeCommitChanges@2892(TargetPivotTable@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1140002 : Integer;ValueChangeEnd@1140001 : Integer;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1140009::PivotTableBeforeDiscardChanges@2893(TargetPivotTable@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1140001 : Integer;ValueChangeEnd@1140000 : Integer);
    BEGIN
    END;

    EVENT Sheet@1140009::PivotTableChangeSync@2894(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1140011::Open@1923();
    BEGIN
    END;

    EVENT Book@1140011::Activate@304();
    BEGIN
    END;

    EVENT Book@1140011::Deactivate@1530();
    BEGIN
    END;

    EVENT Book@1140011::BeforeClose@1546(VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140011::BeforeSave@1547(SaveAsUI@1140001 : Boolean;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140011::BeforePrint@1549(VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140011::NewSheet@1550(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1140011::AddinInstall@1552();
    BEGIN
    END;

    EVENT Book@1140011::AddinUninstall@1553();
    BEGIN
    END;

    EVENT Book@1140011::WindowResize@1554(Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book@1140011::WindowActivate@1556(Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book@1140011::WindowDeactivate@1557(Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book@1140011::SheetSelectionChange@1558(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book@1140011::SheetBeforeDoubleClick@1559(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140011::SheetBeforeRightClick@1560(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140011::SheetActivate@1561(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1140011::SheetDeactivate@1562(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1140011::SheetCalculate@1563(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1140011::SheetChange@1564(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book@1140011::SheetFollowHyperlink@1854(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT Book@1140011::SheetPivotTableUpdate@2157(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1140011::PivotTableCloseConnection@2158(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1140011::PivotTableOpenConnection@2159(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1140011::Sync@2266(SyncEventType@1140000 : Integer);
    BEGIN
    END;

    EVENT Book@1140011::BeforeXmlImport@2283(Map@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1140002 : Text[1024];IsRefresh@1140001 : Boolean;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140011::AfterXmlImport@2285(Map@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1140001 : Boolean;Result@1140000 : Integer);
    BEGIN
    END;

    EVENT Book@1140011::BeforeXmlExport@2287(Map@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1140001 : Text[1024];VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140011::AfterXmlExport@2288(Map@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1140001 : Text[1024];Result@1140000 : Integer);
    BEGIN
    END;

    EVENT Book@1140011::RowsetComplete@2610(Description@1140002 : Text[1024];Sheet@1140001 : Text[1024];Success@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140011::SheetPivotTableAfterValueChang@2895(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book@1140011::SheetPivotTableBeforeAllocateC@2896(Sh@1140004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1140002 : Integer;ValueChangeEnd@1140001 : Integer;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140011::SheetPivotTableBeforeCommitCha@2897(Sh@1140004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1140002 : Integer;ValueChangeEnd@1140001 : Integer;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140011::SheetPivotTableBeforeDiscardCh@2898(Sh@1140003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1140001 : Integer;ValueChangeEnd@1140000 : Integer);
    BEGIN
    END;

    EVENT Book@1140011::SheetPivotTableChangeSync@2899(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1140011::AfterSave@2900(Success@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140011::NewChart@2901(Ch@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    EVENT Excel@1140012::NewWorkbook@1565(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1140012::SheetSelectionChange@1558(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Excel@1140012::SheetBeforeDoubleClick@1559(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140012::SheetBeforeRightClick@1560(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140012::SheetActivate@1561(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1140012::SheetDeactivate@1562(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1140012::SheetCalculate@1563(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1140012::SheetChange@1564(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookOpen@1567(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookActivate@1568(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookDeactivate@1569(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookBeforeClose@1570(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookBeforeSave@1571(Wb@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SaveAsUI@1140001 : Boolean;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookBeforePrint@1572(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookNewSheet@1573(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookAddinInstall@1574(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookAddinUninstall@1575(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1140012::WindowResize@1554(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Excel@1140012::WindowActivate@1556(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Excel@1140012::WindowDeactivate@1557(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Excel@1140012::SheetFollowHyperlink@1854(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT Excel@1140012::SheetPivotTableUpdate@2157(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookPivotTableCloseConnect@2160(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookSync@2289(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SyncEventType@1140000 : Integer);
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookBeforeXmlImport@2290(Wb@1140004 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1140002 : Text[1024];IsRefresh@1140001 : Boolean;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookAfterXmlImport@2291(Wb@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1140001 : Boolean;Result@1140000 : Integer);
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookRowsetComplete@2611(Wb@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Description@1140002 : Text[1024];Sheet@1140001 : Text[1024];Success@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140012::AfterCalculate@2612();
    BEGIN
    END;

    EVENT Excel@1140012::SheetPivotTableAfterValueChang@2895(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Excel@1140012::SheetPivotTableBeforeAllocateC@2896(Sh@1140004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1140002 : Integer;ValueChangeEnd@1140001 : Integer;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140012::ProtectedViewWindowOpen@2903(Pvw@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1140012::ProtectedViewWindowResize@2908(Pvw@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1140012::ProtectedViewWindowActivate@2909(Pvw@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1140012::ProtectedViewWindowDeactivate@2910(Pvw@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookAfterSave@2911(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Success@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140012::WorkbookNewChart@2912(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Ch@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    BEGIN
    END.
  }
}

