OBJECT Page 50121 Lager Inventur Bewertung
{
  OBJECT-PROPERTIES
  {
    Date=09.01.18;
    Time=15:52:28;
    Modified=Yes;
    Version List=TOPAS;
  }
  PROPERTIES
  {
    OnInit=BEGIN
             Datum_ab_supp := 010113D;
           END;

    ActionList=ACTIONS
    {
      { 1000000066;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000067;1 ;ActionGroup }
      { 1000000068;2 ;Action    ;
                      Name=Ausfhren;
                      Promoted=Yes;
                      Image=ExecuteBatch;
                      PromotedCategory=Process;
                      OnAction=BEGIN

                                 // ANFANG šberprfung ob mehrere H„kchen gesetzt sind
                                 var_anzahl_h„kchen:=0;

                                 IF (lagerbewerth„kchen=TRUE) THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF (freieslagerh„kchen=TRUE) THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF (freieslagertestneu=TRUE) THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF (freieslagerverkauf=TRUE) THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF (quoteh„kchen=TRUE) THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF (testlagerh„kchen=TRUE) THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF (v_konsi=TRUE) THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF (LB_Excel=TRUE) THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF (Excel_bewert=TRUE) THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF v_w„_abstimm=TRUE THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF v_w„_abstimm1=TRUE THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF v_wkv=TRUE THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF v_ustabstimm=TRUE THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF v_supp_std=TRUE THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF v_supp_prf=TRUE THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 //IF v_anlkartei=TRUE THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 //IF v_anlber=TRUE THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 //IF v_anlspiegel=TRUE THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;

                                 IF var_anzahl_h„kchen>1 THEN
                                 ERROR('Es wurden mehrere H„kchen gesetzt. Report abgebrochen!');
                                 // ENDE šberprfung ob mehrere H„kchen gesetzt sind

                                 // ANFANG Aufruf der Funktionen

                                 IF lagerbewerth„kchen=TRUE THEN Lagerbewertung;
                                 //IF freieslagerh„kchen=TRUE THEN "Freies Lager";
                                 IF freieslagertestneu=TRUE THEN "Freies Lager";
                                 IF freieslagerverkauf=TRUE THEN "Freies Lager Verkauf";
                                 IF quoteh„kchen=TRUE THEN Quoteberprfung;
                                 IF testlagerh„kchen=TRUE THEN Lager_EK_Rech_VK_Rech;
                                 IF v_konsi=TRUE THEN Konsignationslager;
                                 IF LB_Excel=TRUE THEN LB_nach_Excel;
                                 IF Excel_bewert=TRUE THEN IDT_LB_bewerten;
                                 IF v_w„_abstimm=TRUE THEN WŽ_Abstimmung;
                                 IF v_w„_abstimm1=TRUE THEN W„hrungsabstimmung;
                                 IF v_wkv=TRUE THEN WKV;
                                 IF v_ustabstimm=TRUE THEN USt_Abstimmung;
                                 IF v_supp_std=TRUE THEN Support_Stunden;
                                 IF v_supp_prf=TRUE THEN Support_prfen;
                                 //IF v_anlkartei=TRUE THEN Anlagekartei;
                                 //IF v_anlber=TRUE THEN Anlagebersicht;
                                 //IF v_anlspiegel=TRUE THEN Anlagenspiegel;

                                 //  ENDE Aufruf der Funktionen
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;;Container;
                Name=GDPdU;
                ContainerType=ContentArea }

    { 1000000020;1;Group  ;
                CaptionML=DEU=Dieser Bereich gilt fr alle Abfragen;
                GroupType=Group }

    { 1000000021;2;Field  ;
                CaptionML=DEU=Datum von:;
                SourceExpr=Datum_ab }

    { 1000000022;2;Field  ;
                CaptionML=DEU=Datum bis:;
                SourceExpr=Datum_bis }

    { 1000000001;1;Group  ;
                CaptionML=DEU=GDPdU;
                GroupType=Group }

    { 1000000011;2;Group  ;
                CaptionML=DEU="ab Datum = 1.1.2000=> Soll + Haben gesamter Zeitraum";
                GroupType=Group }

    { 1000000002;3;Group  ;
                CaptionML=DEU="ab Datum 0 1.7. des Auswertungszeitraums => Soll + Haben des Zeitraums";
                GroupType=Group }

    { 1000000005;4;Field  ;
                CaptionML=DEU=Kreditorkonten holen;
                SourceExpr=kreditorh„kchen }

    { 1000000006;4;Field  ;
                CaptionML=DEU=Kreditorposten holen;
                SourceExpr=kreditorpostenh„kchen }

    { 1000000007;4;Field  ;
                CaptionML=DEU=Debitorkonten holen;
                SourceExpr=debitorh„kchen }

    { 1000000008;4;Field  ;
                CaptionML=DEU=Debitorposten holen;
                SourceExpr=Debitorpostenh„kchen }

    { 1000000009;4;Field  ;
                CaptionML=DEU=Sachkonten holen;
                SourceExpr=sachkontenh„kchen }

    { 1000000010;4;Field  ;
                CaptionML=DEU=Sachposten holen;
                SourceExpr=sachpostenh„kchen }

    { 1000000012;1;Group  ;
                CaptionML=DEU=E-Bilanz;
                GroupType=Group }

    { 1000000013;2;Group  ;
                CaptionML=DEU="Um den richtigen Saldo zu erhalten ist Datum ab = 01.07....";
                GroupType=Group }

    { 1000000016;3;Field  ;
                CaptionML=DEU=Sachkonten als Excelfile zum Einspilen in E-Bilanz holen;
                SourceExpr=sachkonten_ebilanz_h„kchen }

    { 1000000017;3;Field  ;
                CaptionML=DEU=Alle Sachkonten ausw„hlen oder ...;
                SourceExpr=alle_sachkonten }

    { 1000000018;3;Field  ;
                CaptionML=DEU=Sachkonto von:;
                SourceExpr=sachkon_von }

    { 1000000019;3;Field  ;
                CaptionML=DEU=Sachkonto bis:;
                SourceExpr=sachkon_bis }

    { 1000000003;1;Group  ;
                CaptionML=DEU=Summen- und Saldenliste;
                GroupType=Group }

    { 1000000004;2;Field  ;
                CaptionML=DEU=Summen- und Saldenliste frWirtschaftsprfer;
                SourceExpr=sumlisth„kchen }

    { 1000000014;2;Field  ;
                CaptionML=DEU=Beginn des GJ (01.07.2012);
                SourceExpr=v_startdat_gj }

    { 1000000015;2;Field  ;
                CaptionML=DEU=Ende des GJ (30.06.2013);
                SourceExpr=v_endedat_gj }

    { 1000000023;2;Field  ;
                CaptionML=DEU=Ende des Vorjahres (30.06.2012);
                SourceExpr=v_endedat_vj }

    { 1000000024;1;Group  ;
                CaptionML=DEU=Lagerbewertung;
                GroupType=Group }

    { 1000000025;2;Group  ;
                GroupType=Group }

    { 1000000026;3;Field  ;
                CaptionML=DEU=Lagerliste ausfhren;
                SourceExpr=lagerbewerth„kchen }

    { 1000000027;3;Field  ;
                CaptionML=DEU=Stichtag fr Lagerbewertung;
                SourceExpr=Lager_abgrenz_datum }

    { 1000000029;3;Group  ;
                CaptionML=DEU=Automatisch auswerten;
                GroupType=Group }

    { 1000000028;4;Field  ;
                CaptionML=DEU=Auswertung erfolgt autom. fr ZENT, KONSI, ERSATZ;
                SourceExpr=v_sonderlager }

    { 1000000030;3;Group  ;
                CaptionML=DEU=oder einschr„nken auf Lager (zB ZENT);
                GroupType=Group }

    { 1000000031;4;Field  ;
                CaptionML=DEU=Lagerort 1 und/oder;
                SourceExpr=Lagerort1 }

    { 1000000032;4;Field  ;
                CaptionML=DEU=Lagerort 2 und/oder;
                SourceExpr=Lagerort2 }

    { 1000000033;4;Field  ;
                CaptionML=DEU=Lagerort 3;
                SourceExpr=Lagerort3 }

    { 1000000034;3;Group  ;
                GroupType=Group }

    { 1000000035;4;Field  ;
                CaptionML=DEU=Kurs USD;
                DecimalPlaces=4:4;
                SourceExpr=Kurs_USD }

    { 1000000036;4;Field  ;
                CaptionML=DEU=Kurs JPY;
                SourceExpr=Kurs_JPY }

    { 1000000037;4;Field  ;
                CaptionML=DEU=Kurs GBP;
                DecimalPlaces=4:4;
                SourceExpr=Kurs_GBP }

    { 1000000038;1;Group  ;
                CaptionML=DEU=Quoteberprfung;
                GroupType=Group }

    { 1000000039;2;Group  ;
                CaptionML=DEU=noch einarbeiten Dataport 50033;
                GroupType=Group }

    { 1000000040;1;Group  ;
                CaptionML=DEU=Freies Lager;
                GroupType=Group }

    { 1000000041;2;Group  ;
                CaptionML=DEU=Das Freie Lager wird immer aktuell zum Zeitpunkt der Listerstellung ermittelt;
                GroupType=Group }

    { 1000000046;3;Group  ;
                CaptionML=DEU=Fr Lagerabgrenzung Feld Datum bis ausfllen;
                GroupType=Group }

    { 1000000042;4;Field  ;
                CaptionML=DEU=Wert fr Freies Lager ermitteln:;
                SourceExpr=freieslagertestneu }

    { 1000000043;4;Field  ;
                CaptionML=DEU=Freies Lager Verkauf ermitteln:;
                SourceExpr=freieslagerverkauf }

    { 1000000044;4;Field  ;
                CaptionML=DEU=Freies Lager abgegrenzt ermitteln:;
                SourceExpr=freieslagerh„kchen }

    { 1000000045;1;Group  ;
                CaptionML=DEU=KONSI;
                GroupType=Group }

    { 1000000047;2;Field  ;
                CaptionML=DEU=Excel Liste fr Konsignationslager erstellen;
                SourceExpr=v_konsi }

    { 1000000048;1;Group  ;
                CaptionML=DEU=WKV;
                GroupType=Group }

    { 1000000049;2;Field  ;
                CaptionML=DEU=Debitorposten pro Monat fr WKV Datum ab und -bis eintragen;
                SourceExpr=v_wkv }

    { 1000000050;1;Group  ;
                CaptionML=DEU=WŽ-Abstimmung;
                GroupType=Group }

    { 1000000051;2;Field  ;
                CaptionML=DEU=WŽ-Abstimmung ausfhren;
                SourceExpr=v_w„_abstimm1 }

    { 1000000052;1;Group  ;
                CaptionML=DEU=USt-Abstimmung;
                GroupType=Group }

    { 1000000053;2;Field  ;
                CaptionML=DEU=ausfhren, Datum ab und -bis eintragen;
                SourceExpr=v_ustabstimm }

    { 1000000054;1;Group  ;
                CaptionML=DEU=Support Kontingente;
                GroupType=Group }

    { 1000000055;2;Field  ;
                CaptionML=DEU=1. Prfen ob alle Re in Tab Supp.Kontingente angelegt;
                SourceExpr=v_supp_prf }

    { 1000000056;2;Field  ;
                CaptionML=DEU=Rechnungsdatum ab berprfen:;
                SourceExpr=Datum_ab_supp }

    { 1000000057;2;Field  ;
                CaptionML=DEU=2. Support-Stunden-Auswertung fr Abgrenzung;
                SourceExpr=v_supp_std }

    { 1000000058;1;Group  ;
                CaptionML=DEU=Anlagenkartei;
                GroupType=Group }

    { 1000000059;2;Field  ;
                CaptionML=DEU=Anlagenkarteiblatt erstellen;
                SourceExpr=v_anlkartei }

    { 1000000060;2;Field  ;
                CaptionML=DEU=Anlagennr. eingeben (zB 0135-0001);
                SourceExpr=v_anlagenr }

    { 1000000061;1;Group  ;
                CaptionML=DEU=Anlagenbersicht;
                GroupType=Group }

    { 1000000062;2;Field  ;
                CaptionML=DEU=Anlagenbersicht erstellen (Datum von - bis eingeben);
                SourceExpr=v_anlber }

    { 1000000063;2;Field  ;
                CaptionML=DEU=Konto eingeben (zB 0135);
                SourceExpr=v_anlagenrserie }

    { 1000000064;1;Group  ;
                CaptionML=DEU=Anlagenspiegel;
                GroupType=Group }

    { 1000000065;2;Field  ;
                CaptionML=DEU=Anlagenspiegel erstellen (Datum von -bis eingeben);
                SourceExpr=v_anlspiegel }

  }
  CODE
  {
    VAR
      Excel@1000000154 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      Book@1000000153 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      Range@1000000152 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      Sheet@1000000151 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      j@1000000150 : Text[30];
      var_anzahl_h„kchen@1000000149 : Integer;
      Kreditor@1000000148 : Record 23;
      Kredpost@1000000147 : Record 25;
      saldo_sum@1000000146 : Decimal;
      haben_sum@1000000145 : Decimal;
      soll_sum@1000000144 : Decimal;
      kreditorh„kchen@1000000143 : Boolean;
      Datum_ab@1000000142 : Date;
      Datum_bis@1000000141 : Date;
      Datum_ab_supp@1000000140 : Date;
      Debitor@1000000139 : Record 18;
      Debpost@1000000138 : Record 21;
      Sachkont@1000000137 : Record 15;
      Sachkont1@1000000136 : Record 15;
      Sachpost@1000000135 : Record 17;
      debitorh„kchen@1000000134 : Boolean;
      sachkontenh„kchen@1000000133 : Boolean;
      kreditorpostenh„kchen@1000000132 : Boolean;
      Debitorpostenh„kchen@1000000131 : Boolean;
      sachpostenh„kchen@1000000130 : Boolean;
      lagerbewerth„kchen@1000000129 : Boolean;
      freieslagerh„kchen@1000000128 : Boolean;
      freieslagertestneu@1000000127 : Boolean;
      freieslagerverkauf@1000000126 : Boolean;
      quoteh„kchen@1000000125 : Boolean;
      testlagerh„kchen@1000000124 : Boolean;
      sachkonten_ebilanz_h„kchen@1000000123 : Boolean;
      sumlisth„kchen@1000000122 : Boolean;
      alle_sachkonten@1000000121 : Boolean;
      saldo_sum_vj@1000000120 : Decimal;
      sachkon_von@1000000119 : Code[10];
      sachkon_bis@1000000118 : Code[10];
      v_startdat_gj@1000000117 : Date;
      v_endedat_gj@1000000116 : Date;
      v_endedat_vj@1000000115 : Date;
      Artikel@1000000114 : Record 27;
      Artikelposten@1000000113 : Record 32;
      Artikelposten2@1000000112 : Record 32;
      ek_preis@1000000111 : Record 7012;
      tab_ab@1000000110 : Record 37;
      Wertposten@1000000109 : Record 5802;
      EK_Rech_k@1000000108 : Record 122;
      Lager_abgrenz_datum@1000000107 : Date;
      Kurs_USD@1000000106 : Decimal;
      Kurs_JPY@1000000105 : Decimal;
      Kurs_GBP@1000000104 : Decimal;
      Lagerort1@1000000103 : Code[10];
      Lagerort2@1000000102 : Code[10];
      Lagerort3@1000000101 : Code[10];
      Lagerbestand@1000000100 : Decimal;
      lagerbestand1@1000000099 : Decimal;
      lagerbestand2@1000000098 : Decimal;
      lagerbestand3@1000000097 : Decimal;
      Lagerstck1@1000000096 : Decimal;
      lagerstck2@1000000095 : Decimal;
      lagerstck3@1000000157 : Decimal;
      var_NEXT@1000000094 : Integer;
      var_text1@1000000093 : Text[30];
      var_text2@1000000092 : Text[30];
      var_letzter_wert@1000000091 : Decimal;
      var_sum_zugang_wert@1000000090 : Decimal;
      var_sum_zugang_wert_stichkurs@1000000089 : Decimal;
      v_sum_bewert@1000000088 : Decimal;
      zu_w„h_kurs@1000000087 : Decimal;
      v_dcwert@1000000086 : Decimal;
      v_dc@1000000085 : Decimal;
      v_ab_bestand@1000000084 : Decimal;
      v_bb_bestand@1000000083 : Decimal;
      v_ab_menge@1000000082 : Decimal;
      v_au_2053@1000000081 : Decimal;
      v_stichwert@1000000080 : Decimal;
      v_sonderlager@1000000079 : Boolean;
      v_zuwert@1000000078 : Decimal;
      v_bewert@1000000077 : Decimal;
      v_dcw„@1000000076 : Text[30];
      v_fakturiert@1000000075 : Decimal;
      v_quantity@1000000074 : Decimal;
      v_quantity2@1000000073 : Decimal;
      vkrz@1000000072 : Record 113;
      vkgz@1000000071 : Record 115;
      ekz@1000000070 : Record 39;
      ekrz@1000000069 : Record 123;
      v_Artikel@1000000068 : Code[20];
      v_konsi@1000000067 : Boolean;
      v_meng_fakt@1000000066 : Decimal;
      v_meng_lief@1000000065 : Decimal;
      vklz@1000000064 : Record 111;
      v_z„hlschleife@1000000063 : Text[30];
      j_z„hl@1000000062 : Text[30];
      LB_Excel@1000000061 : Boolean;
      Dateiname@1000000060 : Text[250];
      Excel_bewert@1000000059 : Boolean;
      v_Datecode@1000000058 : Code[20];
      herstell@1000000057 : Record 5720;
      v_FLmenge@1000000056 : Integer;
      v_FLaumenge@1000000055 : Integer;
      v_FLaurmenge@1000000054 : Integer;
      v_FLekmenge@1000000053 : Integer;
      v_FLwert@1000000052 : Decimal;
      v_preis@1000000051 : Decimal;
      v_w„_abstimm@1000000050 : Boolean;
      v_w„_abstimm1@1000000049 : Boolean;
      v_druck_art@1000000048 : Decimal;
      v_ek_w„@1000000047 : Code[10];
      v_ek_preis@1000000046 : Decimal;
      v_usd_gesamt@1000000045 : Decimal;
      v_jpy_gesamt@1000000044 : Decimal;
      v_gbp_gesamt@1000000043 : Decimal;
      v_eur_gesamt@1000000042 : Decimal;
      v_au_wert@1000000041 : Decimal;
      v_aur_wert@1000000040 : Decimal;
      v_lager_wert@1000000039 : Decimal;
      v_best_wert@1000000038 : Decimal;
      v_wkv@1000000037 : Boolean;
      v_wkv_brutto_gesamt@1000000036 : Decimal;
      v_wkv_netto_gesamt@1000000035 : Decimal;
      v_wkv_saldo_gesamt@1000000034 : Decimal;
      v_wkv_saldo_unversich@1000000033 : Decimal;
      bankpos@1000000032 : Record 271;
      v_dc_ek@1000000031 : Decimal;
      v_ustabstimm@1000000030 : Boolean;
      v_supp_std@1000000029 : Boolean;
      supp_kon@1000000028 : Record 50013;
      v_meng_rest@1000000027 : Decimal;
      v_meng_rest1@1000000026 : Decimal;
      v_neu_gruppe@1000000025 : Code[20];
      v_supp_wert@1000000024 : Decimal;
      v_supp_prf@1000000023 : Boolean;
      belege@1000000022 : Record 50010;
      v_hypernr@1000000021 : Text[30];
      v_hyperlink@1000000020 : Text[250];
      Anlage@1000000019 : Record 5600;
      Anlpost@1000000018 : Record 5601;
      Anlpost1@1000000017 : Record 5601;
      v_anlkartei@1000000016 : Boolean;
      v_anlber@1000000015 : Boolean;
      v_anlspiegel@1000000014 : Boolean;
      v_anlagenr@1000000013 : Code[20];
      v_anlagenrserie@1000000012 : Code[10];
      v_anlwert@1000000011 : Decimal;
      v_anlwertgesamt@1000000010 : Decimal;
      v_ger„tenr@1000000009 : Code[20];
      v_date_jahr1@1000000008 : Text[10];
      v_date_jahr2@1000000007 : Text[10];
      v_D22@1000000006 : Decimal;
      v_D31@1000000005 : Decimal;
      v_D33@1000000004 : Decimal;
      v_D35@1000000003 : Decimal;
      v_D37@1000000002 : Decimal;
      v_D39@1000000001 : Decimal;
      v_D41@1000000000 : Decimal;
      v_beleghis@1000000155 : Record 50008;
      v_wertpos_ek@1000000156 : Decimal;
      Text000@1000000158 : TextConst 'DEU=Excel Export erfolgreich abgeschlossen.';
      TempExcelBuffer@1000000169 : TEMPORARY Record 370;
      FileMgt@1000000168 : Codeunit 419;
      ServerFileName@1000000167 : Text;
      SheetName@1000000166 : Text[250];
      DoUpdateExistingWorksheet@1000000165 : Boolean;
      Testmode@1000000164 : Boolean;
      Window@1000000163 : Dialog;
      RecNo@1000000162 : Integer;
      TotalRecNo@1000000161 : Integer;
      RowNo@1000000160 : Integer;
      ColumnNo@1000000159 : Integer;

    PROCEDURE Lagerbewertung@1140002();
    BEGIN
      // ANFANG Lagerbewertung in Excel ausgeben
      CLEAR(Excel);
      REPEAT
      UNTIL ISCLEAR(Excel);

      CREATE(Excel,FALSE,TRUE);                                            //erzeugt excel
      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet

      Sheet.Range('H:H').NumberFormat:='###.###,#####';
      //Sheet.Range('L:L').NumberFormat:='###';

      Sheet.Range('A2').Value := 'Hersteller';
      Sheet.Range('B2').Value := 'Artikel';
      Sheet.Range('C2').Value := 'Lagerbestand';
      Sheet.Range('D2').Value := 'Art';
      Sheet.Range('E2').Value := 'Lager';
      Sheet.Range('F2').Value := 'Beleg-Nr';
      Sheet.Range('G2').Value := 'WP-Datum';
      Sheet.Range('H2').Value := 'WP-Preis';
      Sheet.Range('I2').Value := 'ArtP Menge';
      Sheet.Range('J2').Value := 'Bewert Menge';
      Sheet.Range('K2').Value := 'Pos Wert';
      Sheet.Range('L2').Value := 'W„hrung';
      Sheet.Range('M2').Value := 'Kurs';
      Sheet.Range('N2').Value := 'Zuwert Stich';
      Sheet.Range('O2').Value := 'W„hrung DC';
      Sheet.Range('P2').Value := 'DC-Preis';
      Sheet.Range('Q2').Value := 'DC Wert';
      Sheet.Range('R2').Value := 'niedrig Wert';
      Sheet.Range('S2').Value := 'S';
      Sheet.Range('T2').Value := 'T';
      Sheet.Range('U2').Value := 'NW+Zoll+Handling';

      Sheet.Range('W1').Value := '=WENN(C1-J1=0;0;J1)';
      Sheet.Range('X1').Value := '=WENN(W1=0;0;C1)';
      Sheet.Range('Y1').Value := '=SUMME(W5:W13)';
      Sheet.Range('Z1').Value := '=WENN(L1="USD";K1*M1/$G$1;0)';
      Sheet.Range('AA1').Value := '=WENN(N1-Z1=0;0;N1-Z1)';
      Sheet.Range('AB1').Value := '=WENN(L1="";0;AA1)';



      Sheet.Range('A1').Value := 'Lagerbewertung';
      Sheet.Range('B1').Value := Lager_abgrenz_datum;
      IF Lagerort1='' THEN BEGIN
        Sheet.Range('C1').Value := 'ZENT/KONSI/ERSATZ/IDT';
      END ELSE BEGIN
        Sheet.Range('C1').Value := Lagerort1;
        Sheet.Range('D1').Value := Lagerort2;
        Sheet.Range('E1').Value := Lagerort3;
      END;
      Sheet.Range('F1').Value := 'Kurs USD';
      Sheet.Range('G1').Value := FORMAT(Kurs_USD);
      Sheet.Range('H1').Value := 'Kurs JPY';
      Sheet.Range('I1').Value := FORMAT(Kurs_JPY);
      Sheet.Range('J1').Value := 'Kurs GBP';
      Sheet.Range('K1').Value :=  FORMAT(Kurs_GBP);

      j := '2';

      //  Suchen aller Artikel mit Lagerbestand ungleich Null ohne ACA, ACP, ACC, ACI, ACT und TOP
      //  ****************************************************************************************
      Artikel.RESET;

      //  Testeingrenzung auf einen Artikel
      //Artikel.SETFILTER(Artikel."No.",'%1|%2|%3','211 370 000RL','211 385 000RL','GS1011MEES');
      // Ende Testeingrenzung
      // Ausschluá von Herstellercodes 52-53, 56-5730 und 86-99. Im Umkehrschluá sind dann zu finden 01-51, 54-55 und 58-85
      Artikel.SETFILTER(Artikel."Manufacturer Code",'%1..%2|%3..%4|%5..%6','01','51','54','55','58','85');
      //Artikel.SETFILTER(Artikel."Manufacturer Code",'%1..%2&%3..%4&%5..%6&','01','51','54','55','58','85');
      //Artikel.SETFILTER(Artikel.Herstellerkurzname,'<>%1&<>%2&<>%3&<>%4&<>%5&<>%6&<>%7&<>%8&<>%9&<>%10','ACA','ACP','ACC','ACI','ACT','FES','FET','INT','TOP','TSG');
      v_ab_bestand:=0;
      v_bb_bestand:=0;

      Artikel.CALCFIELDS(Inventory,"Qty. on Purch. Order","Qty. on Sales Order");
      v_ab_bestand:=Artikel."Qty. on Sales Order";
      v_bb_bestand:=Artikel."Qty. on Purch. Order";

      // Artikelnr 2 und Gesamtlagerbestand ausgeben
      // Anfang Schleife alle Artikel
      // *******************************************
      IF Artikel.FINDFIRST THEN BEGIN
        REPEAT
        // Variablen auf Null setzen
        // *************************
        Lagerbestand:=0;
        Lagerstck1:=0;
        lagerstck2:=0;
        lagerstck3:=0;
        var_NEXT:=0;
        var_text1:=' ';
        var_text2:=' ';
        var_letzter_wert:=0;
        var_sum_zugang_wert:=0;
        var_sum_zugang_wert_stichkurs:=0;
        v_sum_bewert:=0;
        zu_w„h_kurs:=0;
        v_dcwert:=0;
        v_sum_bewert:=0;
        v_dc:=0;
        v_ab_bestand:=0;
        v_bb_bestand:=0;
        v_ab_menge:=0;
        // Artikelposten zu o.g. Artikel und Lagerort filtern und neu sortieren (neuester Zugang zuerst)
        // ********************************************************************************
        Artikelposten.RESET;
        Artikelposten.SETCURRENTKEY("Item No.","Posting Date");
        //          Artikelposten.ASCENDING:= FALSE;
        Artikelposten.SETFILTER(Artikelposten."Item No.",'%1',Artikel."No.");

        // Standardlagerauswertung oder bestimmtes Lager benutzen
        // ******************************************************
        IF v_sonderlager=TRUE THEN BEGIN
          Artikelposten.SETFILTER(Artikelposten."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
        END ELSE BEGIN
          Artikelposten.SETFILTER(Artikelposten."Location Code",'%1|%2|%3',Lagerort1,Lagerort2,Lagerort3);
        END;
        Artikelposten.SETFILTER(Artikelposten."Posting Date",'<=%1',Lager_abgrenz_datum);
        //          Artikelposten.SETFILTER(Artikelposten."Completely Invoiced",'%1',TRUE);

        // Lagerbestand aufsummieren und ausgeben
        // Anfang Schleife Lagerbestand ausgew„hlte L„ger
        // ****************************************
        IF Artikelposten.FINDFIRST THEN BEGIN
          REPEAT
            Lagerbestand:=Lagerbestand+Artikelposten."Invoiced Quantity";
          UNTIL Artikelposten.NEXT=0;
        END ELSE BEGIN
          v_dc:=9999;
        END;
        // Ende Schleife Lagerbestand ausgew„hlte L„ger
        IF Lagerbestand>0 THEN BEGIN
          Lagerstck1:=Lagerbestand;
          // Artikelposten zu o.g. Artikel, Lagerort und Zugang filtern und neu sortieren (neu oben)
          // ***************************************************************************************
          Artikelposten.RESET;
          Artikelposten.SETCURRENTKEY("Item No.","Posting Date");
          Artikelposten.ASCENDING:= FALSE;
          Artikelposten.SETFILTER(Artikelposten."Item No.",'%1',Artikel."No.");

          // Standardlagerauswertung oder bestimmtes Lager benutzen
          // ******************************************************
          IF v_sonderlager=TRUE THEN BEGIN
            Artikelposten.SETFILTER(Artikelposten."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          END ELSE BEGIN
            Artikelposten.SETFILTER(Artikelposten."Location Code",'%1|%2|%3',Lagerort1,Lagerort2,Lagerort3);
          END;
          Artikelposten.SETFILTER(Artikelposten."Entry Type",'%1|%2',Artikelposten."Entry Type"::Purchase, Artikelposten."Entry Type"::"Positive Adjmt.");
          Artikelposten.SETFILTER(Artikelposten."Posting Date",'<=%1',Lager_abgrenz_datum);
          Artikelposten.SETFILTER(Artikelposten."Invoiced Quantity",'<>%1',0);
          IF Artikelposten.FINDFIRST THEN BEGIN
            REPEAT
              // zu jedem Artikelposten den Wertposten holen
              // Anfang Schleife Zugangswerte holen
              // Unterscheiden zwischen INV und Wertposten
              // **********************************************
              Wertposten_1;
              Wertpost_EK_W„hrcode;
              IF v_stichwert=0 THEN BEGIN
                EKRech_holen_Beleghistorie;
              END;
              IF FORMAT(Sheet.Range('L'+j).Value) = '' THEN BEGIN
                EKRech_holen_Beleghistorie;
              END;
              ek_preis.RESET;
              ek_preis.SETFILTER(ek_preis."Item No.",'%1',Artikel."No.");
              ek_preis.SETFILTER(ek_preis."Ending Date",'%1',0D);
              //      IF ek_preis.FINDFIRST THEN BEGIN
              IF ek_preis.FINDLAST THEN BEGIN
                Sheet.Range('O'+j).Value :=ek_preis."Currency Code";
                Sheet.Range('P'+j).Value :=ek_preis."Direct Unit Cost";
                  IF ek_preis."Currency Code"='' THEN Sheet.Range('Q'+j).Value :=(ek_preis."Direct Unit Cost"*lagerstck3);
                  IF ek_preis."Currency Code"='' THEN v_dcwert:= (ek_preis."Direct Unit Cost"*lagerstck3);
                  //          IF ek_preis."Currency Code"='' THEN Sheet.Range('T'+j).Value :='Kurs_ek_preis';    //  Test Spalte M kein Kurseintrag
                  IF ek_preis."Currency Code"='' THEN Sheet.Range('M'+j).Value :=1;
                  IF ek_preis."Currency Code"='' THEN Sheet.Range('L'+j).Value :='EUR';
                  IF ek_preis."Currency Code"='USD' THEN Sheet.Range('Q'+j).Value :=(ek_preis."Direct Unit Cost"*lagerstck3/Kurs_USD);
                  IF ek_preis."Currency Code"='USD' THEN v_dcwert:= (ek_preis."Direct Unit Cost"*lagerstck3/Kurs_USD);
                  IF ek_preis."Currency Code"='GBP' THEN Sheet.Range('Q'+j).Value :=(ek_preis."Direct Unit Cost"*lagerstck3/Kurs_GBP);
                  IF ek_preis."Currency Code"='GBP' THEN v_dcwert:= (ek_preis."Direct Unit Cost"*lagerstck3/Kurs_GBP);
                  IF ek_preis."Currency Code"='JPY' THEN Sheet.Range('Q'+j).Value :=(ek_preis."Direct Unit Cost"*lagerstck3/Kurs_JPY);
                  IF ek_preis."Currency Code"='JPY' THEN v_dcwert:= (ek_preis."Direct Unit Cost"*lagerstck3/Kurs_JPY);
                END;
                IF v_stichwert=0 THEN Sheet.Range('N'+j).Value :=9999999;
                niedrigster_Wert;
              UNTIL (Artikelposten.NEXT=0) OR (var_NEXT=7)
            END;  // ENDE  Artikelpostenabfrage
          END;
        UNTIL Artikel.NEXT=0;
      END;
      Excel.Visible(TRUE);
      MESSAGE(Text000);
    END;

    PROCEDURE "Freies Lager"@1140003();
    BEGIN
      CLEAR(Excel);
      REPEAT
      UNTIL ISCLEAR(Excel);
      CREATE(Excel,FALSE,TRUE);
      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.Range('K:K').NumberFormat:='###.###,00';
      Sheet.Range('M:M').NumberFormat:='###.###,00';

      Sheet.Range('A1').Value := 'Freies Lager Wert'; // šberschriftszeile
      Sheet.Range('B1').Value := WORKDATE;

      Sheet.Range('A2').Value := 'Partnumber';
      Sheet.Range('B2').Value := 'Qty';
      Sheet.Range('C2').Value := 'Manufactor';
      Sheet.Range('D2').Value := 'Date Code';
      Sheet.Range('E2').Value := 'Wert';

      j:='3';

      //ANFANG NEU
      Artikel.RESET;
      Artikel.SETFILTER(Artikel."No.",'<>%1','');
      Artikel.SETFILTER(Artikel."Manufacturer Code",'%1..%2|%3..%4|%5..%6','01','51','54','55','58','85');
      //Artikel.SETFILTER(Artikel.Herstellerkurzname,'<>%1&<>%2&<>%3&<>%4&<>%5&<>%6','ACA','ACP','ACC','ACI','ACT','TOP');
      IF Artikel.FINDFIRST THEN BEGIN
        REPEAT
          v_FLmenge:=0;
          v_FLaumenge:=0;
          v_FLwert:=0;
          v_Datecode:='';
          //Artikelposten pro Artikel holen w/Lagermenge ************
          Artikelposten.RESET;
          Artikelposten.SETFILTER(Artikelposten."Item No.",'%1',Artikel."No.");
          Artikelposten.SETFILTER(Artikelposten."Remaining Quantity",'>%1',0);
          Artikelposten.SETFILTER(Artikelposten."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF Artikelposten.FINDFIRST THEN BEGIN
            REPEAT
              Artikelposten.CALCFIELDS(Artikelposten."Cost Amount (Actual)");
              v_FLmenge:=(v_FLmenge +Artikelposten."Remaining Quantity");
              v_FLwert:=(v_FLwert+Artikelposten."Cost Amount (Actual)"/Artikelposten.Quantity*Artikelposten."Remaining Quantity");
              IF v_Datecode='' THEN BEGIN
                v_Datecode:= Artikelposten."Lot No.";
              END ELSE BEGIN
                IF v_Datecode> Artikelposten."Lot No." THEN BEGIN
                  v_Datecode:= Artikelposten."Lot No.";
                END;
              END;
            UNTIL Artikelposten.NEXT=0;
          END;
          // ENDE Artikelposten pro Artikel holen  ******************
          // Auftragsbestand pro Artikel holen ***********************************
          tab_ab.RESET;
          tab_ab.SETFILTER(tab_ab."No.",'%1',Artikel."No.");
          tab_ab.SETFILTER(tab_ab."Outstanding Quantity",'>%1',0);
          tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::Order);
          tab_ab.SETFILTER(tab_ab.Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF tab_ab.FINDFIRST THEN BEGIN
            REPEAT
              v_FLaumenge:=(v_FLaumenge + tab_ab."Outstanding Quantity");
            UNTIL tab_ab.NEXT=0;
          END;
          // ENDE Auftragsbestand pro Artikel holen ******************************
          // Rahmenauftragsbestand pro Artikel holen ***********************************
          tab_ab.RESET;
          tab_ab.SETFILTER(tab_ab."No.",'%1',Artikel."No.");
          tab_ab.SETFILTER(tab_ab."Outstanding Quantity",'>%1',0);
          tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::"Blanket Order");
          tab_ab.SETFILTER(tab_ab.Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF tab_ab.FINDFIRST THEN BEGIN
            REPEAT
              tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
              v_FLaumenge:=(v_FLaumenge + (tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU"));
            UNTIL tab_ab.NEXT = 0;
          END;
          // ENDE Rahmenauftragsbestand pro Artikel holen ******************************
          // Bestellbestand pro Artikel holen ****************************************************
          // ENDE Bestellbestand pro Artikel holen ***********************************************
          // Ausgabe nach EXCEL ***********************************************************************************
          IF (v_FLmenge-v_FLaumenge) > 0 THEN BEGIN
            Sheet.Range('A'+j).Value := Artikel."No. 2";
            Sheet.Range('B'+j).Value := FORMAT(v_FLmenge-v_FLaumenge);
            herstell.RESET;
            herstell.SETFILTER(herstell.Code,'%1',Artikel."Manufacturer Code");
            IF herstell.FINDFIRST THEN BEGIN
              Sheet.Range('C'+j).Value :=herstell.Name;
            END;
            Sheet.Range('D'+j).Value := FORMAT(v_Datecode);
            //  Sheet.Range('D'+j).Value := FORMAT(Artikelposten."Lot No.");
            Sheet.Range('E'+j).Value := (v_FLwert/v_FLmenge*(v_FLmenge-v_FLaumenge));
            j := INCSTR(j);
          END;
          // ENDE AAusgabe nach Excel ******************************************************************************
        UNTIL Artikel.NEXT = 0;
      END;
      //ENDE NEU
      Excel.Visible(TRUE);

      MESSAGE(Text000);
    END;

    PROCEDURE Quoteberprfung@1140004();
    BEGIN
    END;

    PROCEDURE neu@1140011();
    BEGIN
    END;

    PROCEDURE Lager_EK_Rech_VK_Rech@1140012();
    BEGIN
    END;

    PROCEDURE Konsignationslager@1140013();
    BEGIN
    END;

    PROCEDURE LB_nach_Excel@1140014();
    BEGIN
    END;

    PROCEDURE IDT_LB_bewerten@1140015();
    BEGIN
    END;

    PROCEDURE IDT_LB_bewerten_IDT@1140016();
    BEGIN
    END;

    PROCEDURE "Freies Lager Test neu"@1140017();
    BEGIN
      {
      CLEAR(Excel);
      REPEAT
      UNTIL ISCLEAR(Excel);


      CREATE(Excel,FALSE,TRUE);
      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.Range('K:K').NumberFormat:='###.###,00';
      Sheet.Range('M:M').NumberFormat:='###.###,00';

      Sheet.Range('A1').Value := 'Freies Lager Wert'; // šberschriftszeile
      Sheet.Range('B1').Value := WORKDATE;

      Sheet.Range('A2').Value := 'Partnumber';
      Sheet.Range('B2').Value := 'Qty';
      Sheet.Range('C2').Value := 'Manufactor';
      Sheet.Range('D2').Value := 'Date Code';
      Sheet.Range('E2').Value := 'Wert';

      j:='3';

      //ANFANG NEU
      Artikel.RESET;
      Artikel.SETFILTER(Artikel."No.",'<>%1','');
      Artikel.SETFILTER(Artikel."Manufacturer Code",'%1..%2|%3..%4|%5..%6','01','51','54','55','58','85');
      //Artikel.SETFILTER(Artikel.Herstellerkurzname,'<>%1&<>%2&<>%3&<>%4&<>%5&<>%6','ACA','ACP','ACC','ACI','ACT','TOP');
      IF Artikel.FINDFIRST THEN BEGIN
      REPEAT
      v_FLmenge:=0;
      v_FLaumenge:=0;
      v_FLwert:=0;
      v_Datecode:='';
      //Artikelposten pro Artikel holen w/Lagermenge ************
        Artikelposten.RESET;
        Artikelposten.SETFILTER(Artikelposten."Item No.",'%1',Artikel."No.");
        Artikelposten.SETFILTER(Artikelposten."Remaining Quantity",'>%1',0);
        Artikelposten.SETFILTER(Artikelposten."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
        IF Artikelposten.FINDFIRST THEN BEGIN
        REPEAT
         Artikelposten.CALCFIELDS(Artikelposten."Cost Amount (Actual)");
         v_FLmenge:=(v_FLmenge +Artikelposten."Remaining Quantity");
         v_FLwert:=(v_FLwert+Artikelposten."Cost Amount (Actual)"/Artikelposten.Quantity*Artikelposten."Remaining Quantity");
         IF v_Datecode='' THEN BEGIN
             v_Datecode:= Artikelposten."Lot No.";
         END ELSE BEGIN
           IF v_Datecode> Artikelposten."Lot No." THEN BEGIN
             v_Datecode:= Artikelposten."Lot No.";
           END;
         END;
        UNTIL Artikelposten.NEXT=0;
        END;
      // ENDE Artikelposten pro Artikel holen  ******************

      // Auftragsbestand pro Artikel holen ***********************************
            tab_ab.RESET;
            tab_ab.SETFILTER(tab_ab."No.",'%1',Artikel."No.");
            tab_ab.SETFILTER(tab_ab."Outstanding Quantity",'>%1',0);
            tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::Order);
            tab_ab.SETFILTER(tab_ab.Type,'%1',tab_ab.Type::Item);
            tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
            IF tab_ab.FINDFIRST THEN BEGIN
            REPEAT
              v_FLaumenge:=(v_FLaumenge + tab_ab."Outstanding Quantity");
            UNTIL tab_ab.NEXT=0;
            END;
      // ENDE Auftragsbestand pro Artikel holen ******************************

      // Rahmenauftragsbestand pro Artikel holen ***********************************
            tab_ab.RESET;
            tab_ab.SETFILTER(tab_ab."No.",'%1',Artikel."No.");
            tab_ab.SETFILTER(tab_ab."Outstanding Quantity",'>%1',0);
            tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::"Blanket Order");
            tab_ab.SETFILTER(tab_ab.Type,'%1',tab_ab.Type::Item);
            tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
            IF tab_ab.FINDFIRST THEN BEGIN
            REPEAT
              tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
              v_FLaumenge:=(v_FLaumenge + (tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU"));
            UNTIL tab_ab.NEXT=0;
            END;
      // ENDE Rahmenauftragsbestand pro Artikel holen ******************************



      // Bestellbestand pro Artikel holen ****************************************************

      // ENDE Bestellbestand pro Artikel holen ***********************************************

      // Ausgabe nach EXCEL ***********************************************************************************
       IF (v_FLmenge-v_FLaumenge)>0 THEN BEGIN
       Sheet.Range('A'+j).Value := Artikel."No. 2";
       Sheet.Range('B'+j).Value := FORMAT(v_FLmenge-v_FLaumenge);
            herstell.RESET;
            herstell.SETFILTER(herstell.Code,'%1',Artikel."Manufacturer Code");
             IF herstell.FINDFIRST THEN BEGIN
               Sheet.Range('C'+j).Value :=herstell.Name;
             END;
          Sheet.Range('D'+j).Value := FORMAT(v_Datecode);
      //  Sheet.Range('D'+j).Value := FORMAT(Artikelposten."Lot No.");
        Sheet.Range('E'+j).Value := (v_FLwert/v_FLmenge*(v_FLmenge-v_FLaumenge));
          j:=INCSTR(j);
       END;
      // ENDE AAusgabe nach Excel ******************************************************************************

      UNTIL Artikel.NEXT=0;
      END;



      //ENDE NEU
      Excel.Visible(TRUE);
      MESSAGE(Text000);
      }
    END;

    PROCEDURE "Freies Lager Verkauf"@1140018();
    BEGIN
      CLEAR(Excel);
      REPEAT
      UNTIL ISCLEAR(Excel);

      CREATE(Excel,FALSE,TRUE);
      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.Range('K:K').NumberFormat:='###.###,00';
      Sheet.Range('M:M').NumberFormat:='###.###,00';

      Sheet.Range('A1').Value := 'Freies Lager Verkauf'; // šberschriftszeile
      Sheet.Range('B1').Value := WORKDATE;

      Sheet.Range('A2').Value := 'Partnumber';
      Sheet.Range('B2').Value := 'Qty';
      Sheet.Range('C2').Value := 'Manufactor';
      Sheet.Range('D2').Value := 'Date Code';


      j:='3';

      //ANFANG NEU
      Artikel.RESET;
      Artikel.SETFILTER(Artikel.Blocked,'%1',FALSE);
      Artikel.SETFILTER(Artikel."Manufacturer Code",'%1..%2|%3..%4|%5..%6','01','51','54','55','58','85');
      //Artikel.SETFILTER(Artikel."Manufacturer Code",'<>%1&<>%2&<>%3&<>%4&<>%5&<>%6&<>%7&<>%8&<>%9&<>%10'
      //,'52','53','57','5710','58','59','96','99','98','97');
      //Artikel.SETFILTER(Artikel."Manufacturer Code",'%1..%2|%3..%4|%5..%6'
      //,'00','51','54','56','60','65');
      Artikel.SETFILTER(Artikel."Vendor No.",'<>%1','600046');

      IF Artikel.FINDFIRST THEN BEGIN
        REPEAT
          v_FLmenge:=0;
          v_FLaumenge:=0;
          v_FLwert:=0;
          v_Datecode:='';
          //Artikelposten pro Artikel holen w/Lagermenge ************
          Artikelposten.RESET;
          Artikelposten.SETFILTER(Artikelposten."Item No.",'%1',Artikel."No.");
          Artikelposten.SETFILTER(Artikelposten."Remaining Quantity",'>%1',0);
          Artikelposten.SETFILTER(Artikelposten."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF Artikelposten.FINDFIRST THEN BEGIN
            REPEAT
              Artikelposten.CALCFIELDS(Artikelposten."Cost Amount (Actual)");
              v_FLmenge := (v_FLmenge + Artikelposten."Remaining Quantity");
              v_FLwert := (v_FLwert+Artikelposten."Cost Amount (Actual)"/Artikelposten.Quantity*Artikelposten."Remaining Quantity");
              IF v_Datecode = '' THEN BEGIN
                v_Datecode := Artikelposten."Lot No.";
              END ELSE BEGIN
                IF v_Datecode > Artikelposten."Lot No." THEN BEGIN
                  v_Datecode:= Artikelposten."Lot No.";
                END;
              END;
            UNTIL Artikelposten.NEXT=0;
          END;
          // ENDE Artikelposten pro Artikel holen  ******************
          // Auftragsbestand pro Artikel holen ***********************************
          tab_ab.RESET;
          tab_ab.SETFILTER(tab_ab."No.",'%1',Artikel."No.");
          tab_ab.SETFILTER(tab_ab."Outstanding Quantity",'>%1',0);
          tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::Order);
          tab_ab.SETFILTER(tab_ab.Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF tab_ab.FINDFIRST THEN BEGIN
            v_FLaumenge := 1000000;
          END;
          // ENDE Auftragsbestand pro Artikel holen ******************************
          // Ausgabe nach EXCEL ***********************************************************************************
          IF (v_FLmenge - v_FLaumenge) > 0 THEN BEGIN
            Sheet.Range('A'+j).Value := Artikel."No. 2";
            Sheet.Range('B'+j).Value := FORMAT(v_FLmenge-v_FLaumenge);
            herstell.RESET;
            herstell.SETFILTER(herstell.Code,'%1',Artikel."Manufacturer Code");
            IF herstell.FINDFIRST THEN BEGIN
              Sheet.Range('C'+j).Value := herstell.Name;
            END;
            Sheet.Range('D'+j).Value := FORMAT(v_Datecode);
            j := INCSTR(j);
          END;
          // ENDE Ausgabe nach Excel ******************************************************************************
        UNTIL Artikel.NEXT = 0;
      END;
      j := INCSTR(j);
      Excel.Visible(TRUE);
      MESSAGE(Text000);
    END;

    PROCEDURE WŽ_Abstimmung@1140019();
    BEGIN
    END;

    PROCEDURE WKV@1140020();
    BEGIN
    END;

    PROCEDURE W„hrungsabstimmung@1140021();
    BEGIN
    END;

    PROCEDURE USt_Abstimmung@1140022();
    BEGIN
    END;

    PROCEDURE Support_Stunden@1140023();
    BEGIN
    END;

    PROCEDURE Support_prfen@1140024();
    BEGIN
    END;

    PROCEDURE Anlagekartei@1140025();
    BEGIN
    END;

    PROCEDURE Anlagebersicht@1140026();
    BEGIN
    END;

    PROCEDURE Anlagenspiegel@1140027();
    BEGIN

    END;

    LOCAL PROCEDURE EKRech_holen_Beleghistorie@1000000000();
    BEGIN
      v_stichwert := 0;
      v_beleghis.RESET;
      v_beleghis.SETFILTER(v_beleghis.Belegart,'%1',v_beleghis.Belegart::"Purchase Invoice");
      v_beleghis.SETFILTER(v_beleghis."Artikelnr.",'%1',Artikelposten."Item No.");
      IF v_beleghis.FINDLAST THEN BEGIN
      //   Sheet.Range('L'+j).Value := v_beleghis."EK-W„hrung";
        IF ((v_beleghis."EK-W„hrung" = '') OR (v_beleghis."EK-W„hrung" = '0')) THEN BEGIN
          zu_w„h_kurs := 1;
        END ELSE BEGIN
          IF v_beleghis."Betrag MW ohne Mwst." <> 0 THEN BEGIN
            zu_w„h_kurs := ROUND(v_beleghis.Betrag / v_beleghis."Betrag MW ohne Mwst.",0.0001);
          END;
        END;
        //      Sheet.Range('M'+j).Value := FORMAT(zu_w„h_kurs);
        IF((v_beleghis."EK-W„hrung" = '') OR (v_beleghis."EK-W„hrung" = '0')) THEN BEGIN
          //      v_stichwert:= (v_beleghis."EK-Preis"*lagerstck3);
          v_stichwert := v_zuwert;
          var_sum_zugang_wert_stichkurs := var_sum_zugang_wert_stichkurs + v_stichwert;
          Sheet.Range('L'+j).Value := 'EUR';
          Sheet.Range('M'+j).Value := 1;
        END;
        IF v_beleghis."EK-W„hrung" = 'USD' THEN BEGIN
          //     v_stichwert:= ((v_beleghis."EK-Preis"*lagerstck3/v_beleghis."EK-Kurs")*zu_w„h_kurs/Kurs_USD);
          v_stichwert:= (v_zuwert * zu_w„h_kurs / Kurs_USD);
          var_sum_zugang_wert_stichkurs := var_sum_zugang_wert_stichkurs + v_stichwert;
        END;
        IF v_beleghis."EK-W„hrung"='JPY' THEN BEGIN
          //      v_stichwert:= ((v_beleghis."EK-Preis"*lagerstck3/v_beleghis."EK-Kurs")*zu_w„h_kurs/Kurs_JPY);
          v_stichwert := (v_zuwert * zu_w„h_kurs / Kurs_JPY);
          var_sum_zugang_wert_stichkurs := var_sum_zugang_wert_stichkurs + v_stichwert;
        END;
        IF v_beleghis."EK-W„hrung"='GBP' THEN BEGIN
          //      v_stichwert:= ((v_beleghis."EK-Preis"*lagerstck3/v_beleghis."EK-Kurs")*zu_w„h_kurs/Kurs_GBP);
          v_stichwert := (v_zuwert * zu_w„h_kurs / Kurs_GBP);
          var_sum_zugang_wert_stichkurs := var_sum_zugang_wert_stichkurs + v_stichwert;
        END;
        Sheet.Range('N'+j).Value := v_stichwert;
      END;

    END;

    LOCAL PROCEDURE EKRech_holen_EKRZ@1000000001();
    BEGIN
    END;

    LOCAL PROCEDURE Wertpost_EK_W„hrcode@1000000003();
    BEGIN
      EK_Rech_k.RESET;
      EK_Rech_k.SETFILTER(EK_Rech_k."No.",'%1',Wertposten."Document No.");
      IF EK_Rech_k.FINDFIRST THEN BEGIN
        IF EK_Rech_k."Currency Code" = '' THEN v_wertpos_ek := ROUND(Wertposten."Cost per Unit",0.0001);
        IF EK_Rech_k."Currency Code" = '' THEN Sheet.Range('L'+j).Value := 'EUR';
      //  IF EK_Rech_k."Currency Code" = '' THEN Sheet.Range('T'+j).Value := 'KursEK-Rech';                  // Testeintrag fr W„hrungsfaktor KursEK-Rech
        IF EK_Rech_k."Currency Code" = 'USD' THEN v_wertpos_ek := ROUND(Wertposten."Cost per Unit"*EK_Rech_k."Currency Factor",0.0001);
        IF EK_Rech_k."Currency Code" = 'USD' THEN Sheet.Range('L'+j).Value := 'USD';
        IF EK_Rech_k."Currency Code" = 'JPY' THEN v_wertpos_ek := ROUND(Wertposten."Cost per Unit"*EK_Rech_k."Currency Factor",0.0001);
        IF EK_Rech_k."Currency Code" = 'JPY' THEN Sheet.Range('L'+j).Value := 'JPY';
        IF EK_Rech_k."Currency Code" = 'GBP' THEN v_wertpos_ek := ROUND(Wertposten."Cost per Unit"*EK_Rech_k."Currency Factor",0.0001);
        IF EK_Rech_k."Currency Code" = 'GBP' THEN Sheet.Range('L'+j).Value := 'GBP';
      END;
      //Sheet.Range('H'+j).Value := v_wertpos_ek;
    END;

    LOCAL PROCEDURE EK_Preise_holen@1000000005();
    BEGIN

    END;

    LOCAL PROCEDURE niedrigster_Wert@1000000002();
    BEGIN
       v_bewert:=0;
       IF v_dcwert=0 THEN v_dcwert:=9999999;
       IF v_zuwert=0 THEN v_zuwert:=9999999;
       IF v_stichwert=0 THEN v_stichwert:=9999999;

      IF v_zuwert>=v_dcwert THEN BEGIN
        IF v_dcwert>=v_stichwert THEN BEGIN
          v_bewert:=v_stichwert;
        END;
      END;
      IF v_dcwert>=v_zuwert THEN BEGIN
        IF v_zuwert>=v_stichwert THEN BEGIN
          v_bewert:=v_stichwert;
        END;
      END;

      IF v_stichwert>=v_dcwert THEN BEGIN
        IF v_dcwert>=v_zuwert THEN BEGIN
          v_bewert:=v_zuwert;
        END;
      END;
      IF v_dcwert>=v_stichwert THEN BEGIN
        IF v_stichwert>=v_zuwert THEN BEGIN
          v_bewert:=v_zuwert;
        END;
      END;

      IF v_zuwert>=v_stichwert THEN BEGIN
        IF v_stichwert>=v_dcwert THEN BEGIN
          v_bewert:=v_dcwert;
        END;
      END;
      IF v_stichwert>=v_zuwert THEN BEGIN
        IF v_zuwert>=v_dcwert THEN BEGIN
          v_bewert:=v_dcwert;
        END;
      END;


      v_sum_bewert:=v_sum_bewert+v_bewert;
      Sheet.Range('R'+j).Value :=v_bewert;

      IF v_bewert=9999999 THEN Sheet.Range('M1').Value := 'Fehler in Spalte R, bitte prfen';
      IF v_bewert=9999999 THEN Sheet.Range('P1').Value := j;
      IF v_bewert=9999 THEN Sheet.Range('M1').Value := 'Fehler in Spalte R, bitte prfen';
      IF v_bewert=9999 THEN Sheet.Range('M1').Value := j;

      IF Artikel."Indirect Cost %"=0 THEN BEGIN
        Sheet.Range('U'+j).Value :=v_bewert;
      END ELSE BEGIN
        Sheet.Range('U'+j).Value :=v_bewert*((Artikel."Indirect Cost %"+100)/100);
      END;
    END;

    LOCAL PROCEDURE Restposten@1000000004();
    BEGIN
    END;

    LOCAL PROCEDURE Lagerbewertungneu@1000000007();
    BEGIN
      {
      // ANFANG Lagerbewertung in Excel ausgeben
      CLEAR(Excel);
      REPEAT
      UNTIL ISCLEAR(Excel);

      CREATE(Excel,FALSE,TRUE);                                            //erzeugt excel
      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet

      Sheet.Range('H:H').NumberFormat:='###.###,#####';
      //Sheet.Range('L:L').NumberFormat:='###';

      Sheet.Range('A2').Value := 'Hersteller';
      Sheet.Range('B2').Value := 'Artikel';
      Sheet.Range('C2').Value := 'Lagerbestand';
      Sheet.Range('D2').Value := 'Art';
      Sheet.Range('E2').Value := 'Lager';
      Sheet.Range('F2').Value := 'Beleg-Nr';
      Sheet.Range('G2').Value := 'WP-Datum';
      Sheet.Range('H2').Value := 'WP-Preis';
      Sheet.Range('I2').Value := 'ArtP Menge';
      Sheet.Range('J2').Value := 'Bewert Menge';
      Sheet.Range('K2').Value := 'Pos Wert';
      Sheet.Range('L2').Value := 'W„hrung';
      Sheet.Range('M2').Value := 'Kurs';
      Sheet.Range('N2').Value := 'Zuwert Stich';
      Sheet.Range('O2').Value := 'W„hrung DC';
      Sheet.Range('P2').Value := 'DC-Preis';
      Sheet.Range('Q2').Value := 'DC Wert';
      Sheet.Range('R2').Value := 'niedrig Wert';
      Sheet.Range('S2').Value := 'S';
      Sheet.Range('T2').Value := 'T';
      Sheet.Range('U2').Value := 'NW+Zoll+Handling';

      Sheet.Range('W1').Value := '=WENN(C1-J1=0;0;J1)';
      Sheet.Range('X1').Value := '=WENN(W1=0;0;C1)';
      Sheet.Range('Y1').Value := '=SUMME(W5:W13)';
      Sheet.Range('Z1').Value := '=WENN(L1="USD";K1*M1/$G$1;0)';
      Sheet.Range('AA1').Value := '=WENN(N1-Z1=0;0;N1-Z1)';
      Sheet.Range('AB1').Value := '=WENN(L1="";0;AA1)';



      Sheet.Range('A1').Value := 'Lagerbewertung';
      Sheet.Range('B1').Value := Lager_abgrenz_datum;
      IF Lagerort1='' THEN BEGIN
        Sheet.Range('C1').Value := 'ZENT/KONSI/ERSATZ/IDT';
      END ELSE BEGIN
        Sheet.Range('C1').Value := Lagerort1;
        Sheet.Range('D1').Value := Lagerort2;
        Sheet.Range('E1').Value := Lagerort3;
      END;
      Sheet.Range('F1').Value := 'Kurs USD';
      Sheet.Range('G1').Value := FORMAT(Kurs_USD);
      Sheet.Range('H1').Value := 'Kurs JPY';
      Sheet.Range('I1').Value := FORMAT(Kurs_JPY);
      Sheet.Range('J1').Value := 'Kurs GBP';
      Sheet.Range('K1').Value :=  FORMAT(Kurs_GBP);

      j := '2';

      //  Suchen aller Artikel mit Lagerbestand ungleich Null ohne ACA, ACP, ACC, ACI, ACT und TOP
      //  ****************************************************************************************
      Artikel.RESET;

      //  Testeingrenzung auf einen Artikel
      //Artikel.SETFILTER(Artikel."No.",'%1|%2|%3','211 370 000RL','211 385 000RL','GS1011MEES');
      // Ende Testeingrenzung
      // Ausschluá von Herstellercodes 52-53, 56-5730 und 86-99. Im Umkehrschluá sind dann zu finden 01-51, 54-55 und 58-85
      Artikel.SETFILTER(Artikel."Manufacturer Code",'%1..%2|%3..%4|%5..%6','01','51','54','55','58','85');
      //Artikel.SETFILTER(Artikel."Manufacturer Code",'%1..%2&%3..%4&%5..%6&','01','51','54','55','58','85');
      //Artikel.SETFILTER(Artikel.Herstellerkurzname,'<>%1&<>%2&<>%3&<>%4&<>%5&<>%6&<>%7&<>%8&<>%9&<>%10','ACA','ACP','ACC','ACI','ACT','FES','FET','INT','TOP','TSG');
      v_ab_bestand:=0;
      v_bb_bestand:=0;

      Artikel.CALCFIELDS(Inventory,"Qty. on Purch. Order","Qty. on Sales Order");
      v_ab_bestand:=Artikel."Qty. on Sales Order";
      v_bb_bestand:=Artikel."Qty. on Purch. Order";

      // Artikelnr 2 und Gesamtlagerbestand ausgeben
      // Anfang Schleife alle Artikel
      // *******************************************
      IF Artikel.FINDFIRST THEN BEGIN
        REPEAT
        // Variablen auf Null setzen
        // *************************
        Lagerbestand:=0;
        Lagerstck1:=0;
        lagerstck2:=0;
        lagerstck3:=0;
        var_NEXT:=0;
        var_text1:=' ';
        var_text2:=' ';
        var_letzter_wert:=0;
        var_sum_zugang_wert:=0;
        var_sum_zugang_wert_stichkurs:=0;
        v_sum_bewert:=0;
        zu_w„h_kurs:=0;
        v_dcwert:=0;
        v_sum_bewert:=0;
        v_dc:=0;
        v_ab_bestand:=0;
        v_bb_bestand:=0;
        v_ab_menge:=0;
        // Artikelposten zu o.g. Artikel und Lagerort filtern und neu sortieren (neuester Zugang zuerst)
        // ********************************************************************************
        Artikelposten.RESET;
        Artikelposten.SETCURRENTKEY("Item No.","Posting Date");
        //          Artikelposten.ASCENDING:= FALSE;
        Artikelposten.SETFILTER(Artikelposten."Item No.",'%1',Artikel."No.");

        // Standardlagerauswertung oder bestimmtes Lager benutzen
        // ******************************************************
        IF v_sonderlager=TRUE THEN BEGIN
          Artikelposten.SETFILTER(Artikelposten."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
        END ELSE BEGIN
          Artikelposten.SETFILTER(Artikelposten."Location Code",'%1|%2|%3',Lagerort1,Lagerort2,Lagerort3);
        END;
        Artikelposten.SETFILTER(Artikelposten."Posting Date",'<=%1',Lager_abgrenz_datum);
        //          Artikelposten.SETFILTER(Artikelposten."Completely Invoiced",'%1',TRUE);

        // Lagerbestand aufsummieren und ausgeben
        // Anfang Schleife Lagerbestand ausgew„hlte L„ger
        // ****************************************
        IF Artikelposten.FINDFIRST THEN BEGIN
          REPEAT
            Lagerbestand:=Lagerbestand+Artikelposten."Invoiced Quantity";
          UNTIL Artikelposten.NEXT=0;
        END ELSE BEGIN
          v_dc:=9999;
        END;
        // Ende Schleife Lagerbestand ausgew„hlte L„ger
        IF Lagerbestand>0 THEN BEGIN
          Lagerstck1:=Lagerbestand;
          // Artikelposten zu o.g. Artikel, Lagerort und Zugang filtern und neu sortieren (neu oben)
          // ***************************************************************************************
          Artikelposten.RESET;
          Artikelposten.SETCURRENTKEY("Item No.","Posting Date");
          Artikelposten.ASCENDING:= FALSE;
          Artikelposten.SETFILTER(Artikelposten."Item No.",'%1',Artikel."No.");

          // Standardlagerauswertung oder bestimmtes Lager benutzen
          // ******************************************************
          IF v_sonderlager=TRUE THEN BEGIN
            Artikelposten.SETFILTER(Artikelposten."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          END ELSE BEGIN
            Artikelposten.SETFILTER(Artikelposten."Location Code",'%1|%2|%3',Lagerort1,Lagerort2,Lagerort3);
          END;
          Artikelposten.SETFILTER(Artikelposten."Entry Type",'%1|%2',Artikelposten."Entry Type"::Purchase, Artikelposten."Entry Type"::"Positive Adjmt.");
          Artikelposten.SETFILTER(Artikelposten."Posting Date",'<=%1',Lager_abgrenz_datum);
          Artikelposten.SETFILTER(Artikelposten."Invoiced Quantity",'<>%1',0);
          IF Artikelposten.FINDFIRST THEN BEGIN
            REPEAT
              // zu jedem Artikelposten den Wertposten holen
              // Anfang Schleife Zugangswerte holen
              // Unterscheiden zwischen INV und Wertposten
              // **********************************************

      Wertposten_1;
      Wertpost_EK_W„hrcode;
      IF v_stichwert=0 THEN BEGIN
      EKRech_holen_Beleghistorie;
      END;
      IF FORMAT(Sheet.Range('L'+j).Value) = '' THEN BEGIN
      EKRech_holen_Beleghistorie;
      END;


                ek_preis.RESET;
                ek_preis.SETFILTER(ek_preis."Item No.",'%1',Artikel."No.");
                ek_preis.SETFILTER(ek_preis."Ending Date",'%1',0D);
      //          IF ek_preis.FINDFIRST THEN BEGIN
                IF ek_preis.FINDLAST THEN BEGIN
                Sheet.Range('O'+j).Value :=ek_preis."Currency Code";
                Sheet.Range('P'+j).Value :=ek_preis."Direct Unit Cost";
                  IF ek_preis."Currency Code"='' THEN Sheet.Range('Q'+j).Value :=(ek_preis."Direct Unit Cost"*lagerstck3);
                  IF ek_preis."Currency Code"='' THEN v_dcwert:= (ek_preis."Direct Unit Cost"*lagerstck3);
      //            IF ek_preis."Currency Code"='' THEN Sheet.Range('T'+j).Value :='Kurs_ek_preis';    //  Test Spalte M kein Kurseintrag
                  IF ek_preis."Currency Code"='' THEN Sheet.Range('M'+j).Value :=1;
                  IF ek_preis."Currency Code"='' THEN Sheet.Range('L'+j).Value :='EUR';
                  IF ek_preis."Currency Code"='USD' THEN Sheet.Range('Q'+j).Value :=(ek_preis."Direct Unit Cost"*lagerstck3/Kurs_USD);
                  IF ek_preis."Currency Code"='USD' THEN v_dcwert:= (ek_preis."Direct Unit Cost"*lagerstck3/Kurs_USD);
                  IF ek_preis."Currency Code"='GBP' THEN Sheet.Range('Q'+j).Value :=(ek_preis."Direct Unit Cost"*lagerstck3/Kurs_GBP);
                  IF ek_preis."Currency Code"='GBP' THEN v_dcwert:= (ek_preis."Direct Unit Cost"*lagerstck3/Kurs_GBP);
                  IF ek_preis."Currency Code"='JPY' THEN Sheet.Range('Q'+j).Value :=(ek_preis."Direct Unit Cost"*lagerstck3/Kurs_JPY);
                  IF ek_preis."Currency Code"='JPY' THEN v_dcwert:= (ek_preis."Direct Unit Cost"*lagerstck3/Kurs_JPY);
                END;
      IF v_stichwert=0 THEN Sheet.Range('N'+j).Value :=9999999;
      niedrigster_Wert;


            UNTIL (Artikelposten.NEXT=0) OR (var_NEXT=7)
          END;  // ENDE  Artikelpostenabfrage
        END;
       UNTIL Artikel.NEXT=0;
      END;


      Excel.Visible(TRUE);
      }
    END;

    LOCAL PROCEDURE Wertposten_1@1000000009();
    BEGIN
            Wertposten.RESET;
      //      Wertposten.SETFILTER(Wertposten."Item No.",'%1',Artikelposten."Item No.");
            Wertposten.SETFILTER(Wertposten."Item Ledger Entry No.",'%1',Artikelposten."Entry No.");
      //      Wertposten.SETFILTER(Wertposten."Item Ledger Entry Type",'%1',Wertposten."Item Ledger Entry Type"::Purchase);
      //      Wertposten.SETFILTER(Wertposten."Item Ledger Entry Type",'%1|%2',Wertposten."Item Ledger Entry Type"::Purchase, Wertposten."Item Ledger Entry Type"::"Positive Adjmt.");
      //      Wertposten.SETFILTER(Wertposten."Cost Amount (Actual)",'<>%1',0);
            Wertposten.SETFILTER(Wertposten."Invoiced Quantity",'<>%1',0);
      //      Wertposten.SETFILTER(Wertposten."Item Ledger Entry Type",'%1',Wertposten."Item Ledger Entry Type"::Purchase);
            IF Wertposten.FINDFIRST THEN BEGIN
      //        IF ((Wertposten."Item Ledger Entry Type"=Wertposten."Item Ledger Entry Type"::Purchase)
                //OR(Wertposten."Item Ledger Entry Type"=Wertposten."Item Ledger Entry Type"::"Positive Adjmt."))THEN BEGIN
      //       OR ((Wertposten."Item Ledger Entry Type"=Wertposten."Item Ledger Entry Type"::"Positive Adjmt.") AND
      //          (Wertposten."Document No."='INV_2017'))) THEN BEGIN  // ***********    Test ohne INV_2017
        j:=INCSTR(j);
                  v_zuwert:=0;
                  v_stichwert:=0;
                  v_dcwert:=0;
                  v_bewert:=0;
                  lagerstck3:=0;
                  Sheet.Range('A'+j).Value := Artikel.Herstellerkurzname;
                  Sheet.Range('B'+j).Value := Artikel."No.";
                  Sheet.Range('C'+j).Value := FORMAT(Lagerbestand,0);
                  Sheet.Range('D'+j).Value := 'LagerWERT';
                  Sheet.Range('E'+j).Value := Artikelposten."Location Code";
                  Sheet.Range('F'+j).Value := Wertposten."Document No.";
                  Sheet.Range('G'+j).Value := Wertposten."Posting Date";
                  Sheet.Range('H'+j).Value := FORMAT(Wertposten."Cost per Unit");    // OK vierstellig

                  Sheet.Range('I'+j).Value := FORMAT(Artikelposten."Invoiced Quantity");

          // Werte fr Zugangspositionen ermitteln
                  // *****************************************
                  lagerstck3:=0;
                  Lagerstck1:=((Lagerstck1)-(Artikelposten."Invoiced Quantity"));
                  IF Lagerstck1 <= 0 THEN BEGIN                                        // Wenn Restmenge kleiner gleich 0
                    Lagerstck1:=(Lagerstck1)+(Artikelposten."Invoiced Quantity");
                    lagerstck2:=Lagerstck1;
                    lagerstck3:=Lagerstck1;
                    var_letzter_wert:=Wertposten."Cost per Unit";
                    Sheet.Range('J'+j).Value :=FORMAT(Lagerstck1);

                    v_zuwert:=(Lagerstck1*Wertposten."Cost per Unit");
                    var_sum_zugang_wert:=var_sum_zugang_wert+(v_zuwert);
                    Sheet.Range('K'+j).Value :=v_zuwert;
                    Sheet.Range('F'+j).Value := Wertposten."Document No.";
                    Lagerstck1:=(Lagerstck1)-(Artikelposten."Invoiced Quantity");
      //              Sheet.Range('T'+j).Value :='KursLagerstck1';            //  Testeintrag Spalte M
       //             Sheet.Range('M'+j).Value :='Kurs1?';
                    var_NEXT:=7;                                               //  Beenden der Schleife bei negativer Restmenge
                  END ELSE BEGIN
                    Sheet.Range('F'+j).Value := Wertposten."Document No.";
                    var_letzter_wert:=Wertposten."Cost per Unit";
                    Sheet.Range('J'+j).Value :=FORMAT(Artikelposten."Invoiced Quantity");
                    lagerstck3:=Artikelposten."Invoiced Quantity";
                       v_zuwert:=(Artikelposten."Invoiced Quantity"*Wertposten."Cost per Unit");

                    Sheet.Range('K'+j).Value :=v_zuwert;
                    var_sum_zugang_wert:=var_sum_zugang_wert+(v_zuwert);
       //             Sheet.Range('T'+j).Value :='KursLagerstck2';              //  Testeintrag Spalte M
       //             Sheet.Range('M'+j).Value :='Kurs2?';
                  END;

                 EK_Rech_k.RESET;
                  EK_Rech_k.SETFILTER(EK_Rech_k."No.",'%1',Wertposten."Document No.");
                  IF EK_Rech_k.FINDFIRST THEN BEGIN
                    Sheet.Range('L'+j).Value := EK_Rech_k."Currency Code";
                    IF EK_Rech_k."Currency Factor"=0 THEN BEGIN
                      zu_w„h_kurs:=1;
                       Sheet.Range('M'+j).Value :=FORMAT(zu_w„h_kurs);
      //                 Sheet.Range('T'+j).Value :='KursOhne';                  // Testeintrag fr W„hrungsfaktor KursOhne
                    END ELSE BEGIN
                      zu_w„h_kurs:=(EK_Rech_k."Currency Factor");
                      Sheet.Range('M'+j).Value :=FORMAT(zu_w„h_kurs);
      //                Sheet.Range('T'+j).Value :='Kurs1';                  // Testeintrag fr W„hrungsfaktor Kurs1
                    END;
                    IF EK_Rech_k."Currency Code"='' THEN zu_w„h_kurs:=1;
                    Sheet.Range('M'+j).Value := FORMAT(zu_w„h_kurs);
                    IF EK_Rech_k."Currency Code"='' THEN BEGIN
                      v_stichwert:= v_zuwert;
      //                 v_stichwert:= (Artikelposten."Invoiced Quantity"*Wertposten."Cost per Unit");
                      var_sum_zugang_wert_stichkurs:=var_sum_zugang_wert_stichkurs+v_stichwert;
                    END;
                    IF EK_Rech_k."Currency Code"='USD' THEN BEGIN
      //                v_stichwert:= ((Artikelposten."Invoiced Quantity"*Wertposten."Cost per Unit")*zu_w„h_kurs/Kurs_USD);
                      v_stichwert:= (v_zuwert*zu_w„h_kurs/Kurs_USD);
                      var_sum_zugang_wert_stichkurs:=var_sum_zugang_wert_stichkurs+v_stichwert;
                    END;
                    IF EK_Rech_k."Currency Code"='JPY' THEN BEGIN
                      v_stichwert:= (v_zuwert*zu_w„h_kurs/Kurs_JPY);
      //                 v_stichwert:= ((Artikelposten."Invoiced Quantity"*Wertposten."Cost per Unit")*zu_w„h_kurs/Kurs_JPY);
                      var_sum_zugang_wert_stichkurs:=var_sum_zugang_wert_stichkurs+v_stichwert;
                    END;
                    IF EK_Rech_k."Currency Code"='GBP' THEN BEGIN
                      v_stichwert:= (v_zuwert*zu_w„h_kurs/Kurs_GBP);
      //                v_stichwert:= ((Artikelposten."Invoiced Quantity"*Wertposten."Cost per Unit")*zu_w„h_kurs/Kurs_GBP);
                      var_sum_zugang_wert_stichkurs:=var_sum_zugang_wert_stichkurs+v_stichwert;
                    END;
                  Sheet.Range('N'+j).Value :=v_stichwert;
                  END;
      //              Sheet.Range('M'+j).Value :=FORMAT(v_beleghis."EK-Kurs");
             IF ((v_zuwert=0) OR (Wertposten."Document No."='INV_2017'))THEN BEGIN
      //           v_beleghis.RESET;
                    v_beleghis.SETCURRENTKEY(v_beleghis.Belegart,v_beleghis."Artikelnr.");
                    v_beleghis.ASCENDING:= FALSE;
                    v_beleghis.SETFILTER(v_beleghis.Belegart,'%1',v_beleghis.Belegart::"Purchase Invoice");
                    v_beleghis.SETFILTER(v_beleghis."Artikelnr.",'%1',Artikelposten."Item No.");
                    IF v_beleghis.FINDFIRST THEN BEGIN
                      IF v_beleghis."EK-W„hrung"='USD' THEN BEGIN
                        v_zuwert:= ((lagerstck3*v_beleghis."EK-Preis")/v_beleghis."EK-Kurs");
                        var_sum_zugang_wert:=var_sum_zugang_wert+(v_zuwert);
                        Sheet.Range('L'+j).Value :=v_beleghis."EK-W„hrung";
                      END;
                      IF v_beleghis."EK-W„hrung"='JPY' THEN BEGIN
                        v_zuwert:= ((lagerstck3*v_beleghis."EK-Preis")/v_beleghis."EK-Kurs");
                        var_sum_zugang_wert:=var_sum_zugang_wert+(v_zuwert);
                        Sheet.Range('L'+j).Value :=v_beleghis."EK-W„hrung";
                      END;
                      IF v_beleghis."EK-W„hrung"='GBP' THEN BEGIN
                        v_zuwert:= ((lagerstck3*v_beleghis."EK-Preis")/v_beleghis."EK-Kurs");
                        var_sum_zugang_wert:=var_sum_zugang_wert+(v_zuwert);
                        Sheet.Range('L'+j).Value :=v_beleghis."EK-W„hrung";
                      END;
                      IF v_beleghis."EK-W„hrung"='' THEN BEGIN
                        v_zuwert:= ((lagerstck3*v_beleghis."EK-Preis"));
                        var_sum_zugang_wert:=var_sum_zugang_wert+(v_zuwert);
                        Sheet.Range('L'+j).Value :='EUR';
                        Sheet.Range('M'+j).Value :=1;
                      END;
                      Sheet.Range('F'+j).Value := v_beleghis."Belegnr.";
                      Sheet.Range('H'+j).Value := FORMAT(v_zuwert/lagerstck3);
      //                Sheet.Range('H'+j).Value := 111;
                      Sheet.Range('K'+j).Value :=v_zuwert;
      //                Sheet.Range('L'+j).Value :=v_beleghis."EK-W„hrung";
                      Sheet.Range('M'+j).Value :=FORMAT(v_beleghis."EK-Kurs");
      //                Sheet.Range('T'+j).Value :='KursBeleghis';                  // Testeintrag fr W„hrungsfaktor KursBeleghis
                      IF v_beleghis."EK-W„hrung"='' THEN Sheet.Range('M'+j).Value :=1;
                    END;
                 IF Wertposten."Document No."='INV_2017' THEN Sheet.Range('D'+j).Value := Wertposten."Document No.";
              END;

      END;
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := '';
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    EVENT Sheet@1000000151::SelectionChange@1543(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Sheet@1000000151::BeforeDoubleClick@1537(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1000000151::BeforeRightClick@1534(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1000000151::Activate@304();
    BEGIN
    END;

    EVENT Sheet@1000000151::Deactivate@1530();
    BEGIN
    END;

    EVENT Sheet@1000000151::Calculate@279();
    BEGIN
    END;

    EVENT Sheet@1000000151::Change@1545(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Sheet@1000000151::FollowHyperlink@1470(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Hyperlink");
    BEGIN
    END;

    EVENT Sheet@1000000151::PivotTableUpdate@2156(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Sheet@1000000151::PivotTableAfterValueChange@2886(TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Sheet@1000000151::PivotTableBeforeAllocateChanges@2889(TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1000000151::PivotTableBeforeCommitChanges@2892(TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1000000151::PivotTableBeforeDiscardChanges@2893(TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT Sheet@1000000151::PivotTableChangeSync@2894(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000153::Open@1923();
    BEGIN
    END;

    EVENT Book@1000000153::Activate@304();
    BEGIN
    END;

    EVENT Book@1000000153::Deactivate@1530();
    BEGIN
    END;

    EVENT Book@1000000153::BeforeClose@1546(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::BeforeSave@1547(SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::BeforePrint@1549(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::NewSheet@1550(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1000000153::AddinInstall@1552();
    BEGIN
    END;

    EVENT Book@1000000153::AddinUninstall@1553();
    BEGIN
    END;

    EVENT Book@1000000153::WindowResize@1554(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Window");
    BEGIN
    END;

    EVENT Book@1000000153::WindowActivate@1556(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Window");
    BEGIN
    END;

    EVENT Book@1000000153::WindowDeactivate@1557(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Window");
    BEGIN
    END;

    EVENT Book@1000000153::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Book@1000000153::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1000000153::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1000000153::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1000000153::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Book@1000000153::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Hyperlink");
    BEGIN
    END;

    EVENT Book@1000000153::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000153::PivotTableCloseConnection@2158(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000153::PivotTableOpenConnection@2159(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000153::Sync@2266(SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book@1000000153::BeforeXmlImport@2283(Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.XmlMap";Url@1000000002 : Text;IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::AfterXmlImport@2285(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book@1000000153::BeforeXmlExport@2287(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.XmlMap";Url@1000000001 : Text;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::AfterXmlExport@2288(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.XmlMap";Url@1000000001 : Text;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book@1000000153::RowsetComplete@2610(Description@1000000002 : Text;Sheet@1000000001 : Text;Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::SheetPivotTableAfterValueChange@2895(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Book@1000000153::SheetPivotTableBeforeAllocateChanges@2896(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::SheetPivotTableBeforeCommitChanges@2897(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::SheetPivotTableBeforeDiscardChanges@2898(Sh@1000000003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book@1000000153::SheetPivotTableChangeSync@2899(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000153::AfterSave@2900(Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::NewChart@2901(Ch@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Chart");
    BEGIN
    END;

    EVENT Excel@1000000154::NewWorkbook@1565(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookOpen@1567(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookActivate@1568(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookDeactivate@1569(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookBeforeClose@1570(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookBeforeSave@1571(Wb@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookBeforePrint@1572(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookNewSheet@1573(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookAddinInstall@1574(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookAddinUninstall@1575(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000154::WindowResize@1554(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Window");
    BEGIN
    END;

    EVENT Excel@1000000154::WindowActivate@1556(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Window");
    BEGIN
    END;

    EVENT Excel@1000000154::WindowDeactivate@1557(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Window");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Hyperlink");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookPivotTableCloseConnection@2160(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookPivotTableOpenConnection@2161(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookSync@2289(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookBeforeXmlImport@2290(Wb@1000000004 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.XmlMap";Url@1000000002 : Text;IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookAfterXmlImport@2291(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookBeforeXmlExport@2292(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.XmlMap";Url@1000000001 : Text;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookAfterXmlExport@2293(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.XmlMap";Url@1000000001 : Text;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookRowsetComplete@2611(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Description@1000000002 : Text;Sheet@1000000001 : Text;Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::AfterCalculate@2612();
    BEGIN
    END;

    EVENT Excel@1000000154::SheetPivotTableAfterValueChange@2895(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetPivotTableBeforeAllocateChanges@2896(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::SheetPivotTableBeforeCommitChanges@2897(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::SheetPivotTableBeforeDiscardChanges@2898(Sh@1000000003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT Excel@1000000154::ProtectedViewWindowOpen@2903(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1000000154::ProtectedViewWindowBeforeEdit@2905(Pvw@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.ProtectedViewWindow";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::ProtectedViewWindowBeforeClose@2906(Pvw@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.ProtectedViewWindow";Reason@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::ProtectedViewWindowResize@2908(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1000000154::ProtectedViewWindowActivate@2909(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1000000154::ProtectedViewWindowDeactivate@2910(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookAfterSave@2911(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookNewChart@2912(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Ch@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Chart");
    BEGIN
    END;

    BEGIN
    END.
  }
}

