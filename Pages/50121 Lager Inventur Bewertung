OBJECT Page 50121 Lager Inventur Bewertung
{
  OBJECT-PROPERTIES
  {
    Date=19.06.24;
    Time=08:42:06;
    Modified=Yes;
    Version List=TOPAS;
  }
  PROPERTIES
  {
    OnInit=BEGIN
             Datum_ab_supp := 010113D;
           END;

    ActionList=ACTIONS
    {
      { 1000000066;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000067;1 ;ActionGroup }
      { 1000000068;2 ;Action    ;
                      Name=Ausfhren;
                      Promoted=Yes;
                      Image=ExecuteBatch;
                      PromotedCategory=Process;
                      OnAction=BEGIN

                                 // ANFANG šberprfung ob mehrere H„kchen gesetzt sind
                                 var_anzahl_h„kchen:=0;

                                 IF (lagerbewerth„kchen=TRUE) THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF (freieslagerh„kchen=TRUE) THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF (freieslagertestneu=TRUE) THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF (freieslagerverkauf=TRUE) THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF (testlagerh„kchen=TRUE) THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF v_w„_abstimm=TRUE THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF v_w„_abstimm1=TRUE THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF v_wkv=TRUE THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF v_DL_H„kchen=TRUE THEN var_anzahl_h„kchen:=var_anzahl_h„kchen + 1;
                                 IF var_anzahl_h„kchen > 1 THEN
                                 ERROR('Es wurden mehrere H„kchen gesetzt. Report abgebrochen!');
                                 // ENDE šberprfung ob mehrere H„kchen gesetzt sind

                                 // ANFANG Aufruf der Funktionen

                                 IF lagerbewerth„kchen = TRUE THEN Inventur_Datenfiltern;;
                                 //IF lagerbewerth„kchen = TRUE THEN Lagerbewertung;
                                 //IF freieslagerh„kchen = TRUE THEN "Freies Lager";
                                 IF freieslagertestneu = TRUE THEN "Freies Lager";
                                 IF freieslagerverkauf = TRUE THEN "Freies Lager Verkauf";
                                 IF v_w„_abstimm = TRUE THEN WŽ_Abstimmung;
                                 IF v_w„_abstimm1 = TRUE THEN WŽ_Abstimmung;
                                 IF v_wkv = TRUE THEN WKV;
                                 IF v_Inventur = TRUE THEN Inventur_Datenfiltern;
                                 IF v_DL_H„kchen=TRUE THEN Dienstleistungsbewertung;
                                 //  ENDE Aufruf der Funktionen

                                 IF v_test_SW = TRUE THEN "Test SW/Artikelfilter";
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;;Container;
                Name=GDPdU;
                ContainerType=ContentArea }

    { 1000000020;1;Group  ;
                CaptionML=DEU=Dieser Bereich gilt fr alle Abfragen;
                GroupType=Group }

    { 1000000021;2;Field  ;
                CaptionML=DEU=Datum von:;
                SourceExpr=Datum_ab }

    { 1000000022;2;Field  ;
                CaptionML=DEU=Datum bis:;
                SourceExpr=Datum_bis }

    { 1000000024;1;Group  ;
                CaptionML=DEU=Lagerbewertung;
                GroupType=Group }

    { 1000000025;2;Group  ;
                GroupType=Group }

    { 1000000026;3;Field  ;
                CaptionML=DEU=Lagerliste ausfhren;
                SourceExpr=lagerbewerth„kchen;
                OnValidate=BEGIN
                             IF lagerbewerth„kchen = TRUE THEN BEGIN
                               Currency.SETRANGE("Currency Code",'GBP');
                               IF Currency.FINDLAST THEN
                                 Kurs_GBP := Currency."Exchange Rate Amount";
                               Currency.SETRANGE("Currency Code",'JPY');
                               IF Currency.FINDLAST THEN
                                 Kurs_JPY := Currency."Exchange Rate Amount";
                               Currency.SETRANGE("Currency Code",'USD');
                               IF Currency.FINDLAST THEN
                                 Kurs_USD := Currency."Exchange Rate Amount";
                             END;
                           END;
                            }

    { 1000000027;3;Field  ;
                CaptionML=DEU=Stichtag fr Lagerbewertung;
                SourceExpr=Lager_abgrenz_datum;
                OnValidate=BEGIN
                             IF lagerbewerth„kchen = TRUE THEN BEGIN
                               Currency.SETFILTER("Starting Date",'%1',CALCDATE('+1T',Lager_abgrenz_datum));
                               Currency.SETRANGE("Currency Code",'GBP');
                               IF Currency.FINDLAST THEN
                                 Kurs_GBP := Currency."Exchange Rate Amount";
                               Currency.SETRANGE("Currency Code",'JPY');
                               IF Currency.FINDLAST THEN
                                 Kurs_JPY := Currency."Exchange Rate Amount";
                               Currency.SETRANGE("Currency Code",'USD');
                               IF Currency.FINDLAST THEN
                                 Kurs_USD := Currency."Exchange Rate Amount";
                             END;
                           END;
                            }

    { 1000000029;3;Group  ;
                CaptionML=DEU=Automatisch auswerten;
                GroupType=Group }

    { 1000000028;4;Field  ;
                CaptionML=DEU=Auswertung erfolgt autom. fr ZENT, KONSI, ERSATZ;
                SourceExpr=v_sonderlager }

    { 1000000030;3;Group  ;
                CaptionML=DEU=oder einschr„nken auf Lager (zB ZENT);
                GroupType=Group }

    { 1000000031;4;Field  ;
                CaptionML=DEU=Lagerort 1 und/oder;
                SourceExpr=Lagerort1 }

    { 1000000032;4;Field  ;
                CaptionML=DEU=Lagerort 2 und/oder;
                SourceExpr=Lagerort2 }

    { 1000000033;4;Field  ;
                CaptionML=DEU=Lagerort 3;
                SourceExpr=Lagerort3 }

    { 1000000034;3;Group  ;
                GroupType=Group }

    { 1000000037;4;Field  ;
                CaptionML=DEU=Kurs GBP;
                DecimalPlaces=4:5;
                SourceExpr=Kurs_GBP }

    { 1000000036;4;Field  ;
                CaptionML=DEU=Kurs JPY;
                SourceExpr=Kurs_JPY }

    { 1000000035;4;Field  ;
                CaptionML=DEU=Kurs USD;
                DecimalPlaces=4:4;
                SourceExpr=Kurs_USD }

    { 1000000038;1;Group  ;
                CaptionML=DEU=Quoteberprfung;
                GroupType=Group }

    { 1000000039;2;Group  ;
                CaptionML=DEU=noch einarbeiten Dataport 50033;
                GroupType=Group }

    { 1000000040;1;Group  ;
                CaptionML=DEU=Freies Lager;
                GroupType=Group }

    { 1000000041;2;Group  ;
                CaptionML=DEU=Das Freie Lager wird immer aktuell zum Zeitpunkt der Listerstellung ermittelt;
                GroupType=Group }

    { 1000000046;3;Group  ;
                CaptionML=DEU=Fr Lagerabgrenzung Feld Datum bis ausfllen;
                GroupType=Group }

    { 1000000042;4;Field  ;
                CaptionML=DEU=Wert fr Freies Lager ermitteln:;
                SourceExpr=freieslagertestneu }

    { 1000000043;4;Field  ;
                CaptionML=DEU=Freies Lager Verkauf ermitteln:;
                SourceExpr=freieslagerverkauf }

    { 1000000044;4;Field  ;
                CaptionML=DEU=Freies Lager abgegrenzt ermitteln:;
                SourceExpr=freieslagerh„kchen }

    { 1000000048;1;Group  ;
                CaptionML=DEU=WKV;
                GroupType=Group }

    { 1000000049;2;Field  ;
                CaptionML=DEU=Debitorposten pro Monat fr WKV Datum ab und -bis eintragen;
                SourceExpr=v_wkv }

    { 1000000050;1;Group  ;
                CaptionML=DEU=WŽ-Abstimmung;
                GroupType=Group }

    { 1000000051;2;Field  ;
                CaptionML=DEU=WŽ-Abstimmung ausfhren;
                SourceExpr=v_w„_abstimm1 }

    { 1000000069;1;Group  ;
                CaptionML=DEU=Test Inventur;
                GroupType=Group }

    { 1000000070;2;Field  ;
                CaptionML=DEU=Test Inventur ausfhren;
                SourceExpr=v_Inventur }

    { 1000000071;2;Field  ;
                CaptionML=DEU=Test SW Artikel;
                SourceExpr=v_test_SW }

    { 1000000001;1;Group  ;
                CaptionML=DEU=Dienstleistungsbewertung;
                GroupType=Group }

    { 1000000002;2;Field  ;
                CaptionML=DEU=DL-Bewertung ausfhren;
                SourceExpr=v_DL_H„kchen }

  }
  CODE
  {
    VAR
      Kreditor@1000000148 : Record 23;
      Kredpost@1000000147 : Record 25;
      Debitor@1000000139 : Record 18;
      Debpost@1000000138 : Record 21;
      Sachkont@1000000137 : Record 15;
      Sachkont1@1000000136 : Record 15;
      Sachpost@1000000135 : Record 17;
      Artikel@1000000175 : Record 27;
      Artikelposten@1000000114 : Record 32;
      Artikelposten2@1000000113 : Record 32;
      ek_preis@1000000112 : Record 7012;
      tab_ab@1000000111 : Record 37;
      Wertposten@1000000110 : Record 5802;
      Wertposten1@1000000109 : Record 5802;
      EK_Rech_k@1000000108 : Record 122;
      vkrz@1000000072 : Record 113;
      vkgz@1000000071 : Record 115;
      ekz@1000000070 : Record 39;
      ekrz@1000000069 : Record 123;
      vklz@1000000064 : Record 111;
      bankpos@1000000032 : Record 271;
      supp_kon@1000000028 : Record 50013;
      Currency@1000000180 : Record 330;
      Excel@1000000154 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      Book@1000000153 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      Range@1000000152 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      Sheet@1000000151 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      j@1000000150 : Text[30];
      var_anzahl_h„kchen@1000000149 : Integer;
      saldo_sum@1000000146 : Decimal;
      haben_sum@1000000145 : Decimal;
      soll_sum@1000000144 : Decimal;
      kreditorh„kchen@1000000143 : Boolean;
      Datum_ab@1000000142 : Date;
      Datum_bis@1000000141 : Date;
      Datum_ab_supp@1000000140 : Date;
      debitorh„kchen@1000000134 : Boolean;
      sachkontenh„kchen@1000000133 : Boolean;
      kreditorpostenh„kchen@1000000132 : Boolean;
      Debitorpostenh„kchen@1000000131 : Boolean;
      sachpostenh„kchen@1000000130 : Boolean;
      lagerbewerth„kchen@1000000129 : Boolean;
      freieslagerh„kchen@1000000128 : Boolean;
      freieslagertestneu@1000000127 : Boolean;
      freieslagerverkauf@1000000126 : Boolean;
      quoteh„kchen@1000000125 : Boolean;
      testlagerh„kchen@1000000124 : Boolean;
      sachkonten_ebilanz_h„kchen@1000000123 : Boolean;
      sumlisth„kchen@1000000122 : Boolean;
      alle_sachkonten@1000000121 : Boolean;
      saldo_sum_vj@1000000120 : Decimal;
      sachkon_von@1000000119 : Code[10];
      sachkon_bis@1000000118 : Code[10];
      v_startdat_gj@1000000117 : Date;
      v_endedat_gj@1000000116 : Date;
      v_endedat_vj@1000000115 : Date;
      Lager_abgrenz_datum@1000000107 : Date;
      Kurs_USD@1000000106 : Decimal;
      Kurs_JPY@1000000105 : Decimal;
      Kurs_GBP@1000000104 : Decimal;
      Lagerort1@1000000103 : Code[10];
      Lagerort2@1000000102 : Code[10];
      Lagerort3@1000000101 : Code[10];
      Lagerbestand@1000000100 : Decimal;
      lagerbestand1@1000000099 : Decimal;
      lagerbestand2@1000000098 : Decimal;
      lagerbestand3@1000000097 : Decimal;
      Lagerstck1@1000000096 : Decimal;
      lagerstck2@1000000095 : Decimal;
      lagerstck3@1000000157 : Decimal;
      var_NEXT@1000000094 : Integer;
      var_text1@1000000093 : Text[30];
      var_text2@1000000092 : Text[30];
      var_letzter_wert@1000000091 : Decimal;
      var_sum_zugang_wert@1000000090 : Decimal;
      var_sum_zugang_wert_stichkurs@1000000089 : Decimal;
      v_sum_bewert@1000000088 : Decimal;
      zu_w„h_kurs@1000000087 : Decimal;
      v_dcwert@1000000086 : Decimal;
      v_dc@1000000085 : Decimal;
      v_ab_bestand@1000000084 : Decimal;
      v_bb_bestand@1000000083 : Decimal;
      v_ab_menge@1000000082 : Decimal;
      v_au_2053@1000000081 : Decimal;
      v_stichwert@1000000080 : Decimal;
      v_sonderlager@1000000079 : Boolean;
      v_zuwert@1000000078 : Decimal;
      v_bewert@1000000077 : Decimal;
      v_dcw„@1000000076 : Text[30];
      v_fakturiert@1000000075 : Decimal;
      v_quantity@1000000074 : Decimal;
      v_quantity2@1000000073 : Decimal;
      v_Artikel@1000000068 : Code[20];
      v_konsi@1000000067 : Boolean;
      v_meng_fakt@1000000066 : Decimal;
      v_meng_lief@1000000065 : Decimal;
      v_z„hlschleife@1000000063 : Text[30];
      j_z„hl@1000000062 : Text[30];
      LB_Excel@1000000061 : Boolean;
      Dateiname@1000000060 : Text[250];
      Excel_bewert@1000000059 : Boolean;
      v_Datecode@1000000058 : Code[20];
      herstell@1000000057 : Record 5720;
      v_FLmenge@1000000056 : Decimal;
      v_FLaumenge@1000000055 : Decimal;
      v_FLaurmenge@1000000054 : Decimal;
      v_FLekmenge@1000000053 : Decimal;
      v_FLwert@1000000052 : Decimal;
      v_preis@1000000051 : Decimal;
      v_w„_abstimm@1000000050 : Boolean;
      v_w„_abstimm1@1000000049 : Boolean;
      v_druck_art@1000000048 : Decimal;
      v_ek_w„@1000000047 : Code[10];
      v_ek_preis@1000000046 : Decimal;
      v_usd_gesamt@1000000045 : Decimal;
      v_jpy_gesamt@1000000044 : Decimal;
      v_gbp_gesamt@1000000043 : Decimal;
      v_eur_gesamt@1000000042 : Decimal;
      v_au_wert@1000000041 : Decimal;
      v_aur_wert@1000000040 : Decimal;
      v_lager_wert@1000000039 : Decimal;
      v_best_wert@1000000038 : Decimal;
      v_wkv@1000000037 : Boolean;
      v_wkv_brutto_gesamt@1000000036 : Decimal;
      v_wkv_netto_gesamt@1000000035 : Decimal;
      v_wkv_saldo_gesamt@1000000034 : Decimal;
      v_wkv_saldo_unversich@1000000033 : Decimal;
      v_dc_ek@1000000031 : Decimal;
      v_ustabstimm@1000000030 : Boolean;
      v_supp_std@1000000029 : Boolean;
      v_meng_rest@1000000027 : Decimal;
      v_meng_rest1@1000000026 : Decimal;
      v_neu_gruppe@1000000025 : Code[20];
      v_supp_wert@1000000024 : Decimal;
      v_supp_prf@1000000023 : Boolean;
      belege@1000000022 : Record 50010;
      v_hypernr@1000000021 : Text[30];
      v_hyperlink@1000000020 : Text[250];
      Anlage@1000000019 : Record 5600;
      Anlpost@1000000018 : Record 5601;
      Anlpost1@1000000017 : Record 5601;
      v_anlkartei@1000000016 : Boolean;
      v_anlber@1000000015 : Boolean;
      v_anlspiegel@1000000014 : Boolean;
      v_anlagenr@1000000013 : Code[20];
      v_anlagenrserie@1000000012 : Code[10];
      v_anlwert@1000000011 : Decimal;
      v_anlwertgesamt@1000000010 : Decimal;
      v_ger„tenr@1000000009 : Code[20];
      v_date_jahr1@1000000008 : Text[10];
      v_date_jahr2@1000000007 : Text[10];
      v_D22@1000000006 : Decimal;
      v_D31@1000000005 : Decimal;
      v_D33@1000000004 : Decimal;
      v_D35@1000000003 : Decimal;
      v_D37@1000000002 : Decimal;
      v_D39@1000000001 : Decimal;
      v_D41@1000000000 : Decimal;
      v_beleghis@1000000155 : Record 50008;
      v_wertpos_ek@1000000156 : Decimal;
      TempExcelBuffer@1000000169 : TEMPORARY Record 370;
      FileMgt@1000000168 : Codeunit 419;
      ServerFileName@1000000167 : Text;
      SheetName@1000000166 : Text[250];
      DoUpdateExistingWorksheet@1000000165 : Boolean;
      Testmode@1000000164 : Boolean;
      Window@1000000163 : Dialog;
      RecNo@1000000162 : Integer;
      TotalRecNo@1000000161 : Integer;
      RowNo@1000000160 : Integer;
      ColumnNo@1000000159 : Integer;
      Text000@1000000173 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000172 : TextConst 'DEU=Lager;ENU=Location';
      Text002@1000000171 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text003@1000000158 : TextConst 'DEU=Excel Export erfolgreich abgeschlossen.';
      ExcelFileExtensionTok@1000000170 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      v_Inventur@1000000174 : Boolean;
      vkrk@1000000176 : Record 112;
      vkgk@1000000177 : Record 114;
      v_test_SW@1000000178 : Boolean;
      v_DL_H„kchen@1000000179 : Boolean;

    PROCEDURE "Freies Lager"@1140003();
    BEGIN
      CreateExcel;

      RecNo := 0;

      //šberschriften
      EnterCell(1,1,'Freies Lager Wert','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,2,FORMAT(WORKDATE),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);

      EnterCell(2,1,'Partnumber','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(2,2,'Qty','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(2,3,'Manufactor','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(2,4,'Date Code','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(2,5,'Wert','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);

      RowNo := 3;

      //ANFANG NEU
      Artikel.RESET;
      Artikel.SETFILTER("No.",'<>%1','');
      Artikel.SETFILTER("Manufacturer Code",'%1..%2|%3..%4|%5..%6','01','51','54','55','58','85');
      //Artikel.SETFILTER(Herstellerkurzname,'<>%1&<>%2&<>%3&<>%4&<>%5&<>%6','ACA','ACP','ACC','ACI','ACT','TOP');
      IF Artikel.FIND('-') THEN BEGIN
        TotalRecNo := Artikel.COUNT;
        REPEAT
          v_FLmenge := 0;
          v_FLaumenge := 0;
          v_FLwert := 0;
          v_Datecode := '';
          //Artikelposten pro Artikel holen w/Lagermenge ************
          Artikelposten.RESET;
          Artikelposten.SETFILTER("Item No.",'%1',Artikel."No.");
          Artikelposten.SETFILTER("Remaining Quantity",'>%1',0);
          Artikelposten.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF Artikelposten.FIND('-') THEN BEGIN
            REPEAT
              Artikelposten.CALCFIELDS(Artikelposten."Cost Amount (Actual)");
              v_FLmenge := v_FLmenge + Artikelposten."Remaining Quantity";
              v_FLwert := (v_FLwert + Artikelposten."Cost Amount (Actual)" / Artikelposten.Quantity*Artikelposten."Remaining Quantity");
              IF v_Datecode = '' THEN BEGIN
                v_Datecode := Artikelposten."Lot No.";
              END ELSE BEGIN
                IF v_Datecode > Artikelposten."Lot No." THEN BEGIN
                  v_Datecode := Artikelposten."Lot No.";
                END;
              END;
            UNTIL Artikelposten.NEXT = 0;
          END;
          // ENDE Artikelposten pro Artikel holen  ******************
          // Auftragsbestand pro Artikel holen ***********************************
          tab_ab.RESET;
          tab_ab.SETFILTER("No.",'%1',Artikel."No.");
          tab_ab.SETFILTER("Outstanding Quantity",'>%1',0);
          tab_ab.SETFILTER("Document Type",'%1',tab_ab."Document Type"::Order);
          tab_ab.SETFILTER(Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF tab_ab.FIND('-') THEN BEGIN
            REPEAT
              v_FLaumenge := v_FLaumenge + tab_ab."Outstanding Quantity";
            UNTIL tab_ab.NEXT = 0;
          END;
          // ENDE Auftragsbestand pro Artikel holen ******************************
          // Rahmenauftragsbestand pro Artikel holen ***********************************
          tab_ab.RESET;
          tab_ab.SETFILTER("No.",'%1',Artikel."No.");
          tab_ab.SETFILTER("Outstanding Quantity",'>%1',0);
          tab_ab.SETFILTER("Document Type",'%1',tab_ab."Document Type"::"Blanket Order");
          tab_ab.SETFILTER(Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF tab_ab.FIND('-') THEN BEGIN
            REPEAT
              tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
              v_FLaumenge := (v_FLaumenge + (tab_ab."Outstanding Quantity" - tab_ab."offene Menge aus Rahmen im AU"));
            UNTIL tab_ab.NEXT = 0;
          END;
          // ENDE Rahmenauftragsbestand pro Artikel holen ******************************
          // Bestellbestand pro Artikel holen ****************************************************
          // ENDE Bestellbestand pro Artikel holen ***********************************************
          // Ausgabe nach EXCEL ***********************************************************************************
          IF (v_FLmenge - v_FLaumenge) > 0 THEN BEGIN
            EnterCell(RowNo,1,Artikel."No. 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,2,FORMAT(v_FLmenge - v_FLaumenge),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
            IF herstell.GET(Artikel."Manufacturer Code") THEN
              EnterCell(RowNo,3,herstell.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,4,FORMAT(v_Datecode),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,FORMAT(v_FLwert/v_FLmenge * (v_FLmenge - v_FLaumenge)),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
            RowNo := RowNo + 1;
          END;
          // ENDE Ausgabe nach Excel ******************************************************************************
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
        UNTIL Artikel.NEXT = 0;
      END;
      //ENDE NEU

      CloseExcel('Freies Lager');

      MESSAGE(Text003);
    END;

    PROCEDURE "Freies Lager Verkauf"@1140018();
    BEGIN
      CreateExcel;

      RecNo := 0;

      //šberschriften
      EnterCell(1,1,'Freies Lager Verkauf','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,2,FORMAT(WORKDATE),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);

      EnterCell(2,1,'Partnumber','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(2,2,'Qty','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(2,3,'Manufactor','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(2,4,'Date Code','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);

      RowNo := 3;

      //ANFANG NEU
      Artikel.RESET;
      Artikel.SETFILTER(Blocked,'%1',FALSE);
      Artikel.SETFILTER("Manufacturer Code",'%1..%2|%3..%4|%5..%6','01','51','54','55','58','85');
      //Artikel.SETFILTER("Manufacturer Code",'<>%1&<>%2&<>%3&<>%4&<>%5&<>%6&<>%7&<>%8&<>%9&<>%10'
      //,'52','53','57','5710','58','59','96','99','98','97');
      //Artikel.SETFILTER("Manufacturer Code",'%1..%2|%3..%4|%5..%6'
      //,'00','51','54','56','60','65');
      Artikel.SETFILTER("Vendor No.",'<>%1','600046');

      IF Artikel.FIND('-') THEN BEGIN
        TotalRecNo := Artikel.COUNT;
        REPEAT
          v_FLmenge := 0;
          v_FLaumenge := 0;
          v_FLwert := 0;
          v_Datecode := '';
          //Artikelposten pro Artikel holen w/Lagermenge ************
          Artikelposten.RESET;
          Artikelposten.SETFILTER("Item No.",'%1',Artikel."No.");
          Artikelposten.SETFILTER("Remaining Quantity",'>%1',0);
          Artikelposten.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF Artikelposten.FIND('-') THEN BEGIN
            REPEAT
              Artikelposten.CALCFIELDS("Cost Amount (Actual)");
              v_FLmenge := (v_FLmenge + Artikelposten."Remaining Quantity");
              v_FLwert := (v_FLwert + Artikelposten."Cost Amount (Actual)" / Artikelposten.Quantity * Artikelposten."Remaining Quantity");
              IF v_Datecode = '' THEN BEGIN
                v_Datecode := Artikelposten."Lot No.";
              END ELSE BEGIN
                IF v_Datecode > Artikelposten."Lot No." THEN BEGIN
                  v_Datecode := Artikelposten."Lot No.";
                END;
              END;
            UNTIL Artikelposten.NEXT = 0;
          END;
          // ENDE Artikelposten pro Artikel holen  ******************
          // Auftragsbestand pro Artikel holen ***********************************
          tab_ab.RESET;
          tab_ab.SETFILTER("No.",'%1',Artikel."No.");
          tab_ab.SETFILTER("Outstanding Quantity",'>%1',0);
          tab_ab.SETFILTER("Document Type",'%1',tab_ab."Document Type"::Order);
          tab_ab.SETFILTER(Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF tab_ab.FINDFIRST THEN BEGIN
            v_FLaumenge := 1000000;
          END;
          // ENDE Auftragsbestand pro Artikel holen ******************************
          // Ausgabe nach EXCEL ***********************************************************************************
          IF (v_FLmenge - v_FLaumenge) > 0 THEN BEGIN
            EnterCell(RowNo,1,Artikel."No. 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,2,FORMAT(v_FLmenge - v_FLaumenge),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
            IF herstell.GET(Artikel."Manufacturer Code") THEN
              EnterCell(RowNo,3,herstell.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,4,FORMAT(v_Datecode),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            RowNo := RowNo + 1;
          END;
          // ENDE Ausgabe nach Excel ******************************************************************************
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
        UNTIL Artikel.NEXT = 0;
      END;

      CloseExcel('Freies Lager Verkauf');

      MESSAGE(Text003);
    END;

    PROCEDURE WŽ_Abstimmung@1140019();
    BEGIN
      CreateExcel;
      RecNo := 0;

      //šberschriften
      EnterCell(1,1,'W„hrungsabstimmung','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,2,'EUR','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,3,'USD','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,4,'JPY','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,5,'GBP','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,6,'Stand:','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,7,FORMAT(WORKDATE),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);

      EnterCell(3,1,'Verbindlichkeiten: ','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(4,1,'offene Kreditoren-Postem: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(5,1,'offene Bestell-Restmengen: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(6,1,'noch nicht fakturierte Zug„nge: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(7,1,'noch nicht bestellte Waren: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(8,1,'sonstige Verbindlichkeiten: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(10,1,'Forderungen: ','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(11,1,'Bankkonten (nur laufende): ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(12,1,'Termindevisen: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(13,1,'offene Debitoren-Posten: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(14,1,'offene Auftrags-Restmengen: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(15,1,'offene Rahmen-Restmengen: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(16,1,'Provisionen: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(17,1,'sonstige Forderungen: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //EnterCell(20,1,'negative Zahl noch eindecken ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //EnterCell(21,1,'positive Zahl = OK ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      // offene Kreditorenposten *********************************************************************************************************
      Kredpost.RESET;
      Kredpost.SETFILTER(Kredpost."Remaining Amount",'<>%1',0);
      Kredpost.SETFILTER(Kredpost."Currency Code",'%1','');
      IF Kredpost.FIND('-') THEN BEGIN
        REPEAT
          Kredpost.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + Kredpost."Remaining Amount";
        UNTIL Kredpost.NEXT=0;

        EnterCell(4,2,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('B5').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;

      Kredpost.RESET;
      Kredpost.SETFILTER(Kredpost."Remaining Amount",'<>%1',0);
      Kredpost.SETFILTER(Kredpost."Currency Code",'%1','USD');
      IF Kredpost.FIND('-') THEN BEGIN
        REPEAT
          Kredpost.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + Kredpost."Remaining Amount";
        UNTIL Kredpost.NEXT=0;
        EnterCell(4,3,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('C5').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;

      Kredpost.RESET;
      Kredpost.SETFILTER(Kredpost."Remaining Amount",'<>%1',0);
      Kredpost.SETFILTER(Kredpost."Currency Code",'%1','JPY');
      IF Kredpost.FIND('-') THEN BEGIN
        REPEAT
          Kredpost.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + Kredpost."Remaining Amount";
        UNTIL Kredpost.NEXT=0;
        EnterCell(4,4,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('D5').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;

      Kredpost.RESET;
      Kredpost.SETFILTER(Kredpost."Remaining Amount",'<>%1',0);
      Kredpost.SETFILTER(Kredpost."Currency Code",'%1','GBP');
      IF Kredpost.FIND('-') THEN BEGIN
        REPEAT
          Kredpost.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + Kredpost."Remaining Amount";
        UNTIL Kredpost.NEXT=0;
        EnterCell(4,5,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('E5').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;
      // Ende offene Kreditorenposten ****************************************************************************************************

      // Anfang offene Bestell-Restmengen ************************************************************************************************
      ekz.RESET;
      ekz.SETFILTER(ekz."Outstanding Amount",'<>%1',0);
      ekz.SETFILTER(ekz."Currency Code",'%1','');
      ekz.SETFILTER(ekz."Location Code",'%1|%2|%3','ZENT','KONSI','ERSATZ');
      IF ekz.FIND('-') THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + ekz."Outstanding Amount";
        UNTIL ekz.NEXT=0;
        EnterCell(5,2,FORMAT(saldo_sum*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('B6').Value := FORMAT(saldo_sum*(-1));
      END;
      saldo_sum:=0;

      ekz.RESET;
      // **********************************************************
      //ekz.SETFILTER(ekz."Document No.",'%1','BET307185');
      // **********************************************************
      ekz.SETFILTER(ekz."Outstanding Amount",'<>%1',0);
      ekz.SETFILTER(ekz."Currency Code",'%1','USD');
      ekz.SETFILTER(ekz."Location Code",'%1|%2|%3','ZENT','KONSI','ERSATZ');
      IF ekz.FIND('-') THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + ekz."Outstanding Amount";
        UNTIL ekz.NEXT=0;
        EnterCell(5,3,FORMAT(saldo_sum*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('C6').Value := FORMAT(saldo_sum*(-1));
      END;
      saldo_sum:=0;

      ekz.RESET;
      ekz.SETFILTER(ekz."Outstanding Amount",'<>%1',0);
      ekz.SETFILTER(ekz."Currency Code",'%1','JPY');
      ekz.SETFILTER(ekz."Location Code",'%1|%2|%3','ZENT','KONSI','ERSATZ');
      IF ekz.FIND('-') THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + ekz."Outstanding Amount";
        UNTIL ekz.NEXT=0;
        EnterCell(5,4,FORMAT(saldo_sum*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('D6').Value := FORMAT(saldo_sum*(-1));
      END;
      saldo_sum:=0;

      ekz.RESET;
      ekz.SETFILTER(ekz."Outstanding Amount",'<>%1',0);
      ekz.SETFILTER(ekz."Currency Code",'%1','GBP');
      ekz.SETFILTER(ekz."Location Code",'%1|%2|%3','ZENT','KONSI','ERSATZ');
      IF ekz.FIND('-') THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + ekz."Outstanding Amount";
        UNTIL ekz.NEXT=0;
        EnterCell(5,5,FORMAT(saldo_sum*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('E6').Value := FORMAT(saldo_sum*(-1));
      END;
      saldo_sum:=0;
      // Ende offene Bestell-Restmengen **************************************************************************************************

      //  Anfang noch nicht bestellte Waren  *********************************************************************************************
      Artikel.RESET;
      Artikel.SETFILTER(Artikel.Blocked,'%1',FALSE);
      IF Artikel.FIND('-') THEN BEGIN
        REPEAT
          // Lagermenge holen
          v_druck_art:=0;
          v_FLmenge:=0;
          v_FLwert:=0;
          v_bewert:=0;
          v_ab_bestand:=0;
          v_ab_menge:=0;
          v_bb_bestand:=0;
          v_ek_preis:=0;
          v_au_wert:=0;
          v_aur_wert:=0;
          v_lager_wert:=0;
          v_best_wert:=0;
          Artikelposten.RESET;
          Artikelposten.SETFILTER(Artikelposten."Item No.",'%1',Artikel."No.");
          Artikelposten.SETFILTER(Artikelposten."Remaining Quantity",'>%1',0);
          Artikelposten.SETFILTER(Artikelposten."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF Artikelposten.FIND('-') THEN BEGIN
            REPEAT
              Artikelposten.CALCFIELDS(Artikelposten."Cost Amount (Actual)");
              v_FLmenge:=(v_FLmenge +Artikelposten."Remaining Quantity");
          //  v_FLwert:=(Artikelposten."Cost Amount (Actual)"/Artikelposten.Quantity);
              v_lager_wert:=v_lager_wert+((Artikelposten."Cost Amount (Actual)"/Artikelposten.Quantity)*(Artikelposten."Remaining Quantity"));
              v_druck_art:=1;
            UNTIL Artikelposten.NEXT=0;
          END;

      //  AB holen
          tab_ab.RESET;
          tab_ab.SETFILTER(tab_ab."No.",'%1',Artikel."No.");
          tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::Order);
          tab_ab.SETFILTER(tab_ab."Outstanding Quantity",'>%1',0);
          tab_ab.SETFILTER(tab_ab.Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF tab_ab.FIND('-') THEN BEGIN
            REPEAT
              v_ab_bestand:=v_ab_bestand+(tab_ab."Outstanding Quantity");
              v_au_wert:=v_au_wert + ((tab_ab."DC-Preis (EKW)")*(tab_ab."Outstanding Quantity"));
              v_druck_art:=1;
            UNTIL tab_ab.NEXT=0;
          END;

      //  AUR holen
          tab_ab.RESET;
          tab_ab.SETFILTER(tab_ab."No.",'%1',Artikel."No.");
          tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::"Blanket Order");
          tab_ab.SETFILTER(tab_ab.Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF tab_ab.FIND('-') THEN BEGIN
            REPEAT
              IF((tab_ab."Outstanding Quantity")-(tab_ab."offene Menge aus Rahmen im AU"))>1 THEN BEGIN
                tab_ab.CALCFIELDS(tab_ab."offene Menge aus Rahmen im AU");
                v_ab_menge:=v_ab_menge+((tab_ab."Outstanding Quantity")-(tab_ab."offene Menge aus Rahmen im AU"));
                v_aur_wert:=v_aur_wert+(((tab_ab."Outstanding Quantity")-(tab_ab."offene Menge aus Rahmen im AU"))*(tab_ab."DC-Preis (EKW)"));
              END;
              v_druck_art:=1;
            UNTIL tab_ab.NEXT=0;
          END;

      //  Bestellbestand holen
          ekz.RESET;
          ekz.SETFILTER(ekz."No.",'%1',Artikel."No.");
          ekz.SETFILTER(ekz."Outstanding Quantity",'>%1',0);
          ekz.SETFILTER(ekz."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF ekz.FIND('-') THEN BEGIN
            REPEAT
              v_bb_bestand:=v_bb_bestand+(ekz."Outstanding Quantity");
              v_best_wert:=v_best_wert+((ekz."Direct Unit Cost")*(ekz."Outstanding Quantity"));
              v_druck_art:=1;
            UNTIL ekz.NEXT=0;
          END;

      //  DC-Preise holen
          ek_preis.RESET;
          ek_preis.SETFILTER(ek_preis."Item No.",'%1',Artikel."No.");
          IF ek_preis.FINDFIRST THEN BEGIN
            v_ek_preis:=ek_preis."Direct Unit Cost";
            v_ek_w„:=ek_preis."Currency Code";
          END;

          IF v_druck_art=1 THEN BEGIN
      //  Sheet.Range('A'+j).Value := v_ek_w„;
      //  Sheet.Range('B'+j).Value := Artikel."No.";
      //  Sheet.Range('C'+j).Value := FORMAT(v_ab_bestand);
      //  Sheet.Range('D'+j).Value := FORMAT(v_au_wert);
      //  Sheet.Range('E'+j).Value := FORMAT(v_ab_menge);
      //  Sheet.Range('F'+j).Value := FORMAT(v_aur_wert);
      //  Sheet.Range('G'+j).Value := FORMAT(v_FLmenge*(-1));
      //  Sheet.Range('H'+j).Value := FORMAT(v_lager_wert*(-1));
      //  Sheet.Range('I'+j).Value := FORMAT(v_bb_bestand*(-1));
      //  Sheet.Range('J'+j).Value := FORMAT(v_best_wert*(-1));
      //  Sheet.Range('K'+j).Value := FORMAT(v_ab_bestand+v_ab_menge-v_FLmenge-v_bb_bestand);
            IF v_ek_preis=9999 THEN BEGIN
              IF v_FLwert>0 THEN BEGIN
                v_ek_preis:=v_FLwert;
                //       Sheet.Range('I'+j).Value := FORMAT(v_ek_preis);
              END ELSE BEGIN
                IF v_bewert>0 THEN BEGIN
                  v_ek_preis:=v_bewert;
                END;
              END;
            END;

            IF v_ek_w„='USD' THEN BEGIN
              IF v_ab_bestand+v_ab_menge-v_FLmenge-v_bb_bestand>0 THEN BEGIN
                //  Sheet.Range('L'+j).Value := (v_au_wert+v_aur_wert-v_lager_wert-v_best_wert);
                v_usd_gesamt:=v_usd_gesamt+(v_au_wert+v_aur_wert-v_lager_wert-v_best_wert);
              END;
            END;
            IF v_ek_w„='JPY' THEN BEGIN
              IF v_ab_bestand+v_ab_menge-v_FLmenge-v_bb_bestand>0 THEN BEGIN
                // Sheet.Range('M'+j).Value := (v_au_wert+v_aur_wert-v_lager_wert-v_best_wert);
                v_jpy_gesamt:=v_jpy_gesamt+(v_au_wert+v_aur_wert-v_lager_wert-v_best_wert);
              END;
            END;
            IF v_ek_w„='GBP' THEN BEGIN
              IF v_ab_bestand+v_ab_menge-v_FLmenge-v_bb_bestand>0 THEN BEGIN
                //  Sheet.Range('N'+j).Value := (v_au_wert+v_aur_wert-v_lager_wert-v_best_wert);
                v_gbp_gesamt:=v_gbp_gesamt+(v_au_wert+v_aur_wert-v_lager_wert-v_best_wert);
              END;
            END;
            IF v_ek_w„='' THEN BEGIN
              IF v_ab_bestand+v_ab_menge-v_FLmenge-v_bb_bestand>0 THEN BEGIN
                //  Sheet.Range('O'+j).Value := (v_au_wert+v_aur_wert-v_lager_wert-v_best_wert);
                v_eur_gesamt:=v_eur_gesamt+(v_au_wert+v_aur_wert-v_lager_wert-v_best_wert);
              END;
            END;

            //j:=INCSTR(j);
          END;
        UNTIL Artikel.NEXT=0;
      END;
      EnterCell(7,2,FORMAT(v_eur_gesamt*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      EnterCell(7,3,FORMAT(v_usd_gesamt*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      EnterCell(7,4,FORMAT(v_jpy_gesamt*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      EnterCell(7,5,FORMAT(v_gbp_gesamt*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      //Sheet.Range('C8').Value := FORMAT(v_usd_gesamt*(-1));
      //Sheet.Range('D8').Value := FORMAT(v_jpy_gesamt*(-1));
      //Sheet.Range('E8').Value := FORMAT(v_gbp_gesamt*(-1));
      //Sheet.Range('B8').Value := FORMAT(v_eur_gesamt*(-1));
      //  Ende noch nicht bestellte Waren ************************************************************************************************


      // Anfang Bankkonten ***************************************************************************************************************
      //  EUR-Konten
      bankpos.RESET;
      bankpos.SETFILTER(bankpos."Bank Account No.",'%1|%2|%3|%4','1700','1810','1840','1860');
      IF bankpos.FIND('-') THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + bankpos.Amount;
        UNTIL bankpos.NEXT=0;
        EnterCell(11,2,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('B12').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;
      //  USD-Konten
      bankpos.RESET;
      bankpos.SETFILTER(bankpos."Bank Account No.",'%1|%2','1820','1855');
      IF bankpos.FIND('-') THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + bankpos.Amount;
        UNTIL bankpos.NEXT=0;
        EnterCell(11,3,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('C12').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;
      //  JPY-Konten
      bankpos.RESET;
      bankpos.SETFILTER(bankpos."Bank Account No.",'%1','1830');
      IF bankpos.FIND('-') THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + bankpos.Amount;
        UNTIL bankpos.NEXT=0;
        EnterCell(11,4,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('D12').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;
      // Ende Bankkonten *****************************************************************************************************************

      // Anfang offene Debitoren-Posten **************************************************************************************************
      Debpost.RESET;
      Debpost.SETFILTER(Debpost."Remaining Amount",'<>%1',0);
      Debpost.SETFILTER(Debpost."Currency Code",'%1','');
      IF Debpost.FIND('-') THEN BEGIN
        REPEAT
          Debpost.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + Debpost."Remaining Amount";
        UNTIL Debpost.NEXT=0;
        EnterCell(13,2,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('B14').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;

      Debpost.RESET;
      Debpost.SETFILTER(Debpost."Remaining Amount",'<>%1',0);
      Debpost.SETFILTER(Debpost."Currency Code",'%1','USD');
      IF Debpost.FIND('-') THEN BEGIN
        REPEAT
          Debpost.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + Debpost."Remaining Amount";
        UNTIL Debpost.NEXT=0;
        EnterCell(13,3,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('C14').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;

      Debpost.RESET;
      Debpost.SETFILTER(Debpost."Remaining Amount",'<>%1',0);
      Debpost.SETFILTER(Debpost."Currency Code",'%1','JPY');
      IF Debpost.FIND('-') THEN BEGIN
        REPEAT
          Debpost.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + Debpost."Remaining Amount";
        UNTIL Debpost.NEXT=0;
        EnterCell(13,4,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('D14').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;

      Debpost.RESET;
      Debpost.SETFILTER(Debpost."Remaining Amount",'<>%1',0);
      Debpost.SETFILTER(Debpost."Currency Code",'%1','GBP');
      IF Debpost.FIND('-') THEN BEGIN
        REPEAT
          Debpost.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + Debpost."Remaining Amount";
        UNTIL Debpost.NEXT=0;
        EnterCell(13,5,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('E14').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;
      // Ende offene Debitoren-Posten ****************************************************************************************************

      // Anfang offene Auftrags-Positionen  **********************************************************************************************
      tab_ab.RESET;
      // **************************************************************
      //tab_ab.SETFILTER(tab_ab."Document No.",'%1','AU226690');
      // **************************************************************
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::Order);
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FIND('-') THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + tab_ab."Outstanding Amount";
        UNTIL tab_ab.NEXT=0;
        EnterCell(14,2,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('B15').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;
      tab_ab.RESET;
      // ***************************************************************
      //tab_ab.SETFILTER(tab_ab."Document No.",'%1','AU226374');
      // ***************************************************************
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','USD');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::Order);
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FIND('-') THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + tab_ab."Outstanding Amount";
        UNTIL tab_ab.NEXT=0;
        EnterCell(14,3,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('C15').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;
      tab_ab.RESET;
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','JPY');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::Order);
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FIND('-') THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + tab_ab."Outstanding Amount";
        UNTIL tab_ab.NEXT=0;
        EnterCell(14,4,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('D15').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;
      tab_ab.RESET;
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','GBP');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::Order);
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FIND('-') THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + tab_ab."Outstanding Amount";
        UNTIL tab_ab.NEXT=0;
        EnterCell(14,5,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('E15').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;
      // Ende   offene Auftrags-Positionen ***********************************************************************************************


      // Anfang offene Rahmen-Restpositionen *********************************************************************************************
      tab_ab.RESET;
      // **************************************************************
      //tab_ab.SETFILTER(tab_ab."Document No.",'%1','AUR200461');
      // **************************************************************
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::"Blanket Order");
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FIND('-') THEN BEGIN
        REPEAT
          IF tab_ab."VAT %"=19 THEN BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price"*1.19);
          END ELSE BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price");
          END;
        UNTIL tab_ab.NEXT=0;
        EnterCell(15,2,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('B16').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;

      tab_ab.RESET;
      // ***********************************************************
      //tab_ab.SETFILTER(tab_ab."Document No.",'%1','AUR200510');
      // ***********************************************************
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','USD');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::"Blanket Order");
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FIND('-') THEN BEGIN
        REPEAT
          IF tab_ab."VAT %"=19 THEN BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price"*1.19);
          END ELSE BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price");
          END;
        UNTIL tab_ab.NEXT=0;
        EnterCell(15,3,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('C16').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;

      tab_ab.RESET;
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','JPY');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::"Blanket Order");
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FIND('-') THEN BEGIN
        REPEAT
          IF tab_ab."VAT %"=19 THEN BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price"*1.19);
          END ELSE BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price");
          END;
        UNTIL tab_ab.NEXT=0;
        EnterCell(15,4,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        //Sheet.Range('D16').Value := FORMAT(saldo_sum);
      END;
      saldo_sum:=0;

      tab_ab.RESET;
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','GBP');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::"Blanket Order");
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FIND('-') THEN BEGIN
        REPEAT
          IF tab_ab."VAT %"=19 THEN BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price"*1.19);
          END ELSE BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price");
          END;
        UNTIL tab_ab.NEXT=0;
        EnterCell(15,5,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        Sheet.Range('E16').Value := FORMAT(saldo_sum);
      END;

      saldo_sum:=0;
      // Ende   offene Rahmen-Restpositionen *********************************************************************************************

      //j:='3';


      //Excel.Visible(TRUE);


      CloseExcel('W„hrungsabstimmung');

      MESSAGE(Text003);
    END;

    PROCEDURE WKV@1140020();
    BEGIN
      // Jahresums„tze fr Debitoren die Selbstversicherer sind
      CreateExcel;

      RecNo := 0;
      EnterCell(1,1,'Umsatzauswertung eines GJ fr div. Eingrenzungen: Selbstversicherer, Ausland','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,7,'Auswertungsstand:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,9,FORMAT(WORKDATE),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      RowNo := 2;
      EnterCell(RowNo,1,'Rech.Nr.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Bucungsdatum','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Verk. an Deb.','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Name','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Verk. an PLZ','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Verk. an Ort','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Verk. an Region','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'WŽ','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'WŽ-Kurs','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'WŽ-Betrag MWSt','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'Betrag MWSt EUR','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'Betrag EUR','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'Art','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,'Selbstversicherer','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'MWSt-Code','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,'z.Zt. der Auswertung offen','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,'Zahlungsbedingung','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);

      vkrk.RESET;
      vkrk.SETFILTER(vkrk."Posting Date",'%1..%2',Datum_ab,Datum_bis);
      IF vkrk.FIND('-') THEN BEGIN
        REPEAT
          vkrz.RESET;
          vkrz.SETFILTER(vkrz."Document No.",'%1',vkrk."No.");
          vkrz.SETFILTER(vkrz.Quantity,'<>%1',0);
          IF vkrz.FIND('-') THEN BEGIN
            REPEAT
              RowNo := RowNo + 1;
              EnterCell(RowNo,1,vkrk."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,2,FORMAT(vkrk."Posting Date"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,3,vkrk."Sell-to Customer No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,4,vkrk."Sell-to Customer Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,5,vkrk."Sell-to Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,6,vkrk."Sell-to City",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,7,vkrk."Sell-to Country/Region Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,8,vkrk."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,9,FORMAT(vkrk."Currency Factor"),'',FALSE,FALSE,FALSE,'##0.0000',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,10,FORMAT(vkrz."Amount Including VAT"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
              IF vkrk."Currency Code" = '' THEN BEGIN
                EnterCell(RowNo,11,FORMAT(vkrz."Amount Including VAT"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
              END ELSE BEGIN
                EnterCell(RowNo,11,FORMAT(vkrz."Amount Including VAT"/vkrk."Currency Factor"),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
              END;
              EnterCell(RowNo,12,FORMAT(vkrz."VK-Preis (MW)"*vkrz.Quantity),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,13,FORMAT(vkrz.Type),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,15,vkrz."VAT Prod. Posting Group",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,17,FORMAT(vkrk."Payment Terms Code"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              Debitor.RESET;
              Debitor.SETFILTER(Debitor."No.",'%1',vkrz."Sell-to Customer No.");
              IF Debitor.FINDFIRST THEN BEGIN
                //  IF Debitor."SVS Verzichtskunde"=TRUE THEN EnterCell(RowNo,14,'Ja','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,14,FORMAT(Debitor."SVS Verzichtskunde"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;
              Debpost.RESET;
              Debpost.SETFILTER(Debpost."Document No.",'%1',vkrz."Document No.");
              IF Debpost.FINDFIRST THEN BEGIN
                EnterCell(RowNo,16,FORMAT(Debpost.Open),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;


            UNTIL vkrz.NEXT=0;
          END;
        UNTIL vkrk.NEXT=0;
      END;

      vkgk.RESET;
      vkgk.SETFILTER(vkgk."Posting Date",'%1..%2',Datum_ab,Datum_bis);
      IF vkgk.FIND('-') THEN BEGIN
        REPEAT
          vkgz.RESET;
          vkgz.SETFILTER(vkgz."Document No.",'%1',vkgk."No.");
          vkgz.SETFILTER(vkgz.Quantity,'<>%1',0);
          IF vkgz.FIND('-') THEN BEGIN
            REPEAT
              RowNo := RowNo + 1;
              EnterCell(RowNo,1,vkgk."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,2,FORMAT(vkgk."Posting Date"),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,3,vkgk."Sell-to Customer No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,4,vkgk."Sell-to Customer Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,5,vkgk."Sell-to Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,6,vkgk."Sell-to City",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,7,vkgk."Sell-to Country/Region Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,8,vkgk."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,9,FORMAT(vkgk."Currency Factor"),'',FALSE,FALSE,FALSE,'##0.0000',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,10,FORMAT(vkgz."Amount Including VAT"*(-1)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
              IF vkgk."Currency Code" = '' THEN BEGIN
                EnterCell(RowNo,11,FORMAT(vkgz."Amount Including VAT"*(-1)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
              END ELSE BEGIN
                EnterCell(RowNo,11,FORMAT(vkgz."Amount Including VAT"/vkgk."Currency Factor"*(-1)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
              END;
              EnterCell(RowNo,12,FORMAT(vkgz."VK-Preis (MW)"*vkgz.Quantity*(-1)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,13,FORMAT(vkgz.Type),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,15,vkgz."VAT Prod. Posting Group",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,17,FORMAT(vkgk."Payment Terms Code"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              Debitor.RESET;
              Debitor.SETFILTER(Debitor."No.",'%1',vkgz."Sell-to Customer No.");
              IF Debitor.FINDFIRST THEN BEGIN
                // IF Debitor."SVS Verzichtskunde"=TRUE THEN EnterCell(RowNo,14,'Ja','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                EnterCell(RowNo,14,FORMAT(Debitor."SVS Verzichtskunde"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;
              Debpost.RESET;
              Debpost.SETFILTER(Debpost."Document No.",'%1',vkgz."Document No.");
              IF Debpost.FINDFIRST THEN BEGIN
                EnterCell(RowNo,16,FORMAT(Debpost.Open),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;
            UNTIL vkgz.NEXT=0;
          END;
        UNTIL vkgk.NEXT=0;
      END;

      CloseExcel('Umsatzauswertung GJ');

      MESSAGE(Text003);
    END;

    LOCAL PROCEDURE CreateExcel@1000000013();
    BEGIN
      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;

      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');

      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);
    END;

    LOCAL PROCEDURE CloseExcel@1000000018(SheetName@1000000000 : Text);
    BEGIN
      Window.CLOSE;

      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN
          TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet(SheetName,COMPANYNAME,USERID);
        //TempExcelBuffer.SetWidth(1,'A',20);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          TempExcelBuffer.OpenExcel; //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
          //TempExcelBuffer.OpenExcelWithoutAutoFit('','','',TRUE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Formular@1000000000 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;NumberFormat@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE UpdateCellValue@1000000008(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text);
    BEGIN
      IF TempExcelBuffer.GET(RowNo,ColumnNo)  THEN BEGIN
        TempExcelBuffer."Cell Value as Text" := CellValue;
        TempExcelBuffer.MODIFY;
      END;
    END;

    LOCAL PROCEDURE Inventur_Datenfiltern@1000000010();
    BEGIN
      //Fr Testzwecke
      //Kurs_GBP := 0.8832;
      //Kurs_JPY := 135.32;
      //Kurs_USD := 1.1956;
      //Lager_abgrenz_datum := 120118D;

      CreateExcel;

      RecNo := 0;

      EnterCell(1,1,'Lagerbewertung','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,2,FORMAT(Lager_abgrenz_datum),'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
      IF Lagerort1='' THEN BEGIN
        EnterCell(1,3,'ZENT/KONSI/ERSATZ/IDT','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      END ELSE BEGIN
        EnterCell(1,3,Lagerort1,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        EnterCell(1,4,Lagerort2,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        EnterCell(1,5,Lagerort3,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      END;
      EnterCell(1,6,'Kurs USD','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,7,FORMAT(Kurs_USD),'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      EnterCell(1,8,'Kurs JPY','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,9,FORMAT(Kurs_JPY),'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      EnterCell(1,10,'Kurs GBP','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,11,FORMAT(Kurs_GBP),'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);

      //šberschriften
      RowNo := 2;
      EnterCell(RowNo,1,'Hersteller','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Artikel','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Lagerbestand','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Art','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Lager','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Beleg-Nr','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'WP-Datum','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'WP-Preis','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'ArtP Menge','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Bewert Menge','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'Pos Wert','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'W„hrung','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'Kurs','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,'Zuwert Stich','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'W„hrung DC','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,'DC-Preis','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,'DC Wert','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,'niedrig Wert','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,'S','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,20,'T','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,21,'NW+Zoll+Handling','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,22,'Seriennr','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,23,'Datecode','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);

      //  Suchen aller Artikel mit Lagerbestand ungleich Null ohne ACA, ACP, ACC, ACI, ACT und TOP
      //  ****************************************************************************************
      Artikel.RESET;
      //  Testeingrenzung auf einen Artikel
      //Artikel.SETFILTER("No.",'%1|%2|%3','211 370 000RL','211 385 000RL','GS1011MEES');
      // Ende Testeingrenzung
      // Ausschluá von Herstellercodes 52-53, 56-5730 und 86-99. Im Umkehrschluá sind dann zu finden 01-51, 54-55 und 58-85
      Artikel.SETFILTER(Artikel."Manufacturer Code",'%1..%2|%3..%4|%5..%6','01','51','54','55','58','85');
      Artikel.SETFILTER(Artikel."Inventory Value Zero",'%1',FALSE);
      //Artikel.SETFILTER("Manufacturer Code",'%1..%2&%3..%4&%5..%6&','01','51','54','55','58','85');
      //Artikel.SETFILTER(Herstellerkurzname,'<>%1&<>%2&<>%3&<>%4&<>%5&<>%6&<>%7&<>%8&<>%9&<>%10','ACA','ACP','ACC','ACI','ACT','FES','FET','INT','TOP','TSG');
      v_ab_bestand := 0;
      v_bb_bestand := 0;

      Artikel.CALCFIELDS(Inventory,"Qty. on Purch. Order","Qty. on Sales Order");
      v_ab_bestand := Artikel."Qty. on Sales Order";
      v_bb_bestand := Artikel."Qty. on Purch. Order";

      // Artikelnr 2 und Gesamtlagerbestand ausgeben
      // Anfang Schleife alle Artikel
      // *******************************************
      IF Artikel.FIND('-') THEN BEGIN
        REPEAT
          TotalRecNo := Artikel.COUNT;
          // Variablen auf Null setzen
          // *************************
          Lagerbestand := 0;
          Lagerstck1 := 0;
          lagerstck2 := 0;
          lagerstck3 := 0;
          var_NEXT := 0;
          var_text1 := ' ';
          var_text2 := ' ';
          var_letzter_wert := 0;
          var_sum_zugang_wert := 0;
          var_sum_zugang_wert_stichkurs := 0;
          v_sum_bewert := 0;
          zu_w„h_kurs := 0;
          v_dcwert := 0;
          v_sum_bewert := 0;
          v_dc := 0;
          v_ab_bestand := 0;
          v_bb_bestand := 0;
          v_ab_menge := 0;
          // Artikelposten zu o.g. Artikel und Lagerort filtern und neu sortieren (neuester Zugang zuerst)
          // ********************************************************************************
          Artikelposten.RESET;
          Artikelposten.SETCURRENTKEY("Item No.","Posting Date");
          //          Artikelposten.ASCENDING:= FALSE;
          Artikelposten.SETFILTER("Item No.",'%1',Artikel."No.");

          // Standardlagerauswertung oder bestimmtes Lager benutzen
          // ******************************************************
          IF v_sonderlager = TRUE THEN
            Artikelposten.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT')
          ELSE
            Artikelposten.SETFILTER("Location Code",'%1|%2|%3',Lagerort1,Lagerort2,Lagerort3);
          Artikelposten.SETFILTER("Posting Date",'<=%1',Lager_abgrenz_datum);
          //Artikelposten.SETFILTER("Completely Invoiced",'%1',TRUE);

          // Lagerbestand aufsummieren und ausgeben
          // Anfang Schleife Lagerbestand ausgew„hlte L„ger
          // ****************************************
          IF Artikelposten.FIND('-') THEN BEGIN
            REPEAT
              Lagerbestand := Lagerbestand + Artikelposten."Invoiced Quantity";
            UNTIL Artikelposten.NEXT = 0;
          END ELSE BEGIN
            v_dc := 9999;
          END;
          // Ende Schleife Lagerbestand ausgew„hlte L„ger
          IF Lagerbestand > 0 THEN BEGIN
            Lagerstck1 := Lagerbestand;
            //Artikelposten zu o.g. Artikel, Lagerort und Zugang filtern und neu sortieren (neu oben)
            // ***************************************************************************************
            Artikelposten.RESET;
            Artikelposten.SETCURRENTKEY("Item No.","Posting Date");
            Artikelposten.ASCENDING:= FALSE;
            Artikelposten.SETFILTER("Item No.",'%1',Artikel."No.");

            // Standardlagerauswertung oder bestimmtes Lager benutzen
            // ******************************************************
            IF v_sonderlager = TRUE THEN BEGIN
              Artikelposten.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
            END ELSE BEGIN
              Artikelposten.SETFILTER("Location Code",'%1|%2|%3',Lagerort1,Lagerort2,Lagerort3);
            END;
            Artikelposten.SETFILTER("Entry Type",'%1|%2',Artikelposten."Entry Type"::Purchase, Artikelposten."Entry Type"::"Positive Adjmt.");
            Artikelposten.SETFILTER("Posting Date",'<=%1',Lager_abgrenz_datum);
            Artikelposten.SETFILTER("Invoiced Quantity",'>%1',0);
            IF Artikelposten.FIND('-') THEN BEGIN
              REPEAT
                // zu jedem Artikelposten den Wertposten holen
                // Anfang Schleife Zugangswerte holen
                // Unterscheiden zwischen INV und Wertposten
                // **********************************************
                Inventur_Wertposten;
                IF v_stichwert = 0 THEN
                  IF NOT TempExcelBuffer.GET(RowNo,14) THEN
                    EnterCell(RowNo,14,'9999999','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number)
                  ELSE
                    UpdateCellValue(RowNo,14,'9999999');
                Inventur_niedrig_Wert;
              UNTIL (Artikelposten.NEXT = 0) OR (var_NEXT = 7);
            END;  // ENDE  Artikelpostenabfrage
          END;
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
        UNTIL Artikel.NEXT = 0;
      END;

      CloseExcel('Lagerbestand Daten');

      MESSAGE(Text003);
    END;

    LOCAL PROCEDURE Inventur_Wertposten@1000000011();
    BEGIN
      Wertposten.RESET;
      Wertposten.SETFILTER("Item Ledger Entry No.",'%1',Artikelposten."Entry No.");
      Wertposten.SETFILTER("Invoiced Quantity",'<>%1',0);
      IF Wertposten.FINDFIRST THEN BEGIN
        RowNo := RowNo + 1;
        v_zuwert := 0;
        v_stichwert := 0;
        v_dcwert := 0;
        v_bewert := 0;
        lagerstck3 := 0;

        EnterCell(RowNo,1,Artikel.Herstellerkurzname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,2,Artikel."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,3,FORMAT(Lagerbestand,0),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        EnterCell(RowNo,4,'Zugang','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,5,Artikelposten."Location Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,6,Wertposten."Document No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,7,FORMAT(Wertposten."Posting Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date); //OK vierstellig
        EnterCell(RowNo,8,FORMAT(Wertposten."Cost per Unit"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        EnterCell(RowNo,9,FORMAT(Artikelposten."Invoiced Quantity"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);

        // Werte fr Zugangspositionen ermitteln
        // *****************************************
        lagerstck3 := 0;
        Lagerstck1 := Lagerstck1 - Artikelposten."Invoiced Quantity";
        IF Lagerstck1 <= 0 THEN BEGIN                                        // Wenn Restmenge kleiner gleich 0
          Lagerstck1 := Lagerstck1 + Artikelposten."Invoiced Quantity";
          lagerstck2 := Lagerstck1;
          lagerstck3 := Lagerstck1;
          var_letzter_wert := Wertposten."Cost per Unit";
          EnterCell(RowNo,10,FORMAT(Lagerstck1),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          v_zuwert := Lagerstck1 * Wertposten."Cost per Unit";
          var_sum_zugang_wert := var_sum_zugang_wert + v_zuwert;
          EnterCell(RowNo,11,FORMAT(v_zuwert),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
          Lagerstck1 := Lagerstck1 - Artikelposten."Invoiced Quantity";
          var_NEXT := 7;                                               //  Beenden der Schleife bei negativer Restmenge
        END ELSE BEGIN
          var_letzter_wert := Wertposten."Cost per Unit";
          EnterCell(RowNo,10,FORMAT(Artikelposten."Invoiced Quantity"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          lagerstck3 := Artikelposten."Invoiced Quantity";
          v_zuwert := Artikelposten."Invoiced Quantity" * Wertposten."Cost per Unit";
          EnterCell(RowNo,11,FORMAT(v_zuwert),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
          var_sum_zugang_wert := var_sum_zugang_wert + v_zuwert;
        END;
        EnterCell(RowNo,22,Artikelposten."Serial No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        EnterCell(RowNo,23,Artikelposten."Lot No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);

        Inventur_Ek_Rech;
        Inventur_Ek_Preis;

        IF ((v_zuwert = 0) OR (Wertposten."Document No." = 'INV_2017')) THEN Inventur_Beleghistorie;
      END ELSE BEGIN
      END;
    END;

    LOCAL PROCEDURE Inventur_Beleghistorie@1000000012();
    BEGIN
      //Werte aus der Beleghistorie holen
      IF ((v_zuwert = 0) OR (Wertposten."Document No." = 'INV_2017')) THEN BEGIN
        //v_beleghis.RESET;
        v_beleghis.SETCURRENTKEY(Belegart,v_beleghis."Artikelnr.");
        v_beleghis.ASCENDING := FALSE;
        v_beleghis.SETFILTER(Belegart,'%1',v_beleghis.Belegart::"Purchase Invoice");
        v_beleghis.SETFILTER("Artikelnr.",'%1',Artikelposten."Item No.");
        IF v_beleghis.FINDFIRST THEN BEGIN
          IF v_beleghis."EK-W„hrung" = 'USD' THEN BEGIN
            v_zuwert := ((lagerstck3 * v_beleghis."EK-Preis") / v_beleghis."EK-Kurs");
            var_sum_zugang_wert := var_sum_zugang_wert + v_zuwert;
          END;
          IF v_beleghis."EK-W„hrung" = 'JPY' THEN BEGIN
            v_zuwert := ((lagerstck3 * v_beleghis."EK-Preis") / v_beleghis."EK-Kurs");
            var_sum_zugang_wert := var_sum_zugang_wert + v_zuwert;
          END;
          IF v_beleghis."EK-W„hrung" = 'GBP' THEN BEGIN
           v_zuwert := ((lagerstck3 * v_beleghis."EK-Preis") / v_beleghis."EK-Kurs");
            var_sum_zugang_wert := var_sum_zugang_wert + v_zuwert;
          END;
          IF v_beleghis."EK-W„hrung" = '' THEN BEGIN
            v_zuwert := lagerstck3 * v_beleghis."EK-Preis";
            var_sum_zugang_wert := var_sum_zugang_wert + v_zuwert;
          END;
          IF NOT TempExcelBuffer.GET(RowNo,6) THEN
            EnterCell(RowNo,6,v_beleghis."Belegnr.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text)
          ELSE
            UpdateCellValue(RowNo,6,v_beleghis."Belegnr.");
          IF NOT TempExcelBuffer.GET(RowNo,8) THEN
            EnterCell(RowNo,8,FORMAT(v_zuwert / lagerstck3,7),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number)
          ELSE
            UpdateCellValue(RowNo,8,FORMAT(v_zuwert / lagerstck3,7));
          IF NOT TempExcelBuffer.GET(RowNo,11) THEN
            EnterCell(RowNo,11,FORMAT(v_zuwert),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number)
          ELSE
            UpdateCellValue(RowNo,11,FORMAT(v_zuwert));
          IF v_beleghis."EK-W„hrung" = '' THEN BEGIN
            IF NOT TempExcelBuffer.GET(RowNo,12) THEN
              EnterCell(RowNo,12,'EUR','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text)
            ELSE
              UpdateCellValue(RowNo,12,'EUR');
            IF NOT TempExcelBuffer.GET(RowNo,13) THEN
              EnterCell(RowNo,13,'1','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number)
            ELSE
              UpdateCellValue(RowNo,13,'1');
          END ELSE BEGIN
            IF NOT TempExcelBuffer.GET(RowNo,12) THEN
              EnterCell(RowNo,12,v_beleghis."EK-W„hrung",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text)
            ELSE
              UpdateCellValue(RowNo,12,v_beleghis."EK-W„hrung");
            IF NOT TempExcelBuffer.GET(RowNo,13) THEN
              EnterCell(RowNo,13,FORMAT(v_beleghis."EK-Kurs"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number)
            ELSE
              UpdateCellValue(RowNo,13,FORMAT(v_beleghis."EK-Kurs"));
          END;
        END;
        IF Wertposten."Document No." = 'INV_2017' THEN
        //      EnterCell(RowNo,4,Wertposten."Document No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        UpdateCellValue(RowNo,4,Wertposten."Document No.");
      END;
    END;

    LOCAL PROCEDURE Inventur_Ek_Preis@1000000006();
    BEGIN
      //IF v_stichwert = 0 THEN BEGIN
      //  EKRech_holen_Beleghistorie;
      //END;
      //IF (TempExcelBuffer.GET(RowNo,12)) AND (TempExcelBuffer."Cell Value as Text" = '') THEN
      //  EKRech_holen_Beleghistorie;
      ek_preis.RESET;
      ek_preis.SETFILTER("Item No.",'%1',Artikel."No.");
      ek_preis.SETFILTER("Ending Date",'%1',0D);
      //IF ek_preis.FINDFIRST THEN BEGIN
      IF ek_preis.FINDLAST THEN BEGIN
        IF ek_preis."Currency Code" = '' THEN
          EnterCell(RowNo,15,'EUR','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text)
        ELSE
          EnterCell(RowNo,15,ek_preis."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,16,FORMAT(ek_preis."Direct Unit Cost"),'',FALSE,FALSE,FALSE,'#,##0.00',TempExcelBuffer."Cell Type"::Number);
        IF ek_preis."Currency Code" = '' THEN BEGIN
          EnterCell(RowNo,17,FORMAT(ek_preis."Direct Unit Cost" * lagerstck3),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
          v_dcwert := (ek_preis."Direct Unit Cost" * lagerstck3);
          IF NOT TempExcelBuffer.GET(RowNo,13) THEN
            EnterCell(RowNo,13,'1','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number)
          ELSE
            UpdateCellValue(RowNo,13,',1');
        END;
        IF ek_preis."Currency Code" = 'USD' THEN BEGIN
          EnterCell(RowNo,17,FORMAT(ek_preis."Direct Unit Cost" * lagerstck3 / Kurs_USD),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
          v_dcwert:= (ek_preis."Direct Unit Cost" * lagerstck3 / Kurs_USD);
        END;
        IF ek_preis."Currency Code" = 'GBP' THEN BEGIN
          EnterCell(RowNo,17,FORMAT(ek_preis."Direct Unit Cost" * lagerstck3 / Kurs_GBP),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
          v_dcwert := (ek_preis."Direct Unit Cost" * lagerstck3 / Kurs_GBP);
        END;
        IF ek_preis."Currency Code" = 'JPY' THEN BEGIN
          EnterCell(RowNo,17,FORMAT(ek_preis."Direct Unit Cost" * lagerstck3 / Kurs_JPY),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
          v_dcwert := (ek_preis."Direct Unit Cost" * lagerstck3 / Kurs_JPY);
        END;
      END;
    END;

    LOCAL PROCEDURE Inventur_Ek_Rech@1000000014();
    BEGIN
      EK_Rech_k.RESET;
      EK_Rech_k.SETFILTER("No.",'%1',Wertposten."Document No.");
      IF EK_Rech_k.FINDFIRST THEN BEGIN
        IF EK_Rech_k."Currency Code" = '' THEN
          EnterCell(RowNo,12,'EUR','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text)
        ELSE
          EnterCell(RowNo,12,EK_Rech_k."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        IF EK_Rech_k."Currency Factor" = 0 THEN BEGIN
          zu_w„h_kurs := 1;
        END ELSE BEGIN
          zu_w„h_kurs := EK_Rech_k."Currency Factor";
        END;
        IF EK_Rech_k."Currency Code" = '' THEN zu_w„h_kurs := 1;
        EnterCell(RowNo,13,FORMAT(zu_w„h_kurs),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        IF EK_Rech_k."Currency Code"='' THEN BEGIN
          v_stichwert:= v_zuwert;
          var_sum_zugang_wert_stichkurs := var_sum_zugang_wert_stichkurs + v_stichwert;
        END;
        IF EK_Rech_k."Currency Code" = 'USD' THEN BEGIN
          v_stichwert := (v_zuwert * zu_w„h_kurs / Kurs_USD);
          var_sum_zugang_wert_stichkurs := var_sum_zugang_wert_stichkurs + v_stichwert;
        END;
        IF EK_Rech_k."Currency Code" = 'JPY' THEN BEGIN
          v_stichwert := (v_zuwert * zu_w„h_kurs / Kurs_JPY);
          var_sum_zugang_wert_stichkurs := var_sum_zugang_wert_stichkurs + v_stichwert;
        END;
        IF EK_Rech_k."Currency Code" = 'GBP' THEN BEGIN
          v_stichwert := (v_zuwert * zu_w„h_kurs / Kurs_GBP);
          var_sum_zugang_wert_stichkurs := var_sum_zugang_wert_stichkurs + v_stichwert;
        END;
        EnterCell(RowNo,14,FORMAT(v_stichwert),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
      END;
    END;

    LOCAL PROCEDURE Inventur_niedrig_Wert@1000000020();
    BEGIN
      v_bewert := 0;
      IF v_dcwert = 0 THEN v_dcwert := 9999999;
      IF v_zuwert = 0 THEN v_zuwert := 9999999;
      IF v_stichwert = 0 THEN v_stichwert := 9999999;

      IF v_zuwert >= v_dcwert THEN BEGIN
        IF v_dcwert >= v_stichwert THEN BEGIN
          v_bewert := v_stichwert;
        END;
      END;
      IF v_dcwert >= v_zuwert THEN BEGIN
        IF v_zuwert >= v_stichwert THEN BEGIN
          v_bewert := v_stichwert;
        END;
      END;

      IF v_stichwert >= v_dcwert THEN BEGIN
        IF v_dcwert >= v_zuwert THEN BEGIN
          v_bewert := v_zuwert;
        END;
      END;
      IF v_dcwert >= v_stichwert THEN BEGIN
        IF v_stichwert >= v_zuwert THEN BEGIN
          v_bewert := v_zuwert;
        END;
      END;

      IF v_zuwert >= v_stichwert THEN BEGIN
        IF v_stichwert >= v_dcwert THEN BEGIN
          v_bewert := v_dcwert;
        END;
      END;
      IF v_stichwert >= v_zuwert THEN BEGIN
        IF v_zuwert >= v_dcwert THEN BEGIN
          v_bewert := v_dcwert;
        END;
      END;

      v_sum_bewert := v_sum_bewert + v_bewert;

      IF (v_bewert = 9999999) OR (v_bewert = 9999) THEN BEGIN
        //Nur der 1. Fehler wird angezeigt
        EnterCell(RowNo,18,FORMAT(v_bewert),'',FALSE,FALSE,FALSE,'#,##0.00 ° [red]',TempExcelBuffer."Cell Type"::Number);
        IF (NOT TempExcelBuffer.GET(1,13)) AND (NOT TempExcelBuffer.GET(1,16)) THEN BEGIN
          EnterCell(1,13,FORMAT('Fehler in Spalte R, bitte prfen'),'',FALSE,FALSE,FALSE,'[red]',TempExcelBuffer."Cell Type"::Text);
          EnterCell(1,16,FORMAT(RowNo),'',FALSE,FALSE,FALSE,'[red]',TempExcelBuffer."Cell Type"::Number);
        END;
      END ELSE
        IF (v_stichwert = 9999999) AND (v_zuwert = 9999999) THEN
          EnterCell(RowNo,18,FORMAT(v_bewert),'',FALSE,FALSE,FALSE,'#,##0.00 ° [red]',TempExcelBuffer."Cell Type"::Number)
        ELSE
          EnterCell(RowNo,18,FORMAT(v_bewert),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);

      //05.04.22 ST - NEU Formel in Spalte S fr mtl. Auswertung HALO
      EnterCell(RowNo,19,'','K'+FORMAT(RowNo)+'*'+'M'+FORMAT(RowNo),FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);

      IF Artikel."Indirect Cost %" = 0 THEN BEGIN
        EnterCell(RowNo,21,FORMAT(v_bewert),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
      END ELSE BEGIN
        EnterCell(RowNo,21,FORMAT(v_bewert * ((Artikel."Indirect Cost %" + 100) / 100)),'',FALSE,FALSE,FALSE,'#,##0.00 °',TempExcelBuffer."Cell Type"::Number);
      END;
    END;

    LOCAL PROCEDURE "Test SW/Artikelfilter"@1000000015();
    BEGIN
      {
      EKRZ.RESET;
      EKRZ.SETFILTER("Posting Date",'>%1',300610D);
      EKRZ.SETFILTER(Quantity,'>%1',0);
      EKRZ.SETFILTER("Manufacturer Code",'<>%1&<>%2&<>%3','57','5710','5720');
      IF EKRZ.FIND('-') THEN BEGIN
        REPEAT
          EKRK.RESET;
          EKRK.SETRANGE("No.",EKRZ."Document No.");
          IF EKRK.FINDFIRST THEN BEGIN
            IF (EKRZ."Artikelnr. 2"='ENH-SUPP-PROG/YR') OR (EKRZ."Artikelnr. 2"='ENH-SUPP-PROG/3 YR')
            OR (EKRZ."Artikelnr. 2"='EXTD-HW-WARR/YR') OR (EKRZ."Artikelnr. 2"='ADVC-RPLC-SRVC-IN WARR/YR')
            OR (EKRZ."Artikelnr. 2"='SPS/LIC/USR/10') OR (EKRZ."Artikelnr. 2"='SPS/LIC/USR/50')


            OR (EKRZ."Artikelnr. 2"='SW/M1K/ESBC/10') OR (EKRZ."Artikelnr. 2"='SW/M1K/ESBC/30')
            OR (EKRZ."Artikelnr. 2"='SW/M600/1-4BRI') OR (EKRZ."Artikelnr. 2"='SW/SS7/SIGTRAN/2')
            OR (EKRZ."Artikelnr. 2"='ZUSCHLAG') OR (EKRZ."Artikelnr. 2"='SW/M600/1-4BRI')
            OR (EKRZ."Artikelnr. 2"='SW/M1K/SAS') OR (EKRZ."Artikelnr. 2"='SW/MGCP')
            OR (EKRZ."Artikelnr. 2"='SW/M3K25/UPGRADE') OR (EKRZ."Artikelnr. 2"='SW/M600/1-2BRI')
            OR (EKRZ."Artikelnr. 2"='SW/M800/UP-1BRI') OR (EKRZ."Artikelnr. 2"='SW/M1K/ESBC/60')
            OR (EKRZ."Artikelnr. 2"='SW/IP2IP/10') OR (EKRZ."Artikelnr. 2"='SW/IP2IP/UP10')

       //     OR (EKRZ."Artikelnr. 2"='SW/*') OR (EKRZ."Artikelnr. 2"='ZUSCHLAG')  // Diese Zeile soll den oberen Block ersetzen

            OR (EKRZ."Artikelnr. 2"='SPS/PCK/USR/100') THEN BEGIN
            END ELSE BEGIN
              IF (EKRK."Pay-to Vendor No." = '880001') OR (EKRK."Pay-to Vendor No." = '880002')
              OR (EKRK."Pay-to Vendor No." = '880005') OR (EKRK."Pay-to Vendor No." = '880008')
              OR (EKRK."Pay-to Country/Region Code" <>'DE') THEN BEGIN
                Einfuhrzoll.RESET;
                Einfuhrzoll.SETRANGE(Belegnr,EKRZ."Document No.");
                Einfuhrzoll.SETRANGE(Zeilennr,EKRZ."Line No.");
                IF NOT Einfuhrzoll.FINDFIRST THEN BEGIN
                  Einfuhrzoll.INIT;
                  Einfuhrzoll.Belegart := Einfuhrzoll.Belegart::Einfuhr;
                  Einfuhrzoll.Belegnr  := EKRZ."Document No.";
                  Einfuhrzoll.Zeilennr := EKRZ."Line No.";
                  Einfuhrzoll.Datum    := EKRZ."Posting Date";
                  Einfuhrzoll.Bestellnr:= EKRZ."Order No.";
                  Einfuhrzoll.Bestellzeilennr := EKRZ."Order Line No.";
                  Einfuhrzoll.Herstellercode := EKRZ."Manufacturer Code";
                  Einfuhrzoll.Artikel := EKRZ."Artikelnr. 2";
                  Einfuhrzoll.Menge := EKRZ.Quantity;
                  Einfuhrzoll.Wert := EKRZ.Amount;
                  EKRK.RESET;
                  EKRK.SETRANGE("No.",EKRZ."Document No.");
                  IF EKRK.FINDFIRST THEN BEGIN
                    Einfuhrzoll.W„hrung := EKRK."Currency Code";
                    Einfuhrzoll."Kred.-Rechnungsnr" := EKRK."Vendor Invoice No.";
                  END;
                  Artikel.RESET;
                  Artikel.SETRANGE("No. 2",EKRZ."Artikelnr. 2");
                  IF Artikel.FINDFIRST THEN BEGIN
                    Einfuhrzoll.Zollpos := Artikel."Tariff No.";
                    Einfuhrzoll.Herstellerkurzname := Artikel.Herstellerkurzname;
                  END;
                  Einfuhrzoll.INSERT;
                END;
              END;
            END;
          END;
        UNTIL EKRZ.NEXT = 0;
      END;
      }

      CreateExcel;
      RecNo := 0;
      //šberschriften
      EnterCell(1,1,'Freies Lager Verkauf','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,2,FORMAT(WORKDATE),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
      EnterCell(2,1,'Partnumber','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(2,2,'Qty','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(2,3,'Manufactor','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(2,4,'Date Code','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 3;
      //ANFANG NEU
      Artikel.RESET;
      Artikel.SETFILTER("Manufacturer Code",'%1','59');
      //Artikel.SETFILTER(Artikel."No.",'%1','SW/*');
      Artikel.SETFILTER(Artikel.Blocked,'%1',FALSE);
      IF Artikel.FIND('-') THEN BEGIN
        REPEAT
          Artikelposten.RESET;
          Artikelposten.SETFILTER(Artikelposten."Item No.",'%1',Artikel."No.");
          Artikelposten.SETFILTER(Artikelposten."Manufacturer Code",'%1','59');
          IF Artikelposten.FIND('-') THEN BEGIN
            REPEAT
              RowNo := RowNo + 1;
              EnterCell(RowNo,1,Artikelposten."Item No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,2,FORMAT(Artikelposten.Quantity),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,3,Artikelposten."Manufacturer Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,4,Artikelposten."Location Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,5,FORMAT(Artikelposten."Posting Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
            UNTIL Artikelposten.NEXT = 0;
          END;
        UNTIL Artikel.NEXT = 0;
      END;
      CloseExcel('Freies Lager Verkauf TEST');
    END;

    LOCAL PROCEDURE Dienstleistungsbewertung@1000000000();
    BEGIN
      {
      //Fr Testzwecke
      Kurs_GBP := 0.8832;
      Kurs_JPY := 135.32;
      Kurs_USD := 1.1956;
      Lager_abgrenz_datum := 300620D;
      }
      CreateExcel;
      RecNo := 0;
      EnterCell(1,1,'Dienstleitungsbewertung','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,2,FORMAT(Lager_abgrenz_datum),'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
      IF Lagerort1='' THEN BEGIN
        EnterCell(1,3,'ZENT/KONSI/ERSATZ/IDT','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      END ELSE BEGIN
        EnterCell(1,3,Lagerort1,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        EnterCell(1,4,Lagerort2,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        EnterCell(1,5,Lagerort3,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      END;
      EnterCell(1,6,'Kurs USD','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,7,FORMAT(Kurs_USD),'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      EnterCell(1,8,'Kurs JPY','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,9,FORMAT(Kurs_JPY),'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      EnterCell(1,10,'Kurs GBP','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,11,FORMAT(Kurs_GBP),'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);

      //šberschriften
      RowNo := 2;
      EnterCell(RowNo,1,'Hersteller','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Artikel','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Lagerbestand','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Art','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Lager','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Beleg-Nr','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'WP-Datum','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'WP-Preis','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'ArtP Menge','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Bewert Menge','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'Pos Wert','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'W„hrung','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'Kurs','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,'Zuwert Stich','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'W„hrung DC','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,'DC-Preis','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,'DC Wert','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,'niedrig Wert','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,'S','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,20,'T','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,21,'NW+Zoll+Handling','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,22,'Seriennr','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,23,'Datecode','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);

      //  Suchen aller Artikel mit Lagerbestand ungleich Null ohne ACA, ACP, ACC, ACI, ACT und TOP
      //  ****************************************************************************************
      Artikel.RESET;
      //  Testeingrenzung auf einen Artikel
      //Artikel.SETFILTER("No.",'%1|%2|%3','211 370 000RL','211 385 000RL','GS1011MEES');
      // Ende Testeingrenzung
      // Ausschluá von Herstellercodes 52-53, 56-5730 und 86-99. Im Umkehrschluá sind dann zu finden 01-51, 54-55 und 58-85
      Artikel.SETFILTER(Artikel."Manufacturer Code",'%1..%2','57','5730');
      //Artikel.SETFILTER("Manufacturer Code",'%1..%2&%3..%4&%5..%6&','01','51','54','55','58','85');
      //Artikel.SETFILTER(Herstellerkurzname,'<>%1&<>%2&<>%3&<>%4&<>%5&<>%6&<>%7&<>%8&<>%9&<>%10','ACA','ACP','ACC','ACI','ACT','FES','FET','INT','TOP','TSG');
      v_ab_bestand := 0;
      v_bb_bestand := 0;

      Artikel.CALCFIELDS(Inventory,"Qty. on Purch. Order","Qty. on Sales Order");
      v_ab_bestand := Artikel."Qty. on Sales Order";
      v_bb_bestand := Artikel."Qty. on Purch. Order";

      // Artikelnr 2 und Gesamtlagerbestand ausgeben
      // Anfang Schleife alle Artikel
      // *******************************************
      IF Artikel.FIND('-') THEN BEGIN
        REPEAT
          TotalRecNo := Artikel.COUNT;
          // Variablen auf Null setzen
          // *************************
          Lagerbestand := 0;
          Lagerstck1 := 0;
          lagerstck2 := 0;
          lagerstck3 := 0;
          var_NEXT := 0;
          var_text1 := ' ';
          var_text2 := ' ';
          var_letzter_wert := 0;
          var_sum_zugang_wert := 0;
          var_sum_zugang_wert_stichkurs := 0;
          v_sum_bewert := 0;
          zu_w„h_kurs := 0;
          v_dcwert := 0;
          v_sum_bewert := 0;
          v_dc := 0;
          v_ab_bestand := 0;
          v_bb_bestand := 0;
          v_ab_menge := 0;
          // Artikelposten zu o.g. Artikel und Lagerort filtern und neu sortieren (neuester Zugang zuerst)
          // ********************************************************************************
          Artikelposten.RESET;
          Artikelposten.SETCURRENTKEY("Item No.","Posting Date");
          //          Artikelposten.ASCENDING:= FALSE;
          Artikelposten.SETFILTER("Item No.",'%1',Artikel."No.");
          //Artikelposten.SETFILTER(Artikelposten."Entry Type",'%1',Artikelposten."Entry Type"::Purchase);
          // Standardlagerauswertung oder bestimmtes Lager benutzen
          // ******************************************************
          IF v_sonderlager = TRUE THEN
            Artikelposten.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT')
          ELSE
            Artikelposten.SETFILTER("Location Code",'%1|%2|%3',Lagerort1,Lagerort2,Lagerort3);
          Artikelposten.SETFILTER("Posting Date",'<=%1',Lager_abgrenz_datum);


          // Lagerbestand aufsummieren und ausgeben
          // Anfang Schleife Lagerbestand ausgew„hlte L„ger
          // ****************************************
          IF Artikelposten.FIND('-') THEN BEGIN
            REPEAT
              Lagerbestand := Lagerbestand + Artikelposten."Invoiced Quantity";
            UNTIL Artikelposten.NEXT = 0;
          END ELSE BEGIN
            v_dc := 9999;
          END;
          // Ende Schleife Lagerbestand ausgew„hlte L„ger
          IF Lagerbestand > 0 THEN BEGIN
            Lagerstck1 := Lagerbestand;
            //Artikelposten zu o.g. Artikel, Lagerort und Zugang filtern und neu sortieren (neu oben)
            // ***************************************************************************************
            Artikelposten.RESET;
            Artikelposten.SETCURRENTKEY("Item No.","Posting Date");
            Artikelposten.ASCENDING:= FALSE;
            Artikelposten.SETFILTER("Item No.",'%1',Artikel."No.");

            // Standardlagerauswertung oder bestimmtes Lager benutzen
            // ******************************************************
            IF v_sonderlager = TRUE THEN BEGIN
              Artikelposten.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
            END ELSE BEGIN
              Artikelposten.SETFILTER("Location Code",'%1|%2|%3',Lagerort1,Lagerort2,Lagerort3);
            END;
            Artikelposten.SETFILTER("Entry Type",'%1|%2',Artikelposten."Entry Type"::Purchase, Artikelposten."Entry Type"::"Positive Adjmt.");
      //      Artikelposten.SETFILTER("Entry Type",'%1',Artikelposten."Entry Type"::Purchase);
            Artikelposten.SETFILTER("Posting Date",'<=%1',Lager_abgrenz_datum);
            Artikelposten.SETFILTER("Invoiced Quantity",'>%1',0);
            IF Artikelposten.FIND('-') THEN BEGIN
              REPEAT
                // zu jedem Artikelposten den Wertposten holen
                // Anfang Schleife Zugangswerte holen
                // Unterscheiden zwischen INV und Wertposten
                // **********************************************
                Inventur_Wertposten;
                IF v_stichwert = 0 THEN
                  IF NOT TempExcelBuffer.GET(RowNo,14) THEN
                    EnterCell(RowNo,14,'9999999','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number)
                  ELSE
                    UpdateCellValue(RowNo,14,'9999999');
                Inventur_niedrig_Wert;
              UNTIL (Artikelposten.NEXT = 0) OR (var_NEXT = 7);
            END;  // ENDE  Artikelpostenabfrage
      {
            Artikelposten2.RESET;
            Artikelposten2.SETFILTER(Artikelposten2."Item No.",'%1',Artikelposten."Item No.");
            Artikelposten2.SETFILTER(Artikelposten2.Quantity,'>=%1',10);
            IF Artikelposten2.FIND('-') THEN BEGIN
                      REPEAT
                // zu jedem Artikelposten den Wertposten holen
                // Anfang Schleife Zugangswerte holen
                // Unterscheiden zwischen INV und Wertposten
                // **********************************************
       //         Inventur_Wertposten;
                IF v_stichwert = 0 THEN
                  IF NOT TempExcelBuffer.GET(RowNo,14) THEN
                    EnterCell(RowNo,14,'9999999','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number)
                  ELSE
                    UpdateCellValue(RowNo,14,'9999999');
                RecNo := RecNo + 1;
                Inventur_niedrig_Wert;
              UNTIL (Artikelposten2.NEXT = 0) OR (var_NEXT = 7);

            END;
            }
          END;
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
        UNTIL Artikel.NEXT = 0;
      END;

      CloseExcel('Dienstleistungsbestand');

      MESSAGE(Text003);
    END;

    EVENT Sheet@1000000151::SelectionChange@1543(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet@1000000151::BeforeDoubleClick@1537(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1000000151::BeforeRightClick@1534(Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1000000151::Activate@304();
    BEGIN
    END;

    EVENT Sheet@1000000151::Deactivate@1530();
    BEGIN
    END;

    EVENT Sheet@1000000151::Calculate@279();
    BEGIN
    END;

    EVENT Sheet@1000000151::Change@1545(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet@1000000151::FollowHyperlink@1470(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT Sheet@1000000151::PivotTableUpdate@2156(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Sheet@1000000151::PivotTableAfterValueChange@2886(TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet@1000000151::PivotTableBeforeAllocateChanges@2889(TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1000000151::PivotTableBeforeCommitChanges@2892(TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1000000151::PivotTableBeforeDiscardChanges@2893(TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT Sheet@1000000151::PivotTableChangeSync@2894(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000153::Open@1923();
    BEGIN
    END;

    EVENT Book@1000000153::Activate@304();
    BEGIN
    END;

    EVENT Book@1000000153::Deactivate@1530();
    BEGIN
    END;

    EVENT Book@1000000153::BeforeClose@1546(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::BeforeSave@1547(SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::BeforePrint@1549(VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::NewSheet@1550(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1000000153::AddinInstall@1552();
    BEGIN
    END;

    EVENT Book@1000000153::AddinUninstall@1553();
    BEGIN
    END;

    EVENT Book@1000000153::WindowResize@1554(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book@1000000153::WindowActivate@1556(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book@1000000153::WindowDeactivate@1557(Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book@1000000153::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book@1000000153::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1000000153::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1000000153::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1000000153::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book@1000000153::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT Book@1000000153::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000153::PivotTableCloseConnection@2158(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000153::PivotTableOpenConnection@2159(Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000153::Sync@2266(SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book@1000000153::BeforeXmlImport@2283(Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000002 : Text;IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::AfterXmlImport@2285(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book@1000000153::BeforeXmlExport@2287(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::AfterXmlExport@2288(Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book@1000000153::RowsetComplete@2610(Description@1000000002 : Text;Sheet@1000000001 : Text;Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::SheetPivotTableAfterValueChange@2895(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book@1000000153::SheetPivotTableBeforeAllocateChanges@2896(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::SheetPivotTableBeforeCommitChanges@2897(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::SheetPivotTableBeforeDiscardChanges@2898(Sh@1000000003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT Book@1000000153::SheetPivotTableChangeSync@2899(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1000000153::AfterSave@2900(Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Book@1000000153::NewChart@2901(Ch@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    EVENT Excel@1000000154::NewWorkbook@1565(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetSelectionChange@1558(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetBeforeDoubleClick@1559(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::SheetBeforeRightClick@1560(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::SheetActivate@1561(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetDeactivate@1562(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetCalculate@1563(Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetChange@1564(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookOpen@1567(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookActivate@1568(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookDeactivate@1569(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookBeforeClose@1570(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookBeforeSave@1571(Wb@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SaveAsUI@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookBeforePrint@1572(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookNewSheet@1573(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Sh@1000000000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookAddinInstall@1574(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookAddinUninstall@1575(Wb@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1000000154::WindowResize@1554(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Excel@1000000154::WindowActivate@1556(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Excel@1000000154::WindowDeactivate@1557(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetFollowHyperlink@1854(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetPivotTableUpdate@2157(Sh@1000000001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookPivotTableCloseConnection@2160(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookPivotTableOpenConnection@2161(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookSync@2289(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SyncEventType@1000000000 : Integer);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookBeforeXmlImport@2290(Wb@1000000004 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000002 : Text;IsRefresh@1000000001 : Boolean;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookAfterXmlImport@2291(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1000000001 : Boolean;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookBeforeXmlExport@2292(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookAfterXmlExport@2293(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1000000001 : Text;Result@1000000000 : Integer);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookRowsetComplete@2611(Wb@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Description@1000000002 : Text;Sheet@1000000001 : Text;Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::AfterCalculate@2612();
    BEGIN
    END;

    EVENT Excel@1000000154::SheetPivotTableAfterValueChange@2895(Sh@1000000002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Excel@1000000154::SheetPivotTableBeforeAllocateChanges@2896(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::SheetPivotTableBeforeCommitChanges@2897(Sh@1000000004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000002 : Integer;ValueChangeEnd@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::SheetPivotTableBeforeDiscardChanges@2898(Sh@1000000003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1000000001 : Integer;ValueChangeEnd@1000000000 : Integer);
    BEGIN
    END;

    EVENT Excel@1000000154::ProtectedViewWindowOpen@2903(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1000000154::ProtectedViewWindowBeforeEdit@2905(Pvw@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow";VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::ProtectedViewWindowBeforeClose@2906(Pvw@1000000002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow";Reason@1000000001 : Integer;VAR Cancel@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::ProtectedViewWindowResize@2908(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1000000154::ProtectedViewWindowActivate@2909(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1000000154::ProtectedViewWindowDeactivate@2910(Pvw@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookAfterSave@2911(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Success@1000000000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1000000154::WorkbookNewChart@2912(Wb@1000000001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Ch@1000000000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    BEGIN
    {
      Lfd.Nr. Version   Datum       User  Beschreibung
      ===========================================================================
      1       TOP1.00   10.01.18    ST    Umstellung aller aktiven Funktionen auf neue Excel Technik mit Excel Buffer + diverse Fixes
      2       TOP2.00   15.01.18    UB    Inventur_xxxx Umstellung auf neue Excel Technik
                                          W„hrungsabgrenzung Umstellung auf neue Excel Technik
      3       TOP2.01   15.12.20    UB    Diverse neue Funktionen und Anpassungen u.a. WŽ Abstimmung, Funktionen fr Inventur und vieles mehr
    }
    END.
  }
}

