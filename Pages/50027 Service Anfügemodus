OBJECT Page 50027 Service Anfgemodus
{
  OBJECT-PROPERTIES
  {
    Date=03.02.21;
    Time=17:59:21;
    Modified=Yes;
    Version List=TOPAS;
  }
  PROPERTIES
  {
    SaveValues=Yes;
    InsertAllowed=No;
    SourceTable=Table50024;
    DelayedInsert=Yes;
    SourceTableView=WHERE(Art=FILTER(Tempor„r));
    PageType=Worksheet;
    OnOpenPage=BEGIN
                 laufzeit_abweichungen_anzeigen := TRUE;
                 berechne_laufzeiten := TRUE;
                 SetNewServicesDates(Rec);
               END;

    OnAfterGetRecord=BEGIN
                       AktualisiereWartungsvertragsnr;
                     END;

    OnQueryClosePage=BEGIN
                       IF (Rec.GETFILTERS <> '') AND (Rec.Art = Rec.Art::Tempor„r) THEN BEGIN
                         TempLizenzTab.RESET;
                         TempLizenzTab.SETRANGE(Art,TempLizenzTab.Art::Tempor„r);
                         TempLizenzTab.SETRANGE("Auftragsnr.","Auftragsnr.");
                         TempLizenzTab.SETRANGE("Auftragszeilennr.","Auftragszeilennr.");
                         TempLizenzTab.SETRANGE(Fremderwerb,TRUE);
                         IF TempLizenzTab.FIND('-') THEN
                           REPEAT
                             Artikel.GET(TempLizenzTab."Artikelnr.");
                             IF Artikel."Item Tracking Code" <> 'KEINE' THEN BEGIN
                               IF (TempLizenzTab."Artikelnr." = '') OR ((TempLizenzTab."Seriennr." = '') AND ((Artikel."Item Tracking Code" = 'SERIENNR') OR (Artikel."Item Tracking Code" = 'SERIENNR+P') OR (Artikel."Item Tracking Code" = 'SN-ODER-PK')))
                               OR (((Artikel."Item Tracking Code" = 'PRODUCTKEY') OR (Artikel."Item Tracking Code" = 'SERIENNR+P')) AND ((TempLizenzTab."Product Key" = '') OR (TempLizenzTab."Seriennr." = ''))) THEN BEGIN
                                 //Damit alte Pos. ohne Seriennr. ohne Meldung durchgehen
                                 PruefeSystemPos.RESET;
                                 PruefeSystemPos.SETRANGE(Art,PruefeSystemPos.Art::System);
                                 PruefeSystemPos.SETRANGE("Auftragsnr.",TempLizenzTab."Urspr. Auftragsnr.");
                                 PruefeSystemPos.SETRANGE("Auftragszeilennr.",TempLizenzTab."Urspr. Auftragszeilennr.");
                                 PruefeSystemPos.SETRANGE("Nr.",TempLizenzTab."Nr.");
                                 PruefeSystemPos.SETRANGE("Belegzeilennr.",TempLizenzTab."Belegzeilennr.");
                                 IF NOT PruefeSystemPos.FINDFIRST THEN
                                   IF CONFIRM(Text001,FALSE,FIELDCAPTION("Product Key"),FIELDCAPTION("Seriennr.")) THEN
                                     TempLizenzTab.DELETEALL
                                   ELSE
                                     ERROR('');
                               END;
                             END;
                           UNTIL TempLizenzTab.NEXT = 0;
                       END;

                       IF laufzeit_abweichungen_anzeigen THEN
                         IF CheckRuntimeConsistensy(Rec) THEN
                           MESSAGE(Text005);
                     END;

    ActionList=ACTIONS
    {
      { 1900000000;  ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1       ;1   ;ActionGroup;
                      CaptionML=[DEU=Funktionen;
                                 ENU=General] }
      { 1140022 ;2   ;Action    ;
                      Name=AlleVormerken;
                      CaptionML=DEU=Alle Vormerken;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=SelectEntries;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage.SAVERECORD;
                                 IF AlleTempSeriennrVormerken(Rec) = TRUE THEN BEGIN
                                   CurrPage.UPDATE(TRUE);
                                 END;
                               END;
                                }
      { 1000000004;2 ;Action    ;
                      Name=LaufzeitenPruefen;
                      CaptionML=DEU=Laufzeiten prfen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage.SAVERECORD;
                                 berechne_laufzeiten := TRUE;
                                 entry_cache := '';
                                 SetNewServicesDates(Rec);
                                 IF CheckRuntimeConsistensy(Rec) THEN BEGIN
                                   MESSAGE(Text005);
                                   laufzeit_abweichungen_anzeigen := FALSE;
                                 END;

                                 CurrPage.UPDATE;
                               END;
                                }
      { 1000000003;2 ;Action    ;
                      Name=AutoFillTracking;
                      CaptionML=DEU=Automatisch Auffllen;
                      Promoted=Yes;
                      Image=AutofillQtyToHandle;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage.SAVERECORD;
                                 IF AutoFillTempSystemPos(Rec) = FALSE THEN MESSAGE(Text014,FIELDCAPTION("Seriennr."),FIELDCAPTION("Product Key"));
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000;0;Container ;
                ContainerType=ContentArea }

    { 1900001;1;Group     ;
                GroupType=Repeater }

    { 1140001;2;Field     ;
                SourceExpr="Nr.";
                Editable=FALSE }

    { 1140003;2;Field     ;
                SourceExpr="Belegzeilennr.";
                Editable=FALSE }

    { 1000000001;2;Field  ;
                SourceExpr="Artikelnr." }

    { 1140005;2;Field     ;
                SourceExpr="Seriennr.";
                OnValidate=BEGIN
                             IF Fremderwerb = FALSE THEN BEGIN
                               IF Reklamiert AND Ersatzverfahren THEN BEGIN
                                 TempLizenzTab.RESET;
                                 TempLizenzTab.SETRANGE("Lfd. Nr.","Ersatz fr Lfd. Nr.");
                                 IF (TempLizenzTab.FINDFIRST) AND ("Seriennr." = TempLizenzTab."Seriennr.") THEN BEGIN END
                                   ELSE
                                     ERROR(Text000,FIELDCAPTION("Seriennr."));
                               END ELSE
                                 ERROR(Text000,FIELDCAPTION("Seriennr."));
                             END;

                             IF (Fremderwerb = TRUE) AND (Verl„ngerung = TRUE) THEN
                               ERROR(Text000,FIELDCAPTION("Seriennr."));
                           END;
                            }

    { 1000000000;2;Field  ;
                SourceExpr="Product Key";
                OnValidate=BEGIN
                             IF ("Product Key" <> '') THEN BEGIN
                               Artikel.GET("Artikelnr.");
                               IF (((Artikel."Item Tracking Code" = 'SN-ODER-PK') AND ("Product Key" <> '')) OR ((Artikel."Item Tracking Code" = 'PRODUCTKEY') AND ("Product Key" <> '')))
                               AND ("Seriennr." = '') AND (Menge <> 0) THEN BEGIN
                                 sn_code := '';
                                 EVALUATE(no_series,'TOPAS-VSN');
                                 NoSeriesMgt.InitSeries(no_series,no_series,TODAY,sn_code,no_series);
                                 VALIDATE("Seriennr.",sn_code);
                               END;
                             END;
                           END;
                            }

    { 1140007;2;Field     ;
                DecimalPlaces=0:0;
                SourceExpr=Menge;
                Editable=FALSE }

    { 1140012;2;Field     ;
                SourceExpr=Vormerkung;
                OnValidate=VAR
                             TempRec@1140001 : Record 50024;
                           BEGIN
                             //Unzugeordnete Systempositionen werden dem Basissystem automatisch zugeordnet
                             IF (Vormerkung = TRUE) AND (Art = Art::Tempor„r) THEN BEGIN
                               PruefeSystemPos.RESET;
                               PruefeSystemPos.SETRANGE(Art,PruefeSystemPos.Art::System);
                               PruefeSystemPos.SETRANGE("Artikelnr.","Artikelnr.");
                               PruefeSystemPos.SETRANGE("Seriennr.","Seriennr.");
                               PruefeSystemPos.SETRANGE("Nr.","Nr.");
                               PruefeSystemPos.SETRANGE("Belegzeilennr.","Belegzeilennr.");
                               PruefeSystemPos.SETRANGE(Inaktiv,FALSE);
                               PruefeSystemPos.SETRANGE("Wartungsvertragsnr.",'');
                               IF PruefeSystemPos.FINDLAST THEN BEGIN
                                 ServiceZuordnung.RESET;
                                 ServiceZuordnung.SETRANGE("Nr.","Auftragsnr.");
                                 ServiceZuordnung.SETRANGE("Zeilennr.","Auftragszeilennr.");
                                 ServiceZuordnung.SETRANGE("Belegnr.","Nr.");
                                 ServiceZuordnung.SETRANGE("Belegzeilennr.","Belegzeilennr.");
                                 ServiceZuordnung.SETRANGE("Ger„te Artikelnr.","Artikelnr.");
                                 IF (ServiceZuordnung.FINDFIRST) AND (ServiceZuordnung."Wartungsvertragsnr." <> '') THEN BEGIN
                                   PruefeSystemPos."Zum Verschieben markieren" := TRUE;
                                   PruefeSystemPos.MODIFY(TRUE);
                                   IF PruefeSystemPos.SystemPos_verschieben('',ServiceZuordnung."Wartungsvertragsnr.") = FALSE THEN
                                     Vormerkung := FALSE;
                                 END ELSE BEGIN
                                   ServiceZuordnung.RESET;
                                   ServiceZuordnung.SETRANGE("Nr.","Auftragsnr.");
                                   ServiceZuordnung.SETRANGE("Zeilennr.","Auftragszeilennr.");
                                   ServiceZuordnung.SETRANGE(Basisger„t,TRUE);
                                   IF ServiceZuordnung.FINDFIRST THEN BEGIN
                                     TempRec.RESET;
                                     TempRec.SETRANGE(Art,TempRec.Art::Tempor„r);
                                     TempRec.SETRANGE("Artikelnr.",ServiceZuordnung."Ger„te Artikelnr.");
                                     TempRec.SETRANGE("Auftragsnr.",ServiceZuordnung."Nr.");
                                     TempRec.SETRANGE("Auftragszeilennr.",ServiceZuordnung."Zeilennr.");
                                     IF TempRec.FINDFIRST THEN BEGIN
                                       PrfeNeuenWV.RESET;
                                       PrfeNeuenWV.SETRANGE(Art,PruefeSystemPos.Art::System);
                                       PrfeNeuenWV.SETRANGE("Artikelnr.",TempRec."Artikelnr.");
                                       PrfeNeuenWV.SETRANGE("Seriennr.",TempRec."Seriennr.");
                                       PrfeNeuenWV.SETRANGE("Nr.",ServiceZuordnung."Belegnr.");
                                       PrfeNeuenWV.SETRANGE("Belegzeilennr.",ServiceZuordnung."Belegzeilennr.");
                                       PrfeNeuenWV.SETRANGE(Inaktiv,FALSE);
                                       IF PrfeNeuenWV.FINDLAST THEN BEGIN
                                         PruefeSystemPos."Zum Verschieben markieren" := TRUE;
                                         PruefeSystemPos.MODIFY(TRUE);
                                         IF PruefeSystemPos.SystemPos_verschieben('',PrfeNeuenWV."Wartungsvertragsnr.") = FALSE THEN
                                           Vormerkung := FALSE;
                                       END;
                                     END;
                                   END;
                                 END;
                               END;
                             END;

                             AktualisiereWartungsvertragsnr;
                             CheckCrossCalculationsValid;
                           END;
                            }

    { 1140020;2;Field     ;
                CaptionML=DEU=Wartungsvertragsnr.;
                ToolTipML=DEU=Die Artikelverfolgung wurde in folgenden Wartungsvertr„gen verbucht:;
                SourceExpr=wartungsnr;
                Editable=FALSE;
                OnLookup=BEGIN
                           IF wartungsnr = '' THEN
                             EXIT;

                           Wartungsvertrag.SETFILTER("Wartungsvertragsnr.",wartungsnr);
                           PAGE.RUN(PAGE::"Wartungsvertrag Karte",Wartungsvertrag);
                         END;
                          }

    { 1000000005;2;Field  ;
                CaptionML=DEU=Laufzeit Start erwartet;
                SourceExpr=Lizenzdatum;
                StyleExpr=laufzeit_start_style }

    { 1000000006;2;Field  ;
                CaptionML=DEU=Laufzeit Ende erwartet;
                SourceExpr="Ablaufdatum Serviceleistung";
                StyleExpr=laufzeit_ende_style }

    { 1140014;2;Field     ;
                CaptionML=DEU=Wartung vorhanden;
                ToolTipML=DEU=Gibt an, dass die Position mit dieser Seriennr. bereits in Wartung ist. Wenn dieser Datensatz gebucht wird, dient dieser als Verl„ngerung des bestehenden Satzes.;
                SourceExpr=Verl„ngerung;
                Editable=FALSE }

    { 1140016;2;Field     ;
                SourceExpr=Reklamiert;
                Editable=FALSE }

    { 1140018;2;Field     ;
                SourceExpr=Ersatzverfahren;
                Editable=FALSE }

  }
  CODE
  {
    VAR
      TempLizenzTab@1140002 : Record 50024;
      PruefeServicevorhanden@1140009 : Record 50024;
      PruefeSystemPos@1000000005 : Record 50024;
      AktuelleServiceZuordnung@1000000001 : Record 50027;
      ServiceZuordnung@1140012 : Record 50027;
      PrfeNeuenWV@1140011 : Record 50024;
      Wartungsvertrag@1140008 : Record 50011;
      Artikel@1140001 : Record 27;
      Text000@1140003 : TextConst 'DEU=Sie k”nnen %1 nicht mehr „ndern.';
      Text001@1140004 : TextConst 'DEU=Sie haben noch nicht alle Felder ausgefllt.\Wenn Sie z.B. das Feld %1 ausfllen, dann muss auch immer das Feld %2 mit ausgefllt werden.\Wenn Sie mit Ja best„tigen, werden vorhandene Datens„tze gel”scht.\M”chten Sie das Fenster wirklich schlieáen?';
      TOPASServiceModul@1000000013 : Codeunit 50008;
      NoSeriesMgt@1000000022 : Codeunit 396;
      wartungsnr@1140007 : Code[120];
      Text002@1000000002 : TextConst 'DEU=Es konnte im Beleg eine zu der %1 passende Re-Instatement-Fee Kalkulation gefunden werden. Soll der Vertrag ab einem bestimmten Datum loslaufen?\Dann setzen Sie bitte das H„kchen im Feld %2.';
      Text003@1000000000 : TextConst 'DEU=In diesem Beleg konnte eine weitere Kalkulation in Zeile %1 mit šbereinstimmung der %2 und Serviceleistung gefunden werden. Sie wrden damit eine Service Doppelbuchung fr %2 %3 ausl”sen.\M”chten Sie den Vorgang dennoch fortsetzen?';
      laufzeit_start_text@1000000003 : Text[30];
      laufzeit_start_style@1000000006 : Text[30];
      laufzeit_ende_text@1000000004 : Text[30];
      laufzeit_ende_style@1000000007 : Text[30];
      Text004@1000000008 : TextConst 'DEU=Bitte warten, die erwarteten Laufzeiten\werden berechnet...\Fortschritt:@1@@@@@@@@';
      berechne_laufzeiten@1000000009 : Boolean;
      entry_cache@1000000010 : Text;
      laufzeit_abweichungen@1000000011 : Boolean;
      Text005@1000000012 : TextConst 'DEU=Es wurden verschiedene Laufzeiten festgestellt, bitte korrigieren Sie ggf. die Kalkulation.';
      laufzeit_abweichungen_anzeigen@1000000014 : Boolean;
      Text010@1000000019 : TextConst 'DEU=Der Artikel ist so eingestellt, dass Sie eine Auswahl des Feldes treffen mssen, dass ausgefllt werden soll. Das andere Feld ist dann zur Eingabe gesperrt und wird automatisch mit einem Pseudowert belegt.\\Welches Feld m”chten Sie nun bearbeiten?';
      Text011@1000000018 : TextConst 'DEU=%1,%2';
      Text012@1000000017 : TextConst 'DEU=Sie haben die Auswahl abgebrochen, der Standardwert wird auf %1 festgelegt.';
      Text013@1000000016 : TextConst 'DEU=M”chten Sie die Restmenge von %1 Stck auffllen lassen?';
      Text014@1000000015 : TextConst 'DEU=Der Vorgang konnte nicht durchgefhrt werden. Es muss mindestens eine Zeile mit einer gltige(n) %1 bzw. %2  mit _LIC vorbelegt und die Restmenge darf nicht 0 sein.';
      no_series@1000000021 : Code[10];
      sn_code@1000000020 : Code[20];

    PROCEDURE AktualisiereWartungsvertragsnr@1140000();
    VAR
      ServiceBelegZuordnung@1000000000 : Record 50027;
    BEGIN
      wartungsnr := '';
      PruefeServicevorhanden.RESET;
      PruefeServicevorhanden.SETFILTER(Art,'%1|%2',PruefeServicevorhanden.Art::Service,PruefeServicevorhanden.Art::System);
      IF "Seriennr." = '' THEN BEGIN
        PruefeServicevorhanden.SETRANGE("Nr.","Nr.");
        PruefeServicevorhanden.SETRANGE("Belegzeilennr.","Belegzeilennr.");
      END;
      PruefeServicevorhanden.SETRANGE("Artikelnr.","Artikelnr.");
      PruefeServicevorhanden.SETRANGE("Seriennr.","Seriennr.");
      PruefeServicevorhanden.SETRANGE(Inaktiv,FALSE);
      IF PruefeServicevorhanden.FINDFIRST THEN
        REPEAT
          IF PruefeServicevorhanden."Wartungsvertragsnr." <> '' THEN BEGIN
            IF wartungsnr = '' THEN wartungsnr := PruefeServicevorhanden."Wartungsvertragsnr.";
            IF (STRPOS(wartungsnr,PruefeServicevorhanden."Wartungsvertragsnr.") = 0) AND
            (STRLEN(wartungsnr + '|' + PruefeServicevorhanden."Wartungsvertragsnr.") <= 120) THEN
              wartungsnr := wartungsnr + '|' + PruefeServicevorhanden."Wartungsvertragsnr.";
          END;
          IF (PruefeServicevorhanden.Art = PruefeServicevorhanden.Art::System) AND (PruefeServicevorhanden."Wartungsvertragsnr." = '') THEN
            wartungsnr += '"LEER"';
        UNTIL PruefeServicevorhanden.NEXT = 0
      ELSE
        wartungsnr := '';
    END;

    LOCAL PROCEDURE SetNewServicesDates@1000000001(VAR FromTempService@1000000003 : Record 50024);
    VAR
      CheckTempService@1000000000 : Record 50024;
      Beleg@1000000006 : Record 36;
      Item@1000000005 : Record 27;
      Buchungsdatum@1000000004 : Date;
      laufzeit_start@1000000002 : Date;
      laufzeit_ende@1000000001 : Date;
    BEGIN
      IF (FromTempService.HASFILTER) THEN BEGIN
        CheckTempService.COPY(FromTempService);
        CheckTempService.FINDSET;
        IF CheckTempService.COUNT >= 100 THEN
          EXIT;
        REPEAT
          IF (berechne_laufzeiten) THEN BEGIN
            laufzeit_start_text := '';
            laufzeit_ende_text := '';
            Buchungsdatum := 0D;

            Beleg.RESET;
            Beleg.SETRANGE("No.",CheckTempService."Auftragsnr.");
            IF Beleg.FINDFIRST THEN
              Buchungsdatum := Beleg."Posting Date";

            ServiceZuordnung.RESET;
            ServiceZuordnung.SETRANGE(Art,ServiceZuordnung.Art::"SUP-AU");
            ServiceZuordnung.SETRANGE("Nr.",CheckTempService."Auftragsnr.");
            ServiceZuordnung.SETRANGE("Zeilennr.",CheckTempService."Auftragszeilennr.");
            ServiceZuordnung.SETRANGE("Belegnr.",CheckTempService."Nr.");
            ServiceZuordnung.SETRANGE("Belegzeilennr.",CheckTempService."Belegzeilennr.");
            IF ServiceZuordnung.FINDFIRST THEN BEGIN
              WITH ServiceZuordnung DO BEGIN
                Item.GET(ServiceZuordnung."SUP Artikelnr.");
                IF STRPOS(Item.Artikelgruppe,'FEE') <> 0 THEN EXIT;
                laufzeit_start := TOPASServiceModul.GetNewServiceDates(ServiceZuordnung,"Belegnr.","Belegzeilennr.",CheckTempService."Seriennr.",CheckTempService."Product Key",Laufzeit,0,"Wartungsvertragsnr.",Buchungsdatum,0D);
                laufzeit_ende := TOPASServiceModul.GetNewServiceDates(ServiceZuordnung,"Belegnr.","Belegzeilennr.",CheckTempService."Seriennr.",CheckTempService."Product Key",Laufzeit,1,"Wartungsvertragsnr.",Buchungsdatum,laufzeit_start);
                IF laufzeit_start <> 0D THEN
                  laufzeit_start := LizenzdatumAngleichen(laufzeit_start,laufzeit_ende,Laufzeit);
                CheckTempService.Lizenzdatum := laufzeit_start;
                CheckTempService."Ablaufdatum Serviceleistung" := laufzeit_ende;
                CheckTempService.MODIFY;
              END;
            END;
            laufzeit_start_text := FORMAT(laufzeit_start);
            laufzeit_ende_text := FORMAT(laufzeit_ende);
            IF (laufzeit_start > laufzeit_ende) OR (laufzeit_start < WORKDATE) THEN
              laufzeit_start_style := 'Unfavorable'
            ELSE
              laufzeit_start_style := 'None';
            IF laufzeit_ende < WORKDATE THEN
              laufzeit_ende_style := 'Unfavorable'
            ELSE
              laufzeit_ende_style := 'None';
          END;
        UNTIL CheckTempService.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CheckCrossCalculationsValid@1000000000();
    VAR
      coexistent@1000000000 : Integer;
    BEGIN
      IF Vormerkung = FALSE THEN EXIT;

      coexistent := 0;
      AktuelleServiceZuordnung.RESET;
      AktuelleServiceZuordnung.SETRANGE("Nr.","Auftragsnr.");
      AktuelleServiceZuordnung.SETRANGE("Zeilennr.","Auftragszeilennr.");
      AktuelleServiceZuordnung.SETRANGE("Belegnr.","Nr.");
      AktuelleServiceZuordnung.SETRANGE("Belegzeilennr.","Belegzeilennr.");
      IF AktuelleServiceZuordnung.FINDFIRST THEN BEGIN
        TempLizenzTab.RESET;
        TempLizenzTab.SETRANGE(Art,TempLizenzTab.Art::Tempor„r);
        TempLizenzTab.SETRANGE("Auftragsnr.","Auftragsnr.");
        TempLizenzTab.SETRANGE("Nr.","Nr.");
        TempLizenzTab.SETRANGE("Belegzeilennr.","Belegzeilennr.");
        TempLizenzTab.SETRANGE("Artikelnr.","Artikelnr.");
        TempLizenzTab.SETRANGE("Seriennr.","Seriennr.");
        TempLizenzTab.SETRANGE(Vormerkung,TRUE);
        TempLizenzTab.SETFILTER("Auftragszeilennr.",'<>%1',"Auftragszeilennr.");
        IF TempLizenzTab.FINDSET THEN BEGIN
          REPEAT
            ServiceZuordnung.RESET;
            ServiceZuordnung.SETRANGE("Nr.",TempLizenzTab."Auftragsnr.");
            ServiceZuordnung.SETRANGE("Zeilennr.",TempLizenzTab."Auftragszeilennr.");
            ServiceZuordnung.SETRANGE("Belegnr.",TempLizenzTab."Nr.");
            ServiceZuordnung.SETRANGE("Belegzeilennr.",TempLizenzTab."Belegzeilennr.");
            ServiceZuordnung.SETRANGE("Ger„te Artikelnr.",TempLizenzTab."Artikelnr.");
            IF ServiceZuordnung.FINDFIRST THEN BEGIN
              IF (ServiceZuordnung."SUP Artikelnr." = AktuelleServiceZuordnung."SUP Artikelnr.") AND (Vormerkung = TRUE) THEN
                coexistent += 1;
              Artikel.GET(ServiceZuordnung."SUP Artikelnr.");
              IF (STRPOS(Artikel.Artikelgruppe,'FEE') <> 0) AND (AktuelleServiceZuordnung."Beachte Startdatum" = FALSE) AND (Vormerkung = TRUE) THEN
                MESSAGE(Text002,FIELDCAPTION("Seriennr."),ServiceZuordnung.FIELDCAPTION("Beachte Startdatum"));
            END;
            IF coexistent > 0 THEN BEGIN
              IF NOT CONFIRM(Text003,FALSE,TempLizenzTab."Auftragszeilennr.",FIELDCAPTION("Seriennr."),"Seriennr.") THEN
                ERROR('')
              ELSE
                EXIT;
            END;
          UNTIL TempLizenzTab.NEXT = 0;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckRuntimeConsistensy@1000000002(VAR FromTempService@1000000000 : Record 50024) : Boolean;
    VAR
      CheckTempService@1000000001 : Record 50024;
      Beleg@1000000005 : Record 36;
      Buchungsdatum@1000000004 : Date;
      laufzeit_start_cache@1000000003 : Text;
      laufzeit_ende_cache@1000000002 : Text;
    BEGIN
      laufzeit_abweichungen := FALSE;
      IF (FromTempService.HASFILTER) THEN BEGIN
        laufzeit_start_cache := '';
        laufzeit_ende_cache := '';
        CheckTempService.COPY(FromTempService);
        CheckTempService.SETRANGE(Vormerkung,TRUE);
        IF CheckTempService.FINDSET THEN
          REPEAT
            IF (laufzeit_start_cache <> '') AND (STRPOS(laufzeit_start_cache,FORMAT(CheckTempService.Lizenzdatum))= 0) THEN
              laufzeit_abweichungen := TRUE;
            IF (laufzeit_ende_cache <> '') AND (STRPOS(laufzeit_ende_cache,FORMAT(CheckTempService."Ablaufdatum Serviceleistung"))= 0) THEN
              laufzeit_abweichungen := TRUE;
            laufzeit_start_cache += FORMAT(CheckTempService.Lizenzdatum) + '|';
            laufzeit_ende_cache += FORMAT(CheckTempService."Ablaufdatum Serviceleistung") + '|';
          UNTIL CheckTempService.NEXT = 0;
      END;
      EXIT(laufzeit_abweichungen);
    END;

    LOCAL PROCEDURE AutoFillTempSystemPos@1000000004(TempSystemPos@1000000000 : Record 50024) : Boolean;
    VAR
      CopyTempSystemPos@1000000001 : Record 50024;
      CheckTempSystemPos@1000000010 : Record 50024;
      Item@1000000002 : Record 27;
      ProductKeyOnly@1000000004 : Boolean;
      SerialNoOnly@1000000007 : Boolean;
      selection@1000000008 : Integer;
      UndefinedQtyArray@1000000009 : Integer;
      start_serialno@1000000006 : Code[20];
      start_pk@1000000012 : Code[40];
      highest_index@1000000005 : Integer;
      actual_index@1000000011 : Integer;
      i@1000000003 : Integer;
    BEGIN
      TempSystemPos.TESTFIELD("Artikelnr.");
      TempSystemPos.TESTFIELD(Fremderwerb);
      Item.GET(TempSystemPos."Artikelnr.");
      SerialNoOnly := FALSE;
      ProductKeyOnly := FALSE;
      UndefinedQtyArray := 0;
      highest_index := 0;
      IF Item."Item Tracking Code" = 'SN-ODER-PK' THEN BEGIN
        selection := STRMENU(STRSUBSTNO(Text011,FIELDCAPTION("Seriennr."),FIELDCAPTION("Product Key")),3,Text010);
        IF selection = 0 THEN BEGIN
          MESSAGE(Text012,FIELDCAPTION("Seriennr."));
          SerialNoOnly := TRUE;
        END;
        IF selection = 1 THEN
          SerialNoOnly := TRUE;
        IF selection = 2 THEN
          ProductKeyOnly := TRUE;
      END;

      IF Item."Item Tracking Code" = 'SERIENNR' THEN
        SerialNoOnly := TRUE;

      IF Item."Item Tracking Code" = 'PRODUCTKEY' THEN
        ProductKeyOnly := TRUE;

      CheckTempSystemPos.RESET;
      CheckTempSystemPos.SETRANGE(Art,CheckTempSystemPos.Art::Tempor„r);
      CheckTempSystemPos.SETRANGE("Auftragsnr.",TempSystemPos."Auftragsnr.");
      CheckTempSystemPos.SETRANGE("Auftragszeilennr.",TempSystemPos."Auftragszeilennr.");
      CheckTempSystemPos.SETRANGE("Nr.",TempSystemPos."Nr.");
      CheckTempSystemPos.SETRANGE("Belegzeilennr.",TempSystemPos."Belegzeilennr.");
      CheckTempSystemPos.SETRANGE("Artikelnr.",TempSystemPos."Artikelnr.");
      IF SerialNoOnly THEN
        CheckTempSystemPos.SETRANGE("Seriennr.",'');
      IF ProductKeyOnly THEN
        CheckTempSystemPos.SETRANGE("Product Key",'');
      IF CheckTempSystemPos.FINDFIRST THEN BEGIN
        UndefinedQtyArray := CheckTempSystemPos.COUNT;
        IF (Item.Serviceklassifizierung = 'SOFTWARE') AND ((SerialNoOnly) OR (ProductKeyOnly)) THEN BEGIN
          IF (TempSystemPos.COUNT > 0) AND (UndefinedQtyArray > 0)
          AND (((TempSystemPos."Product Key" <> '') AND (ProductKeyOnly) AND (STRPOS((TempSystemPos."Product Key"),'LIC') <> 0))
          OR ((TempSystemPos."Seriennr." <> '') AND (SerialNoOnly) AND (STRPOS((TempSystemPos."Seriennr."),'LIC') <> 0))) THEN BEGIN
            IF CONFIRM(Text013,TRUE,UndefinedQtyArray) = TRUE THEN BEGIN
              REPEAT
                IF ProductKeyOnly THEN BEGIN
                  IF highest_index = 0 THEN BEGIN
                    CopyTempSystemPos.COPYFILTERS(CheckTempSystemPos);
                    CopyTempSystemPos.SETFILTER("Product Key",'<>%1','');
                    CopyTempSystemPos.FINDFIRST;
                    start_pk :=  COPYSTR(CopyTempSystemPos."Product Key",1,STRPOS(CopyTempSystemPos."Product Key",'_LIC') +3);
                    REPEAT
                      IF STRLEN(COPYSTR(CopyTempSystemPos."Product Key",STRPOS(CopyTempSystemPos."Product Key", '_LIC') +4)) > 0 THEN
                        EVALUATE(actual_index , COPYSTR(CopyTempSystemPos."Product Key",STRPOS(CopyTempSystemPos."Product Key", '_LIC') +4));
                      IF actual_index >= highest_index THEN
                        highest_index := actual_index;
                    UNTIL CopyTempSystemPos.NEXT = 0;
                    highest_index += 1;
                  END;
                  CheckTempSystemPos.VALIDATE("Product Key",start_pk + FORMAT(highest_index));
                  CheckTempSystemPos.MODIFY;
                  highest_index += 1;
                END;
                IF SerialNoOnly THEN BEGIN
                  IF highest_index = 0 THEN BEGIN
                    CopyTempSystemPos.COPYFILTERS(CheckTempSystemPos);
                    CopyTempSystemPos.SETFILTER("Seriennr.",'<>%1','');
                    CopyTempSystemPos.FINDFIRST;
                    start_serialno :=  COPYSTR(CopyTempSystemPos."Seriennr.",1,STRPOS(CopyTempSystemPos."Seriennr.",'_LIC') +3);
                    REPEAT
                      IF STRLEN(COPYSTR(CopyTempSystemPos."Seriennr.",STRPOS(CopyTempSystemPos."Seriennr.", '_LIC') +4)) > 0 THEN
                        EVALUATE(actual_index , COPYSTR(CopyTempSystemPos."Seriennr.",STRPOS(CopyTempSystemPos."Seriennr.", '_LIC') +4));
                      IF actual_index >= highest_index THEN
                        highest_index := actual_index;
                    UNTIL CopyTempSystemPos.NEXT = 0;
                    highest_index += 1;
                  END;
                  CheckTempSystemPos.VALIDATE("Seriennr.",start_serialno + FORMAT(highest_index));
                  CheckTempSystemPos.MODIFY;
                  highest_index += 1;
                END;
              UNTIL CheckTempSystemPos.NEXT = 0;
              CurrPage.UPDATE;
              EXIT(TRUE);
            END;
          END;
        END;
      END;
    END;

    BEGIN
    END.
  }
}

