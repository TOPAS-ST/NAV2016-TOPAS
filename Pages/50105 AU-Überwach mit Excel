OBJECT Page 50105 AU-šberwach mit Excel
{
  OBJECT-PROPERTIES
  {
    Date=04.01.19;
    Time=07:26:59;
    Modified=Yes;
    Version List=TOPAS;
  }
  PROPERTIES
  {
    PromotedActionCategoriesML=[DEU=Neu,Vorgang,Bericht,Funktion;
                                ENU=New,Process,Report,Function];
    ShowFilter=No;
    OnInit=BEGIN
             //  Wenn untere Meldung erscheint, gibt es eine neue Linie, die noch nicht umgesetzt wird.
             //  Siehe kurz vor Ende der Functions 'aktuellen Ab einfgen'
             //tab_ab_bw.RESET;
             //tab_ab_bw.SETFILTER(tab_ab_bw.Linie,'%1..%2','00','99');
             //IF tab_ab_bw.FINDFIRST THEN BEGIN
             //"Linien umsetzen";
             //END;

             tab_ab_bw.RESET;
             tab_ab_bw.SETFILTER(tab_ab_bw.Linie,'%1..%2','00','99');
             IF tab_ab_bw.FINDFIRST THEN
               MESSAGE ('Es gibt Linien mit einer Zahl als Herstellerkurzname! Bitte Uwe ansprechen');

             tab_ab_bw.RESET;
             tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','SYST');
             tab_ab_bw.SETFILTER(tab_ab_bw.Datum,'%1',31122222D);
             tab_ab_bw.SETFILTER(tab_ab_bw.AU_Nr,'%1','AU999999');
             tab_ab_bw.SETFILTER(tab_ab_bw.POS_Nr,'%1',10000);
             IF tab_ab_bw.FINDFIRST THEN BEGIN
               IF tab_ab_bw.Wunschdatum = WORKDATE THEN BEGIN
                 AB_holen_Datum:=tab_ab_bw.Wunschdatum;
                 AE_holen_Datum:=tab_ab_bw.Auftragsdatum;
                 AE_holen_Datum_1:=tab_ab_bw.Auftragsdatum;
               END ELSE BEGIN
             //   tab_ab_bw.Auftragsdatum :=tab_ab_bw.Wunschdatum;
             //   tab_ab_bw.MODIFY;
                 AB_holen_Datum:=tab_ab_bw.Wunschdatum;
                 AE_holen_Datum:=tab_ab_bw.Wunschdatum;
             //   AE_holen_Datum:=tab_ab_bw.Auftragsdatum;
               END;
             END;

             kto_datum := 010199D;

             hinweis[1] := '1.  t„glichen Auftrags- und Bestellbestand sichern';
             hinweis[2] := 'vor Ausfhrung Excel beenden';
             hinweis[3] := 'Speichern ( Name des Files z.B.: AE_2017_06.XLSX)';
             hinweis[4] := 'Speichern nach ...Auftragseingang\Sylke\ xxxxxx.XLSX)';
             hinweis[5] := 'Filenamen eingeben (z.B. BE_2017_06_30  (ohne xlsx))';
             hinweis[6] := 'Filename angeben (z.B. AE_KW10_2017.xlsx)';
             hinweis[7] := 'Auftrag, der vor Auftragseingangskontrolle geliefert werden soll, sichern.';
             hinweis[8] := 'H„kchen setzen, Auftragsnummer eintragen und dann Ausfhren.';
             hinweis[9] := 'Hier nur Ausfllen, wenn AU bereits geliefert und somit archiviert ist.';
             hinweis[10] := 'H„kchen setzen, archivierte Auftragsnummer eintragen und dann Ausfhren.';
             hinweis[11] := 'Geschenke-Auswertungsliste';
             hinweis[12] := '';
           END;

    ActionList=ACTIONS
    {
      { 1900000000;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 1       ;1   ;ActionGroup;
                      CaptionML=DEU=Navigation }
      { 1140008 ;2   ;Action    ;
                      Name=AB bearbeiten;
                      CaptionML=DEU=AB bearbeiten;
                      RunObject=Page 50007;
                      RunPageView=WHERE(Belegart=FILTER(AUšW));
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=OrderList;
                      PromotedCategory=Process }
      { 1140032 ;2   ;Action    ;
                      Name=Alle AE's zeigen;
                      CaptionML=DEU=Alle AE's zeigen;
                      RunObject=Page 50006;
                      RunPageView=SORTING(AU_Nr,POS_Nr,Deb_Nr,Datum,Belegart)
                                  WHERE(Status=FILTER(AE));
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=AllLines;
                      PromotedCategory=Process }
      { 1140051 ;2   ;Action    ;
                      Name=AE bearbeiten;
                      CaptionML=DEU=AE bearbeiten;
                      RunObject=Page 50006;
                      RunPageView=SORTING(AU_Nr,POS_Nr,Deb_Nr,Datum,Belegart)
                                  WHERE(Belegart=FILTER(AETG|GUTG));
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=OrderList;
                      PromotedCategory=Process }
      { 1140052 ;2   ;Action    ;
                      Name=Diff. bearbeiten;
                      CaptionML=DEU=Diff. bearbeiten;
                      RunObject=Page 50006;
                      RunPageView=SORTING(AU_Nr,POS_Nr,Deb_Nr,Datum,Belegart)
                                  WHERE(Belegart=FILTER(AEND));
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=OrderList;
                      PromotedCategory=Process }
      { 1140053 ;2   ;Action    ;
                      Name=AE + Diff bearbeiten;
                      CaptionML=DEU=AE + Diff bearbeiten;
                      RunObject=Page 50006;
                      RunPageView=SORTING(AU_Nr,POS_Nr,Deb_Nr,Datum,Belegart)
                                  WHERE(Belegart=FILTER(AETG|AEND|GUTG));
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=DocumentEdit;
                      PromotedCategory=Process }
      { 1000000016;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1000000015;1 ;ActionGroup;
                      CaptionML=DEU=Funktionen }
      { 1140063 ;2   ;Action    ;
                      Name=AESaldoabstimmen;
                      CaptionML=DEU=AE-Saldo abstimmen;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 AE_mtl.RESET;
                                 AE_mtl.SETFILTER(Belegart,'%1|%2|%3','AETG','GUTG','AEND');
                                 IF AE_mtl.FINDFIRST THEN BEGIN
                                   AE_Saldo_prf := 0;
                                   REPEAT
                                     AE_Saldo_prf := AE_Saldo_prf + ROUND(AE_mtl."Betrag in EUR",0.01);
                                   UNTIL AE_mtl.NEXT = 0;
                                 END;

                                 MESSAGE( 'Summe des Auftrageingangs ist: %1 EUR',AE_Saldo_prf);
                               END;
                                }
      { 1140154 ;2   ;Action    ;
                      Name=Ausfhren;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 tab_ab_bw.RESET;
                                 tab_ab_bw.SETFILTER(Belegart,'%1','SYST');
                                 tab_ab_bw.SETFILTER(Datum,'%1',31122222D);
                                 tab_ab_bw.SETFILTER(AU_Nr,'%1','AU999999');
                                 tab_ab_bw.SETFILTER(POS_Nr,'%1',10000);
                                 IF tab_ab_bw.FINDFIRST THEN BEGIN
                                  IF tab_ab_bw.Wunschdatum = WORKDATE THEN BEGIN
                                    AB_holen_Datum := tab_ab_bw.Wunschdatum;
                                    AE_holen_Datum := tab_ab_bw.Auftragsdatum;
                                  END ELSE BEGIN
                                    tab_ab_bw.Auftragsdatum := tab_ab_bw.Wunschdatum;
                                    tab_ab_bw.MODIFY;
                                    AB_holen_Datum := tab_ab_bw.Wunschdatum;
                                    AE_holen_Datum := tab_ab_bw.Wunschdatum;
                                  END;
                                 END;


                                 tab_ab_bw.RESET;
                                 IF tab_ab_bw.Linie = '00' THEN
                                   MESSAGE ('Es gibt Linien mit einer Zahl als Herstellerkurzname');

                                 // ANFANG šberprfung ob mehrere H„kchen gesetzt sind '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
                                 var_anzahl_h„kchen := 0;
                                 IF (AB_holen = TRUE) THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF (BE_holen = TRUE) THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF (BB_Diff = TRUE) THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF ((AB_holen = TRUE) AND (AE_holen_Datum = 0D)) THEN ERROR('Datum muá eingetragen sein! Programm abgebrochen');
                                 IF (AB_holen_rcksetzen = TRUE) THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF (Diff_ermitteln = TRUE) THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF (t„gl_AE = TRUE) THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF ((t„gl_AE = TRUE) AND (AE_holen_Datum_1 = 0D)) THEN ERROR('Datum muá eingetragen sein! Programm abgebrochen');
                                 IF (AE_verteilen = TRUE) THEN var_anzahl_h„kchen :=var_anzahl_h„kchen + 1;
                                 IF (AE_Verteilen_test = TRUE) THEN var_anzahl_h„kchen :=var_anzahl_h„kchen + 1;
                                 IF (AE_Verteilen_mtl = TRUE) THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF (AE_Verteilen_mtl_test = TRUE) THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF (AE_Verteilen_xx = TRUE) THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF tglAE = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF AU_sichern = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF AU_Arch_sichern = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF kto_salden = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF v_vertrieb1 = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF Lager_ausf2 = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF AE_t„gl = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF v_deb_prf = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF v_idprove = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF t„gl_AE_Saldo = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF v_n2 = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF v_vertrieb4 = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF v_abstimm_tab_belege = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF v_post_geschenk_adr_liste = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF v_geschenk_adr_liste_bersicht = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF v_kreditprfen = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF v_Nur_Diff_AB_ausgeben = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF v_W„_Abstimmung = TRUE THEN var_anzahl_h„kchen := var_anzahl_h„kchen + 1;
                                 IF var_anzahl_h„kchen > 1 THEN
                                   ERROR('Es wurden mehrere H„kchen gesetzt. Report abgebrochen!');

                                 IF var_anzahl_h„kchen = 0 THEN
                                   MESSAGE('Es wurde kein H„kchen gesetzt. Es konnte somit keine Funktion ausgefhrt werden!');

                                 // ENDE šberprfung ob mehrere H„kchen gesetzt sind             '''''''''''''''''''''''''''''''''''''''''''''''''''''''

                                 //25.08.2011-ST šberprft das AE holen Datum, darf nicht Tagesdatum sein, denn er soll ja den Vortag holen
                                 // und das Datum auch mit dem Vortag z.B. belegen, sonst kommt es sp„testens n„chsten Tag zur Fehlermeldung
                                 // wenn dann das Vortagsdatum geholt und eingetragen werden soll

                                 IF AE_holen_Datum = WORKDATE THEN
                                   ERROR('Das AE Datum darf nicht dem Tagesdatum entsprechen. Geben Sie bitte den Vortag ein');
                                 IF AE_holen_Datum = (010199D)THEN
                                   ERROR('Das AE Datum darf nicht 01.01.99 sein. Geben Sie bitte den Vortag ein');

                                 // ANFANG Aufruf der Funktionen *****************************************************************

                                 IF AB_holen = TRUE THEN "aktuellen AB einfgen";
                                 IF BE_holen = TRUE THEN "aktuellen BB einfgen";
                                 IF BB_Diff = TRUE THEN "BB Diff ermitteln";
                                 IF AB_holen_rcksetzen = TRUE THEN "AB einfgen rcksetzen";
                                 IF Diff_ermitteln = TRUE THEN Differenzen_ermitteln_Neu;
                                 IF t„gl_AE = TRUE THEN "t„glichen AE einfgen";
                                 IF AE_verteilen = TRUE THEN AE_Verteilen_Filter_Abfrage;
                                 IF AE_Verteilen_test = TRUE THEN AE_Verteilen_Filter_Abfrage;
                                 IF AE_Verteilen_mtl = TRUE THEN AE_Verteilen_Filter_Abfrage;
                                 IF AE_Verteilen_mtl_test = TRUE THEN AE_Verteilen_Filter_Abfrage;
                                 IF AE_Verteilen_xx = TRUE THEN AE_Verteilung_xx;
                                 IF tglAE = TRUE THEN "tgl AE in mtl AE bernehmen";
                                 IF AU_sichern = TRUE THEN Auftrag_sichern;
                                 IF AU_Arch_sichern = TRUE THEN Auftrag_Arch_sichern;
                                 IF kto_salden = TRUE THEN "Konto Salden holen";
                                 IF AE_t„gl = TRUE THEN "AE Salden t„gl gesamt";
                                 IF v_vertrieb1 = TRUE THEN AE_Vertrieb1;
                                 IF v_vertrieb4 = TRUE THEN AE_Vertrieb4;
                                 IF v_deb_prf = TRUE THEN Debitor_berprfen;
                                 IF v_idprove = TRUE THEN ID_Prove;
                                 IF t„gl_AE_Saldo = TRUE THEN t„gl_AE_Saldo_abstimmen;
                                 //IF v_n2 = TRUE THEN N2_berprfen;
                                 IF v_abstimm_tab_belege = TRUE THEN Abstimm_tab_belege;
                                 IF v_post_geschenk_adr_liste = TRUE THEN geschenk_adr_liste;
                                 IF v_geschenk_adr_liste_bersicht = TRUE THEN Geschenkliste_šbersicht;  //geschenk_adr_liste_bersicht;
                                 IF v_kreditprfen = TRUE THEN Kredtilimit_prfen;
                                 IF v_Nur_Diff_AB_ausgeben = TRUE THEN Nur_Diff_AB_ausgeben;
                                 IF v_W„_Abstimmung = TRUE THEN WŽ_Abstimmung;

                                 //  ENDE Aufruf der Funktionen  **********************************************************************
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000;0;Container ;
                ContainerType=ContentArea }

    { 1000000003;1;Group  ;
                CaptionML=DEU=" Allgemein";
                GroupType=Group }

    { 1000000004;2;Group  ;
                GroupType=Group }

    { 1000000005;3;Field  ;
                SourceExpr=hinweis[1];
                Enabled=FALSE;
                Editable=FALSE;
                Style=Unfavorable;
                StyleExpr=TRUE }

    { 1140007;3;Field     ;
                Name=AB_holen_Datum;
                CaptionML=DEU=Stand;
                SourceExpr=AB_holen_Datum;
                Editable=FALSE }

    { 1140003;3;Field     ;
                Name=AE_holen_Datum;
                CaptionML=DEU=Datum des Vortages unter dem die Daten gespeichert werden sollen;
                SourceExpr=AE_holen_Datum }

    { 1140013;3;Field     ;
                Name=;
                CaptionML=DEU=Aktuellen Auftragsbestand holen und in Tabelle speichern;
                ToolTipML=DEU=Kann nur einmal pro Tag ausgefhrt werden, ansonsten greift eine Prfung, ob dies bereits geschehen ist.;
                SourceExpr=AB_holen }

    { 1000000001;2;Group  ;
                CaptionML=DEU=Zurcksetzen;
                GroupType=Group }

    { 1140001;3;Field     ;
                Name=AB_holen_rcksetzen;
                CaptionML=DEU=AB holen - Rcksetzen (nur nach Rcksprache mit Uwe !!!);
                SourceExpr=AB_holen_rcksetzen }

    { 1900002;1;Group     ;
                CaptionML=DEU=" Auftr„ge" }

    { 1000000006;2;Group  ;
                CaptionML=DEU=2.  t„glicher Auftragseingang zum Bearbeiten sichern;
                GroupType=Group }

    { 1140023;3;Field     ;
                Name=t„gl_AE;
                CaptionML=DEU=tgl. AE holen  (Datum des AE eintragen);
                SourceExpr=t„gl_AE }

    { 1140035;3;Field     ;
                Name=AE_holen_Datum_1;
                CaptionML=DEU=AE holen Datum;
                SourceExpr=AE_holen_Datum_1 }

    { 1000000007;2;Group  ;
                CaptionML=DEU=3.  t„gliche Auftragsbestandskontrolle;
                GroupType=Group }

    { 1140025;3;Field     ;
                Name=Diff_ermitteln;
                CaptionML=DEU=Differenzen zwischen altem und neuem AB ermitteln;
                SourceExpr=Diff_ermitteln }

    { 1000000028;3;Field  ;
                Name=neu_drucken;
                CaptionML=DEU=Differenzen neu ausdrucken (Filename + Test);
                SourceExpr=v_Nur_Diff_AB_ausgeben }

    { 1000000008;2;Group  ;
                CaptionML=DEU=4.  t„glicher Auftragseingang sowie Differenzen nach Bearbeitung in Monatsdatei bernehmen;
                GroupType=Group }

    { 1140024;3;Field     ;
                Name=tglAE;
                CaptionML=DEU=T„gl. AE sowie Storno, Erh”hungen und Minderungen in mtl. Datei bernehmen;
                SourceExpr=tglAE }

    { 1000000010;2;Group  ;
                CaptionML=DEU=5.  t„gliche Verteilung nach Excel vornehmen.;
                GroupType=Group }

    { 1140033;3;Field     ;
                Name=AE_verteilen;
                CaptionML=DEU=AE verteilen;
                SourceExpr=AE_verteilen }

    { 1140038;3;Field     ;
                Name=Datum_von;
                CaptionML=DEU=Datum von;
                SourceExpr=Datum_von }

    { 1140047;3;Field     ;
                Name=Datum_bis;
                CaptionML=DEU=Datum bis;
                SourceExpr=Datum_bis }

    { 1000000012;3;Field  ;
                SourceExpr=hinweis[2];
                Enabled=FALSE;
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1000000032;3;Field  ;
                Name=AE_Verteilen TEST;
                CaptionML=DEU=AE_Verteilen TEST;
                SourceExpr=AE_Verteilen_test }

    { 1000000011;2;Group  ;
                CaptionML=DEU=6.  monatliche Verteilung nach Excel vornehmen.;
                GroupType=Group }

    { 1140041;3;Field     ;
                Name=AE_Verteilen_mtl;
                CaptionML=DEU=AE Verteilen mtl.;
                SourceExpr=AE_Verteilen_mtl }

    { 1140043;3;Field     ;
                Name=Datum_von_;
                CaptionML=DEU=Datum von;
                SourceExpr=Datum_von }

    { 1140048;3;Field     ;
                Name=Datum_bis_;
                CaptionML=DEU=Datum bis;
                SourceExpr=Datum_bis }

    { 1140054;3;Field     ;
                Name=Filename;
                CaptionML=DEU=Dateiname;
                SourceExpr=Filename }

    { 1000000009;3;Field  ;
                SourceExpr=hinweis[3];
                Enabled=FALSE;
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1000000031;3;Field  ;
                CaptionML=DEU=AE Verteilen mtl TEST;
                SourceExpr=AE_Verteilen_mtl_test }

    { 1000000013;2;Group  ;
                CaptionML=DEU=7.  einmalige Verteilung nach Excel vornehmen.;
                GroupType=Group }

    { 1140055;3;Field     ;
                Name=AE_Verteilen_xx;
                CaptionML=DEU=AE Verteilen xx;
                SourceExpr=AE_Verteilen_xx }

    { 1140057;3;Field     ;
                Name=Datum_von__;
                CaptionML=DEU=Datum von;
                SourceExpr=Datum_von }

    { 1140059;3;Field     ;
                Name=Datum_bis__;
                CaptionML=DEU=Datum bis;
                SourceExpr=Datum_bis }

    { 1140060;3;Field     ;
                Name=Filename_;
                CaptionML=DEU=Dateiname;
                SourceExpr=Filename }

    { 1000000014;3;Field  ;
                SourceExpr=hinweis[4];
                Enabled=FALSE;
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1900003;1;Group     ;
                CaptionML=DEU=" Bestellungen" }

    { 1140069;2;Field     ;
                Name=BE_holen;
                CaptionML=DEU=aktuellen Bestellbestand holen und in Tabelle speichern;
                SourceExpr=BE_holen }

    { 1140071;2;Field     ;
                Name=AE_holen_Datum_;
                CaptionML=DEU=Datum eingeben;
                SourceExpr=AE_holen_Datum }

    { 1140065;2;Field     ;
                Name=BB_Diff;
                CaptionML=DEU=Bestellbestandsdifferenzen ermitteln;
                SourceExpr=BB_Diff }

    { 1140067;2;Field     ;
                Name=bb_Filename;
                CaptionML=DEU=Dateiname;
                SourceExpr=bb_Filename }

    { 1000000000;2;Field  ;
                SourceExpr=hinweis[5];
                Enabled=FALSE;
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1900004;1;Group     ;
                CaptionML=DEU=" AE Vertrieb";
                GroupType=Group }

    { 1140084;2;Field     ;
                Name=v_vertrieb4;
                CaptionML=DEU=Auftragseingang System von Freitag (Vorwoche) bis Donnerstag   freitags;
                SourceExpr=v_vertrieb4 }

    { 1000000017;2;Field  ;
                SourceExpr='oder' }

    { 1140082;2;Field     ;
                Name=v_vertrieb1;
                CaptionML=DEU=Auftragseingang der letzten Woche fr Vertriebsmeeting   montags;
                SourceExpr=v_vertrieb1 }

    { 1000000018;2;Group  ;
                CaptionML=DEU="  Ab hier immer ausfllen                          Freitag                        Montag";
                GroupType=Group }

    { 1140080;3;Field     ;
                Name=Datum_von___;
                CaptionML=DEU=Auftragseingang holen ab:                             Freitag (Vorwoche)       Montag;
                SourceExpr=Datum_von }

    { 1140073;3;Field     ;
                Name=Datum_bis___;
                CaptionML=DEU=Auftragseingang holen bis:                             Donnerstag                   Donnerstag;
                SourceExpr=Datum_bis }

    { 1140074;3;Field     ;
                Name=AE_holen_Datum__;
                CaptionML=DEU=Tag fr den der AE noch fehlt:                       automatisch                   automatisch;
                SourceExpr=AE_holen_Datum }

    { 1140077;3;Field     ;
                Name=Filename__;
                CaptionML=DEU=Dateiname;
                SourceExpr=Filename }

    { 1000000002;3;Field  ;
                SourceExpr=hinweis[6];
                Enabled=FALSE;
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1900005;1;Group     ;
                CaptionML=DEU=" einzelnen AU sichern" }

    { 1000000019;2;Field  ;
                SourceExpr=hinweis[7];
                Enabled=FALSE;
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1000000020;2;Field  ;
                SourceExpr=hinweis[8];
                Enabled=FALSE;
                Editable=FALSE;
                Style=StandardAccent;
                StyleExpr=TRUE }

    { 1140092;2;Field     ;
                Name=AU_sichern;
                CaptionML=DEU=Auftrag sichern;
                SourceExpr=AU_sichern }

    { 1140093;2;Field     ;
                Name=AU_Nr_sich;
                CaptionML=DEU=AU-Nr zum Sichern eintragen;
                SourceExpr=AU_Nr_sich }

    { 1000000021;2;Field  ;
                SourceExpr=hinweis[9];
                Enabled=FALSE;
                Editable=FALSE;
                Style=StrongAccent;
                StyleExpr=TRUE }

    { 1000000022;2;Field  ;
                SourceExpr=hinweis[10];
                Enabled=FALSE;
                Editable=FALSE;
                Style=StandardAccent;
                StyleExpr=TRUE }

    { 1140096;2;Field     ;
                Name=AU_Arch_sichern;
                CaptionML=DEU=Auftragsarchiv sichern;
                SourceExpr=AU_Arch_sichern }

    { 1140097;2;Field     ;
                Name=AU_Arch_Nr_sich;
                CaptionML=DEU=Arch. AU-Nr zum Sichern eintragen;
                SourceExpr=AU_Arch_Nr_sich }

    { 1900006;1;Group     ;
                CaptionML=DEU=" Kontosalden" }

    { 1000000023;2;Group  ;
                CaptionML=DEU=Kontosalden holen;
                GroupType=Group }

    { 1140100;3;Field     ;
                Name=kto_salden;
                CaptionML=DEU=Kontosalden ausfhren;
                SourceExpr=kto_salden }

    { 1140103;3;Field     ;
                Name=kto_datum;
                CaptionML=DEU=Datum fr Saldo Gesamt. (Nur ausfllen wenn nicht ab heute geholt werden soll);
                SourceExpr=kto_datum }

    { 1140101;3;Field     ;
                Name=saldo_heute_datum;
                CaptionML=DEU=Datum fr den Tagessaldo;
                SourceExpr=saldo_heute_datum }

    { 1000000024;2;Group  ;
                CaptionML=DEU=Weitere Prfungen;
                GroupType=Group }

    { 1140108;3;Field     ;
                Name=v_deb_prf;
                CaptionML=DEU=t„gliche Debitor šberprfung, div. Felder nicht gefllt;
                SourceExpr=v_deb_prf }

    { 1140114;3;Field     ;
                Name=AE_t„gl;
                CaptionML=DEU=šbertragen der t„glichen AE-Salden nach Excel;
                SourceExpr=AE_t„gl }

    { 1140111;3;Field     ;
                Name=v_idprove;
                CaptionML=DEU=Daten fr ID_Prove bereitstellen;
                SourceExpr=v_idprove }

    { 1140118;3;Field     ;
                Name=v_abstimm_tab_belege;
                CaptionML=DEU=Abstimmung Rechnungen aus VKRZ mit Tab Belege;
                SourceExpr=v_abstimm_tab_belege }

    { 1900008;1;Group     ;
                CaptionML=DEU=" Geschenke" }

    { 1000000030;2;Group  ;
                GroupType=Group }

    { 1140152;3;Field     ;
                Name=v_geschenk_adr_liste_bersicht;
                CaptionML=DEU=Geschenke-Liste als šbersicht ausfhren;
                SourceExpr=v_geschenk_adr_liste_bersicht }

    { 1000000027;1;Group  ;
                CaptionML=DEU=Kreditlimitberprfung;
                GroupType=Group }

    { 1000000025;2;Field  ;
                Name=v_kredtprfen;
                CaptionML=DEU=Kreditlimit berprfen;
                SourceExpr=v_kreditprfen }

    { 1000000026;2;Field  ;
                Name=Debitor_Nr;
                CaptionML=DEU=Debitor-Nr fr Kreditprfung eintragen;
                SourceExpr=v_deb_kredit }

    { 1000000029;1;Group  ;
                CaptionML=DEU=W„hrungsabstimmung;
                GroupType=Group }

    { 1000000033;2;Field  ;
                Name=v_W„_Abstimmung;
                CaptionML=DEU=W„hrungsabstimmung ausfhren;
                SourceExpr=v_W„_Abstimmung }

  }
  CODE
  {
    VAR
      Excel@1140164 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      Book@1140163 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      Range@1140162 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      Sheet@1140161 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      wshFile@1000000001 : Automation "{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B} 1.0:{0D43FE01-F093-11CF-8940-00A0C9054228}:'Windows Script Host Object Model'.FileSystemObject";
      j@1140160 : Text[30];
      AB_holen@1140159 : Boolean;
      AB_holen_Datum@1140158 : Date;
      tab_ab@1140157 : Record 37;
      tab_ab_arch@1140156 : Record 5108;
      tab_ab_bw@1140155 : Record 50016;
      prf@1140154 : Record 50016;
      rech@1140153 : Record 113;
      vkrk@1140152 : Record 112;
      best@1140151 : Record 123;
      tab_vkk@1140150 : Record 36;
      tab_vkk_arch@1140149 : Record 5107;
      tab_kurse@1140148 : Record 330;
      TOPAS_API@1000000003 : Codeunit 50001;
      var_AU_Nr@1140147 : Code[20];
      AB_holen_rcksetzen@1140146 : Boolean;
      Diff_ermitteln@1140145 : Boolean;
      t„gl_AE@1140144 : Boolean;
      t„gl_AE_Saldo@1140143 : Boolean;
      var_re_menge@1140142 : Integer;
      var_be_menge@1140141 : Integer;
      AE_mtl@1140140 : Record 50017;
      AE_holen_Datum@1140139 : Date;
      tab_vkk1@1140138 : Record 36;
      tab_vkk1_arch@1140137 : Record 5107;
      var_anzahl_h„kchen@1140136 : Integer;
      aus_Excel_impotieren@1140135 : Boolean;
      "**zu importierende Datei"@1140134 : Integer;
      tglAE@1140133 : Boolean;
      AE_holen_Datum_1@1140132 : Date;
      AE_verteilen@1140131 : Boolean;
      Datum_von@1140130 : Date;
      Datum_bis@1140129 : Date;
      var_datum_kz@1140125 : Date;
      var_linie_kz@1140124 : Text[10];
      var_rec@1140123 : Record 50017;
      Datei@1140122 : File;
      AE_Verteilen_mtl@1140121 : Boolean;
      AE_Verteilen_xx@1140120 : Boolean;
      Filename@1140119 : Text;
      bb_Filename@1140118 : Text;
      tab_be@1140117 : Record 39;
      BE_holen@1140116 : Boolean;
      tab_bek@1140115 : Record 38;
      BB_Diff@1140114 : Boolean;
      tab_guz@1140113 : Record 115;
      tab_guk@1140112 : Record 114;
      tab_guk1@1140111 : Record 114;
      AU_sichern@1140110 : Boolean;
      AU_Arch_sichern@1140109 : Boolean;
      AU_Nr_sich@1140108 : Code[10];
      AU_Arch_Nr_sich@1140107 : Code[10];
      kto_salden@1140106 : Boolean;
      kto_datum@1140105 : Date;
      sachposten@1140104 : Record 17;
      sum_konten@1140103 : Decimal;
      sum_konten1@1140102 : Decimal;
      sum_konten2@1140101 : Decimal;
      sum_konten3@1140100 : Decimal;
      sum_konten4@1140099 : Decimal;
      sum_konten5@1140098 : Decimal;
      sum_konten6@1140097 : Decimal;
      sum_konten7@1140096 : Decimal;
      sum_konten8@1140095 : Decimal;
      sum_konten9@1140094 : Decimal;
      sum_konten10@1140093 : Decimal;
      sum_konten11@1140092 : Decimal;
      sum_konten12@1140091 : Decimal;
      sum_konten13@1140090 : Decimal;
      sum_konten14@1140089 : Decimal;
      sum_konten15@1140088 : Decimal;
      sum_konten16@1140087 : Decimal;
      sum_konten17@1140086 : Decimal;
      sum_konten18@1140085 : Decimal;
      sum_konten19@1140084 : Decimal;
      sum_konten20@1140083 : Decimal;
      saldo_heute_datum@1140082 : Date;
      Jahr@1140075 : Integer;
      Monat@1140074 : Integer;
      MonatGJ@1140073 : Integer;
      KW@1140072 : Integer;
      Beleg@1140071 : Record 50010;
      herstell@1140070 : Record 5720;
      deb@1140069 : Record 18;
      AE_t„gl@1140068 : Boolean;
      AE_t„gl_gesamt@1140067 : Decimal;
      AE_t„gl_datum@1140066 : Date;
      JahrGJ@1140063 : Integer;
      v_vertrieb1@1140062 : Boolean;
      Lager_ausf2@1140061 : Boolean;
      Lager_abgrenz_Datum@1140060 : Date;
      Kurs_JPY@1140059 : Decimal;
      Kurs_USD@1140058 : Decimal;
      Kurs_GBP@1140057 : Decimal;
      Artikel@1140056 : Record 27;
      Wertposten@1140055 : Record 5802;
      Lagerort1@1140054 : Code[10];
      Lagerort2@1140053 : Code[10];
      Lagerort3@1140052 : Code[10];
      Artikelposten@1140051 : Record 32;
      Lagerbestand@1140050 : Decimal;
      Lagerstck1@1140049 : Decimal;
      var_NEXT@1140048 : Integer;
      var_text1@1140047 : Text[30];
      var_text2@1140046 : Text[30];
      var_letzter_wert@1140045 : Decimal;
      var_sum_zugang_wert@1140044 : Decimal;
      var_sum_zugang_wert_stichkurs@1140043 : Decimal;
      W„_kurs@1140042 : Record 330;
      EK_Rech_k@1140041 : Record 122;
      zu_W„h_kurs@1140040 : Decimal;
      var_sum_bewert@1140039 : Decimal;
      v_dcwert@1140038 : Decimal;
      v_sum_bewert@1140037 : Decimal;
      v_dc@1140036 : Decimal;
      v_zuwert@1140035 : Decimal;
      v_stichwert@1140034 : Decimal;
      v_bewert@1140033 : Decimal;
      ek_preis@1140032 : Record 7012;
      v_dcw„@1140031 : Text[30];
      v_ab_bestand@1140030 : Decimal;
      v_bb_bestand@1140029 : Decimal;
      v_sonderlager@1140028 : Boolean;
      v_ab_menge@1140027 : Decimal;
      v_deb_prf@1140026 : Boolean;
      kontakt@1140025 : Record 5050;
      kontakt1@1140024 : Record 5050;
      v_idprove@1140023 : Boolean;
      v_del@1140022 : Text[5];
      v_del1@1140021 : Text[5];
      v_kontaktnr@1140020 : Text[10];
      Dateiname@1140019 : Text;
      AE_Saldo_prf@1140018 : Decimal;
      Pfad@1140017 : Text;
      Pfaddatum@1140016 : Text;
      Pfad_tag@1140015 : Text[10];
      Pfad_monat@1140014 : Text[10];
      Pfad_jahr@1140013 : Text[10];
      v_n2@1140012 : Boolean;
      v_vertrieb4@1140011 : Boolean;
      OK@1140010 : Boolean;
      anz_zent@1140009 : Decimal;
      anz_must@1140008 : Decimal;
      anz_gutschr@1140007 : Decimal;
      v_abstimm_tab_belege@1140006 : Boolean;
      Lief_adr@1140005 : Record 222;
      v_post_geschenk_adr_liste@1140002 : Boolean;
      tab_geschenk@1140001 : Record 50032;
      v_geschenk_adr_liste_bersicht@1140000 : Boolean;
      hinweis@1000000000 : ARRAY [30] OF Text;
      Text100@1000000002 : TextConst 'DEU=Sie mssen zuerst einen Dateinamen vergeben.';
      Text000@1000000028 : TextConst 'DEU=Daten werden analysiert ...\\;ENU=Analyzing Data...\\';
      Text001@1000000027 : TextConst 'DEU=Auftragseingang;ENU=New Orders';
      Text002@1000000026 : TextConst 'DEU=Arbeitsmappe aktualisieren;ENU=Update Workbook';
      Text020@1000000023 : TextConst 'DEU=Datum';
      Text021@1000000022 : TextConst 'DEU=Auftragsnr.';
      Text022@1000000021 : TextConst 'DEU=Debitornr.';
      Text023@1000000020 : TextConst 'DEU=Name';
      Text024@1000000019 : TextConst 'DEU=Menge';
      Text025@1000000018 : TextConst 'DEU=Artikel';
      Text026@1000000017 : TextConst 'DEU=Lager';
      Text027@1000000016 : TextConst 'DEU=EK';
      Text028@1000000015 : TextConst 'DEU=VK';
      Text029@1000000014 : TextConst 'DEU=W„hrung';
      Text030@1000000013 : TextConst 'DEU=WŽ_Faktor';
      Text031@1000000012 : TextConst 'DEU=Betrag in EUR';
      Text032@1000000011 : TextConst 'DEU=DB';
      Text033@1000000010 : TextConst 'DEU=Bearbeiter';
      Text034@1000000009 : TextConst 'DEU=Vertreter';
      Text035@1000000008 : TextConst 'DEU=Hersteller';
      Text036@1000000007 : TextConst 'DEU=EK Gesamt';
      Text037@1000000006 : TextConst 'DEU=PLZ';
      Text038@1000000005 : TextConst 'DEU=Endkunde';
      Text039@1000000024 : TextConst 'DEU=Team';
      Text040@1000000029 : TextConst 'DEU=Gebiet';
      ExcelFileExtensionTok@1000000004 : TextConst '@@@={Locked};DEU=.xlsx;ENU=.xlsx';
      TempExcelBuffer@1000000040 : TEMPORARY Record 370;
      FileMgt@1000000038 : Codeunit 419;
      ServerFileName@1000000037 : Text;
      SheetName@1000000036 : Text[250];
      DoUpdateExistingWorksheet@1000000035 : Boolean;
      Testmode@1000000034 : Boolean;
      Window@1000000033 : Dialog;
      RecNo@1000000032 : Integer;
      TotalRecNo@1000000031 : Integer;
      RowNo@1000000030 : Integer;
      ColumnNo@1000000025 : Integer;
      AE_Verteilen_mtl_test@1000000039 : Boolean;
      AE_Verteilen_test@1000000043 : Boolean;
      v_Pfadname@1000000041 : Text[40];
      v_Pfadzuweisung@1000000042 : Text[3];
      Text050@1000000044 : TextConst 'DEU=No_';
      Text051@1000000045 : TextConst 'DEU=Company Name';
      Text052@1000000046 : TextConst 'DEU=Name 2';
      Text053@1000000047 : TextConst 'DEU=First Name';
      Text054@1000000048 : TextConst 'DEU=Surname';
      Text055@1000000049 : TextConst 'DEU=Address';
      Text056@1000000050 : TextConst 'DEU=Address 2';
      Text057@1000000051 : TextConst 'DEU=Post Code';
      Text058@1000000052 : TextConst 'DEU=City';
      Text059@1000000053 : TextConst 'DEU=Nummer';
      IDProvExtensionTok@1000000054 : TextConst 'DEU=.csv';
      "Text003

    "@1000000055 : TextConst 'DEU=Excel Export erfolgreich abgeschlossen.';
      v_kreditprfen@1000000056 : Boolean;
      v_deb_kredit@1000000057 : Code[10];
      AB_holen_Datum1@1000000058 : Date;
      debpos@1000000059 : Record 21;
      v_umsatz12@1000000060 : Decimal;
      v_zahlung12@1000000061 : Decimal;
      v_anz_RE12@1000000062 : Integer;
      v_date_1RE@1000000063 : Date;
      v_OP_gesamt@1000000064 : Decimal;
      v_Nur_Diff_AB_ausgeben@1000000065 : Boolean;
      v_W„_Abstimmung@1000000066 : Boolean;
      Kredpost@1000000067 : Record 25;
      saldo_sum@1000000068 : Decimal;
      ekz@1000000069 : Record 39;
      v_druck_art@1000000070 : Decimal;
      v_FLmenge@1000000071 : Integer;
      v_FLwert@1000000072 : Decimal;
      v_ek_preis@1000000077 : Decimal;
      v_au_wert@1000000078 : Decimal;
      v_aur_wert@1000000073 : Decimal;
      v_lager_wert@1000000079 : Decimal;
      v_best_wert@1000000080 : Decimal;
      v_ek_w„@1000000074 : Text;
      v_usd_gesamt@1000000075 : Decimal;
      v_jpy_gesamt@1000000076 : Decimal;
      v_gbp_gesamt@1000000081 : Decimal;
      v_eur_gesamt@1000000082 : Decimal;
      bankpos@1000000083 : Record 271;
      sum_kont4021@1000000084 : Decimal;
      sum_kont4022@1000000085 : Decimal;
      sum_kont4023@1000000086 : Decimal;
      sum_kont4025@1000000087 : Decimal;
      sum_kont4118@1000000088 : Decimal;
      sum_kont4120@1000000089 : Decimal;
      sum_kont4122@1000000090 : Decimal;
      sum_kont4221@1000000091 : Decimal;
      sum_kont4222@1000000092 : Decimal;
      sum_kont4223@1000000093 : Decimal;
      sum_kont4225@1000000094 : Decimal;
      sum_kont4317@1000000095 : Decimal;
      sum_kont4338@1000000096 : Decimal;
      sum_kont4407@1000000097 : Decimal;
      sum_kont4408@1000000098 : Decimal;
      sum_kont4412@1000000099 : Decimal;
      sum_kont4416@1000000100 : Decimal;
      sum_kont4418@1000000101 : Decimal;
      sum_kont4421@1000000102 : Decimal;
      sum_kont4422@1000000103 : Decimal;
      sum_kont4423@1000000104 : Decimal;
      sum_kont4424@1000000105 : Decimal;
      sum_kont4425@1000000106 : Decimal;
      sum_kont4690@1000000107 : Decimal;

    PROCEDURE "aktuellen AB einfgen"@1140000();
    BEGIN
      // berprft UB Stand 26.11.2018
      // ANFANG Als erstes Datum einfgen -> Sicherstellung Ausfhrung nur 1 x pro Tag
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','SYST');
      tab_ab_bw.SETFILTER(Datum,'%1',31122222D);
      tab_ab_bw.SETFILTER(AU_Nr,'%1','AU999999');
      tab_ab_bw.SETFILTER(POS_Nr,'%1',10000);
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      IF tab_ab_bw.Wunschdatum = WORKDATE THEN BEGIN
        ERROR('Der Job wurde heute bereits ausgefhrt');
      END ELSE BEGIN
      //  MESSAGE('Am Ende kommt ein Best„tigungsfenster. Wird dieses nicht angezeigt ist der Job fehlerhaft beendet. IT informieren!');
        tab_ab_bw.Wunschdatum := WORKDATE;
        tab_ab_bw.MODIFY;
      END;
      // ENDE Als erstes Datum einfgen

      //  ANFANG  L”schen und umbenennen von alten S„tzen
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','AL2');
      IF tab_ab_bw.FINDFIRST THEN
        tab_ab_bw.DELETEALL;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','AL1');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          tab_ab_bw.Art := 'AL2';
          tab_ab_bw.MODIFY;
        UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','ALT');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          tab_ab_bw.Art := 'AL1';
          tab_ab_bw.MODIFY;
        UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','NEU');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          tab_ab_bw.Art := 'ALT';
          tab_ab_bw.MODIFY;
        UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','ALT');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          tab_ab_bw.Status := 'NN';
          tab_ab_bw.Stat_Artikel := 'NN';
          tab_ab_bw.Stat_Menge := 'NN';
          tab_ab_bw.Stat_EK := 'NN';
          tab_ab_bw.Stat_VK := 'NN';
          tab_ab_bw.MODIFY;
        UNTIL tab_ab_bw.NEXT = 0;
      END;
      //  ENDE  L”schen und umbenennen von alten S„tzen


      // ANFANG Einfgen von neuem AB
      tab_ab.RESET;
      tab_ab.SETFILTER("Document Type",'%1', tab_ab."Document Type"::Order);
      tab_ab.SETFILTER(Type,'%1',tab_ab.Type::Item);
      tab_ab.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      //tab_ab.SETFILTER(tab_ab."Outstanding Quantity",'>%1',0);
      IF tab_ab.FIND('-')  THEN
        REPEAT
          tab_ab_bw.INIT;
          tab_ab_bw.Belegart := 'AUšW';
          tab_ab_bw.Datum := AE_holen_Datum;
          tab_ab_bw.AU_Nr := tab_ab."Document No.";
          tab_ab_bw.POS_Nr := tab_ab."Line No.";
          tab_ab_bw.Deb_Nr := tab_ab."Sell-to Customer No.";
          tab_ab_bw.Artikel := tab_ab."No.";
          tab_ab_bw.Menge := tab_ab.Quantity;
          tab_ab_bw.Restmenge := tab_ab."Outstanding Quantity";
          tab_ab_bw.EK := tab_ab."Unit Cost (LCY)";
          tab_ab_bw.VK := tab_ab."Unit Price";
          tab_ab_bw."Best„tigt LD" := tab_ab."Promised Delivery Date";
          tab_ab_bw.Wunschdatum := tab_ab."Requested Delivery Date";
          tab_ab_bw.Status := 'NN';
          tab_ab_bw.Art := 'NEU';
          tab_ab_bw."EK Gesamt" := ROUND(((tab_ab.Quantity) * (tab_ab."Unit Cost (LCY)")),0.01);
          tab_ab_bw."VK Gesamt" := ROUND(((tab_ab.Quantity) * (tab_ab."Unit Price")),0.01);
          tab_ab_bw.Lager := tab_ab."Location Code";
          tab_ab_bw."DB %" := tab_ab."Profit %";
          tab_ab_bw.Linie := tab_ab."Manufacturer Code";
          tab_ab_bw.Endkunde := tab_ab.Endkunde;
          IF tab_ab."Blanket Order No." <> '' THEN
            tab_ab_bw."AU aus Rahmen" := TRUE;

          tab_vkk.RESET;
          tab_vkk.SETFILTER("No.",'%1',tab_ab_bw.AU_Nr);
          IF tab_vkk.FINDFIRST THEN BEGIN
            tab_ab_bw.Debitor := tab_vkk."Sell-to Customer Name";
            tab_ab_bw.W„hrungscode := tab_vkk."Currency Code";
            tab_ab_bw.Auftragsdatum := tab_vkk."Order Date";
            tab_ab_bw.Betreuer := tab_vkk."Betreuer Innendienst";
            tab_ab_bw.Vertreter := tab_vkk."Salesperson Code";
            tab_ab_bw.Teams := tab_vkk.Teams;
            tab_ab_bw.Plz := tab_vkk."Sell-to Post Code";
            tab_ab_bw.Gebietscode := tab_vkk."Territory Code";
            END;
          tab_ab_bw.INSERT;
        UNTIL tab_ab.NEXT = 0;
      END;
      //  ENDE Einfgen von neuem AB

      // ANFANG Kurse des AU holen
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','NEU');
      tab_ab_bw.SETFILTER(W„hrungscode,'<>%1','');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          tab_kurse.RESET;
          tab_kurse.SETFILTER("Starting Date",'%1',tab_ab_bw.Auftragsdatum);
          tab_kurse.SETFILTER("Currency Code",'%1',tab_ab_bw.W„hrungscode);
          IF tab_kurse.FINDFIRST THEN BEGIN
            tab_ab_bw.w„_faktor := tab_kurse."Exchange Rate Amount";
            tab_ab_bw."VK Gesamt" := ROUND((((tab_ab.Quantity) * (tab_ab."Unit Price")) / (tab_kurse."Exchange Rate Amount")),2);
            tab_ab_bw.MODIFY;
          END;
        UNTIL tab_ab_bw.NEXT = 0;
      END;
      // ENDE Kurse des AU holen


      "Linien umsetzen";


      // ANFANG Als letztes wird dieses Datum berprft -> Sicherstellung Ausfhrung nur 1 x pro Tag
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','SYST');
      tab_ab_bw.SETFILTER(Datum,'%1',31122222D);
      tab_ab_bw.SETFILTER(AU_Nr,'%1','AU999999');
      tab_ab_bw.SETFILTER(POS_Nr,'%1',10000);
      IF tab_ab_bw.FINDFIRST THEN BEGIN
       IF tab_ab_bw.Wunschdatum = WORKDATE THEN BEGIN
       MESSAGE(' JOB wurde ordnungsgem„á beendet.');
       END;

      END;
      //  Als letztes wird dieses Datum berprft und eine Meldung erzeugt. Kommt keine Meldung ist der Job nicht durchgelaufen!!!
      // ENDE Als letztes Datum berprfen
    END;

    PROCEDURE "AB einfgen rcksetzen"@1140001();
    BEGIN
      // berprft UB Stand 26.11.2018
      //  ANFANG  Rcksetzen des Holens von neuem AB-Bestand
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','NEU');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
        tab_ab_bw.DELETE;
      UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','ALT');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          tab_ab_bw.Art := 'NEU';
          tab_ab_bw.MODIFY;
        UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','AL1');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          tab_ab_bw.Art := 'ALT';
          tab_ab_bw.MODIFY;
        UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','AL2');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          tab_ab_bw.Art := 'AL1';
          tab_ab_bw.MODIFY;
        UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','NEU');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          tab_ab_bw.Status := 'NN';
          tab_ab_bw.Stat_Artikel := 'NN';
          tab_ab_bw.Stat_Menge := 'NN';
          tab_ab_bw.Stat_EK := 'NN';
          tab_ab_bw.Stat_VK := 'NN';
          tab_ab_bw.MODIFY;
        UNTIL tab_ab_bw.NEXT = 0;
      END;
      //  ENDE  Rcksetzen des Holens von neuem AB-Bestand

      MESSAGE(' Das Rcksetzen des Auftragsbestandes wurde ordnungsgem„á erledigt. ');
    END;

    PROCEDURE "t„glichen AE einfgen"@1140003();
    BEGIN
      // berprft UB Stand 26.11.2018
      // ANFANG L”schen Tabelle AE_mtl
      // AE_mtl.RESET;
      // AE_mtl.DELETEALL;
      // ENDE   L”schen Tabelle AE_mtl

      // ANFANG Einfgen von neuem AE

      AE_mtl.RESET;
      tab_ab.RESET;
      tab_vkk.RESET;
      tab_vkk.SETFILTER("Order Date",'%1',AE_holen_Datum_1);
      //tab_vkk.SETFILTER(tab_vkk."Document Type",'%1', tab_vkk."Document Type"::Order);
      IF tab_vkk.FINDFIRST THEN
        REPEAT
          tab_ab.RESET;
          tab_ab.SETFILTER("Document No.",'%1',tab_vkk."No.");
          tab_ab.SETFILTER("Document Type",'%1', tab_ab."Document Type"::Order);
          tab_ab.SETFILTER(Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          tab_ab.SETFILTER("Outstanding Quantity",'>%1',0);
          IF tab_ab.FINDFIRST  THEN
            REPEAT
              AE_mtl.INIT;
              AE_mtl.Datum := AE_holen_Datum_1;
              AE_mtl.AU_Nr := tab_ab."Document No.";
              AE_mtl.POS_Nr := tab_ab."Line No.";
              AE_mtl.Belegart := 'AETG';
              AE_mtl.Deb_Nr := tab_ab."Sell-to Customer No.";
              AE_mtl.Artikel := tab_ab."No.";
              AE_mtl.Menge := tab_ab.Quantity;
              AE_mtl.Restmenge := tab_ab."Outstanding Quantity";
              AE_mtl.EK := tab_ab."Unit Cost (LCY)";
              AE_mtl.VK := tab_ab."Unit Price";
              AE_mtl."Best„tigt LD" := tab_ab."Promised Delivery Date";
              AE_mtl.Wunschdatum := tab_ab."Requested Delivery Date";
              AE_mtl.Status := 'AE';
              AE_mtl.Art := 'TAG';
              AE_mtl."EK Gesamt" := ROUND(((tab_ab.Quantity) * (tab_ab."Unit Cost (LCY)")),0.01);
              AE_mtl."VK Gesamt" := ROUND(((tab_ab.Quantity) * (tab_ab."Unit Price")),0.01);
              AE_mtl.Lager := tab_ab."Location Code";
              AE_mtl."DB %" := tab_ab."Profit %";
              AE_mtl.Linie := tab_ab."Manufacturer Code";
              AE_mtl.Endkunde := tab_ab.Endkunde;
              IF tab_ab."Blanket Order No." <> '' THEN
                AE_mtl."AU aus Rahmen":=TRUE;

              tab_vkk1.RESET;
              tab_vkk1.SETFILTER("No.",'%1',AE_mtl.AU_Nr);
              IF tab_vkk1.FINDFIRST THEN BEGIN
                AE_mtl.Debitor := tab_vkk1."Sell-to Customer Name";
                AE_mtl.W„hrungscode := tab_vkk1."Currency Code";
                AE_mtl.w„_faktor := tab_vkk1."Currency Factor";
                AE_mtl.Auftragsdatum := tab_vkk1."Order Date";
                AE_mtl.Betreuer := tab_vkk1."Betreuer Innendienst";
                AE_mtl.Vertreter := tab_vkk1."Salesperson Code";
                AE_mtl.Teams := tab_vkk1.Teams;
                AE_mtl.Gebietscode := tab_vkk1."Territory Code";
                AE_mtl.PLZ := tab_vkk1."Sell-to Post Code";
              END;
              IF AE_mtl.w„_faktor = 0 THEN
                AE_mtl."Betrag in EUR" := AE_mtl."VK Gesamt"
              ELSE
                AE_mtl."Betrag in EUR" := (AE_mtl."VK Gesamt" / AE_mtl.w„_faktor);
             AE_mtl.INSERT;
           UNTIL tab_ab.NEXT = 0;
        UNTIL tab_vkk.NEXT = 0;
      //  ENDE Einfgen von neuem AE

      // Gutschriften einspielen 28.11.2011
      AE_mtl.RESET;
      tab_guz.RESET;
      tab_guk.RESET;
      tab_guk.SETFILTER("Posting Date",'%1',AE_holen_Datum_1);
      IF tab_guk.FINDFIRST THEN
        REPEAT
          tab_guz.RESET;
          tab_guz.SETFILTER("Document No.",'%1',tab_guk."No.");
          tab_guz.SETFILTER(Type,'%1',tab_guz.Type::Item);
          tab_guz.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          tab_guz.SETFILTER(Quantity,'>%1',0);
          IF tab_guz.FINDFIRST  THEN
            REPEAT
              AE_mtl.INIT;
              AE_mtl.Datum := AE_holen_Datum_1;
              AE_mtl.AU_Nr := tab_guz."Document No.";
              AE_mtl.POS_Nr := tab_guz."Line No.";
              AE_mtl.Belegart := 'GUTG';
              AE_mtl.Deb_Nr := tab_guz."Sell-to Customer No.";
              AE_mtl.Artikel := tab_guz."No.";
              AE_mtl.Menge := tab_guz.Quantity;
              AE_mtl.Restmenge := tab_guz.Quantity;
              AE_mtl.EK := tab_guz."Unit Cost (LCY)";
              AE_mtl.VK := tab_guz."Unit Price";
              AE_mtl.Status := 'AE';
              AE_mtl.Art := 'TAG';
              AE_mtl."EK Gesamt" := ROUND(((tab_guz.Quantity) * (tab_guz."Unit Cost (LCY)") * (-1)),0.01);
              AE_mtl."VK Gesamt" := ROUND(((tab_guz.Quantity) * (tab_guz."Unit Price") * (-1)),0.01);
              AE_mtl.Lager:=tab_guz."Location Code";
              AE_mtl.Linie := tab_guz."Manufacturer Code";
              AE_mtl.Endkunde := tab_guz.Endkunde;
              AE_mtl.Debitor := tab_guk."Sell-to Customer Name";
              AE_mtl.W„hrungscode := tab_guk."Currency Code";
              AE_mtl.w„_faktor := tab_guk."Currency Factor";
              AE_mtl.Auftragsdatum := tab_guk."Posting Date";
              AE_mtl.Betreuer := tab_guk."Betreuer Innendienst";
              AE_mtl.Vertreter := tab_guk."Salesperson Code";
              AE_mtl.Teams := tab_guk.Teams;
              AE_mtl.PLZ := tab_guk."Sell-to Post Code";
              AE_mtl.Gebietscode := tab_guk."Territory Code";

              IF AE_mtl.w„_faktor = 0 THEN BEGIN
                AE_mtl."Betrag in EUR" := AE_mtl."VK Gesamt";
              END ELSE BEGIN
                AE_mtl."Betrag in EUR" := (AE_mtl."VK Gesamt"/AE_mtl.w„_faktor);
              END;
              AE_mtl.INSERT;
           UNTIL tab_guz.NEXT = 0;
        UNTIL tab_guk.NEXT = 0;
      // ENDE Gutschriften einspielen 28.11.2011

      "Linien umsetzen";
    END;

    PROCEDURE "tgl AE in mtl AE bernehmen"@1140005();
    BEGIN
      // berprft UB Stand 26.11.2018
      AE_mtl.RESET;
      AE_mtl.SETFILTER(Belegart,'%1','AETG');
      IF AE_mtl.FINDFIRST THEN BEGIN
        REPEAT
          AE_mtl.RENAME(AE_mtl.Datum,AE_mtl.AU_Nr,AE_mtl.POS_Nr,AE_mtl.Deb_Nr,'AMTL');
        UNTIL AE_mtl.NEXT = 0;
      END;

      AE_mtl.RESET;
      AE_mtl.SETFILTER(Belegart,'%1','GUTG');
      IF AE_mtl.FINDFIRST THEN BEGIN
        REPEAT
          AE_mtl.RENAME(AE_mtl.Datum,AE_mtl.AU_Nr,AE_mtl.POS_Nr,AE_mtl.Deb_Nr,'GUMT');
        UNTIL AE_mtl.NEXT = 0;
      END;

      AE_mtl.RESET;
      AE_mtl.SETFILTER(Belegart,'%1','AEND');
      IF AE_mtl.FINDFIRST THEN BEGIN
        REPEAT
          AE_mtl.RENAME(AE_mtl.Datum,AE_mtl.AU_Nr,AE_mtl.POS_Nr,AE_mtl.Deb_Nr,'AEMT');
        UNTIL AE_mtl.NEXT = 0;
      END;
    END;

    PROCEDURE AE_Verteilung_mtl@1140027();
    BEGIN
    END;

    PROCEDURE AE_Verteilung_xx@1140029();
    BEGIN
      // berprft UB Stand 26.11.2018


      // ANFANG tgl. AE in Excel ausgeben  Gesamtliste nach vorgegebenem Datum
      {
      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.Range('H:I').NumberFormat := '###.###,#####';
      Sheet.Range('L:M').NumberFormat := '###.###,##';
      Sheet.Range('Q:Q').NumberFormat := '###.###,##';

      Sheet.Range('A1').Value := 'Auftragseingang  '; // definiert die Beschriftung der berschriftszeile
      Sheet.Range('A2').Value := 'datum';
      Sheet.Range('B2').Value := 'auft_nr';
      Sheet.Range('C2').Value := 'deb_nr';
      Sheet.Range('D2').Value := 'name';
      Sheet.Range('E2').Value := 'menge';
      Sheet.Range('F2').Value := 'artikel';
      Sheet.Range('G2').Value := 'lager';
      Sheet.Range('H2').Value := 'ek';
      Sheet.Range('I2').Value := 'vk';
      Sheet.Range('J2').Value := 'w„hrung';
      Sheet.Range('K2').Value := 'w„_fakt';
      Sheet.Range('L2').Value := 'betrag in EUR';
      Sheet.Range('M2').Value := 'db';
      Sheet.Range('N2').Value := 'bearb';
      Sheet.Range('O2').Value := 'vertreter';
      Sheet.Range('P2').Value := 'linie';
      Sheet.Range('Q2').Value := 'ek_gesamt';
      Sheet.Range('R2').Value := 'plz';
      Sheet.Range('S2').Value := 'endkunde';
      Sheet.Range('T2').Value := 'team';
      Sheet.Range('U2').Value := 'gebiet';
      j := '3';

      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      IF AE_mtl.FINDFIRST THEN BEGIN
        REPEAT
          Sheet.Range('A'+j).Value := AE_mtl.Datum;
          Sheet.Range('B'+j).Value := AE_mtl.AU_Nr;
          Sheet.Range('C'+j).Value := AE_mtl.Deb_Nr;
          Sheet.Range('D'+j).Value := AE_mtl.Debitor;
          Sheet.Range('E'+j).Value := AE_mtl.Menge;
          Sheet.Range('F'+j).Value := AE_mtl.Artikel;
          Sheet.Range('G'+j).Value := AE_mtl.Lager;
          Sheet.Range('H'+j).Value := FORMAT(AE_mtl.EK);
          Sheet.Range('I'+j).Value := FORMAT(AE_mtl.VK);
          Sheet.Range('J'+j).Value := AE_mtl.W„hrungscode;
          Sheet.Range('K'+j).Value := FORMAT(AE_mtl.w„_faktor);
          Sheet.Range('L'+j).Value := FORMAT(AE_mtl."Betrag in EUR");
          Sheet.Range('M'+j).Value := FORMAT(AE_mtl."DB %");
          Sheet.Range('N'+j).Value := AE_mtl.Betreuer;
          Sheet.Range('O'+j).Value := AE_mtl.Vertreter;
          Sheet.Range('P'+j).Value := AE_mtl.Linie;
          Sheet.Range('Q'+j).Value := FORMAT(AE_mtl."EK Gesamt");
          Sheet.Range('R'+j).Value := AE_mtl.PLZ;
          Sheet.Range('S'+j).Value := AE_mtl.Endkunde;
          Sheet.Range('T'+j).Value := AE_mtl.Teams;
          Sheet.Range('U'+j).Value := AE_mtl.Gebietscode;
          j := INCSTR(j);
        UNTIL AE_mtl.NEXT = 0;
      END;
      IF wshFile.FileExists(('F:\Daten Neu\Gemeinsame Ordner\Auftragseingang\Sylke\')+(Filename)) THEN wshFile.DeleteFile(('F:\Daten Neu\Gemeinsame Ordner\Auftragseingang\Sylke\')+(Filename));
      Book.SaveAs(('F:\Daten Neu\Gemeinsame Ordner\Auftragseingang\Sylke\')+(Filename));
      Book.Close(TRUE);
      }
    END;

    PROCEDURE "aktuellen BB einfgen"@1140012();
    BEGIN
      // berprft UB Stand 26.11.2018
      //  ANFANG  L”schen und umbenennen von alten S„tzen
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','AL2');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
        tab_ab_bw.DELETE;
      UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','AL1');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
        tab_ab_bw.Art:='AL2';
        tab_ab_bw.MODIFY;
      UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','ALT');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
        tab_ab_bw.Art:='AL1';
        tab_ab_bw.MODIFY;
      UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','NEU');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
        tab_ab_bw.Art:='ALT';
        tab_ab_bw.MODIFY;
      UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','ALT');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
        tab_ab_bw.Status:='NN';
        tab_ab_bw.Stat_Artikel:='NN';
        tab_ab_bw.Stat_Menge:='NN';
        tab_ab_bw.Stat_EK:='NN';
        tab_ab_bw.Stat_VK:='NN';
        tab_ab_bw.MODIFY;
      UNTIL tab_ab_bw.NEXT = 0;
      END;
      //  ENDE  L”schen und umbenennen von alten S„tzen

      // ANFANG Einfgen von neuem BB
      tab_be.RESET;
      tab_be.SETFILTER(tab_be."Document Type",'%1', tab_be."Document Type"::Order);
      tab_be.SETFILTER(tab_be.Type,'%1',tab_be.Type::Item);
      tab_be.SETFILTER(tab_be."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      //tab_be.SETFILTER(tab_be."Outstanding Quantity",'>%1',0);
       IF tab_be.FIND('-')  THEN BEGIN
       REPEAT
          tab_ab_bw.INIT;
                 tab_ab_bw.Belegart:='BEšW';
                 tab_ab_bw.Datum:=AE_holen_Datum;
                 tab_ab_bw.AU_Nr:=tab_be."Document No.";
                 tab_ab_bw.POS_Nr:=tab_be."Line No.";
                 tab_ab_bw.Deb_Nr:=tab_be."Buy-from Vendor No.";
                 tab_ab_bw.Artikel:=tab_be."No.";
                 tab_ab_bw.Menge:=tab_be.Quantity;
                 tab_ab_bw.Restmenge:=tab_be."Outstanding Quantity";
                 tab_ab_bw.EK:=tab_be."Direct Unit Cost";
                 tab_ab_bw."Best„tigt LD":=tab_be."Promised Receipt Date";
                 tab_ab_bw.Wunschdatum:=tab_be."Requested Receipt Date";
                 tab_ab_bw.Status:='NN';
                 tab_ab_bw.Art:='NEU';
                 tab_ab_bw."EK Gesamt":=ROUND(((tab_be.Quantity)*(tab_be."Direct Unit Cost")),2);
                 tab_ab_bw.Lager:=tab_be."Location Code";
                 tab_ab_bw."DB %":=tab_be."Profit %";
                 tab_ab_bw.Linie:=tab_be."Manufacturer Code";
                 tab_ab_bw.Debitor:=tab_be.Description;
                  tab_bek.RESET;
                  tab_bek.SETFILTER(tab_bek."No.",'%1',tab_ab_bw.AU_Nr);
                   IF tab_bek.FINDFIRST THEN
                    BEGIN
                    tab_ab_bw.W„hrungscode:=tab_bek."Currency Code";
                    tab_ab_bw.Auftragsdatum:=tab_bek."Order Date";
                   END;
          tab_ab_bw.INSERT;
       UNTIL tab_be.NEXT = 0;
      END;
      "Linien umsetzen";
    END;

    PROCEDURE "Linien umsetzen"@1140013();
    BEGIN
      // berprft UB Stand 26.11.2018
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Linie,'%1..%2','00','99');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
       REPEAT
      //  IF tab_ab_bw.Linie='00' THEN tab_ab_bw.Linie:='IDT';
        IF tab_ab_bw.Linie='01' THEN tab_ab_bw.Linie:='LSI';
      //  IF tab_ab_bw.Linie='02' THEN tab_ab_bw.Linie:='FUM';
      //  IF tab_ab_bw.Linie='03' THEN tab_ab_bw.Linie:='SCN';
        IF tab_ab_bw.Linie='04' THEN tab_ab_bw.Linie:='XMO';
        IF tab_ab_bw.Linie='05' THEN tab_ab_bw.Linie:='BTC';
      //  IF tab_ab_bw.Linie='06' THEN tab_ab_bw.Linie:='SMT';
        IF tab_ab_bw.Linie='07' THEN tab_ab_bw.Linie:='GEO';
        IF tab_ab_bw.Linie='08' THEN tab_ab_bw.Linie:='GSC';
      //  IF tab_ab_bw.Linie='09' THEN tab_ab_bw.Linie:='ART';
      //  IF tab_ab_bw.Linie='10' THEN tab_ab_bw.Linie:='ZOR';
        IF tab_ab_bw.Linie='11' THEN tab_ab_bw.Linie:='ECT';
        IF tab_ab_bw.Linie='12' THEN tab_ab_bw.Linie:='NEX';
      //  IF tab_ab_bw.Linie='13' THEN tab_ab_bw.Linie:='NET';
        IF tab_ab_bw.Linie='14' THEN tab_ab_bw.Linie:='FOX';
      //  IF tab_ab_bw.Linie='15' THEN tab_ab_bw.Linie:='CAV';
        IF tab_ab_bw.Linie='16' THEN tab_ab_bw.Linie:='VIA';
        IF tab_ab_bw.Linie='17' THEN tab_ab_bw.Linie:='DSP';
        IF tab_ab_bw.Linie='18' THEN tab_ab_bw.Linie:='HIF';
        IF tab_ab_bw.Linie='19' THEN tab_ab_bw.Linie:='PAI';
        IF tab_ab_bw.Linie='20' THEN tab_ab_bw.Linie:='WIL';
      //  IF tab_ab_bw.Linie='21' THEN tab_ab_bw.Linie:='TSC';
        IF tab_ab_bw.Linie='22' THEN tab_ab_bw.Linie:='SIL';
        IF tab_ab_bw.Linie='30' THEN tab_ab_bw.Linie:='ICP';
        IF tab_ab_bw.Linie='31' THEN tab_ab_bw.Linie:='STR';
      //  IF tab_ab_bw.Linie='34' THEN tab_ab_bw.Linie:='PAR';
        IF tab_ab_bw.Linie='37' THEN tab_ab_bw.Linie:='ITC';
      //  IF tab_ab_bw.Linie='39' THEN tab_ab_bw.Linie:='UBI';
        IF tab_ab_bw.Linie='40' THEN tab_ab_bw.Linie:='RIC';
        IF tab_ab_bw.Linie='43' THEN tab_ab_bw.Linie:='OVT';
        IF tab_ab_bw.Linie='44' THEN tab_ab_bw.Linie:='OVM';
      //  IF tab_ab_bw.Linie='45' THEN tab_ab_bw.Linie:='SIM';
      //  IF tab_ab_bw.Linie='48' THEN tab_ab_bw.Linie:='PLX';
      //  IF tab_ab_bw.Linie='49' THEN tab_ab_bw.Linie:='TEC';
      //  IF tab_ab_bw.Linie='51' THEN tab_ab_bw.Linie:='INV';
        IF tab_ab_bw.Linie='52' THEN tab_ab_bw.Linie:='ACT';
        IF tab_ab_bw.Linie='53' THEN tab_ab_bw.Linie:='ACI';
        IF tab_ab_bw.Linie='54' THEN tab_ab_bw.Linie:='GSI';
        IF tab_ab_bw.Linie='55' THEN tab_ab_bw.Linie:='KIN';
        IF tab_ab_bw.Linie='56' THEN tab_ab_bw.Linie:='IKA';
        IF tab_ab_bw.Linie='57' THEN tab_ab_bw.Linie:='ACC';
      IF tab_ab_bw.Linie='5710' THEN tab_ab_bw.Linie:='ACA';
      IF tab_ab_bw.Linie='5720' THEN tab_ab_bw.Linie:='ACP';
      IF tab_ab_bw.Linie='5730' THEN tab_ab_bw.Linie:='ASS';
        IF tab_ab_bw.Linie='58' THEN tab_ab_bw.Linie:='ACL';
        IF tab_ab_bw.Linie='59' THEN tab_ab_bw.Linie:='ACS';
      //  IF tab_ab_bw.Linie='60' THEN tab_ab_bw.Linie:='SSC';
      //  IF tab_ab_bw.Linie='61' THEN tab_ab_bw.Linie:='JEL';
      //  IF tab_ab_bw.Linie='65' THEN tab_ab_bw.Linie:='WWC';
      //  IF tab_ab_bw.Linie='66' THEN tab_ab_bw.Linie:='SYC';
      //  IF tab_ab_bw.Linie='68' THEN tab_ab_bw.Linie:='WML';
        IF tab_ab_bw.Linie='69' THEN tab_ab_bw.Linie:='CIR';
      //  IF tab_ab_bw.Linie='73' THEN tab_ab_bw.Linie:='C2M';
        IF tab_ab_bw.Linie='74' THEN tab_ab_bw.Linie:='DIG';
      //  IF tab_ab_bw.Linie='75' THEN tab_ab_bw.Linie:='PHY';
      //  IF tab_ab_bw.Linie='76' THEN tab_ab_bw.Linie:='SBT';
      //  IF tab_ab_bw.Linie='77' THEN tab_ab_bw.Linie:='CEC';
        IF tab_ab_bw.Linie='78' THEN tab_ab_bw.Linie:='HAL';
      //  IF tab_ab_bw.Linie='79' THEN tab_ab_bw.Linie:='ASD';
      //  IF tab_ab_bw.Linie='80' THEN tab_ab_bw.Linie:='MAG';
      //  IF tab_ab_bw.Linie='81' THEN tab_ab_bw.Linie:='INI';
        IF tab_ab_bw.Linie='82' THEN tab_ab_bw.Linie:='SPL';
      //  IF tab_ab_bw.Linie='83' THEN tab_ab_bw.Linie:='RLI';
      //  IF tab_ab_bw.Linie='84' THEN tab_ab_bw.Linie:='ANS';
        IF tab_ab_bw.Linie='85' THEN tab_ab_bw.Linie:='FER';
        IF tab_ab_bw.Linie='86' THEN tab_ab_bw.Linie:='FES';
        IF tab_ab_bw.Linie='87' THEN tab_ab_bw.Linie:='FET';
        IF tab_ab_bw.Linie='88' THEN tab_ab_bw.Linie:='WIS';
        IF tab_ab_bw.Linie='89' THEN tab_ab_bw.Linie:='WIT';
        IF tab_ab_bw.Linie='96' THEN tab_ab_bw.Linie:='TSG';
        IF tab_ab_bw.Linie='9610' THEN tab_ab_bw.Linie:='ASP';
        IF tab_ab_bw.Linie='9620' THEN tab_ab_bw.Linie:='FEP';
        IF tab_ab_bw.Linie='9630' THEN tab_ab_bw.Linie:='WIP';
        IF tab_ab_bw.Linie='97' THEN tab_ab_bw.Linie:='SON';
        IF tab_ab_bw.Linie='98' THEN tab_ab_bw.Linie:='SON';
        IF tab_ab_bw.Linie='99' THEN tab_ab_bw.Linie:='TOP';

        tab_ab_bw.MODIFY;
       UNTIL tab_ab_bw.NEXT = 0;

      END;




      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Linie,'%1..%2','00','99');
      IF AE_mtl.FINDFIRST THEN BEGIN
       REPEAT
      //  IF AE_mtl.Linie='00' THEN AE_mtl.Linie:='IDT';
        IF AE_mtl.Linie='01' THEN AE_mtl.Linie:='LSI';
      //  IF AE_mtl.Linie='02' THEN AE_mtl.Linie:='FUM';
      //  IF AE_mtl.Linie='03' THEN AE_mtl.Linie:='SCN';
        IF AE_mtl.Linie='04' THEN AE_mtl.Linie:='XMO';
        IF AE_mtl.Linie='05' THEN AE_mtl.Linie:='BTC';
      //  IF AE_mtl.Linie='06' THEN AE_mtl.Linie:='SMT';
        IF AE_mtl.Linie='07' THEN AE_mtl.Linie:='GEO';
        IF AE_mtl.Linie='08' THEN AE_mtl.Linie:='GSC';
      //  IF AE_mtl.Linie='09' THEN AE_mtl.Linie:='ART';
      //  IF AE_mtl.Linie='10' THEN AE_mtl.Linie:='ZOR';
        IF AE_mtl.Linie='11' THEN AE_mtl.Linie:='ECT';
        IF AE_mtl.Linie='12' THEN AE_mtl.Linie:='NEX';
      //  IF AE_mtl.Linie='13' THEN AE_mtl.Linie:='NET';
        IF AE_mtl.Linie='14' THEN AE_mtl.Linie:='FOX';
      //  IF AE_mtl.Linie='15' THEN AE_mtl.Linie:='CAV';
        IF AE_mtl.Linie='16' THEN AE_mtl.Linie:='VIA';
        IF AE_mtl.Linie='17' THEN AE_mtl.Linie:='DSP';
        IF AE_mtl.Linie='18' THEN AE_mtl.Linie:='HIF';
        IF AE_mtl.Linie='19' THEN AE_mtl.Linie:='PAI';
        IF AE_mtl.Linie='20' THEN AE_mtl.Linie:='WIL';
      //  IF AE_mtl.Linie='21' THEN AE_mtl.Linie:='TSC';
        IF AE_mtl.Linie='22' THEN AE_mtl.Linie:='SIL';
        IF AE_mtl.Linie='30' THEN AE_mtl.Linie:='ICP';
        IF AE_mtl.Linie='31' THEN AE_mtl.Linie:='STR';
      //  IF AE_mtl.Linie='34' THEN AE_mtl.Linie:='PAR';
        IF AE_mtl.Linie='37' THEN AE_mtl.Linie:='ITC';
      //  IF AE_mtl.Linie='39' THEN AE_mtl.Linie:='UBI';
        IF AE_mtl.Linie='40' THEN AE_mtl.Linie:='RIC';
        IF AE_mtl.Linie='43' THEN AE_mtl.Linie:='OVT';
        IF AE_mtl.Linie='44' THEN AE_mtl.Linie:='OVM';
      //  IF AE_mtl.Linie='45' THEN AE_mtl.Linie:='SIM';
      //  IF AE_mtl.Linie='48' THEN AE_mtl.Linie:='PLX';
      //  IF AE_mtl.Linie='49' THEN AE_mtl.Linie:='TEC';
      //  IF AE_mtl.Linie='51' THEN AE_mtl.Linie:='INV';
        IF AE_mtl.Linie='52' THEN AE_mtl.Linie:='ACT';
        IF AE_mtl.Linie='53' THEN AE_mtl.Linie:='ACI';
        IF AE_mtl.Linie='54' THEN AE_mtl.Linie:='GSI';
        IF AE_mtl.Linie='55' THEN AE_mtl.Linie:='KIN';
        IF AE_mtl.Linie='56' THEN AE_mtl.Linie:='IKA';
        IF AE_mtl.Linie='57' THEN AE_mtl.Linie:='ACC';
      IF AE_mtl.Linie='5710' THEN AE_mtl.Linie:='ACA';
      IF AE_mtl.Linie='5720' THEN AE_mtl.Linie:='ACP';
      IF AE_mtl.Linie='5730' THEN AE_mtl.Linie:='ASS';
        IF AE_mtl.Linie='58' THEN AE_mtl.Linie:='ACL';
        IF AE_mtl.Linie='59' THEN AE_mtl.Linie:='ACS';
      //  IF AE_mtl.Linie='60' THEN AE_mtl.Linie:='SSC';
      //  IF AE_mtl.Linie='61' THEN AE_mtl.Linie:='JEL';
      //  IF AE_mtl.Linie='65' THEN AE_mtl.Linie:='WWC';
      //  IF AE_mtl.Linie='66' THEN AE_mtl.Linie:='SYC';
      //  IF AE_mtl.Linie='68' THEN AE_mtl.Linie:='WML';
        IF AE_mtl.Linie='69' THEN AE_mtl.Linie:='CIR';
      //  IF AE_mtl.Linie='73' THEN AE_mtl.Linie:='C2M';
        IF AE_mtl.Linie='74' THEN AE_mtl.Linie:='DIG';
      //  IF AE_mtl.Linie='75' THEN AE_mtl.Linie:='PHY';
      //  IF AE_mtl.Linie='76' THEN AE_mtl.Linie:='SBT';
      //  IF AE_mtl.Linie='77' THEN AE_mtl.Linie:='CEC';
        IF AE_mtl.Linie='78' THEN AE_mtl.Linie:='HAL';
      //  IF AE_mtl.Linie='79' THEN AE_mtl.Linie:='ASD';
      //  IF AE_mtl.Linie='80' THEN AE_mtl.Linie:='MAG';
      //  IF AE_mtl.Linie='81' THEN AE_mtl.Linie:='INI';
        IF AE_mtl.Linie='82' THEN AE_mtl.Linie:='SPL';
      //  IF AE_mtl.Linie='83' THEN AE_mtl.Linie:='RLI';
      //  IF AE_mtl.Linie='84' THEN AE_mtl.Linie:='ANS';
        IF AE_mtl.Linie='85' THEN AE_mtl.Linie:='FER';
        IF AE_mtl.Linie='86' THEN AE_mtl.Linie:='FES';
        IF AE_mtl.Linie='87' THEN AE_mtl.Linie:='FET';
        IF AE_mtl.Linie='88' THEN AE_mtl.Linie:='WIS';
        IF AE_mtl.Linie='89' THEN AE_mtl.Linie:='WIT';
        IF AE_mtl.Linie='96' THEN AE_mtl.Linie:='TSG';
        IF AE_mtl.Linie='9610' THEN AE_mtl.Linie:='ASP';
        IF AE_mtl.Linie='9620' THEN AE_mtl.Linie:='FEP';
        IF AE_mtl.Linie='9630' THEN AE_mtl.Linie:='WIP';
        IF AE_mtl.Linie='97' THEN AE_mtl.Linie:='SON';
        IF AE_mtl.Linie='98' THEN AE_mtl.Linie:='SON';
        IF AE_mtl.Linie='99' THEN AE_mtl.Linie:='TOP';

        AE_mtl.MODIFY;
       UNTIL AE_mtl.NEXT = 0;

      END;
    END;

    PROCEDURE "BB Diff ermitteln"@1140014();
    BEGIN
      // berprft UB Stand 26.11.2018

      // ANFANG zurcksetzen Status auf NN zwecks Programmtests
      //        kann bei Echtbetrieb unterbleiben!!!
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','ALT');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
        tab_ab_bw.Status:='NN';
        tab_ab_bw.Stat_Artikel:='NN';
        tab_ab_bw.Stat_Menge:='NN';
        tab_ab_bw.Stat_EK:='NN';
        tab_ab_bw.Stat_VK:='NN';
        tab_ab_bw.MODIFY;
      UNTIL tab_ab_bw.NEXT = 0;
      END;
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','NEU');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
        tab_ab_bw.Status:='NN';
        tab_ab_bw.Stat_Artikel:='NN';
        tab_ab_bw.Stat_Menge:='NN';
        tab_ab_bw.Stat_EK:='NN';
        tab_ab_bw.Stat_VK:='NN';
        tab_ab_bw.MODIFY;
      UNTIL tab_ab_bw.NEXT = 0;
      END;
      // ENDE zurcksetzen Status auf NN zwecks Programmtests


      //  ANFANG Vergleich zwischen NEU und ALT (tab_ab_bw=NEU  und prf=ALT)
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','NEU');
      IF tab_ab_bw.FIND('-') THEN BEGIN
      REPEAT
      prf.RESET;
      prf.SETFILTER(prf.Belegart,'%1','BEšW');
      prf.SETFILTER(prf.AU_Nr,'%1',tab_ab_bw.AU_Nr);
      prf.SETFILTER(prf.POS_Nr,'%1',tab_ab_bw.POS_Nr);
      prf.SETFILTER(prf.Art,'%1','ALT');
      IF prf.FIND('-') THEN BEGIN
        IF prf.Artikel=tab_ab_bw.Artikel THEN BEGIN
          tab_ab_bw.Stat_Artikel:='OK';
          prf.Stat_Artikel:='OK';
        END ELSE BEGIN
          tab_ab_bw.Stat_Artikel:='AF';
          tab_ab_bw.Status:='ŽN';
          prf.Stat_Artikel:='AF';
          prf.Status:='ŽN';
        END;

        IF prf.Menge=tab_ab_bw.Menge THEN BEGIN
         tab_ab_bw.Stat_Menge:='OK';
         prf.Stat_Menge:='OK';
      // ANFANG  Rechnungsmengenprfung bei Menge OK
            IF prf.Restmenge=tab_ab_bw.Restmenge THEN BEGIN
            END ELSE BEGIN
             tab_ab_bw.Stat_Menge:='MR';
             tab_ab_bw.Status:='ŽN';
             prf.Stat_Menge:='MR';
             prf.Status:='ŽN';
            END;
      // ENDE  Rechnungsmengenprfung bei Menge OK
        END ELSE BEGIN
         tab_ab_bw.Stat_Menge:='MF';
         tab_ab_bw.Status:='ŽN';
         prf.Stat_Menge:='MF';
         prf.Status:='ŽN';
        END;

        IF prf.Restmenge=tab_ab_bw.Restmenge THEN BEGIN
        END ELSE BEGIN
         tab_ab_bw.Stat_Menge:='MR';
         tab_ab_bw.Status:='ŽN';
         prf.Stat_Menge:='MR';
         prf.Status:='ŽN';
        END;


        IF prf.EK=tab_ab_bw.EK THEN BEGIN
         tab_ab_bw.Stat_EK:='OK';
         prf.Stat_EK:='OK';
        END ELSE BEGIN
         tab_ab_bw.Stat_EK:='EF';
         tab_ab_bw.Status:='ŽN';
         prf.Stat_EK:='EF';
         prf.Status:='ŽN';
        END;
        tab_ab_bw.MODIFY;
        prf.MODIFY;
      END;
      UNTIL tab_ab_bw.NEXT = 0;
      END;
      //  ENDE Diff. feststellen Artikel, Menge, EK, VK
      //  ANFANG Status auf OK setzen, wenn keine Abweichnung vorliegt
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','NEU');
      tab_ab_bw.SETFILTER(tab_ab_bw.Stat_Artikel,'%1','OK');
      tab_ab_bw.SETFILTER(tab_ab_bw.Stat_Menge,'%1','OK');
      tab_ab_bw.SETFILTER(tab_ab_bw.Stat_EK,'%1','OK');
      IF tab_ab_bw.FIND('-') THEN BEGIN
      REPEAT
       tab_ab_bw.Status:='OK';
       tab_ab_bw.MODIFY;
      UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','ALT');
      tab_ab_bw.SETFILTER(tab_ab_bw.Stat_Artikel,'%1','OK');
      tab_ab_bw.SETFILTER(tab_ab_bw.Stat_Menge,'%1','OK');
      tab_ab_bw.SETFILTER(tab_ab_bw.Stat_EK,'%1','OK');
      IF tab_ab_bw.FIND('-') THEN BEGIN
      REPEAT
       tab_ab_bw.Status:='OK';
       tab_ab_bw.MODIFY;
      UNTIL tab_ab_bw.NEXT = 0;
      END;
      //  ENDE   Status auf OK setzen, wenn keine Abweichnung vorliegt

      //  ANFANG Feststellen, ob neuer Auftrag/Pos vorliegt
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','NEU');
      tab_ab_bw.SETFILTER(tab_ab_bw.Status,'%1','NN');
      IF tab_ab_bw.FIND('-') THEN BEGIN
      REPEAT

       prf.RESET;
       tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
       prf.SETFILTER(prf.Art,'%1','ALT');
       prf.SETFILTER(prf.AU_Nr,'%1',tab_ab_bw.AU_Nr);
        IF prf.FINDFIRST THEN BEGIN
      //  Neue Position zu altem Auftrag
              tab_ab_bw.Status:='NP';
              tab_ab_bw.MODIFY;
        END ELSE BEGIN
      //  Neuer Auftrag
           tab_ab_bw.Status:='NA';
           tab_ab_bw.MODIFY;

        END;
      UNTIL tab_ab_bw.NEXT = 0;
      END;
      //  ENDE   Feststellen, ob neuer Auftrag/Pos vorliegt

      // ANFANG  Feststellen, ob ein Auftrag/Pos storniert wurde
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','ALT');
      tab_ab_bw.SETFILTER(tab_ab_bw.Status,'%1','NN');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
        var_re_menge:=0;
       best.RESET;
       best.SETFILTER(best."Order No.",'%1',tab_ab_bw.AU_Nr);
       best.SETFILTER(best."Order Line No.",'%1',tab_ab_bw.POS_Nr);
       IF best.FINDFIRST THEN BEGIN
         REPEAT
           tab_ab_bw.Status:='ST';
           tab_ab_bw.MODIFY;

           var_be_menge:=var_be_menge+best.Quantity;
         UNTIL best.NEXT = 0;
         IF var_be_menge>0 THEN
         BEGIN
         tab_ab_bw.Status:='BE';
         END;
         tab_ab_bw.re_menge:=var_be_menge;
         tab_ab_bw.MODIFY;
        var_be_menge:=0;
       END
        ELSE BEGIN
      //  Storno der Zeile
           tab_ab_bw.Status:='ST';
           tab_ab_bw.MODIFY;
        END;
      UNTIL tab_ab_bw.NEXT = 0;
      END;


      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','ALT');
      tab_ab_bw.SETFILTER(tab_ab_bw.Status,'%1','ŽN');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
        var_be_menge:=0;
       best.RESET;
       best.SETFILTER(best."Order No.",'%1',tab_ab_bw.AU_Nr);
       best.SETFILTER(best."Order Line No.",'%1',tab_ab_bw.POS_Nr);
       IF best.FINDFIRST THEN BEGIN
         REPEAT
           var_be_menge:=var_be_menge+best.Quantity;
         UNTIL best.NEXT = 0;
         IF var_be_menge>0 THEN
         BEGIN
         tab_ab_bw.Status:='BE';
         END;
         tab_ab_bw.re_menge:=var_be_menge;
         tab_ab_bw.MODIFY;
        var_be_menge:=0;
       END
        ELSE BEGIN
      //  Storno der Zeile
           tab_ab_bw.Status:='ST';
           tab_ab_bw.MODIFY;
        END;
      UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','NEU');
      tab_ab_bw.SETFILTER(tab_ab_bw.Status,'%1','ŽN');

      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
        var_be_menge:=0;
       best.RESET;
       best.SETFILTER(best."Order No.",'%1',tab_ab_bw.AU_Nr);
       best.SETFILTER(best."Order Line No.",'%1',tab_ab_bw.POS_Nr);
       IF best.FINDFIRST THEN BEGIN
         REPEAT
           var_be_menge:=var_be_menge+best.Quantity;
         UNTIL best.NEXT = 0;
         IF var_be_menge>0 THEN
         BEGIN
         tab_ab_bw.Status:='BE';
         END;
         tab_ab_bw.re_menge:=var_be_menge;
         tab_ab_bw.MODIFY;
        var_be_menge:=0;
       END
        ELSE BEGIN
      //  Storno der Zeile
           tab_ab_bw.Status:='ST';
           tab_ab_bw.MODIFY;
        END;
      UNTIL tab_ab_bw.NEXT = 0;
      END;
      // ENDE    Feststellen, ob ein Auftrag/Pos storniert wurde

      // ANFANG  Feststellen, ob BE_Mengen mit AU_Mengen bereinstimmen
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','ALT');
      tab_ab_bw.SETFILTER(tab_ab_bw.Status,'%1','BE');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
          IF tab_ab_bw.Menge=tab_ab_bw.re_menge THEN BEGIN
            tab_ab_bw.Status:='OK';
          END ELSE BEGIN
            tab_ab_bw.Status:='GP';
          END;
          IF tab_ab_bw.Restmenge=0 THEN BEGIN
            tab_ab_bw.Status:='FA';
          END;

          tab_ab_bw.MODIFY;
      UNTIL tab_ab_bw.NEXT = 0;
      END;
      //   ENDE  Feststellen, ob BE_Mengen mit AU_Mengen bereinstimmen


      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','ALT');
      tab_ab_bw.SETFILTER(tab_ab_bw.Status,'%1','FA');
      tab_ab_bw.SETFILTER(tab_ab_bw.Stat_Menge,'%1','NN');
      tab_ab_bw.SETFILTER(tab_ab_bw.Stat_Artikel,'%1','NN');
      tab_ab_bw.SETFILTER(tab_ab_bw.Stat_EK,'%1','NN');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
      IF tab_ab_bw.re_menge=tab_ab_bw.Menge THEN BEGIN
        tab_ab_bw.Status:='OK';
        tab_ab_bw.MODIFY;
      END;
      UNTIL tab_ab_bw.NEXT = 0;
      END;


      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1','NEU');
      tab_ab_bw.SETFILTER(tab_ab_bw.Status,'%1','BE');
      tab_ab_bw.SETFILTER(tab_ab_bw.Stat_Menge,'%1','MR');
      tab_ab_bw.SETFILTER(tab_ab_bw.Stat_Artikel,'%1','OK');
      tab_ab_bw.SETFILTER(tab_ab_bw.Stat_EK,'%1','OK');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
      IF ((tab_ab_bw.re_menge=tab_ab_bw.Menge) AND (tab_ab_bw.Restmenge=0)) THEN BEGIN
        tab_ab_bw.Status:='OK';
        tab_ab_bw.MODIFY;
      END;
      UNTIL tab_ab_bw.NEXT = 0;
      END;

      //  ENDE   Vergleich zwischen NEU und ALT

      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,'Bestellbestandsberwachung  ','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Stand:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,FORMAT(WORKDATE),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      RowNo := 2;
      EnterCell(RowNo,1,'Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'AU-Nr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Pos-Nr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Debitor','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Artikel','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Menge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Restmenge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'EK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'VK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Art','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'Status','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'Art Diff','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'Menge Diff','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,'EK Diff','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'VK Diff','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,'WŽ','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,'W„ Kurs','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,'RE Menge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,'urspr AU-Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      RowNo := 3;
      var_AU_Nr := 'AU200000';
      tab_ab_bw.RESET;
      tab_ab_bw.SETCURRENTKEY(Belegart,AU_Nr,POS_Nr,Datum);
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1|%2', 'NEU', 'ALT');
      tab_ab_bw.SETFILTER(tab_ab_bw.Status,'%1|%2|%3|%4|%5|%6', 'NP', 'ŽN', 'ST', 'GP', 'FA', 'BE');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
         IF tab_ab_bw.AU_Nr=var_AU_Nr THEN BEGIN
           IF tab_ab_bw.Stat_Artikel ='AF' THEN BEGIN
            EnterCell(RowNo,1,FORMAT(tab_ab_bw.Datum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            EnterCell(RowNo,2,tab_ab_bw.AU_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,FORMAT(tab_ab_bw.POS_Nr),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,4,tab_ab_bw.Debitor,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,tab_ab_bw.Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,6,FORMAT(tab_ab_bw.Menge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,7,FORMAT(tab_ab_bw.Restmenge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,8,FORMAT(tab_ab_bw.EK),'',FALSE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,9,FORMAT(tab_ab_bw.VK),'',FALSE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,10,tab_ab_bw.Art,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,11,tab_ab_bw.Status,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,12,tab_ab_bw.Stat_Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,13,tab_ab_bw.Stat_Menge,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,14,FORMAT(tab_ab_bw.Stat_EK),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,15,FORMAT(tab_ab_bw.Stat_VK),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,16,tab_ab_bw.W„hrungscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,17,FORMAT(tab_ab_bw.w„_faktor),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,18,FORMAT(tab_ab_bw.re_menge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,19,FORMAT(tab_ab_bw.Auftragsdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            RowNo := RowNo +1;
            END;
          END ELSE BEGIN
            IF tab_ab_bw.Stat_Artikel ='AF' THEN BEGIN
              RowNo := RowNo +1;
              EnterCell(RowNo,1,FORMAT(tab_ab_bw.Datum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,2,tab_ab_bw.AU_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,3,FORMAT(tab_ab_bw.POS_Nr),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,4,tab_ab_bw.Debitor,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,5,tab_ab_bw.Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,6,FORMAT(tab_ab_bw.Menge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,7,FORMAT(tab_ab_bw.Restmenge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,9,FORMAT(tab_ab_bw.EK),'',FALSE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,10,FORMAT(tab_ab_bw.VK),'',FALSE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,11,tab_ab_bw.Art,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,12,tab_ab_bw.Status,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,13,tab_ab_bw.Stat_Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,14,tab_ab_bw.Stat_Menge,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,15,FORMAT(tab_ab_bw.Stat_EK),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,16,FORMAT(tab_ab_bw.Stat_VK),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,17,tab_ab_bw.W„hrungscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,18,FORMAT(tab_ab_bw.w„_faktor),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,19,FORMAT(tab_ab_bw.re_menge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,20,FORMAT(tab_ab_bw.Auftragsdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              RowNo := RowNo +1;
            END;
            var_AU_Nr := tab_ab_bw.AU_Nr;
          END;
        UNTIL tab_ab_bw.NEXT = 0;
      END;

      var_AU_Nr:='AU200000';
      tab_ab_bw.RESET;
      tab_ab_bw.SETCURRENTKEY(Belegart,AU_Nr,POS_Nr,Datum);
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','BEšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1|%2', 'NEU', 'ALT');
      tab_ab_bw.SETFILTER(tab_ab_bw.Stat_Artikel,'<>%1','AF');
      tab_ab_bw.SETFILTER(tab_ab_bw.Status,'%1|%2|%3|%4|%5|%6', 'NP', 'ŽN', 'ST', 'GP', 'FA', 'BE');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          IF tab_ab_bw.AU_Nr=var_AU_Nr THEN BEGIN
            EnterCell(RowNo,1,FORMAT(tab_ab_bw.Datum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            EnterCell(RowNo,2,tab_ab_bw.AU_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,FORMAT(tab_ab_bw.POS_Nr),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,4,tab_ab_bw.Debitor,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,tab_ab_bw.Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,6,FORMAT(tab_ab_bw.Menge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,7,FORMAT(tab_ab_bw.Restmenge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,8,FORMAT(tab_ab_bw.EK),'',FALSE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,9,FORMAT(tab_ab_bw.VK),'',FALSE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,10,tab_ab_bw.Art,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,11,tab_ab_bw.Status,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,12,tab_ab_bw.Stat_Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,13,tab_ab_bw.Stat_Menge,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,14,FORMAT(tab_ab_bw.Stat_EK),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,15,FORMAT(tab_ab_bw.Stat_VK),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,16,tab_ab_bw.W„hrungscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,17,FORMAT(tab_ab_bw.w„_faktor),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,18,FORMAT(tab_ab_bw.re_menge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,19,FORMAT(tab_ab_bw.Auftragsdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            RowNo := RowNo +1;
          END ELSE BEGIN
            RowNo := RowNo +1;
            EnterCell(RowNo,1,FORMAT(tab_ab_bw.Datum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            EnterCell(RowNo,2,tab_ab_bw.AU_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,FORMAT(tab_ab_bw.POS_Nr),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,4,tab_ab_bw.Debitor,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,tab_ab_bw.Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,6,FORMAT(tab_ab_bw.Menge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,7,FORMAT(tab_ab_bw.Restmenge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,8,FORMAT(tab_ab_bw.EK),'',FALSE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,9,FORMAT(tab_ab_bw.VK),'',FALSE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,10,tab_ab_bw.Art,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,11,tab_ab_bw.Status,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,12,tab_ab_bw.Stat_Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,13,tab_ab_bw.Stat_Menge,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,14,FORMAT(tab_ab_bw.Stat_EK),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,15,FORMAT(tab_ab_bw.Stat_VK),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,16,tab_ab_bw.W„hrungscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,17,FORMAT(tab_ab_bw.w„_faktor),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,18,FORMAT(tab_ab_bw.re_menge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,19,FORMAT(tab_ab_bw.Auftragsdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            RowNo := RowNo +1;
            var_AU_Nr := tab_ab_bw.AU_Nr;
          END;
        UNTIL tab_ab_bw.NEXT = 0;
      END;

      CloseExcel(bb_Filename,bb_Filename,'F:\Daten Neu\User\Joachim\AB-Differenzen');
      MESSAGE('Differenzen wurden ordnungsgem„á nach Excel exportiert.');
    END;

    PROCEDURE Auftrag_sichern@1140015();
    BEGIN
      // berprft UB Stand 26.11.2018
      // ANFANG Einfgen von neuem AU
      AE_mtl.RESET;
      tab_ab.RESET;
      tab_vkk.RESET;
      tab_vkk.SETFILTER(tab_vkk."No.",'%1',AU_Nr_sich);
       IF tab_vkk.FINDFIRST THEN
       REPEAT
         tab_ab.RESET;
         tab_ab.SETFILTER(tab_ab."Document No.",'%1',tab_vkk."No.");
         tab_ab.SETFILTER(tab_ab."Document Type",'%1', tab_ab."Document Type"::Order);
         tab_ab.SETFILTER(tab_ab.Type,'%1',tab_ab.Type::Item);
         tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
         tab_ab.SETFILTER(tab_ab.Quantity,'>%1',0);
           IF tab_ab.FINDFIRST  THEN
            REPEAT
             AE_mtl.INIT;
                 AE_mtl.Datum:=WORKDATE;
                 AE_mtl.AU_Nr:=tab_ab."Document No.";
                 AE_mtl.POS_Nr:=tab_ab."Line No.";
                 AE_mtl.Belegart:='AETG';
                 AE_mtl.Deb_Nr:=tab_ab."Sell-to Customer No.";
                 AE_mtl.Artikel:=tab_ab."No.";
                 AE_mtl.Menge:=tab_ab.Quantity;
                 AE_mtl.Restmenge:=tab_ab."Outstanding Quantity";
                 AE_mtl.EK:=tab_ab."Unit Cost (LCY)";
                 AE_mtl.VK:=tab_ab."Unit Price";
                 AE_mtl."Best„tigt LD":=tab_ab."Promised Delivery Date";
                 AE_mtl.Wunschdatum:=tab_ab."Requested Delivery Date";
                 AE_mtl.Status:='AE';
                 AE_mtl.Art:='TAG';
                 AE_mtl."EK Gesamt":=ROUND(((tab_ab.Quantity)*(tab_ab."Unit Cost (LCY)")),0.01);
                 AE_mtl."VK Gesamt":=ROUND(((tab_ab.Quantity)*(tab_ab."Unit Price")),0.01);
                 AE_mtl.Lager:=tab_ab."Location Code";
                 AE_mtl."DB %":=tab_ab."Profit %";
                 AE_mtl.Linie:=tab_ab."Manufacturer Code";
                 AE_mtl.Endkunde:=tab_ab.Endkunde;
                  tab_vkk1.RESET;
                  tab_vkk1.SETFILTER(tab_vkk1."No.",'%1',AE_mtl.AU_Nr);
                   IF tab_vkk1.FINDFIRST THEN
                    BEGIN
                    AE_mtl.Debitor:=tab_vkk1."Sell-to Customer Name";
                    AE_mtl.W„hrungscode:=tab_vkk1."Currency Code";
                    AE_mtl.w„_faktor:=tab_vkk1."Currency Factor";
                    AE_mtl.Auftragsdatum:=tab_vkk1."Order Date";
                    AE_mtl.Betreuer:=tab_vkk1."Betreuer Innendienst";
                    AE_mtl.Vertreter:=tab_vkk1."Salesperson Code";
                    AE_mtl.Teams:=tab_vkk1.Teams;
                    AE_mtl.Gebietscode:=tab_vkk1."Territory Code";
                    AE_mtl.PLZ:=tab_vkk1."Sell-to Post Code";
                   END;
                 IF AE_mtl.w„_faktor=0 THEN BEGIN
                 AE_mtl."Betrag in EUR":=AE_mtl."VK Gesamt";
                 END ELSE BEGIN
                 AE_mtl."Betrag in EUR":=(AE_mtl."VK Gesamt"/AE_mtl.w„_faktor);
                 END;
            AE_mtl.INSERT;
         UNTIL tab_ab.NEXT = 0;

      UNTIL tab_vkk.NEXT = 0;
      //  ENDE Einfgen von neuem AU

      "Linien umsetzen";
    END;

    PROCEDURE Auftrag_Arch_sichern@1140065();
    BEGIN
      // berprft UB Stand 26.11.2018
      // ANFANG Einfgen von archiviertem AU
      AE_mtl.RESET;
      tab_ab_arch.RESET;
      tab_vkk_arch.RESET;
      tab_vkk_arch.SETFILTER(tab_vkk_arch."No.",'%1',AU_Arch_Nr_sich);
      IF tab_vkk_arch.FINDLAST THEN BEGIN
         tab_ab_arch.RESET;
         tab_ab_arch.SETFILTER(tab_ab_arch."Document No.",'%1',tab_vkk_arch."No.");
         tab_ab_arch.SETFILTER(tab_ab_arch."Document Type",'%1', tab_ab_arch."Document Type"::Order);
         tab_ab_arch.SETFILTER(tab_ab_arch.Type,'%1',tab_ab_arch.Type::Item);
         tab_ab_arch.SETFILTER(tab_ab_arch."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
         tab_ab_arch.SETFILTER(tab_ab_arch.Quantity,'>%1',0);
         tab_ab_arch.SETFILTER(tab_ab_arch."Version No.",'%1',tab_vkk_arch."Version No.");
           IF tab_ab_arch.FINDFIRST  THEN BEGIN
            REPEAT
             AE_mtl.INIT;
                 AE_mtl.Datum:=WORKDATE;
                 AE_mtl.AU_Nr:=tab_ab_arch."Document No.";
                 AE_mtl.POS_Nr:=tab_ab_arch."Line No.";
                 AE_mtl.Belegart:='AETG';
                 AE_mtl.Deb_Nr:=tab_ab_arch."Sell-to Customer No.";
                 AE_mtl.Artikel:=tab_ab_arch."No.";
                 AE_mtl.Menge:=tab_ab_arch.Quantity;
                 AE_mtl.Restmenge:=tab_ab_arch."Outstanding Quantity";
                 AE_mtl.EK:=tab_ab_arch."Unit Cost (LCY)";
                 AE_mtl.VK:=tab_ab_arch."Unit Price";
                 AE_mtl."Best„tigt LD":=tab_ab_arch."Promised Delivery Date";
                 AE_mtl.Wunschdatum:=tab_ab_arch."Requested Delivery Date";
                 AE_mtl.Status:='AE';
                 AE_mtl.Art:='TAG';
                 AE_mtl."EK Gesamt":=ROUND(((tab_ab_arch.Quantity)*(tab_ab_arch."Unit Cost (LCY)")),0.01);
                 AE_mtl."VK Gesamt":=ROUND(((tab_ab_arch.Quantity)*(tab_ab_arch."Unit Price")),0.01);
                 AE_mtl.Lager:=tab_ab_arch."Location Code";
                 AE_mtl."DB %":=tab_ab_arch."Profit %";
                 AE_mtl.Linie:=tab_ab_arch."Manufacturer Code";
                 AE_mtl.Endkunde:=tab_ab_arch.Endkunde;
                  tab_vkk1_arch.RESET;
                  tab_vkk1_arch.SETFILTER(tab_vkk1_arch."No.",'%1',AE_mtl.AU_Nr);
                   IF tab_vkk1_arch.FINDLAST THEN
                    BEGIN
                    AE_mtl.Debitor:=tab_vkk1_arch."Sell-to Customer Name";
                    AE_mtl.W„hrungscode:=tab_vkk1_arch."Currency Code";
                    AE_mtl.w„_faktor:=tab_vkk1_arch."Currency Factor";
                    AE_mtl.Auftragsdatum:=tab_vkk1_arch."Order Date";
                    AE_mtl.Betreuer:=tab_vkk1_arch."Betreuer Innendienst";
                    AE_mtl.Vertreter:=tab_vkk1_arch."Salesperson Code";
                    AE_mtl.Teams:=tab_vkk1_arch.Teams;
                    AE_mtl.Gebietscode:=tab_vkk1_arch."Territory Code";
                    AE_mtl.PLZ:=tab_vkk1_arch."Sell-to Post Code";
                   END;
                 IF AE_mtl.w„_faktor=0 THEN BEGIN
                 AE_mtl."Betrag in EUR":=AE_mtl."VK Gesamt";
                 END ELSE BEGIN
                 AE_mtl."Betrag in EUR":=(AE_mtl."VK Gesamt"/AE_mtl.w„_faktor);
                 END;
            AE_mtl.INSERT;
         UNTIL tab_ab_arch.NEXT = 0;
        END
      END;
      //  ENDE Einfgen von archiviertem AU

      "Linien umsetzen";
    END;

    PROCEDURE "Konto Salden holen"@1140026();
    BEGIN
      // berprft UB Stand 26.11.2018
      // ANFANG Kontensalden in Excel ausgeben
      IF kto_datum = 010199D THEN BEGIN
        kto_datum:=WORKDATE;
      END ELSE BEGIN
      END;
      sum_kont4021:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4021');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4021:=sum_kont4021+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4022:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4022');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4022:=sum_kont4022+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4023:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4023');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4023:=sum_kont4023+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4025:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4025');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4025:=sum_kont4025+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4118:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4118');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4118:=sum_kont4118+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4120:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4120');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4120:=sum_kont4120+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4122:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4122');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4122:=sum_kont4122+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4221:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4221');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4221:=sum_kont4221+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4222:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4222');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4222:=sum_kont4222+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4223:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4223');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4223:=sum_kont4223+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4225:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4225');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4225:=sum_kont4225+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4317:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4317');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4317:=sum_kont4317+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4338:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4338');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4338:=sum_kont4338+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4407:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4407');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4407:=sum_kont4407+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4408:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4408');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4408:=sum_kont4408+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4412:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4412');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4412:=sum_kont4412+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4416:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4416');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4416:=sum_kont4416+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4418:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4418');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4418:=sum_kont4418+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4421:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4421');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4421:=sum_kont4421+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4422:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4422');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4422:=sum_kont4422+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4423:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4423');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4423:=sum_kont4423+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4424:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4424');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4424:=sum_kont4424+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4425:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4425');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4425:=sum_kont4425+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      sum_kont4690:=0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'<=%1',kto_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4690');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4690:=sum_kont4690+sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,3,'4021','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'4022','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'4023','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'4025','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      EnterCell(RowNo,7,'4118','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'4120','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'4122','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'4221','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'4222','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'4223','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'4225','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      EnterCell(RowNo,14,'4317','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'4338','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,'4407','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,'4408','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,'4412','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,'4416','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,20,'4418','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,21,'4421','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,22,'4422','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,23,'4423','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,24,'4424','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,25,'4425','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,26,'4690','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 2;
      EnterCell(RowNo,3,FORMAT(sum_kont4021*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,4,FORMAT(sum_kont4022*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,5,FORMAT(sum_kont4023*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,6,FORMAT(sum_kont4025*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,7,FORMAT(sum_kont4118*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,8,FORMAT(sum_kont4120*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,9,FORMAT(sum_kont4122*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,10,FORMAT(sum_kont4221*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,11,FORMAT(sum_kont4222*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,12,FORMAT(sum_kont4223*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,13,FORMAT(sum_kont4225*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,14,FORMAT(sum_kont4317*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,15,FORMAT(sum_kont4338*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,16,FORMAT(sum_kont4407*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,17,FORMAT(sum_kont4408*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,18,FORMAT(sum_kont4412*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,19,FORMAT(sum_kont4416*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,20,FORMAT(sum_kont4418*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,21,FORMAT(sum_kont4421*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,22,FORMAT(sum_kont4422*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,23,FORMAT(sum_kont4423*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,24,FORMAT(sum_kont4424*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,25,FORMAT(sum_kont4425*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,26,FORMAT(sum_kont4690*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      sum_kont4021 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4021');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4021 := sum_kont4021 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4022 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4022');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4022 := sum_kont4022 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4023 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4023');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4023 := sum_kont4023 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4025 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4025');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4025 := sum_kont4025 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4118 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4118');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4118 := sum_kont4118 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4120 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4120');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4120 := sum_kont4120 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4122 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4122');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4122 := sum_kont4122 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4221 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4221');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4221 := sum_kont4221 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4222 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4222');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4222 := sum_kont4222 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4223 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4223');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4223 := sum_kont4223 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4225 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4225');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4225 := sum_kont4225 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4317 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4317');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4317 := sum_kont4317 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4338 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4338');
      IF sachposten.FINDFIRST THEN BEGIN
      REPEAT
        sum_kont4338 := sum_kont4338 + sachposten.Amount;
      UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4407 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4407');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
         sum_kont4407 := sum_kont4407 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4408 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4408');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4408 := sum_kont4408 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4412 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4412');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4412 := sum_kont4412 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4416 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4416');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4416 := sum_kont4416 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4418 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4418');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4418 := sum_kont4418 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4421 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4421');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4421 := sum_kont4421 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4422 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4422');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4422 := sum_kont4422 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4423 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4423');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4423 := sum_kont4423 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4424 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4424');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4424 := sum_kont4424 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4425 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4425');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4425 := sum_kont4425 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;

      sum_kont4690 := 0;
      sachposten.RESET;
      sachposten.SETFILTER(sachposten."Posting Date",'%1',saldo_heute_datum);
      sachposten.SETFILTER(sachposten."G/L Account No.",'%1','4690');
      IF sachposten.FINDFIRST THEN BEGIN
        REPEAT
          sum_kont4690 := sum_kont4690 + sachposten.Amount;
        UNTIL sachposten.NEXT = 0;
      END;
      RowNo := 4;
      EnterCell(RowNo,1,'Tagessaldo','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,FORMAT(sum_kont4021*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,4,FORMAT(sum_kont4022*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,5,FORMAT(sum_kont4023*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,6,FORMAT(sum_kont4025*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,7,FORMAT(sum_kont4118*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,8,FORMAT(sum_kont4120*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,9,FORMAT(sum_kont4122*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,10,FORMAT(sum_kont4221*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,11,FORMAT(sum_kont4222*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,12,FORMAT(sum_kont4223*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,13,FORMAT(sum_kont4225*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,14,FORMAT(sum_kont4317*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,15,FORMAT(sum_kont4338*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,16,FORMAT(sum_kont4407*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,17,FORMAT(sum_kont4408*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,18,FORMAT(sum_kont4412*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,19,FORMAT(sum_kont4416*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,20,FORMAT(sum_kont4418*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,21,FORMAT(sum_kont4421*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,22,FORMAT(sum_kont4422*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,23,FORMAT(sum_kont4423*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,24,FORMAT(sum_kont4424*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,25,FORMAT(sum_kont4425*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);
      EnterCell(RowNo,26,FORMAT(sum_kont4690*(-1)),'',FALSE,FALSE,FALSE,'##,###,##0.00',TempExcelBuffer."Cell Type"::Number);

      CloseExcel('Kontensaldo_Abstimmung','Kontensaldo_Abstimmung','F:\Daten Neu\User\Uwe\Navision_2016');
      MESSAGE('%1 Erfolgreich gespeichert.','F:\Daten Neu\User\Uwe\Navision_2016\Kontensaldo_Abstimmung');
    END;

    PROCEDURE "AE Salden t„gl gesamt"@1140044();
    BEGIN
      // berprft UB Stand 26.11.2018
      // ANFANG tgl. AE als Gesamtsumme in Excel ausgeben

      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,'Auftragseingang  ','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 2;
      EnterCell(RowNo,1,'Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Betrag in EUR','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 3;

      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');;
      AE_mtl.SETFILTER(AE_mtl.Datum,'>%1',010714D);
      IF AE_mtl.FINDFIRST THEN BEGIN
        AE_t„gl_datum := AE_mtl.Datum;
        REPEAT
          IF AE_t„gl_datum = AE_mtl.Datum THEN BEGIN
           AE_t„gl_gesamt := AE_t„gl_gesamt + AE_mtl."Betrag in EUR";
          END ELSE BEGIN
            EnterCell(RowNo,1,FORMAT(AE_t„gl_datum),'',FALSE,FALSE,FALSE,'dd.mm.yyy',TempExcelBuffer."Cell Type"::Date);
            EnterCell(RowNo,2,FORMAT(AE_t„gl_gesamt),'',FALSE,FALSE,FALSE,'#,###,##0.00',TempExcelBuffer."Cell Type"::Number);
            AE_t„gl_gesamt := 0;
            AE_t„gl_gesamt := AE_t„gl_gesamt + AE_mtl."Betrag in EUR";
            RowNo := RowNo +1;
          END;
        AE_t„gl_datum := AE_mtl.Datum;
        UNTIL AE_mtl.NEXT = 0;
      END;
      CloseExcel('tgl_AE_Salden','tgl_AE_Salden','');
    END;

    PROCEDURE AE_Vertrieb1@1140047();
    BEGIN
      // berprft UB Stand 26.11.2018
      IF Filename = '' THEN
        ERROR(Text100);

      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,Text001,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
      EnterCell(RowNo,1,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,Text025,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,Text026,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,Text027,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,Text028,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,Text029,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,Text030,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,Text031,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,Text032,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,Text033,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,Text034,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,Text035,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,Text036,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,Text037,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,Text038,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,20,Text039,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,21,Text040,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;

      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(AE_mtl.Betreuer,'%1|%2','ESK','NM');
      IF AE_mtl.FINDFIRST THEN BEGIN
        REPEAT
          EnterCell(RowNo,1,FORMAT(AE_mtl.Datum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
          EnterCell(RowNo,2,AE_mtl.AU_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,AE_mtl.Deb_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,AE_mtl.Debitor,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,FORMAT(AE_mtl.Menge),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,6,AE_mtl.Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,7,AE_mtl.Lager,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,8,FORMAT(AE_mtl.EK),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,9,FORMAT(AE_mtl.VK),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,10,AE_mtl.W„hrungscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,11,FORMAT(AE_mtl.w„_faktor),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,12,FORMAT(AE_mtl."Betrag in EUR"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,13,FORMAT(AE_mtl."DB %"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,14,AE_mtl.Betreuer,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,15,AE_mtl.Vertreter,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,16,AE_mtl.Linie,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,17,FORMAT(AE_mtl."EK Gesamt"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,18,AE_mtl.PLZ,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,19,AE_mtl.Endkunde,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,20,AE_mtl.Teams,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,21,AE_mtl.Gebietscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo + 1;
        UNTIL AE_mtl.NEXT = 0;
      END;

      tab_vkk.RESET;
      tab_vkk.SETFILTER(tab_vkk."Order Date",'%1',AE_holen_Datum);
      tab_vkk.SETFILTER(tab_vkk."Document Type",'%1',tab_vkk."Document Type"::Order);
      tab_vkk.SETFILTER(tab_vkk."Betreuer Innendienst",'%1|%2','ESK','NM');
      IF tab_vkk.FINDFIRST THEN BEGIN
        REPEAT
          tab_ab.RESET;
          tab_ab.SETFILTER(tab_ab."Document No.",'%1',tab_vkk."No.");
          tab_ab.SETFILTER(tab_ab.Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER(tab_ab."Outstanding Quantity",'>%1',0);
          tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF tab_ab.FINDFIRST THEN BEGIN
            REPEAT
              EnterCell(RowNo,1,FORMAT(tab_vkk."Order Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,2,tab_vkk."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,3,tab_vkk."Sell-to Customer No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,4,tab_vkk."Sell-to Customer Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,5,FORMAT(tab_ab.Quantity),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,6,tab_ab."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,7,tab_ab."Location Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,8,FORMAT(tab_ab."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,9,FORMAT(tab_ab."Unit Price"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,10,tab_vkk."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,11,FORMAT(tab_vkk."Currency Factor"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,12,FORMAT(tab_ab."Outstanding Amount (LCY)"/(100+tab_ab."VAT %")*100),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,13,FORMAT(tab_ab."Profit %"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,14,tab_vkk."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,15,tab_vkk."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
               Artikel.RESET;
              Artikel.SETFILTER(Artikel."No.",'%1',tab_ab."No.");
              IF Artikel.FINDFIRST THEN BEGIN
                EnterCell(RowNo,16,Artikel.Herstellerkurzname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;
              EnterCell(RowNo,17,FORMAT(tab_ab."Outstanding Quantity"*tab_ab."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,18,tab_vkk."Sell-to Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,19,tab_ab.Endkunde,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,20,tab_vkk.Teams,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,21,tab_vkk."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              RowNo := RowNo + 1;
            UNTIL tab_ab.NEXT = 0;
          END;
        UNTIL tab_vkk.NEXT = 0;
      END;
      CloseExcel(Filename,Filename,'F:\Daten Neu\User\Edeltraut');
      MESSAGE('%1 Erfolgreich gespeichert.','F:\Daten Neu\User\Edeltraut\' + Filename);
      AE_Vertrieb2;
    END;

    PROCEDURE AE_Vertrieb2@1140048();
    BEGIN
      // berprft UB Stand 26.11.2018
      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,Text001,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
      EnterCell(RowNo,1,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,Text025,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,Text026,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,Text027,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,Text028,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,Text029,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,Text030,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,Text031,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,Text032,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,Text033,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,Text034,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,Text035,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,Text036,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,Text037,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,Text038,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,20,Text039,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,21,Text040,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(AE_mtl.Betreuer,'%1|%2','RL','CB');
      IF AE_mtl.FINDFIRST THEN BEGIN
        REPEAT
          EnterCell(RowNo,1,FORMAT(AE_mtl.Datum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
          EnterCell(RowNo,2,AE_mtl.AU_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,AE_mtl.Deb_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,AE_mtl.Debitor,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,FORMAT(AE_mtl.Menge),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,6,AE_mtl.Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,7,AE_mtl.Lager,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,8,FORMAT(AE_mtl.EK),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,9,FORMAT(AE_mtl.VK),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,10,AE_mtl.W„hrungscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,11,FORMAT(AE_mtl.w„_faktor),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,12,FORMAT(AE_mtl."Betrag in EUR"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,13,FORMAT(AE_mtl."DB %"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,14,AE_mtl.Betreuer,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,15,AE_mtl.Vertreter,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,16,AE_mtl.Linie,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,17,FORMAT(AE_mtl."EK Gesamt"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,18,AE_mtl.PLZ,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,19,AE_mtl.Endkunde,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,20,AE_mtl.Teams,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,21,AE_mtl.Gebietscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo + 1;
        UNTIL AE_mtl.NEXT = 0;
      END;

      tab_vkk.RESET;
      tab_vkk.SETFILTER(tab_vkk."Order Date",'%1',AE_holen_Datum);
      tab_vkk.SETFILTER(tab_vkk."Document Type",'%1',tab_vkk."Document Type"::Order);
      tab_vkk.SETFILTER(tab_vkk."Betreuer Innendienst",'%1|%2','RL','CB');
      IF tab_vkk.FINDFIRST THEN BEGIN
        REPEAT
          tab_ab.RESET;
          tab_ab.SETFILTER(tab_ab."Document No.",'%1',tab_vkk."No.");
          tab_ab.SETFILTER(tab_ab.Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER(tab_ab."Outstanding Quantity",'>%1',0);
          tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF tab_ab.FINDFIRST THEN BEGIN
            REPEAT
              EnterCell(RowNo,1,FORMAT(tab_vkk."Order Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,2,tab_vkk."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,3,tab_vkk."Sell-to Customer No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,4,tab_vkk."Sell-to Customer Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,5,FORMAT(tab_ab.Quantity),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,6,tab_ab."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,7,tab_ab."Location Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,8,FORMAT(tab_ab."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,9,FORMAT(tab_ab."Unit Price"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,10,tab_vkk."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,11,FORMAT(tab_vkk."Currency Factor"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,12,FORMAT(tab_ab."Outstanding Amount (LCY)"/(100+tab_ab."VAT %")*100),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,13,FORMAT(tab_ab."Profit %"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,14,tab_vkk."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,15,tab_vkk."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
               Artikel.RESET;
              Artikel.SETFILTER(Artikel."No.",'%1',tab_ab."No.");
              IF Artikel.FINDFIRST THEN BEGIN
                EnterCell(RowNo,16,Artikel.Herstellerkurzname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;
              EnterCell(RowNo,17,FORMAT(tab_ab."Outstanding Quantity"*tab_ab."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,18,tab_vkk."Sell-to Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,19,tab_ab.Endkunde,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,20,tab_vkk.Teams,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,21,tab_vkk."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              RowNo := RowNo + 1;
            UNTIL tab_ab.NEXT = 0;
          END;
        UNTIL tab_vkk.NEXT = 0;
      END;

      CloseExcel(Filename,Filename,'F:\Daten Neu\User\Renate');
      MESSAGE('%1 Erfolgreich gespeichert.','F:\Daten Neu\User\Renate' + Filename);
      AE_Vertrieb3;
    END;

    PROCEDURE AE_Vertrieb3@1140059();
    BEGIN
      // berprft UB Stand 26.11.2018
      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,Text001,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
      EnterCell(RowNo,1,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,Text025,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,Text026,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,Text027,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,Text028,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,Text029,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,Text030,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,Text031,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,Text032,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,Text033,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,Text034,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,Text035,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,Text036,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,Text037,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,Text038,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,20,Text039,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,21,Text040,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(AE_mtl.Betreuer,'%1|%2','HB','LD');
      IF AE_mtl.FINDFIRST THEN BEGIN
        REPEAT
          EnterCell(RowNo,1,FORMAT(AE_mtl.Datum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
          EnterCell(RowNo,2,AE_mtl.AU_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,AE_mtl.Deb_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,AE_mtl.Debitor,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,FORMAT(AE_mtl.Menge),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,6,AE_mtl.Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,7,AE_mtl.Lager,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,8,FORMAT(AE_mtl.EK),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,9,FORMAT(AE_mtl.VK),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,10,AE_mtl.W„hrungscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,11,FORMAT(AE_mtl.w„_faktor),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,12,FORMAT(AE_mtl."Betrag in EUR"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,13,FORMAT(AE_mtl."DB %"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,14,AE_mtl.Betreuer,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,15,AE_mtl.Vertreter,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,16,AE_mtl.Linie,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,17,FORMAT(AE_mtl."EK Gesamt"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,18,AE_mtl.PLZ,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,19,AE_mtl.Endkunde,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,20,AE_mtl.Teams,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,21,AE_mtl.Gebietscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo + 1;
        UNTIL AE_mtl.NEXT = 0;
      END;

      tab_vkk.RESET;
      tab_vkk.SETFILTER(tab_vkk."Order Date",'%1',AE_holen_Datum);
      tab_vkk.SETFILTER(tab_vkk."Document Type",'%1',tab_vkk."Document Type"::Order);
      tab_vkk.SETFILTER(tab_vkk."Betreuer Innendienst",'%1|%2','HB','LD');
      IF tab_vkk.FINDFIRST THEN BEGIN
        REPEAT
          tab_ab.RESET;
          tab_ab.SETFILTER(tab_ab."Document No.",'%1',tab_vkk."No.");
          tab_ab.SETFILTER(tab_ab.Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER(tab_ab."Outstanding Quantity",'>%1',0);
          tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF tab_ab.FINDFIRST THEN BEGIN
            REPEAT
              EnterCell(RowNo,1,FORMAT(tab_vkk."Order Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,2,tab_vkk."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,3,tab_vkk."Sell-to Customer No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,4,tab_vkk."Sell-to Customer Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,5,FORMAT(tab_ab.Quantity),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,6,tab_ab."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,7,tab_ab."Location Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,8,FORMAT(tab_ab."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,9,FORMAT(tab_ab."Unit Price"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,10,tab_vkk."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,11,FORMAT(tab_vkk."Currency Factor"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,12,FORMAT(tab_ab."Outstanding Amount (LCY)"/(100+tab_ab."VAT %")*100),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,13,FORMAT(tab_ab."Profit %"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,14,tab_vkk."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,15,tab_vkk."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              Artikel.RESET;
              Artikel.SETFILTER(Artikel."No.",'%1',tab_ab."No.");
              IF Artikel.FINDFIRST THEN BEGIN
                EnterCell(RowNo,16,Artikel.Herstellerkurzname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;
              EnterCell(RowNo,17,FORMAT(tab_ab."Outstanding Quantity"*tab_ab."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,18,tab_vkk."Sell-to Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,19,tab_ab.Endkunde,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,20,tab_vkk.Teams,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,21,tab_vkk."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              RowNo := RowNo + 1;
            UNTIL tab_ab.NEXT = 0;
          END;
        UNTIL tab_vkk.NEXT = 0;
      END;

      CloseExcel(Filename,Filename,'F:\Daten Neu\User\Hendrik\AU Eingang Uwe');
      MESSAGE('%1 Erfolgreich gespeichert.','F:\Daten Neu\User\Hendrik\AU Eingang Uwe\' + Filename);
    END;

    PROCEDURE AE_Vertrieb4@1140061();
    BEGIN
      // berprft UB Stand 26.11.2018
      IF Filename = '' THEN
        ERROR(Text100);

      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,Text001,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
      EnterCell(RowNo,1,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,Text025,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,Text026,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,Text027,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,Text028,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,Text029,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,Text030,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,Text031,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,Text032,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,Text033,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,Text034,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,Text035,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,Text036,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,Text037,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,Text038,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,20,Text039,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,21,Text040,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;

      AE_mtl.RESET;
      AE_mtl.SETFILTER(Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(Betreuer,'%1|%2|%3','ML','TK','RL');
      AE_mtl.SETFILTER(Gebietscode,'%1','SYSTEM');
      IF AE_mtl.FINDFIRST THEN BEGIN
        REPEAT
          EnterCell(RowNo,1,FORMAT(AE_mtl.Datum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
          EnterCell(RowNo,2,AE_mtl.AU_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,AE_mtl.Deb_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,AE_mtl.Debitor,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,FORMAT(AE_mtl.Menge),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,6,AE_mtl.Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,7,AE_mtl.Lager,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,8,FORMAT(AE_mtl.EK),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,9,FORMAT(AE_mtl.VK),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,10,AE_mtl.W„hrungscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,11,FORMAT(AE_mtl.w„_faktor),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,12,FORMAT(AE_mtl."Betrag in EUR"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,13,FORMAT(AE_mtl."DB %"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,14,AE_mtl.Betreuer,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,15,AE_mtl.Vertreter,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,16,AE_mtl.Linie,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,17,FORMAT(AE_mtl."EK Gesamt"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,18,AE_mtl.PLZ,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,19,AE_mtl.Endkunde,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,20,AE_mtl.Teams,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,21,AE_mtl.Gebietscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo + 1;
          RecNo := RecNo + 1;
        UNTIL AE_mtl.NEXT = 0;
      END;

      tab_vkk.RESET;
      tab_vkk.SETFILTER("Order Date",'%1',AE_holen_Datum);
      tab_vkk.SETFILTER("Document Type",'%1',tab_vkk."Document Type"::Order);
      tab_vkk.SETFILTER("Betreuer Innendienst",'%1|%2|%3','ML','TK','RL');
      tab_vkk.SETFILTER("Territory Code",'%1','SYSTEM');
      IF tab_vkk.FINDFIRST THEN BEGIN
        REPEAT
          tab_ab.RESET;
          tab_ab.SETFILTER("Document No.",'%1',tab_vkk."No.");
          tab_ab.SETFILTER(Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER("Outstanding Quantity",'>%1',0);
          tab_ab.SETFILTER("Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF tab_ab.FINDFIRST THEN BEGIN
            REPEAT
              EnterCell(RowNo,1,FORMAT(tab_vkk."Order Date"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,2,tab_vkk."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,3,tab_vkk."Sell-to Customer No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,4,tab_vkk."Sell-to Customer Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,5,FORMAT(tab_ab.Quantity),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,6,tab_ab."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,7,tab_ab."Location Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,8,FORMAT(tab_ab."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,9,FORMAT(tab_ab."Unit Price"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,10,tab_vkk."Currency Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,11,FORMAT(tab_vkk."Currency Factor"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,12,FORMAT(tab_ab."Outstanding Amount (LCY)"/(100+tab_ab."VAT %")*100),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,13,FORMAT(tab_ab."Profit %"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,14,tab_vkk."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,15,tab_vkk."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
               Artikel.RESET;
              Artikel.SETFILTER(Artikel."No.",'%1',tab_ab."No.");
              IF Artikel.FINDFIRST THEN BEGIN
                EnterCell(RowNo,16,Artikel.Herstellerkurzname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              END;
              EnterCell(RowNo,17,FORMAT(tab_ab."Outstanding Quantity"*tab_ab."Unit Cost (LCY)"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,18,tab_vkk."Sell-to Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,19,tab_ab.Endkunde,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,20,tab_vkk.Teams,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,21,tab_vkk."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              RowNo := RowNo + 1;
              RecNo := RecNo + 1;
            UNTIL tab_ab.NEXT = 0;
          END;
        UNTIL tab_vkk.NEXT = 0;
      END;
      CloseExcel(Filename,Filename,'F:\Daten Neu\User\Maria\AUFTRAGSEINGANG');
      MESSAGE('%1 Erfolgreich gespeichert.','F:\Daten Neu\User\Maria\AUFTRAGSEINGANG\' + Filename);
    END;

    PROCEDURE Debitor_šberprfung@1140053();
    BEGIN
      // ANFANG Debitorberprfung
      IF ISCLEAR(Excel) THEN
        CREATE(Excel,FALSE,TRUE);                                  //erzeugt excel
      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet

      Sheet.Range('A1').Value := 'Debitorberprfung'; // definiert die Beschriftung der berschriftszeile
      Sheet.Range('C1').Value := WORKDATE;
      j := '3';

      deb.RESET;
      deb.SETFILTER(deb."VAT Bus. Posting Group",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'MWSt-Gesch„ftsbuchungsgruppe ist leer';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;


      deb.RESET;
      deb.SETFILTER(deb."Payment Terms Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value :='Zahlungsbedingungscode ist leer';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;


      deb.RESET;
      deb.SETFILTER(deb."Salesperson Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value :='Verk„ufercode ist leer';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
      j := INCSTR(j);
      END;


      deb.RESET;
      deb.SETFILTER(deb."Customer Posting Group",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'Debitorenbuchungsgruppe ist leer';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          j:= INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Shipping Agent Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'Zustellercode ist leer';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");;
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Shipping Agent Code",'%1','*-RG4');
      deb.SETFILTER(deb."Rech via EMail",'%1',FALSE);
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'Zustellercode ist xxx-RG4 und kein H„kchen "Rech via Email" gesetzt!';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          Sheet.Range('D'+j).Value := deb."Betreuer Innendienst";
          Sheet.Range('E'+j).Value := deb."Shipping Agent Code";
          IF deb."Rech via EMail" = FALSE THEN Sheet.Range('F'+j).Value := 'Kein H„kchen Rech via Email gesetzt!';
          IF deb."Original RE nicht drucken" = FALSE THEN Sheet.Range('G'+j).Value := 'Kein H„kchen "Original-RE nicht drucken" gesetzt!';
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Shipping Agent Code",'%1','*-RG4');
      deb.SETFILTER(deb."Original RE nicht drucken",'%1',FALSE);
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'Zustellercode ist xxx-RG4 und kein H„kchen "Original-RE nicht drucken" gesetzt!';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          Sheet.Range('D'+j).Value := deb."Betreuer Innendienst";
          Sheet.Range('E'+j).Value := deb."Shipping Agent Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Shipping Agent Code",'%1','*-RG4');
      IF deb.FINDFIRST THEN BEGIN
        REPEAT
          Lief_adr.RESET;
          Lief_adr.SETFILTER(Lief_adr."Customer No.",'%1',deb."No.");
          Lief_adr.SETFILTER(Lief_adr."Shipping Agent Code",'<>%1&<>%2&<>%3&<>%4&<>%5&<>%6&<>%7','UPS-RG4','DHL-RG4','ABH-RG4','FEDEX-RG4','TNT-RG4','EIGEN-RG4','DIREKT-RG4');
          IF Lief_adr.FINDFIRST THEN BEGIN
            IF (deb."No." = '100101') AND (Lief_adr."Shipping Agent Code" = 'POST') THEN BEGIN
            END ELSE BEGIN
              IF (deb."No." = '738480') AND (Lief_adr."Shipping Agent Code" = 'EMAIL') THEN BEGIN
              END ELSE BEGIN
                Sheet.Range('A'+j).Value := 'Zustellercode ist xxx-RG4 aber nicht in der Lieferadresse';
                j := INCSTR(j);
                REPEAT
                  Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
                  Sheet.Range('B'+j).Value := deb.Name;
                  Sheet.Range('C'+j).Value := deb."Salesperson Code";
                  Sheet.Range('D'+j).Value := deb."Betreuer Innendienst";
                  Sheet.Range('E'+j).Value := deb."Shipping Agent Code";
                  Sheet.Range('F'+j).Value := Lief_adr."Shipping Agent Code";
                  Sheet.Range('G'+j).Value := Lief_adr."Customer No.";
                  Sheet.Range('H'+j).Value := Lief_adr.Code;
                  j := INCSTR(j);
                UNTIL Lief_adr.NEXT = 0;
                j := INCSTR(j);
              END;
            END;
          END;
        UNTIL deb.NEXT = 0;
      j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Country/Region Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'L„ndercode ist leer';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Location Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'Lagerortcode ist leer';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'Gesch„ftsbuchungsgruppe ist leer';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Territory Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'Gebietscode ist leer';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Shipment Method Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'Lieferbedingungscode ist leer';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Betreuer Innendienst",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'Betreuer Innendienst ist leer';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Reminder Terms Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'Mahnmethode ist leer';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Country/Region Code",'%1','DE');
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'%1','EU');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'L„ndercode DE und Gesch„ftsbuchungsgruppe EU stimmen nicht berein';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          Sheet.Range('D'+j).Value := deb."Gen. Bus. Posting Group";
          Sheet.Range('E'+j).Value := deb."Country/Region Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'%1','EU');
      deb.SETFILTER(deb."Country/Region Code",'%1|%2|%3|%4|%5|%6|%7|%8|%9','AT','BE','BG','CY','CZ','DK','EE','ES','FI');
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'<>%1','EU');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'L„ndercode XX und Gesch„ftsbuchungsgruppe EU stimmen nicht berein';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          Sheet.Range('D'+j).Value := deb."Gen. Bus. Posting Group";
          Sheet.Range('E'+j).Value := deb."Country/Region Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'%1','EU');
      deb.SETFILTER(deb."Country/Region Code",'%1|%2|%3|%4|%5|%6|%7|%8|%9','FR','GB','GR','HU','IE','IT','LT','LU','LV');
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'<>%1','EU');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'L„ndercode XX und Gesch„ftsbuchungsgruppe EU stimmen nicht berein';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          Sheet.Range('D'+j).Value := deb."Gen. Bus. Posting Group";
          Sheet.Range('E'+j).Value := deb."Country/Region Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'%1','EU');
      deb.SETFILTER(deb."Country/Region Code",'%1|%2|%3|%4|%5|%6|%7|%8','MT','NL','PL','PT','RO','SE','SI','SK');
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'<>%1','EU');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'L„ndercode XX und Gesch„ftsbuchungsgruppe EU stimmen nicht berein';
        j := INCSTR(j);
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          Sheet.Range('D'+j).Value := deb."Gen. Bus. Posting Group";
          Sheet.Range('E'+j).Value := deb."Country/Region Code";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb.Warenkreditversicherung,'%1','GEMELDET');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'Kreditlimiteintr„ge stimmen bei "GEMELDET" nicht berein';
        j := INCSTR(j);
        REPEAT
          OK := TRUE;
          IF ((deb."WKV-Info"='nur 12K') AND (deb."Credit Limit (LCY)"<>12000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='12K') AND (deb."Credit Limit (LCY)"<>12000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='15K') AND (deb."Credit Limit (LCY)"<>15000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='20K') AND (deb."Credit Limit (LCY)"<>20000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='25K') AND (deb."Credit Limit (LCY)"<>25000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='30K') AND (deb."Credit Limit (LCY)"<>30000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='35K') AND (deb."Credit Limit (LCY)"<>35000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='40K') AND (deb."Credit Limit (LCY)"<>40000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='45K') AND (deb."Credit Limit (LCY)"<>45000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='50K') AND (deb."Credit Limit (LCY)"<>50000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='50K unver„ndert') AND (deb."Credit Limit (LCY)"<>50000)) THEN OK := FALSE;
          IF ((deb."WKV-Info"='60K') AND (deb."Credit Limit (LCY)"<>60000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='70K') AND (deb."Credit Limit (LCY)"<>70000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='75K') AND (deb."Credit Limit (LCY)"<>75000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='80K') AND (deb."Credit Limit (LCY)"<>80000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='90K') AND (deb."Credit Limit (LCY)"<>90000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='100K') AND (deb."Credit Limit (LCY)"<>100000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='113K') AND (deb."Credit Limit (LCY)"<>113000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='125K') AND (deb."Credit Limit (LCY)"<>125000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='150K') AND (deb."Credit Limit (LCY)"<>150000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='180K') AND (deb."Credit Limit (LCY)"<>180000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='188K') AND (deb."Credit Limit (LCY)"<>188000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='200K') AND (deb."Credit Limit (LCY)"<>200000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='250K') AND (deb."Credit Limit (LCY)"<>250000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='300K') AND (deb."Credit Limit (LCY)"<>300000)) THEN OK:=FALSE;
          IF OK = FALSE THEN BEGIN
            deb.CALCFIELDS(deb."Balance (LCY)");
            Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
            Sheet.Range('B'+j).Value := deb.Name;
            Sheet.Range('C'+j).Value := deb."Salesperson Code";
            Sheet.Range('D'+j).Value := deb.Warenkreditversicherung;
            Sheet.Range('E'+j).Value := deb."Credit Limit (LCY)";
            Sheet.Range('F'+j).Value := deb."WKV-Info";
            Sheet.Range('G'+j).Value := deb."Balance (LCY)";
            j := INCSTR(j);
          END;
          IF ((deb."WKV-Info"='nur 12K') AND (deb."Credit Limit (LCY)"=12000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='12K') AND (deb."Credit Limit (LCY)"=12000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='15K') AND (deb."Credit Limit (LCY)"=15000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='20K') AND (deb."Credit Limit (LCY)"=20000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='25K') AND (deb."Credit Limit (LCY)"=25000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='30K') AND (deb."Credit Limit (LCY)"=30000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='35K') AND (deb."Credit Limit (LCY)"=35000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='40K') AND (deb."Credit Limit (LCY)"=40000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='45K') AND (deb."Credit Limit (LCY)"=45000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='50K') AND (deb."Credit Limit (LCY)"=50000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='50K unver„ndert') AND (deb."Credit Limit (LCY)"=50000)) THEN OK := FALSE;
          IF ((deb."WKV-Info"='60K') AND (deb."Credit Limit (LCY)"=60000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='70K') AND (deb."Credit Limit (LCY)"=70000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='75K') AND (deb."Credit Limit (LCY)"=75000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='80K') AND (deb."Credit Limit (LCY)"=80000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='90K') AND (deb."Credit Limit (LCY)"=90000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='100K') AND (deb."Credit Limit (LCY)"=100000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='113K') AND (deb."Credit Limit (LCY)"=113000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='125K') AND (deb."Credit Limit (LCY)"=125000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='150K') AND (deb."Credit Limit (LCY)"=150000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='180K') AND (deb."Credit Limit (LCY)"=180000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='188K') AND (deb."Credit Limit (LCY)"=188000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='200K') AND (deb."Credit Limit (LCY)"=200000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='250K') AND (deb."Credit Limit (LCY)"=250000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='300K') AND (deb."Credit Limit (LCY)"=300000)) THEN OK:=FALSE;

          IF OK=TRUE THEN BEGIN
           IF deb."WKV-Info"<>'' THEN BEGIN
                Sheet.Range('A'+j).Value := 'Programmabfrage einfgen mit';
                Sheet.Range('F'+j).Value := deb."WKV-Info";
               j := INCSTR(j);
             END;
          END;
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."Credit Limit (LCY)",'>%1', 11000);
      deb.SETFILTER(deb.Warenkreditversicherung,'%1','');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'Kreditlimiteintr„ge ber 11.000 ohne GEMELDET oder UNVERSICHERT';
        j := INCSTR(j);
        REPEAT
          deb.CALCFIELDS(deb."Balance (LCY)");
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          Sheet.Range('D'+j).Value := deb.Warenkreditversicherung;
          Sheet.Range('E'+j).Value := deb."Credit Limit (LCY)";
          Sheet.Range('F'+j).Value := deb."WKV-Info";
          Sheet.Range('G'+j).Value := deb."Balance (LCY)";
          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      deb.RESET;
      deb.SETFILTER(deb."No.",'<>%1','0');
      IF deb.FINDFIRST THEN BEGIN
        Sheet.Range('A'+j).Value := 'Saldo gr”áer Kreditlimit';
        j := INCSTR(j);
        REPEAT
          deb.CALCFIELDS(deb."Balance (LCY)");
          IF deb."Balance (LCY)" > deb."Credit Limit (LCY)" THEN BEGIN
            Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
            Sheet.Range('B'+j).Value := deb.Name;
            Sheet.Range('C'+j).Value := deb."Salesperson Code";
            Sheet.Range('D'+j).Value := deb.Warenkreditversicherung;
            Sheet.Range('E'+j).Value := deb."Credit Limit (LCY)";
            Sheet.Range('F'+j).Value := deb."WKV-Info";
            Sheet.Range('G'+j).Value := deb."Balance (LCY)";
            j := INCSTR(j);
          END;
        UNTIL deb.NEXT = 0;
        j := INCSTR(j);
      END;

      j := INCSTR(j);
      Excel.Visible(TRUE);
    END;

    PROCEDURE ID_Prove@1140056();
    BEGIN
      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,'No_','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Company Name','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Name 2','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'First Name','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Surname','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Address','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Address 2','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Post Code','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'City','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Nummer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 2;
      kontakt.RESET;
      kontakt.SETFILTER(kontakt.Type,'%1',0);
      IF kontakt.FINDFIRST THEN BEGIN
        REPEAT
          EnterCell(RowNo,1,kontakt."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2,kontakt."Company Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,kontakt."Name 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,kontakt."First Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,kontakt.Surname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,6,kontakt.Address,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,7,kontakt."Address 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,8,kontakt."Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,9,kontakt.City,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          v_kontaktnr:=FORMAT(kontakt."No.");
          v_kontaktnr:=COPYSTR(v_kontaktnr,4);
          EnterCell(RowNo,10,v_kontaktnr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL kontakt.NEXT = 0;
      END;
      CloseExcel('adr_nav_neu_text_test1','adr_nav_neu_text_test1','R:\id_prove\Import');

      ID_Prove_2;
    END;

    PROCEDURE ID_Prove_2@1140057();
    BEGIN
      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,'No_','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Company Name','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Name 2','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'First Name','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Surname','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Address','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Address 2','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Post Code','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'City','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Nummer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 2;
      kontakt.RESET;
      kontakt.SETFILTER(kontakt.Type,'%1',1);
      kontakt.SETFILTER(kontakt."Unternehmen verlassen",'%1',FALSE);
      IF kontakt.FINDFIRST THEN BEGIN
        REPEAT
          EnterCell(RowNo,1,kontakt."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2,kontakt."Company Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,kontakt."Name 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,kontakt."First Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,kontakt.Surname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,6,kontakt.Address,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,7,kontakt."Address 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,8,kontakt."Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,9,kontakt.City,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          v_kontaktnr:=FORMAT(kontakt."No.");
          v_kontaktnr:=COPYSTR(v_kontaktnr,4);
          EnterCell(RowNo,10,v_kontaktnr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL kontakt.NEXT = 0;
      END;
      CloseExcel('adr_nav_name_text_test1','adr_nav_name_text_test1','R:\id_prove\Import');
    END;

    PROCEDURE t„gl_AE_Saldo_abstimmen@1140058();
    BEGIN
      CLEAR(Excel);
      REPEAT
      UNTIL ISCLEAR(Excel);
      CREATE(Excel,FALSE,TRUE);

      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet
      Sheet.Range('H:I').NumberFormat:='###.###,#####';
      Sheet.Range('L:M').NumberFormat:='###.###,##';
      Sheet.Range('Q:Q').NumberFormat:='###.###,####';

      Sheet.Range('A1').Value := 'Auftragsberwachung  '; // definiert die Beschriftung der berschriftszeile

      Sheet.Range('A2').Value := 'Datum';
      Sheet.Range('B2').Value := 'AU-Nr';
      Sheet.Range('C2').Value := 'Pos-Nr';
      Sheet.Range('D2').Value := 'Debitor';
      Sheet.Range('E2').Value := 'Artikel';
      Sheet.Range('F2').Value := 'Menge';
      Sheet.Range('G2').Value := 'Restmenge';
      Sheet.Range('H2').Value := 'EK';
      Sheet.Range('I2').Value := 'VK';
      Sheet.Range('J2').Value := 'Art';
      Sheet.Range('K2').Value := 'Status';
      Sheet.Range('L2').Value := 'Art Diff';
      Sheet.Range('M2').Value := 'Menge Diff';
      Sheet.Range('N2').Value := 'EK Diff';
      Sheet.Range('O2').Value := 'VK Diff';
      Sheet.Range('P2').Value := 'WŽ-Diff';
      Sheet.Range('Q2').Value := 'WŽ';
      Sheet.Range('R2').Value := 'W„ Kurs';
      Sheet.Range('S2').Value := 'RE Menge';
      Sheet.Range('T2').Value := 'urspr AU-Datum';
      j := '3';                                   // <- Import in excel ab Zeile 3

      var_AU_Nr:='AU200000';
      tab_ab_bw.RESET;
      tab_ab_bw.SETCURRENTKEY(Belegart,AU_Nr,POS_Nr,Datum);
      tab_ab_bw.SETFILTER(tab_ab_bw.Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(tab_ab_bw.Art,'%1|%2', 'NEU', 'ALT');
      tab_ab_bw.SETFILTER(tab_ab_bw.Status,'%1|%2|%3|%4|%5|%6|%7', 'NP','ŽN','ST','GP','FA','RE','WŽ');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
      REPEAT
       IF tab_ab_bw.AU_Nr=var_AU_Nr THEN BEGIN
        Sheet.Range('A'+j).Value := tab_ab_bw.Datum;
        Sheet.Range('B'+j).Value := tab_ab_bw.AU_Nr;
        Sheet.Range('C'+j).Value := tab_ab_bw.POS_Nr;
        Sheet.Range('D'+j).Value := tab_ab_bw.Debitor;
        Sheet.Range('E'+j).Value := tab_ab_bw.Artikel;
        Sheet.Range('F'+j).Value := tab_ab_bw.Menge;
        Sheet.Range('G'+j).Value := tab_ab_bw.Restmenge;
        Sheet.Range('H'+j).Value := FORMAT(tab_ab_bw.EK);
        Sheet.Range('I'+j).Value := FORMAT(tab_ab_bw.VK);
        Sheet.Range('J'+j).Value := tab_ab_bw.Art;
        Sheet.Range('K'+j).Value := tab_ab_bw.Status;
        Sheet.Range('L'+j).Value := tab_ab_bw.Stat_Artikel;
        Sheet.Range('M'+j).Value := tab_ab_bw.Stat_Menge;
        Sheet.Range('N'+j).Value := tab_ab_bw.Stat_EK;
        Sheet.Range('O'+j).Value := tab_ab_bw.Stat_VK;
        IF tab_ab_bw.Stat_VK='WŽ' THEN BEGIN
        Sheet.Range('P'+j).Value := 'WŽ-Fehler';
        END;
        Sheet.Range('Q'+j).Value := tab_ab_bw.W„hrungscode;
        Sheet.Range('R'+j).Value := FORMAT(tab_ab_bw.w„_faktor);
        Sheet.Range('S'+j).Value := FORMAT(tab_ab_bw.re_menge);
        Sheet.Range('T'+j).Value := tab_ab_bw.Auftragsdatum;
        j := INCSTR(j);

       END ELSE BEGIN
        j := INCSTR(j);
        Sheet.Range('A'+j).Value := tab_ab_bw.Datum;
        Sheet.Range('B'+j).Value := tab_ab_bw.AU_Nr;
        Sheet.Range('C'+j).Value := tab_ab_bw.POS_Nr;
        Sheet.Range('D'+j).Value := tab_ab_bw.Debitor;
        Sheet.Range('E'+j).Value := tab_ab_bw.Artikel;
        Sheet.Range('F'+j).Value := tab_ab_bw.Menge;
        Sheet.Range('G'+j).Value := tab_ab_bw.Restmenge;
        Sheet.Range('H'+j).Value := FORMAT(tab_ab_bw.EK);
        Sheet.Range('I'+j).Value := FORMAT(tab_ab_bw.VK);
        Sheet.Range('J'+j).Value := tab_ab_bw.Art;
        Sheet.Range('K'+j).Value := tab_ab_bw.Status;
        Sheet.Range('L'+j).Value := tab_ab_bw.Stat_Artikel;
        Sheet.Range('M'+j).Value := tab_ab_bw.Stat_Menge;
        Sheet.Range('N'+j).Value := tab_ab_bw.Stat_EK;
        Sheet.Range('O'+j).Value := tab_ab_bw.Stat_VK;
        IF tab_ab_bw.Stat_VK='WŽ' THEN BEGIN
        Sheet.Range('P'+j).Value := 'WŽ-Fehler';
        END;
        Sheet.Range('Q'+j).Value := tab_ab_bw.W„hrungscode;
        Sheet.Range('R'+j).Value := FORMAT(tab_ab_bw.w„_faktor);
        Sheet.Range('S'+j).Value := FORMAT(tab_ab_bw.re_menge);
        Sheet.Range('T'+j).Value := tab_ab_bw.Auftragsdatum;
        j := INCSTR(j);
        var_AU_Nr :=tab_ab_bw.AU_Nr;
       END;
      UNTIL tab_ab_bw.NEXT = 0;
      END;

      Excel.Visible(TRUE);

      Pfad_tag :=FORMAT(DATE2DMY(AE_holen_Datum_1,1));
      Pfad_monat := FORMAT(DATE2DMY(AE_holen_Datum_1,2));
      Pfad_jahr := FORMAT(DATE2DMY(AE_holen_Datum_1,3));

      Pfaddatum:='_' + Pfad_jahr + '_' + Pfad_monat + '_' + Pfad_tag;
      Pfad:='F:\Daten Neu\User\Joachim\AB-Differenzen\2013_2014\Diff'+Pfaddatum+'.xlsx';

      IF ERASE(Pfad)THEN;
      Book._SaveAs(Pfad);

      MESSAGE(' Differenzen wurden ordnungsgem„á nach Excel exportiert. ');
    END;

    PROCEDURE N2_berprfen@1140060();
    BEGIN
      CLEAR(Excel);
      REPEAT
      UNTIL ISCLEAR(Excel);
      CREATE(Excel,FALSE,TRUE);

      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet

      Sheet.Range('A1').Value := 'N2 šberprfung  '; // definiert die Beschriftung der berschriftszeile

      Sheet.Range('A2').Value := 'Nr';
      Sheet.Range('B2').Value := 'Firma';
      Sheet.Range('C2').Value := 'Verk„ufer';
      Sheet.Range('D2').Value := 'N2';
      Sheet.Range('E2').Value := 'BBL';
      Sheet.Range('F2').Value := 'Anzahl';
      Sheet.Range('G2').Value := 'ZENT/KONSI';
      Sheet.Range('H2').Value := 'MUST';
      Sheet.Range('I2').Value := 'Gutschriften';

      j := '3';

      deb.RESET;
      deb.SETFILTER(deb."Shipping Agent Code",'%1|%2','N2','N1');
      deb.CALCFIELDS("No. of Pstd. Invoices");
      deb.SETFILTER(deb."No. of Pstd. Invoices",'>%1',1);
      IF deb.FINDFIRST THEN BEGIN
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          Sheet.Range('D'+j).Value := deb."Shipping Agent Code";
          Sheet.Range('E'+j).Value := deb."Payment Terms Code";
          deb.CALCFIELDS("No. of Pstd. Invoices");
          Sheet.Range('F'+j).Value := deb."No. of Pstd. Invoices";
          anz_zent := 0;
          anz_must := 0;
          anz_gutschr := 0;
          vkrk.RESET;
          vkrk.SETFILTER(vkrk."Sell-to Customer No.",'%1',deb."No.");
          IF vkrk.FINDFIRST THEN BEGIN
          REPEAT
           IF vkrk."Location Code"='ZENT' THEN anz_zent:= anz_zent+1;
           IF vkrk."Location Code"='MUST' THEN anz_must:= anz_must+1;
           IF vkrk."Location Code"='KONSI' THEN anz_zent:= anz_zent+1;
          UNTIL vkrk.NEXT = 0;
          END;
          tab_guk.RESET;
          tab_guk.SETFILTER(tab_guk."Sell-to Customer No.",'%1',deb."No.");
          IF tab_guk.FINDFIRST THEN BEGIN
          REPEAT
          IF tab_guk."Location Code"='ZENT' THEN anz_gutschr:= anz_gutschr+1;
          IF tab_guk."Location Code"='KONSI' THEN anz_gutschr:= anz_gutschr+1;
          UNTIL tab_guk.NEXT = 0;
          END;
          Sheet.Range('G'+j).Value := FORMAT(anz_zent);
          Sheet.Range('H'+j).Value := FORMAT(anz_must);
          Sheet.Range('I'+j).Value := FORMAT(anz_gutschr);

          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Payment Terms Code",'%1','BBL');
      deb.CALCFIELDS("No. of Pstd. Invoices");
      deb.SETFILTER(deb."No. of Pstd. Invoices",'>%1',1);
      IF deb.FINDFIRST THEN BEGIN
        REPEAT
          Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No.");
          Sheet.Range('B'+j).Value := deb.Name;
          Sheet.Range('C'+j).Value := deb."Salesperson Code";
          Sheet.Range('D'+j).Value := deb."Shipping Agent Code";
          Sheet.Range('E'+j).Value := deb."Payment Terms Code";
          deb.CALCFIELDS("No. of Pstd. Invoices");
          Sheet.Range('F'+j).Value := deb."No. of Pstd. Invoices";
          anz_zent := 0;
          anz_must := 0;
          anz_gutschr := 0;
          vkrk.RESET;
          vkrk.SETFILTER(vkrk."Sell-to Customer No.",'%1',deb."No.");
          IF vkrk.FINDFIRST THEN BEGIN
            REPEAT
               IF vkrk."Location Code"='ZENT' THEN anz_zent:= anz_zent+1;
               IF vkrk."Location Code"='MUST' THEN anz_must:= anz_must+1;
               IF vkrk."Location Code"='KONSI' THEN anz_zent:= anz_zent+1;
            UNTIL vkrk.NEXT = 0;
            Sheet.Range('J'+j).Value := vkrk."Posting Date";
          END;
          tab_guk.RESET;
          tab_guk.SETFILTER(tab_guk."Sell-to Customer No.",'%1',deb."No.");
          IF tab_guk.FINDFIRST THEN BEGIN
            REPEAT
              IF tab_guk."Location Code"='ZENT' THEN anz_gutschr:= anz_gutschr+1;
              IF tab_guk."Location Code"='KONSI' THEN anz_gutschr:= anz_gutschr+1;
            UNTIL tab_guk.NEXT = 0;
          END;
          Sheet.Range('G'+j).Value := FORMAT(anz_zent);
          Sheet.Range('H'+j).Value := FORMAT(anz_must);
          Sheet.Range('I'+j).Value := FORMAT(anz_gutschr);

          j := INCSTR(j);
        UNTIL deb.NEXT = 0;
      END;

      Excel.Visible(TRUE);
    END;

    PROCEDURE Abstimm_tab_belege@1140064();
    BEGIN
      IF ISCLEAR(Excel) THEN
      CREATE(Excel,FALSE,TRUE);

      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet

      Sheet.Range('A1').Value := 'šberprfung der Rechnungen mit Tabelle Belege'; // definiert die Beschriftung der berschriftszeile

      Sheet.Range('A2').Value := 'Rech Nr';
      Sheet.Range('B2').Value := 'Zeilen Nr';
      Sheet.Range('C2').Value := 'Artikel Nr';
      Sheet.Range('D2').Value := 'Menge';
      Sheet.Range('E2').Value := 'Preis';
      Sheet.Range('F2').Value := 'Buch.Datum';
      j := '3';

      rech.RESET;
      rech.SETFILTER(rech."Posting Date",'%1..%2',Datum_von,Datum_bis);
      rech.SETFILTER(rech.Quantity,'>%1',0);
      rech.SETFILTER(rech.Type,'%1',rech.Type::Item);
      IF rech.FINDFIRST THEN BEGIN
      REPEAT
       Beleg.RESET;
       Beleg.SETFILTER(Beleg."Belegnr.",'%1',rech."Document No.");
       Beleg.SETFILTER(Beleg."Zeilennr.",'%1',rech."Line No.");
        IF Beleg.FINDFIRST THEN BEGIN
        END ELSE BEGIN
          Sheet.Range('A'+j).Value := rech."Document No.";
          Sheet.Range('B'+j).Value := rech."Line No.";
          Sheet.Range('C'+j).Value := rech."No.";
          Sheet.Range('D'+j).Value := FORMAT(rech.Quantity);
          Sheet.Range('E'+j).Value := rech."Unit Price";
          Sheet.Range('F'+j).Value := rech."Posting Date";
          Sheet.Range('G'+j).Value := 'Rechnung fehlt in Tabelle Belege';
          j := INCSTR(j);
        END;
      UNTIL rech.NEXT = 0;
      END;

      tab_guz.RESET;
      tab_guz.SETFILTER(tab_guz."Posting Date",'%1..%2',Datum_von,Datum_bis);
      tab_guz.SETFILTER(tab_guz.Quantity,'>%1',0);
      tab_guz.SETFILTER(tab_guz.Type,'%1',tab_guz.Type::Item);
      IF tab_guz.FINDFIRST THEN BEGIN
      REPEAT
       Beleg.RESET;
       Beleg.SETFILTER(Beleg."Belegnr.",'%1',tab_guz."Document No.");
       Beleg.SETFILTER(Beleg."Zeilennr.",'%1',tab_guz."Line No.");
        IF Beleg.FINDFIRST THEN BEGIN
        END ELSE BEGIN
          Sheet.Range('A'+j).Value := tab_guz."Document No.";
          Sheet.Range('B'+j).Value := tab_guz."Line No.";
          Sheet.Range('C'+j).Value := tab_guz."No.";
          Sheet.Range('D'+j).Value := FORMAT(tab_guz.Quantity);
          Sheet.Range('E'+j).Value := tab_guz."Unit Price";
          Sheet.Range('F'+j).Value := tab_guz."Posting Date";
          Sheet.Range('G'+j).Value := 'Gutschrift fehlt in Tabelle Belege';
          j := INCSTR(j);
        END;
      UNTIL tab_guz.NEXT = 0;
      END;
      Excel.Visible(TRUE);
    END;

    PROCEDURE geschenk_adr_liste@1140066();
    BEGIN
      CLEAR(Excel);
      REPEAT
      UNTIL ISCLEAR(Excel);
      CREATE(Excel,FALSE,TRUE);

      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet

      Sheet.Range('A1').Value := 'Adressliste:  Mailing fr Geschenkversand'; // definiert die Beschriftung der berschriftszeile
      Sheet.Range('A2').Value := 'Filter Aktion:';
      Sheet.Range('C2').Value := 'Geschenk';
      Sheet.Range('A3').Value := 'Filter Betreff:';
      Sheet.Range('C3').Value := 'Fan-Schminke 6/2016';

      Sheet.Range('A4').Value := 'Kontaktnr';
      Sheet.Range('B4').Value := 'Mandanennr';
      Sheet.Range('C4').Value := 'Aktion';
      Sheet.Range('D4').Value := 'Betreff';
      Sheet.Range('E4').Value := 'Statustext';
      Sheet.Range('F4').Value := 'Anzahl';
      Sheet.Range('G4').Value := 'Bearbeiter';
      Sheet.Range('H4').Value := 'Anrede';
      Sheet.Range('I4').Value := 'Titel';
      Sheet.Range('J4').Value := 'Vorname';
      Sheet.Range('K4').Value := 'Name';
      Sheet.Range('L4').Value := 'Firma1';
      Sheet.Range('M4').Value := 'Firma2';
      Sheet.Range('N4').Value := 'Strasse1';
      Sheet.Range('O4').Value := 'Strasse2';
      Sheet.Range('P4').Value := 'Land';
      Sheet.Range('Q4').Value := 'Plz';
      Sheet.Range('R4').Value := 'Ort';

      j := '5';

      tab_geschenk.RESET;
      tab_geschenk.SETFILTER(tab_geschenk.Aktion,'%1',tab_geschenk.Aktion::Geschenk);
      tab_geschenk.SETFILTER(tab_geschenk.Betreff,'%1','Fan-Schminke 6/2016');
      IF tab_geschenk.FINDFIRST THEN BEGIN
        REPEAT
          kontakt.RESET;
          kontakt.SETFILTER(kontakt."No.",'%1',tab_geschenk."Kontaktnr.");
          IF kontakt.FINDFIRST THEN BEGIN
            Sheet.Range('A'+j).Value := tab_geschenk."Kontaktnr.";
            Sheet.Range('B'+j).Value := tab_geschenk."Mandantennr.";
            Sheet.Range('C'+j).Value := tab_geschenk.Aktion;
            Sheet.Range('D'+j).Value := tab_geschenk.Betreff;
            Sheet.Range('E'+j).Value := tab_geschenk.Statustext;
            Sheet.Range('F'+j).Value := tab_geschenk.Anzahl;
            Sheet.Range('G'+j).Value := tab_geschenk."Zust„ndig Bearb";
            IF kontakt."Salutation Code"='MANDANT' THEN BEGIN
              Sheet.Range('H'+j).Value := 'Fa.';
            END;
            IF kontakt."Salutation Code"='HERR' THEN BEGIN
              Sheet.Range('H'+j).Value := 'Herr';
              Sheet.Range('I'+j).Value := kontakt."Job Title";
              Sheet.Range('J'+j).Value := kontakt."First Name";
              Sheet.Range('K'+j).Value := kontakt.Surname;
            END;
            IF kontakt."Salutation Code"='FRAU' THEN BEGIN
              Sheet.Range('H'+j).Value := 'Frau';
              Sheet.Range('I'+j).Value := kontakt."Job Title";
              Sheet.Range('J'+j).Value := kontakt."First Name";
              Sheet.Range('K'+j).Value := kontakt.Surname;
            END;
            kontakt1.RESET;
            kontakt1.SETFILTER(kontakt1."No.",'%1',kontakt."Company No.");
            IF kontakt1.FINDFIRST THEN BEGIN
              Sheet.Range('L'+j).Value := kontakt1.Name;
              Sheet.Range('M'+j).Value := kontakt1."Name 2"
            END;
            Sheet.Range('N'+j).Value := kontakt.Address;
            Sheet.Range('O'+j).Value := kontakt."Address 2";
            Sheet.Range('P'+j).Value := kontakt."Country/Region Code";
            Sheet.Range('Q'+j).Value := FORMAT(kontakt."Country/Region Code"+' '+kontakt."Post Code");
            Sheet.Range('R'+j).Value := kontakt.City;
            Sheet.Range('S'+j).Value := kontakt."Unternehmen verlassen";
            j := INCSTR(j);
          END;
        UNTIL tab_geschenk.NEXT = 0;
      END;

      Excel.Visible(TRUE);
    END;

    PROCEDURE geschenk_adr_liste_bersicht@1140067();
    BEGIN
      IF ISCLEAR(Excel) THEN
        CREATE(Excel,FALSE,TRUE);

      Book := Excel.Workbooks.Add(-4167);                          //legt neue datei in excel an
      Sheet := Excel.ActiveSheet;                                  //definiert aktives worksheet

      Sheet.Range('A1').Value := 'Adressliste fr Geschenkversand'; // definiert die Beschriftung der berschriftszeile
      Sheet.Range('A4').Value := 'Kontaktnr';
      Sheet.Range('B4').Value := 'Mandanennr';
      Sheet.Range('C4').Value := 'Aktion';
      Sheet.Range('D4').Value := 'Betreff';
      Sheet.Range('E4').Value := 'Statustext';
      Sheet.Range('F4').Value := 'Anzahl';
      Sheet.Range('G4').Value := 'Bearbeiter';
      Sheet.Range('H4').Value := 'Anrede';
      Sheet.Range('I4').Value := 'Titel';
      Sheet.Range('J4').Value := 'Vorname';
      Sheet.Range('K4').Value := 'Name';
      Sheet.Range('L4').Value := 'Firma1';
      Sheet.Range('M4').Value := 'Firma2';
      Sheet.Range('N4').Value := 'Strasse1';
      Sheet.Range('O4').Value := 'Strasse2';
      Sheet.Range('P4').Value := 'Land';
      Sheet.Range('Q4').Value := 'Plz';
      Sheet.Range('R4').Value := 'Ort';
      Sheet.Range('S4').Value := 'Unternehmen verlassen';
      Sheet.Range('T4').Value := 'Fan-Schminke 6/2006';
      Sheet.Range('u4').Value := 'Test fr weiteres Geschenk';
      //  hier weitere Aktionen eintragen und weiter unten auswerten
      j := '5';

      kontakt.RESET;
      kontakt.SETFILTER(kontakt."Unternehmen verlassen",'%1',FALSE);
      IF kontakt.FINDFIRST THEN BEGIN
        REPEAT
          tab_geschenk.RESET;
          tab_geschenk.SETFILTER(tab_geschenk."Kontaktnr.",'%1',kontakt."No.");
          tab_geschenk.SETFILTER(tab_geschenk.Aktion,'%1',tab_geschenk.Aktion::Geschenk);
          IF tab_geschenk.FINDFIRST THEN BEGIN
            REPEAT

            Sheet.Range('A'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(kontakt.TABLENAME,1,5050,kontakt."No.");
            Sheet.Range('B'+j).Value := TOPAS_API.CreateExcelHyperlinkToNav(kontakt.TABLENAME,1,50091,kontakt."Company No.");
            Sheet.Range('C'+j).Value := kontakt."Salesperson Code";
            Sheet.Range('D'+j).Value := kontakt."Betreuer Innendienst";
            Sheet.Range('E'+j).Value := kontakt."Territory Code";
            Sheet.Range('F'+j).Value := tab_geschenk.Statustext;
            Sheet.Range('G'+j).Value := tab_geschenk."Zust„ndig Bearb";
            IF kontakt."Salutation Code"='MANDANT' THEN BEGIN
            Sheet.Range('H'+j).Value := 'Fa.';
            END;
            IF kontakt."Salutation Code"='HERR' THEN BEGIN
            Sheet.Range('H'+j).Value := 'Herr';
            Sheet.Range('I'+j).Value := kontakt."Job Title";
            Sheet.Range('J'+j).Value := kontakt."First Name";
            Sheet.Range('K'+j).Value := kontakt.Surname;
            END;
            IF kontakt."Salutation Code"='FRAU' THEN BEGIN
            Sheet.Range('H'+j).Value := 'Frau';
            Sheet.Range('I'+j).Value := kontakt."Job Title";
            Sheet.Range('J'+j).Value := kontakt."First Name";
            Sheet.Range('K'+j).Value := kontakt.Surname;
            END;
            kontakt1.RESET;
            kontakt1.SETFILTER(kontakt1."No.",'%1',kontakt."Company No.");
            IF kontakt1.FINDFIRST THEN BEGIN
            Sheet.Range('L'+j).Value := kontakt1.Name;
            Sheet.Range('M'+j).Value := kontakt1."Name 2"
            END;
            Sheet.Range('N'+j).Value := kontakt.Address;
            Sheet.Range('O'+j).Value := kontakt."Address 2";
            Sheet.Range('P'+j).Value := kontakt."Country/Region Code";
            Sheet.Range('Q'+j).Value := FORMAT(kontakt."Country/Region Code"+' '+kontakt."Post Code");
            Sheet.Range('R'+j).Value := kontakt.City;
            Sheet.Range('S'+j).Value := kontakt."Unternehmen verlassen";
            IF tab_geschenk.Betreff='Fan-Schminke 6/2016' THEN
            Sheet.Range('T'+j).Value := tab_geschenk.Anzahl;
            IF tab_geschenk.Betreff='Test' THEN
            Sheet.Range('U'+j).Value := tab_geschenk.Anzahl;
            j := INCSTR(j);
            UNTIL tab_geschenk.NEXT = 0;
          END;
        UNTIL kontakt.NEXT = 0;
      END;
      Excel.Visible(TRUE);
    END;

    LOCAL PROCEDURE AE_Verteilen_Filter_Abfrage@1000000000();
    BEGIN
      // Abfrage ACS
      AE_Verteilen_Excelblatt_anlegen;     // Excelblatt mit šberschriftszeile anlegen
      AE_mtl.RESET;
      AE_mtl.SETCURRENTKEY(Datum,AU_Nr,POS_Nr,Deb_Nr,Belegart);
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(AE_mtl.Linie,'%1|%2|%3|%4','ACT','ACI','ACC','ACS');
      IF AE_mtl.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := AE_mtl.COUNT;
        REPEAT
          AE_Verteilen_Excelblatt_Daten;   // einzelne Excelzeilen ausgeben
        UNTIL AE_mtl.NEXT = 0;
      END;
      v_Pfadzuweisung:='ACS';
      AE_Verteilen_Pfad_festlegen;   //  Pfadzuweisung festlegen
      AE_Verteilen_Excelblatt_schliessen;    //  Excelblatt speichern und Excel schlieáen
      //  *************************************************************************************************

      //  Abfrage Christian
      AE_Verteilen_Excelblatt_anlegen;      // Excelblatt mit šberschriftszeile anlegen
      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(AE_mtl.Betreuer,'%1','CB');
      IF AE_mtl.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := AE_mtl.COUNT;
        REPEAT
          AE_Verteilen_Excelblatt_Daten;   // einzelne Excelzeilen ausgeben
        UNTIL AE_mtl.NEXT = 0;
      END;
      v_Pfadzuweisung:='CB';
      AE_Verteilen_Pfad_festlegen;  //  Pfadzuweisung festlegen
      AE_Verteilen_Excelblatt_schliessen;         //  Excelblatt speichern und Excel schlieáen
      //  *******************************************************************************************************

      //  Abfrage Edeltraut
      AE_Verteilen_Excelblatt_anlegen;      // Excelblatt mit šberschriftszeile anlegen
      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(AE_mtl.Betreuer,'%1|%2','ESK','NM');
      IF AE_mtl.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := AE_mtl.COUNT;
        REPEAT
          AE_Verteilen_Excelblatt_Daten;   // einzelne Excelzeilen ausgeben
        UNTIL AE_mtl.NEXT = 0;
      END;
      v_Pfadzuweisung:='ESK';
      AE_Verteilen_Pfad_festlegen;    //  Pfadzuweisung festlegen
      AE_Verteilen_Excelblatt_schliessen;         //  Excelblatt speichern und Excel schlieáen
      //  *******************************************************************************************************

      //  Abfrage Hendrik
      AE_Verteilen_Excelblatt_anlegen;      // Excelblatt mit šberschriftszeile anlegen
      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(AE_mtl.Betreuer,'%1|%2','HB','LD');
      IF AE_mtl.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := AE_mtl.COUNT;
        REPEAT
          AE_Verteilen_Excelblatt_Daten;    // einzelne Excelzeilen ausgeben
        UNTIL AE_mtl.NEXT = 0;
      END;
      v_Pfadzuweisung:='HB';
      AE_Verteilen_Pfad_festlegen;    //  Pfadzuweisung festlegen
      AE_Verteilen_Excelblatt_schliessen;         //  Excelblatt speichern und Excel schlieáen
      //  *******************************************************************************************************

      //  Abfrage Maria
      AE_Verteilen_Excelblatt_anlegen;      // Excelblatt mit šberschriftszeile anlegen
      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(AE_mtl.Betreuer,'%1|%2','ML','IF');
      IF AE_mtl.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := AE_mtl.COUNT;
        REPEAT
          AE_Verteilen_Excelblatt_Daten;   // einzelne Excelzeilen ausgeben
        UNTIL AE_mtl.NEXT = 0;
      END;
      v_Pfadzuweisung:='ML';
      AE_Verteilen_Pfad_festlegen;      //  Pfadzuweisung festlegen
      AE_Verteilen_Excelblatt_schliessen;         //  Excelblatt speichern und Excel schlieáen
      //  *******************************************************************************************************

      //  Abfrage Maria System
      //  *******************************************************************************************************

      //  Abfrage Nadine
      AE_Verteilen_Excelblatt_anlegen;      // Excelblatt mit šberschriftszeile anlegen
      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(AE_mtl.Betreuer,'%1','NM');
      IF AE_mtl.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := AE_mtl.COUNT;
        REPEAT
          AE_Verteilen_Excelblatt_Daten;   // einzelne Excelzeilen ausgeben
        UNTIL AE_mtl.NEXT = 0;
      END;
      v_Pfadzuweisung:='NM';
      AE_Verteilen_Pfad_festlegen;   //  Pfadzuweisung festlegen
      AE_Verteilen_Excelblatt_schliessen;         //  Excelblatt speichern und Excel schlieáen
      //  *******************************************************************************************************

      //  Abfrage Michael
      AE_Verteilen_Excelblatt_anlegen;      // Excelblatt mit šberschriftszeile anlegen
      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(AE_mtl.Vertreter,'%1','MB');
      IF AE_mtl.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := AE_mtl.COUNT;
        REPEAT
          AE_Verteilen_Excelblatt_Daten;   // einzelne Excelzeilen ausgeben
        UNTIL AE_mtl.NEXT = 0;
      END;
      v_Pfadzuweisung:='MB';
      AE_Verteilen_Pfad_festlegen;   //  Pfadzuweisung festlegen
      AE_Verteilen_Excelblatt_schliessen;         //  Excelblatt speichern und Excel schlieáen
      //  *******************************************************************************************************

      //  Abfrage Renate
      AE_Verteilen_Excelblatt_anlegen;      // Excelblatt mit šberschriftszeile anlegen
      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(AE_mtl.Betreuer,'%1|%2','RL','CB');
      IF AE_mtl.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := AE_mtl.COUNT;
        REPEAT
          AE_Verteilen_Excelblatt_Daten;    // einzelne Excelzeilen ausgeben
        UNTIL AE_mtl.NEXT = 0;
      END;
      v_Pfadzuweisung:='RL';
      AE_Verteilen_Pfad_festlegen;   //  Pfadzuweisung festlegen
      AE_Verteilen_Excelblatt_schliessen;         //  Excelblatt speichern und Excel schlieáen
      //  *******************************************************************************************************

      //  Abfrage Simon
      AE_Verteilen_Excelblatt_anlegen;      // Excelblatt mit šberschriftszeile anlegen
      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(AE_mtl.Vertreter,'%1','SST');
      IF AE_mtl.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := AE_mtl.COUNT;
        REPEAT
          AE_Verteilen_Excelblatt_Daten;    // einzelne Excelzeilen ausgeben
        UNTIL AE_mtl.NEXT = 0;
      END;
      v_Pfadzuweisung:='SST';
      AE_Verteilen_Pfad_festlegen;  //  Pfadzuweisung festlegen
      AE_Verteilen_Excelblatt_schliessen;         //  Excelblatt speichern und Excel schlieáen
      //  *******************************************************************************************************

      //  Abfrage Sylke
      AE_Verteilen_Excelblatt_anlegen;      // Excelblatt mit šberschriftszeile anlegen
      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);

      IF AE_mtl.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := AE_mtl.COUNT;
        REPEAT
          AE_Verteilen_Excelblatt_Daten;    // einzelne Excelzeilen ausgeben
        UNTIL AE_mtl.NEXT = 0;
      END;
      v_Pfadzuweisung:='SB';
      AE_Verteilen_Pfad_festlegen;  //  Pfadzuweisung festlegen
      AE_Verteilen_Excelblatt_schliessen;         //  Excelblatt speichern und Excel schlieáen
      //  *******************************************************************************************************

      //  Abfrage Thomas
      AE_Verteilen_Excelblatt_anlegen;      // Excelblatt mit šberschriftszeile anlegen
      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);

      IF AE_mtl.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := AE_mtl.COUNT;
        REPEAT
          AE_Verteilen_Excelblatt_Daten;    // einzelne Excelzeilen ausgeben
        UNTIL AE_mtl.NEXT = 0;
      END;
      v_Pfadzuweisung:='TF';
      AE_Verteilen_Pfad_festlegen;  //  Pfadzuweisung festlegen
      AE_Verteilen_Excelblatt_schliessen;         //  Excelblatt speichern und Excel schlieáen
      //  *******************************************************************************************************

      //  Abfrage Torsten
      AE_Verteilen_Excelblatt_anlegen;      // Excelblatt mit šberschriftszeile anlegen
      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(AE_mtl.Vertreter,'%1','TW');
      IF AE_mtl.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := AE_mtl.COUNT;
        REPEAT
          AE_Verteilen_Excelblatt_Daten;    // einzelne Excelzeilen ausgeben
        UNTIL AE_mtl.NEXT = 0;
      END;
      v_Pfadzuweisung:='TW';
      AE_Verteilen_Pfad_festlegen;   //  Pfadzuweisung festlegen
      AE_Verteilen_Excelblatt_schliessen;         //  Excelblatt speichern und Excel schlieáen
      //  *******************************************************************************************************

      //  Abfrage Werner
      AE_Verteilen_Excelblatt_anlegen;      // Excelblatt mit šberschriftszeile anlegen
      AE_mtl.RESET;
      AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
      AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',Datum_von,Datum_bis);
      AE_mtl.SETFILTER(AE_mtl.Vertreter,'%1','WG');
      IF AE_mtl.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := AE_mtl.COUNT;
        REPEAT
          AE_Verteilen_Excelblatt_Daten;    // einzelne Excelzeilen ausgeben
        UNTIL AE_mtl.NEXT = 0;
      END;
      v_Pfadzuweisung:='WG';
      AE_Verteilen_Pfad_festlegen;   //  Pfadzuweisung festlegen
      AE_Verteilen_Excelblatt_schliessen;         //  Excelblatt speichern und Excel schlieáen
      //  *******************************************************************************************************

      MESSAGE(' Auftragseing„nge wurden ordnungsgem„á nach Excel exportiert. ');
    END;

    LOCAL PROCEDURE AE_Verteilen_Excelblatt_anlegen@1000000001();
    BEGIN

      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;

      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');

      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);
      RowNo := 1;
      ColumnNo := 1;
      EnterCell(RowNo,ColumnNo,Text001,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
      ColumnNo := 1;
      EnterCell(RowNo,ColumnNo,Text020,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text021,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text022,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text023,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text024,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text025,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text026,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text027,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text028,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text029,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text030,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text031,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text032,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text033,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text034,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text035,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text036,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text037,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text038,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text039,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text040,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
    END;

    LOCAL PROCEDURE AE_Verteilen_Excelblatt_Daten@1000000003();
    BEGIN

      ColumnNo := 1;
      EnterCell(RowNo,ColumnNo,FORMAT(AE_mtl.Datum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,AE_mtl.AU_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,AE_mtl.Deb_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,AE_mtl.Debitor,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT(AE_mtl.Menge),'',FALSE,FALSE,FALSE,'###,###,###',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,AE_mtl.Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,AE_mtl.Lager,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT(AE_mtl.EK),'',FALSE,FALSE,FALSE,'###,##0.00###',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT(AE_mtl.VK),'',FALSE,FALSE,FALSE,'###,##0.00###',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,AE_mtl.W„hrungscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT(AE_mtl.w„_faktor),'',FALSE,FALSE,FALSE,'##0.00###',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT(ROUND(AE_mtl."Betrag in EUR",0.01)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT(ROUND(AE_mtl."DB %",0.01)),'',FALSE,FALSE,FALSE,'##0.000',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,AE_mtl.Betreuer,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,AE_mtl.Vertreter,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,AE_mtl.Linie,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,FORMAT(ROUND(AE_mtl."EK Gesamt",0.01)),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,AE_mtl.PLZ,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,AE_mtl.Endkunde,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,AE_mtl.Teams,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,AE_mtl.Gebietscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
      RecNo := RecNo + 1;
      Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
    END;

    LOCAL PROCEDURE AE_Verteilen_Excelblatt_schliessen@1000000002();
    BEGIN

      Window.CLOSE;

      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN
          TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,Text001);
        TempExcelBuffer.WriteSheet(
          PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          TempExcelBuffer.OpenExcelWithoutAutoFit(Text001, v_Pfadname,'F:\Daten Neu\Gemeinsame Ordner\Auftragseingang\',FALSE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;
    END;

    LOCAL PROCEDURE AE_Verteilen_Pfad_festlegen@1000000004();
    BEGIN
      // Anfang t„gliche Verteilung
      IF ((AE_verteilen = TRUE) AND (v_Pfadzuweisung='ACS')) THEN v_Pfadname:='ACS\AE_mtl.xlsx';   //  Pfadzuweisung festlegen
      IF ((AE_verteilen = TRUE) AND (v_Pfadzuweisung='CB')) THEN v_Pfadname:='Christian\AE_mtl.xlsx';
      IF ((AE_verteilen = TRUE) AND (v_Pfadzuweisung='ESK')) THEN v_Pfadname:='Edeltraut\AE_mtl.xlsx';
      IF ((AE_verteilen = TRUE) AND (v_Pfadzuweisung='HB')) THEN v_Pfadname:='Hendrik\AE_mtl.xlsx';
      IF ((AE_verteilen = TRUE) AND (v_Pfadzuweisung='ML')) THEN v_Pfadname:='Maria\AE_mtl.xlsx';
      IF ((AE_verteilen = TRUE) AND (v_Pfadzuweisung='MB')) THEN v_Pfadname:='Michael\AE_mtl.xlsx';
      IF ((AE_verteilen = TRUE) AND (v_Pfadzuweisung='NM')) THEN v_Pfadname:='Nadine\AE_mtl.xlsx';
      IF ((AE_verteilen = TRUE) AND (v_Pfadzuweisung='RL')) THEN v_Pfadname:='Renate\AE_mtl.xlsx';
      IF ((AE_verteilen = TRUE) AND (v_Pfadzuweisung='SST')) THEN v_Pfadname:='Simon\AE_mtl.xlsx';
      IF ((AE_verteilen = TRUE) AND (v_Pfadzuweisung='SB')) THEN v_Pfadname:='Sylke\Gesamt.xlsx';
      IF ((AE_verteilen = TRUE) AND (v_Pfadzuweisung='TF')) THEN v_Pfadname:='Thomas\Gesamt.xlsx';
      IF ((AE_verteilen = TRUE) AND (v_Pfadzuweisung='TW')) THEN v_Pfadname:='Torsten\Gesamt.xlsx';
      IF ((AE_verteilen = TRUE) AND (v_Pfadzuweisung='WG')) THEN v_Pfadname:='Werner\Gesamt.xlsx';
      // Ende t„gliche Verteilung
      //Anfang monatliche Verteilung
      IF ((AE_Verteilen_mtl = TRUE) AND (v_Pfadzuweisung='ACS')) THEN v_Pfadname:='ACS\'+ Filename;   //  Pfadzuweisung festlegen
      IF ((AE_Verteilen_mtl = TRUE) AND (v_Pfadzuweisung='CB')) THEN v_Pfadname:='Christian\'+ Filename;
      IF ((AE_Verteilen_mtl = TRUE) AND (v_Pfadzuweisung='ESK')) THEN v_Pfadname:='Edeltraut\'+ Filename;
      IF ((AE_Verteilen_mtl = TRUE) AND (v_Pfadzuweisung='HB')) THEN v_Pfadname:='Hendrik\'+ Filename;
      IF ((AE_Verteilen_mtl = TRUE) AND (v_Pfadzuweisung='ML')) THEN v_Pfadname:='Maria\'+ Filename;
      IF ((AE_Verteilen_mtl = TRUE) AND (v_Pfadzuweisung='MB')) THEN v_Pfadname:='Michael\'+ Filename;
      IF ((AE_Verteilen_mtl = TRUE) AND (v_Pfadzuweisung='NM')) THEN v_Pfadname:='Nadine\'+ Filename;
      IF ((AE_Verteilen_mtl = TRUE) AND (v_Pfadzuweisung='RL')) THEN v_Pfadname:='Renate\'+ Filename;
      IF ((AE_Verteilen_mtl = TRUE) AND (v_Pfadzuweisung='SST')) THEN v_Pfadname:='Simon\'+ Filename;
      IF ((AE_Verteilen_mtl = TRUE) AND (v_Pfadzuweisung='SB')) THEN v_Pfadname:='Sylke\'+ Filename;
      IF ((AE_Verteilen_mtl = TRUE) AND (v_Pfadzuweisung='TF')) THEN v_Pfadname:='Thomas\'+ Filename;
      IF ((AE_Verteilen_mtl = TRUE) AND (v_Pfadzuweisung='TW')) THEN v_Pfadname:='Torsten\'+ Filename;
      IF ((AE_Verteilen_mtl = TRUE) AND (v_Pfadzuweisung='WG')) THEN v_Pfadname:='Werner\'+ Filename;
      // Ende monatliche Verteilung
    END;

    LOCAL PROCEDURE ID_Prove_Filter_Abfrage@1000000005();
    BEGIN
      // Abfrage ID_Prove Firmen
      ID_Prove_Excelblatt_anlegen;     // Excelblatt ohne šberschriftszeile anlegen
      kontakt.RESET;

      kontakt.SETFILTER(kontakt.Type,'%1',0);
      IF kontakt.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := kontakt.COUNT;
        REPEAT
          v_kontaktnr:=FORMAT(kontakt."No.");
          v_kontaktnr:=COPYSTR(v_kontaktnr,4);
          ID_Prove_Excelblatt_Daten;   // einzelne Excelzeilen ausgeben
        UNTIL kontakt.NEXT = 0;
      END;
      v_Pfadname:='adr_nav_neu_text_uwe1.csv';
      ID_Prove_Excelblatt_schliessen;    //  Excelblatt speichern und Excel schlieáen
      //  *************************************************************************************************
      // Abfrage ID_Prove Ansprechpartner
      ID_Prove_Excelblatt_anlegen;     // Excelblatt ohne šberschriftszeile anlegen
      kontakt.RESET;

      kontakt.SETFILTER(kontakt.Type,'%1',1);
      IF kontakt.FINDFIRST THEN BEGIN
        RecNo := 0;
        TotalRecNo := kontakt.COUNT;
        REPEAT
          v_kontaktnr:=FORMAT(kontakt."No.");
          v_kontaktnr:=COPYSTR(v_kontaktnr,4);
          ID_Prove_Excelblatt_Daten;   // einzelne Excelzeilen ausgeben
        UNTIL kontakt.NEXT = 0;
      END;
      v_Pfadname:='adr_nav_neu_text_uwe2.csv';
      ID_Prove_Excelblatt_schliessen;    //  Excelblatt speichern und Excel schlieáen
      //  *************************************************************************************************
    END;

    LOCAL PROCEDURE ID_Prove_Excelblatt_anlegen@1000000006();
    BEGIN
      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;

      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');

      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);
      RowNo := 1;
      ColumnNo := 1;
      EnterCell(RowNo,ColumnNo,Text050,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text051,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text052,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text053,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text054,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text055,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text056,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text057,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text058,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      ColumnNo := ColumnNo + 1;
      EnterCell(RowNo,ColumnNo,Text059,'',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := RowNo + 1;
    END;

    LOCAL PROCEDURE ID_Prove_Excelblatt_Daten@1000000007();
    BEGIN
          ColumnNo := 1;
          EnterCell(RowNo,ColumnNo,kontakt."No.",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          ColumnNo := ColumnNo + 1;
          EnterCell(RowNo,ColumnNo,kontakt."Company Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo := ColumnNo + 1;
          EnterCell(RowNo,ColumnNo,kontakt."Name 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo := ColumnNo + 1;
          EnterCell(RowNo,ColumnNo,kontakt."First Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo := ColumnNo + 1;
          EnterCell(RowNo,ColumnNo,kontakt.Surname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo := ColumnNo + 1;
          EnterCell(RowNo,ColumnNo,kontakt.Address,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo := ColumnNo + 1;
          EnterCell(RowNo,ColumnNo,kontakt."Address 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo := ColumnNo + 1;
          EnterCell(RowNo,ColumnNo,kontakt."Post Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo := ColumnNo + 1;
          EnterCell(RowNo,ColumnNo,kontakt.City,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          ColumnNo := ColumnNo + 1;
          EnterCell(RowNo,ColumnNo,v_kontaktnr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

          RowNo := RowNo + 1;
          RecNo := RecNo + 1;
          Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
    END;

    LOCAL PROCEDURE ID_Prove_Excelblatt_schliessen@1000000008();
    BEGIN
      Window.CLOSE;

      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,SheetName);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN
          TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,Text001);
        TempExcelBuffer.WriteSheet(
          PADSTR(STRSUBSTNO('%1 %2',Text001,''),30),COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          TempExcelBuffer.OpenExcelWithoutAutoFit(Text001, v_Pfadname,'R:\id_prove\Import\',FALSE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;
    END;

    LOCAL PROCEDURE Geschenkliste_šbersicht@1000000009();
    BEGIN
      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,'Adressliste fr Geschenkversand','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 4;
      EnterCell(RowNo,1,'Kontaktnr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Mandantennr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'VK-Code','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Betreuer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Gebiet','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Aktion','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Bearbeiter','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Anrede','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'Titel','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Vorname','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'Name','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'Firma1','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'Firma2','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,'Strasse1','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'Strasse2','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,'Land','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,'Plz','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,'Ort','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,'Unternehmen verlassen','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,20,'Anzahl','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,21,'Geschenk/Art','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,22,'Korrespondenzart','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,23,'Geschenk','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      //  hier weitere Aktionen eintragen und weiter unten auswerten

      RowNo := 5;

      kontakt.RESET;
      kontakt.SETFILTER(kontakt."No.",'<>%1','0');
      IF kontakt.FINDFIRST THEN BEGIN
        REPEAT
          tab_geschenk.RESET;
          tab_geschenk.SETFILTER(tab_geschenk."Kontaktnr.",'%1',kontakt."No.");
          tab_geschenk.SETFILTER(tab_geschenk.Aktion,'%1',tab_geschenk.Aktion::Geschenk);
          IF tab_geschenk.FINDFIRST THEN BEGIN
            REPEAT
            EnterCell(RowNo,1,kontakt."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(kontakt.TABLENAME,1,5050,kontakt."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,2,kontakt."Company No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(kontakt.TABLENAME,1,50091,kontakt."Company No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,3,kontakt."Salesperson Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,4,kontakt."Betreuer Innendienst",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,kontakt."Territory Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,6,FORMAT(tab_geschenk.Aktion),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,7,tab_geschenk."Zust„ndig Bearb",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            IF kontakt."Salutation Code"='MANDANT' THEN BEGIN
              EnterCell(RowNo,8,'Fa.','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            END;
            IF kontakt."Salutation Code"='HERR' THEN BEGIN
              EnterCell(RowNo,8,'Herr','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,9,kontakt."Job Title",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,10,kontakt."First Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,11,kontakt.Surname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            END;
            IF kontakt."Salutation Code"='FRAU' THEN BEGIN
              EnterCell(RowNo,8,'Frau','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,9,kontakt."Job Title",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,10,kontakt."First Name",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,11,kontakt.Surname,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            END;
            kontakt1.RESET;
            kontakt1.SETFILTER(kontakt1."No.",'%1',kontakt."Company No.");
            IF kontakt1.FINDFIRST THEN BEGIN
              EnterCell(RowNo,12,kontakt1.Name,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,13,kontakt1."Name 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            END;
            EnterCell(RowNo,14,kontakt.Address,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,15,kontakt."Address 2",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,16,kontakt."Country/Region Code",'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,17,FORMAT(kontakt."Country/Region Code"+' '+kontakt."Post Code"),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,18,kontakt.City,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            IF kontakt."Unternehmen verlassen" = TRUE THEN EnterCell(RowNo,19,'Ja','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,20,FORMAT(tab_geschenk.Anzahl),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,21,tab_geschenk.Betreff,'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,22,FORMAT(tab_geschenk.Korrespondenzart),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,23,tab_geschenk.Statustext,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            RowNo := RowNo +1;
            UNTIL tab_geschenk.NEXT = 0;
          END;
        UNTIL kontakt.NEXT = 0;
      END;
      CloseExcel('Geschenkeliste','Geschenkeliste','F:\Daten Neu\User\Uwe\Navision_2016\Abschluá');
    END;

    LOCAL PROCEDURE CreateExcel@1000000010();
    BEGIN
      IF DoUpdateExistingWorksheet THEN BEGIN
        IF ServerFileName = '' THEN
          ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok);
        IF ServerFileName = '' THEN
          EXIT;
        SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
        IF SheetName = '' THEN
          EXIT;
      END;

      Window.OPEN(
        Text000 +
        '@1@@@@@@@@@@@@@@@@@@@@@\');

      TempExcelBuffer.DELETEALL;
      CLEAR(TempExcelBuffer);
    END;

    LOCAL PROCEDURE CloseExcel@1000000011(Sheetname@1000000000 : Text;FileName@1000000001 : Text;FilePath@1000000002 : Text);
    BEGIN
      Window.CLOSE;

      IF DoUpdateExistingWorksheet THEN BEGIN
        TempExcelBuffer.UpdateBook(ServerFileName,Sheetname);
        TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN TempExcelBuffer.DownloadAndOpenExcel;
      END ELSE BEGIN
        TempExcelBuffer.CreateBook(ServerFileName,Sheetname);
        TempExcelBuffer.WriteSheet(Sheetname,COMPANYNAME,USERID);
        TempExcelBuffer.CloseBook;
        IF NOT Testmode THEN BEGIN
          IF (FileName = '') OR (FilePath = '') THEN
            TempExcelBuffer.OpenExcel //hat Autofit drin der die Spaltenbreite wieder berschreibt, deshalb neue Fkt. nachfolgend
        ELSE
            TempExcelBuffer.OpenExcelWithoutAutoFit(Sheetname,FileName + ExcelFileExtensionTok,FilePath,TRUE);
        END;
      END;
      IF NOT Testmode THEN
        TempExcelBuffer.GiveUserControl;
    END;

    LOCAL PROCEDURE EnterCell@1000000012(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text[250];Formular@1000000008 : Text[250];Bold@1000000003 : Boolean;Italic@1000000004 : Boolean;UnderLine@1000000005 : Boolean;NumberFormat@1000000006 : Text[30];CellType@1000000007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := Formular;
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      TempExcelBuffer.Underline := UnderLine;
      TempExcelBuffer.NumberFormat := NumberFormat;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE UpdateCell@1000000013(RowNo@1000000000 : Integer;ColumnNo@1000000001 : Integer;CellValue@1000000002 : Text[250]);
    BEGIN
      IF TempExcelBuffer.GET(RowNo,ColumnNo)  THEN BEGIN
        TempExcelBuffer."Cell Value as Text" := CellValue;
        TempExcelBuffer.MODIFY;
      END;
    END;

    LOCAL PROCEDURE Kredtilimit_prfen@1000000014();
    BEGIN
      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,'Kreditlimitberprfung','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Stand:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,FORMAT(WORKDATE),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      RowNo := 2;
      EnterCell(RowNo,1,'Debitor-Nr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'Debitor-Name','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Debitor-Ort','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Handelsregister Nr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'WKV-Art','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'WKV-Info','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Kreditlimit','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Umsatz -12 Monate','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'Zahlungen -12 Monate','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'Anzahl bez. Re -12 Monate','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 3;

      deb.RESET;
      deb.SETFILTER(deb."No.",'%1',v_deb_kredit);
      IF deb.FINDFIRST THEN BEGIN
        REPEAT
          EnterCell(RowNo,1,deb."No.",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb.City,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,deb."Handelsregister Nr",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,deb.Warenkreditversicherung,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,6,deb."WKV-Info",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,7,FORMAT(deb."Credit Limit (LCY)"),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
      //  Umsatz der letzten 12 Monate  ANFANG
          debpos.RESET;
          debpos.SETFILTER(debpos."Customer No.",'%1',deb."No.");
          debpos.SETFILTER(debpos."Document Type",'%1',debpos."Document Type"::Invoice);
          debpos.SETFILTER(debpos."Posting Date",'>%1',(WORKDATE -366));
          IF debpos.FINDFIRST THEN BEGIN
            v_date_1RE:=debpos."Posting Date";
            REPEAT
              debpos.CALCFIELDS(debpos."Amount (LCY)",debpos."Original Amt. (LCY)");
              v_umsatz12:=v_umsatz12+debpos."Amount (LCY)";
              IF debpos.Open =debpos.Open::"0" THEN BEGIN
                v_anz_RE12:=v_anz_RE12+1;
              END;
            UNTIL debpos.NEXT=0;
          END;
          EnterCell(RowNo,8,FORMAT(v_umsatz12),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,10,FORMAT(v_anz_RE12),'',TRUE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
      //  Umsatz der letzten 12 Monate  ENDE
      //  Zahlungen der letzten 12 Monate  ANFANG
          debpos.RESET;
          debpos.SETFILTER(debpos."Customer No.",'%1',deb."No.");
          debpos.SETFILTER(debpos."Document Type",'%1',debpos."Document Type"::Payment);
          debpos.SETFILTER(debpos."Posting Date",'>%1',(WORKDATE -366));
          IF debpos.FINDFIRST THEN BEGIN
            REPEAT
              debpos.CALCFIELDS(debpos."Amount (LCY)",debpos."Original Amt. (LCY)");
              v_zahlung12:=v_zahlung12+debpos."Original Amt. (LCY)";
            UNTIL debpos.NEXT=0;
          END;
          EnterCell(RowNo,9,FORMAT(v_zahlung12),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
      //  Zahlungen der letzten 12 Monate  ENDE
          RowNo := 5;
          EnterCell(RowNo,1,'Land:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2,deb."Country/Region Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,'Sitz des Kunden (Land):','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

          RowNo := 6;
          EnterCell(RowNo,1,'Erster Umsatz:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2,FORMAT(v_date_1RE),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);

          RowNo := 7;
          EnterCell(RowNo,1,'Anlage/Žnd Datum:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2,FORMAT(deb."Last Date Modified"),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
          EnterCell(RowNo,3,'Seit 6 Monaten Gesch„ftsbeziehung','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

          RowNo := 8;
          EnterCell(RowNo,1,'letzte 12 Monate:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2,FORMAT(v_anz_RE12),'',TRUE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,3,'Min. 3 bezahlte Rechnungen (nicht alle NN):','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

          RowNo := 9;
          EnterCell(RowNo,1,'m”gliches Limit:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,2,FORMAT(v_zahlung12/100*40*(-1)),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,3,'bis max. 25K, 40% der Zahlungseing„nge letzte 12 Monate:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      //  offene Posten gesamt  ANFANG
          debpos.RESET;
          debpos.SETFILTER(debpos."Customer No.",'%1',deb."No.");
          debpos.SETFILTER(debpos.Open,'%1',debpos.Open::"1");
          IF debpos.FINDFIRST THEN BEGIN
            RowNo := 12;
            EnterCell(RowNo,1,'offene Possten gesamt','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            RowNo := 13;
            EnterCell(RowNo,1,'Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,2,'Belegnr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,'Art','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,4,'Betrag','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,'offen','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            REPEAT
              RowNo := RowNo +1;
              debpos.CALCFIELDS(debpos."Amount (LCY)",debpos."Original Amt. (LCY)");
              EnterCell(RowNo,1,FORMAT(debpos."Posting Date"),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
              EnterCell(RowNo,2,debpos."Document No.",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,3,FORMAT(debpos."Document Type"),'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,4,FORMAT(debpos."Original Amt. (LCY)"),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
              EnterCell(RowNo,5,FORMAT(debpos.Open),'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              v_OP_gesamt:=v_OP_gesamt+debpos."Original Amt. (LCY)";
            UNTIL debpos.NEXT=0;
          END;
      //  offene Posten gesamt  ENDE
          RowNo := 12;
          EnterCell(RowNo,4,FORMAT(v_OP_gesamt),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
        UNTIL deb.NEXT=0;
      END;
      CloseExcel('Kreditlimitberprfung','Kreditlimitberprfung','F:\Daten Neu\User\Uwe\Navision_2016');
    END;

    LOCAL PROCEDURE Debitor_berprfen@1000000015();
    BEGIN
      // ANFANG Debitor_berprfen
      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,'Debitorberprfung','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Stand:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,FORMAT(WORKDATE),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      RowNo := 3;
      deb.RESET;
      deb.SETFILTER(deb."VAT Bus. Posting Group",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'MWSt-Gesch„ftsbuchungsgruppe ist leer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Payment Terms Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Zahlungsbedingungscode ist leer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Salesperson Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Verk„ufercode ist leer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Customer Posting Group",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Debitorenbuchungsgruppe ist leer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Shipping Agent Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Zustellercode ist leer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Shipping Agent Code",'%1','*-RG4');
      deb.SETFILTER(deb."Rech via EMail",'%1',FALSE);
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Zustellercode ist xxx-RG4 und kein H„kchen "Rech via Email" gesetzt!','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,deb."Betreuer Innendienst",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,deb."Shipping Agent Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
          IF deb."Rech via EMail" = FALSE THEN EnterCell(RowNo,6,'Kein H„kchen Rech via Email gesetzt!','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          IF deb."Original RE nicht drucken" = FALSE THEN EnterCell(RowNo,7,'Kein H„kchen "Original-RE nicht drucken" gesetzt!','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Shipping Agent Code",'%1','*-RG4');
      deb.SETFILTER(deb."Original RE nicht drucken",'%1',FALSE);
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Zustellercode ist xxx-RG4 und kein H„kchen "Original-RE nicht drucken" gesetzt!','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,deb."Betreuer Innendienst",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,deb."Shipping Agent Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Shipping Agent Code",'%1','*-RG4');
      IF deb.FINDFIRST THEN BEGIN
        REPEAT
          Lief_adr.RESET;
          Lief_adr.SETFILTER(Lief_adr."Customer No.",'%1',deb."No.");
          Lief_adr.SETFILTER(Lief_adr."Shipping Agent Code",'<>%1&<>%2&<>%3&<>%4&<>%5&<>%6&<>%7&<>%8','UPS-RG4','UPS-RG5','DHL-RG4','ABH-RG4','FEDEX-RG4','TNT-RG4','EIGEN-RG4','DIREKT-RG4');
          IF Lief_adr.FINDFIRST THEN BEGIN
            IF (deb."No." = '100101') AND (Lief_adr."Shipping Agent Code" = 'POST') THEN BEGIN
            END ELSE BEGIN
              IF (deb."No." = '103287') AND (Lief_adr."Shipping Agent Code" = 'UPS-RG5') THEN BEGIN
              END ELSE BEGIN
                IF (deb."No." = '738480') AND (Lief_adr."Shipping Agent Code" = 'EMAIL') THEN BEGIN
                END ELSE BEGIN
                  EnterCell(RowNo,1,'Zustellercode ist xxx-RG4 aber nicht in der Lieferadresse','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                  RowNo := RowNo +1;
                  REPEAT
                    EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
                    EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    EnterCell(RowNo,4,deb."Betreuer Innendienst",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    EnterCell(RowNo,5,deb."Shipping Agent Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    EnterCell(RowNo,6,Lief_adr."Shipping Agent Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    EnterCell(RowNo,7,Lief_adr."Customer No.",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    EnterCell(RowNo,8,Lief_adr.Code,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
                    RowNo := RowNo +1;
                  UNTIL Lief_adr.NEXT = 0;
                  RowNo := RowNo +1;
                END;
              END;
            END;
          END;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Country/Region Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'L„ndercode ist leer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Location Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Lagerortcode ist leer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Gesch„ftsbuchungsgruppe ist leer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Territory Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Gebietscode ist leer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Shipment Method Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Lieferbedingungscode ist leer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Betreuer Innendienst",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Betreuer Innendienst ist leer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Reminder Terms Code",'%1','');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Mahnmethode ist leer','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Country/Region Code",'%1','DE');
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'%1','EU');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'L„ndercode DE und Gesch„ftsbuchungsgruppe EU stimmen nicht berein','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,deb."Gen. Bus. Posting Group",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,deb."Country/Region Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'%1','EU');
      deb.SETFILTER(deb."Country/Region Code",'%1|%2|%3|%4|%5|%6|%7|%8|%9','AT','BE','BG','CY','CZ','DK','EE','ES','FI');
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'<>%1','EU');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'L„ndercode XX und Gesch„ftsbuchungsgruppe EU stimmen nicht berein','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,deb."Gen. Bus. Posting Group",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,deb."Country/Region Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'%1','EU');
      deb.SETFILTER(deb."Country/Region Code",'%1|%2|%3|%4|%5|%6|%7|%8|%9','FR','GB','GR','HU','IE','IT','LT','LU','LV');
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'<>%1','EU');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'L„ndercode XX und Gesch„ftsbuchungsgruppe EU stimmen nicht berein','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,deb."Gen. Bus. Posting Group",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,deb."Country/Region Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'%1','EU');
      deb.SETFILTER(deb."Country/Region Code",'%1|%2|%3|%4|%5|%6|%7|%8','MT','NL','PL','PT','RO','SE','SI','SK');
      deb.SETFILTER(deb."Gen. Bus. Posting Group",'<>%1','EU');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'L„ndercode XX und Gesch„ftsbuchungsgruppe EU stimmen nicht berein','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,deb."Gen. Bus. Posting Group",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,deb."Country/Region Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb.Warenkreditversicherung,'%1','GEMELDET');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Kreditlimiteintr„ge stimmen bei "GEMELDET" nicht berein','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          OK := TRUE;
          IF ((deb."WKV-Info"='nur 12K') AND (deb."Credit Limit (LCY)"<>12000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='12K') AND (deb."Credit Limit (LCY)"<>12000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='15K') AND (deb."Credit Limit (LCY)"<>15000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='20K') AND (deb."Credit Limit (LCY)"<>20000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='25K') AND (deb."Credit Limit (LCY)"<>25000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='30K') AND (deb."Credit Limit (LCY)"<>30000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='35K') AND (deb."Credit Limit (LCY)"<>35000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='40K') AND (deb."Credit Limit (LCY)"<>40000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='45K') AND (deb."Credit Limit (LCY)"<>45000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='50K') AND (deb."Credit Limit (LCY)"<>50000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='50K unver„ndert') AND (deb."Credit Limit (LCY)"<>50000)) THEN OK := FALSE;
          IF ((deb."WKV-Info"='60K') AND (deb."Credit Limit (LCY)"<>60000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='70K') AND (deb."Credit Limit (LCY)"<>70000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='75K') AND (deb."Credit Limit (LCY)"<>75000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='80K') AND (deb."Credit Limit (LCY)"<>80000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='90K') AND (deb."Credit Limit (LCY)"<>90000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='100K') AND (deb."Credit Limit (LCY)"<>100000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='113K') AND (deb."Credit Limit (LCY)"<>113000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='125K') AND (deb."Credit Limit (LCY)"<>125000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='150K') AND (deb."Credit Limit (LCY)"<>150000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='180K') AND (deb."Credit Limit (LCY)"<>180000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='188K') AND (deb."Credit Limit (LCY)"<>188000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='200K') AND (deb."Credit Limit (LCY)"<>200000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='250K') AND (deb."Credit Limit (LCY)"<>250000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='300K') AND (deb."Credit Limit (LCY)"<>300000)) THEN OK:=FALSE;
          IF OK = FALSE THEN BEGIN
            deb.CALCFIELDS(deb."Balance (LCY)");
            EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,4,deb.Warenkreditversicherung,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,FORMAT(deb."Credit Limit (LCY)"),'',TRUE,FALSE,FALSE,'###,###',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,6,deb."WKV-Info",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,7,FORMAT(deb."Balance (LCY)"),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            RowNo := RowNo +1;
          END;
          IF ((deb."WKV-Info"='nur 12K') AND (deb."Credit Limit (LCY)"=12000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='12K') AND (deb."Credit Limit (LCY)"=12000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='15K') AND (deb."Credit Limit (LCY)"=15000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='20K') AND (deb."Credit Limit (LCY)"=20000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='25K') AND (deb."Credit Limit (LCY)"=25000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='30K') AND (deb."Credit Limit (LCY)"=30000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='35K') AND (deb."Credit Limit (LCY)"=35000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='40K') AND (deb."Credit Limit (LCY)"=40000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='45K') AND (deb."Credit Limit (LCY)"=45000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='50K') AND (deb."Credit Limit (LCY)"=50000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='50K unver„ndert') AND (deb."Credit Limit (LCY)"=50000)) THEN OK := FALSE;
          IF ((deb."WKV-Info"='60K') AND (deb."Credit Limit (LCY)"=60000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='70K') AND (deb."Credit Limit (LCY)"=70000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='75K') AND (deb."Credit Limit (LCY)"=75000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='80K') AND (deb."Credit Limit (LCY)"=80000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='90K') AND (deb."Credit Limit (LCY)"=90000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='100K') AND (deb."Credit Limit (LCY)"=100000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='113K') AND (deb."Credit Limit (LCY)"=113000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='125K') AND (deb."Credit Limit (LCY)"=125000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='150K') AND (deb."Credit Limit (LCY)"=150000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='180K') AND (deb."Credit Limit (LCY)"=180000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='188K') AND (deb."Credit Limit (LCY)"=188000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='200K') AND (deb."Credit Limit (LCY)"=200000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='250K') AND (deb."Credit Limit (LCY)"=250000)) THEN OK:=FALSE;
          IF ((deb."WKV-Info"='300K') AND (deb."Credit Limit (LCY)"=300000)) THEN OK:=FALSE;

          IF OK=TRUE THEN BEGIN
            IF deb."WKV-Info"<>'' THEN BEGIN
              EnterCell(RowNo,1,'Programmabfrage einfgen mit','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              EnterCell(RowNo,6,deb."WKV-Info",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
              RowNo := RowNo +1;
            END;
          END;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."Credit Limit (LCY)",'>%1', 11000);
      deb.SETFILTER(deb.Warenkreditversicherung,'%1','');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Kreditlimiteintr„ge ber 11.000 ohne GEMELDET oder UNVERSICHERT','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          deb.CALCFIELDS(deb."Balance (LCY)");
          EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,4,deb.Warenkreditversicherung,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,5,FORMAT(deb."Credit Limit (LCY)"),'',TRUE,FALSE,FALSE,'###,###',TempExcelBuffer."Cell Type"::Number);
          EnterCell(RowNo,6,deb."WKV-Info",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
          EnterCell(RowNo,7,FORMAT(deb."Balance (LCY)"),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
          RowNo := RowNo +1;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;

      deb.RESET;
      deb.SETFILTER(deb."No.",'<>%1','0');
      IF deb.FINDFIRST THEN BEGIN
        EnterCell(RowNo,1,'Saldo gr”áer Kreditlimit','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
        RowNo := RowNo +1;
        REPEAT
          deb.CALCFIELDS(deb."Balance (LCY)");
          IF deb."Balance (LCY)" > deb."Credit Limit (LCY)" THEN BEGIN
            EnterCell(RowNo,1,deb."No.",TOPAS_API.replace_text(TOPAS_API.CreateExcelHyperlinkToNav(deb.TABLENAME,1,21,deb."No."),';',','),FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,2,deb.Name,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,deb."Salesperson Code",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,4,deb.Warenkreditversicherung,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,FORMAT(deb."Credit Limit (LCY)"),'',TRUE,FALSE,FALSE,'###,###',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,6,deb."WKV-Info",'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,7,FORMAT(deb."Balance (LCY)"),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            RowNo := RowNo +1;
          END;
        UNTIL deb.NEXT = 0;
        RowNo := RowNo +1;
      END;
      RowNo := RowNo +1;

      CloseExcel('Debitorberprfung','Debitorberprfung','F:\Daten Neu\User\Uwe\Navision_2016');
    END;

    LOCAL PROCEDURE Differenzen_ermitteln_Neu@1000000016();
    BEGIN
      // ANFANG zurcksetzen Status auf NN zwecks Programmtests
      //        kann bei Echtbetrieb unterbleiben!!!
      MESSAGE('JOB wurde ordnungsgem„á gestartet.');
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','ALT');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          tab_ab_bw.Status := 'NN';
          tab_ab_bw.Stat_Artikel := 'NN';
          tab_ab_bw.Stat_Menge := 'NN';
          tab_ab_bw.Stat_EK := 'NN';
          tab_ab_bw.Stat_VK := 'NN';
          tab_ab_bw.MODIFY;
        UNTIL tab_ab_bw.NEXT = 0;
      END;
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','NEU');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          tab_ab_bw.Status := 'NN';
          tab_ab_bw.Stat_Artikel := 'NN';
          tab_ab_bw.Stat_Menge := 'NN';
          tab_ab_bw.Stat_EK := 'NN';
          tab_ab_bw.Stat_VK := 'NN';
          tab_ab_bw.MODIFY;
        UNTIL tab_ab_bw.NEXT = 0;
      END;
      // ENDE zurcksetzen Status auf NN zwecks Programmtests


      //  ANFANG Vergleich zwischen NEU und ALT (tab_ab_bw=NEU  und prf=ALT)
      //  ANFANG Diff. feststellen Artikel, Menge, EK, VK
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','NEU');
      IF tab_ab_bw.FIND('-') THEN BEGIN
        REPEAT
          prf.RESET;
          prf.SETFILTER(Belegart,'%1','AUšW');
          prf.SETFILTER(AU_Nr,'%1',tab_ab_bw.AU_Nr);
          prf.SETFILTER(POS_Nr,'%1',tab_ab_bw.POS_Nr);
          prf.SETFILTER(Art,'%1','ALT');
          IF prf.FINDFIRST THEN BEGIN
            IF prf.Artikel = tab_ab_bw.Artikel THEN BEGIN
              tab_ab_bw.Stat_Artikel := 'OK';
              prf.Stat_Artikel := 'OK';
            END ELSE BEGIN
              tab_ab_bw.Stat_Artikel := 'AF';
              tab_ab_bw.Status := 'ŽN';
              prf.Stat_Artikel := 'AF';
              prf.Status := 'ŽN';
            END;

            IF prf.Menge = tab_ab_bw.Menge THEN BEGIN
              tab_ab_bw.Stat_Menge := 'OK';
              prf.Stat_Menge := 'OK';
              // ANFANG  Rechnungsmengenprfung bei Menge OK
              IF prf.Restmenge <> tab_ab_bw.Restmenge THEN BEGIN
                tab_ab_bw.Stat_Menge := 'MR';
                tab_ab_bw.Status := 'ŽN';
                prf.Stat_Menge := 'MR';
                prf.Status := 'ŽN';
              END;
              // ENDE  Rechnungsmengenprfung bei Menge OK
            END ELSE BEGIN
              tab_ab_bw.Stat_Menge := 'MF';
              tab_ab_bw.Status := 'ŽN';
              prf.Stat_Menge := 'MF';
              prf.Status := 'ŽN';
            END;

            IF prf.Restmenge <> tab_ab_bw.Restmenge THEN BEGIN
              tab_ab_bw.Stat_Menge := 'MR';
              tab_ab_bw.Status := 'ŽN';
              prf.Stat_Menge := 'MR';
              prf.Status := 'ŽN';
            END;

            IF prf.EK = tab_ab_bw.EK THEN BEGIN
              tab_ab_bw.Stat_EK := 'OK';
              prf.Stat_EK := 'OK';
            END ELSE BEGIN
              tab_ab_bw.Stat_EK := 'EF';
              tab_ab_bw.Status := 'ŽN';
              prf.Stat_EK := 'EF';
              prf.Status := 'ŽN';
            END;

            IF prf.VK=tab_ab_bw.VK THEN BEGIN
              tab_ab_bw.Stat_VK := 'OK';
              prf.Stat_VK := 'OK';
            END ELSE BEGIN
              tab_ab_bw.Stat_VK := 'VF';
              tab_ab_bw.Status := 'ŽN';
              prf.Stat_VK := 'VF';
              prf.Status := 'ŽN';
            END;

            IF prf.W„hrungscode <> tab_ab_bw.W„hrungscode THEN BEGIN
              tab_ab_bw.Stat_VK := 'WŽ';
              tab_ab_bw.Status := 'ŽN';
              prf.Status := 'ŽN';
              prf.Stat_VK := 'WŽ';
            END;

            tab_ab_bw.MODIFY;
            prf.MODIFY;
          END;
        UNTIL tab_ab_bw.NEXT = 0;
      END;
      //  ENDE Diff. feststellen Artikel, Menge, EK, VK
      //  ANFANG Status auf OK setzen, wenn keine Abweichnung vorliegt
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','NEU');
      tab_ab_bw.SETFILTER(Stat_Artikel,'%1','OK');
      tab_ab_bw.SETFILTER(Stat_Menge,'%1','OK');
      tab_ab_bw.SETFILTER(Stat_EK,'%1','OK');
      tab_ab_bw.SETFILTER(Stat_VK,'%1','OK');
      IF tab_ab_bw.FIND('-') THEN BEGIN
        REPEAT
          tab_ab_bw.Status := 'OK';
          tab_ab_bw.MODIFY;
        UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','ALT');
      tab_ab_bw.SETFILTER(Stat_Artikel,'%1','OK');
      tab_ab_bw.SETFILTER(Stat_Menge,'%1','OK');
      tab_ab_bw.SETFILTER(Stat_EK,'%1','OK');
      tab_ab_bw.SETFILTER(Stat_VK,'%1','OK');
      IF tab_ab_bw.FIND('-') THEN BEGIN
        REPEAT
          tab_ab_bw.Status := 'OK';
          tab_ab_bw.MODIFY;
        UNTIL tab_ab_bw.NEXT = 0;
      END;
      //  ENDE   Status auf OK setzen, wenn keine Abweichnung vorliegt

      //  ANFANG Feststellen, ob neuer Auftrag/Pos vorliegt
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','NEU');
      tab_ab_bw.SETFILTER(Status,'%1','NN');
      IF tab_ab_bw.FIND('-') THEN BEGIN
        REPEAT
          prf.RESET;
          tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
          prf.SETFILTER(Art,'%1','ALT');
          prf.SETFILTER(AU_Nr,'%1',tab_ab_bw.AU_Nr);
          IF prf.FINDFIRST THEN BEGIN
      //  Neue Position zu altem Auftrag
            tab_ab_bw.Status := 'NP';
            tab_ab_bw.MODIFY;
          END ELSE BEGIN
      //  Neuer Auftrag
            tab_ab_bw.Status := 'NA';
            tab_ab_bw.MODIFY;
          END;
        UNTIL tab_ab_bw.NEXT = 0;
      END;
      //  ENDE   Feststellen, ob neuer Auftrag/Pos vorliegt

      // ANFANG  Feststellen, ob ein Auftrag/Pos storniert wurde
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','ALT');
      tab_ab_bw.SETFILTER(Status,'%1','NN');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          var_re_menge := 0;
          rech.RESET;
          rech.SETFILTER("Order No.",'%1',tab_ab_bw.AU_Nr);
          // Rechnungsmenge ohne laufender Tag *********************************
          rech.SETFILTER("Posting Date",'<%1',WORKDATE);
          rech.SETFILTER("Order Line No.",'%1',tab_ab_bw.POS_Nr);
          IF rech.FINDFIRST THEN BEGIN
            REPEAT
              tab_ab_bw.Status := 'ST';
              tab_ab_bw.MODIFY;

              var_re_menge := var_re_menge + rech.Quantity;
            UNTIL rech.NEXT = 0;
            IF var_re_menge > 0 THEN
              tab_ab_bw.Status := 'RE';
            tab_ab_bw.re_menge := var_re_menge;
            tab_ab_bw.MODIFY;
            var_re_menge:=0;
          END ELSE BEGIN
        //  Storno der Zeile
            tab_ab_bw.Status := 'ST';
            tab_ab_bw.MODIFY;
          END;
        UNTIL tab_ab_bw.NEXT = 0;
      END;


      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','ALT');
      tab_ab_bw.SETFILTER(Status,'%1','ŽN');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          var_re_menge := 0;
          rech.RESET;
          rech.SETFILTER("Order No.",'%1',tab_ab_bw.AU_Nr);
          // Rechnungsmenge ohne laufender Tag *********************************
          rech.SETFILTER("Posting Date",'<%1',WORKDATE);
          rech.SETFILTER("Order Line No.",'%1',tab_ab_bw.POS_Nr);
          IF rech.FINDFIRST THEN BEGIN
            REPEAT
              var_re_menge := var_re_menge+rech.Quantity;
            UNTIL rech.NEXT = 0;
            IF var_re_menge > 0 THEN
              tab_ab_bw.Status := 'RE';
            tab_ab_bw.re_menge := var_re_menge;
            tab_ab_bw.MODIFY;
          var_re_menge:=0;
          END ELSE BEGIN
          //  Storno der Zeile
            tab_ab_bw.Status := 'ST';
            tab_ab_bw.MODIFY;
          END;
        UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','NEU');
      tab_ab_bw.SETFILTER(Status,'%1','ŽN');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          var_re_menge := 0;
          rech.RESET;
          rech.SETFILTER("Order No.",'%1',tab_ab_bw.AU_Nr);
          // Rechnungsmenge ohne laufender Tag *********************************
          rech.SETFILTER("Posting Date",'<%1',WORKDATE);
          rech.SETFILTER("Order Line No.",'%1',tab_ab_bw.POS_Nr);
          IF rech.FINDFIRST THEN BEGIN
            REPEAT
              var_re_menge := var_re_menge + rech.Quantity;
            UNTIL rech.NEXT = 0;
            IF var_re_menge > 0 THEN
              tab_ab_bw.Status := 'RE';
            tab_ab_bw.re_menge := var_re_menge;
            tab_ab_bw.MODIFY;
          var_re_menge := 0;
          END ELSE BEGIN
        //  Storno der Zeile
              tab_ab_bw.Status := 'ST';
              tab_ab_bw.MODIFY;
          END;
        UNTIL tab_ab_bw.NEXT = 0;
      END;
      // ENDE    Feststellen, ob ein Auftrag/Pos storniert wurde

      // ANFANG  Feststellen, ob RE_Mengen mit AU_Mengen bereinstimmen
      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','ALT');
      tab_ab_bw.SETFILTER(Status,'%1','RE');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          IF tab_ab_bw.Menge = tab_ab_bw.re_menge THEN BEGIN
            tab_ab_bw.Status := 'OK';
          END ELSE BEGIN
            tab_ab_bw.Status := 'GP';
          END;
          IF tab_ab_bw.Restmenge = 0 THEN BEGIN
            tab_ab_bw.Status := 'FA';
          END;
          tab_ab_bw.MODIFY;
        UNTIL tab_ab_bw.NEXT = 0;
      END;
      //   ENDE  Feststellen, ob RE_Mengen mit AU_Mengen bereinstimmen


      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','ALT');
      tab_ab_bw.SETFILTER(Status,'%1','FA');
      tab_ab_bw.SETFILTER(Stat_Menge,'%1','NN');
      tab_ab_bw.SETFILTER(Stat_Artikel,'%1','NN');
      tab_ab_bw.SETFILTER(Stat_EK,'%1','NN');
      tab_ab_bw.SETFILTER(Stat_VK,'%1','NN');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          IF tab_ab_bw.re_menge = tab_ab_bw.Menge THEN BEGIN
            tab_ab_bw.Status := 'OK';
            tab_ab_bw.MODIFY;
          END;
        UNTIL tab_ab_bw.NEXT = 0;
      END;

      tab_ab_bw.RESET;
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1','NEU');
      tab_ab_bw.SETFILTER(Status,'%1','RE');
      tab_ab_bw.SETFILTER(Stat_Menge,'%1','MR');
      tab_ab_bw.SETFILTER(Stat_Artikel,'%1','OK');
      tab_ab_bw.SETFILTER(Stat_EK,'%1','OK');
      tab_ab_bw.SETFILTER(Stat_VK,'%1','OK');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          IF ((tab_ab_bw.re_menge = tab_ab_bw.Menge) AND (tab_ab_bw.Restmenge = 0)) THEN BEGIN
            tab_ab_bw.Status := 'OK';
            tab_ab_bw.MODIFY;
          END;
        UNTIL tab_ab_bw.NEXT = 0;
      END;

      //  ENDE   Vergleich zwischen NEU und ALT


      //  ANFANG Differenzen in AEmtl bernehmen
      tab_ab_bw.RESET;
      tab_ab_bw.SETCURRENTKEY(Belegart,AU_Nr,POS_Nr,Datum);
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1|%2', 'NEU', 'ALT');
      tab_ab_bw.SETFILTER(Status,'%1|%2|%3|%4|%5|%6|%7', 'NP', 'ŽN', 'ST', 'GP', 'FA', 'RE','WŽ');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          AE_mtl.INIT;
          AE_mtl.Datum := tab_ab_bw.Datum;
          AE_mtl.AU_Nr := tab_ab_bw.AU_Nr;
          AE_mtl.POS_Nr := tab_ab_bw.POS_Nr;
          AE_mtl.Belegart := 'AEND';
          AE_mtl.Debitor := tab_ab_bw.Debitor;
          AE_mtl.Deb_Nr := tab_ab_bw.Deb_Nr;
          AE_mtl.Artikel := tab_ab_bw.Artikel;
          AE_mtl.Menge := tab_ab_bw.Menge;
          AE_mtl.Restmenge := tab_ab_bw.Restmenge;
          AE_mtl.EK := tab_ab_bw.EK;
          AE_mtl.VK := tab_ab_bw.VK;
          AE_mtl."Best„tigt LD" := tab_ab_bw."Best„tigt LD";
          AE_mtl.Wunschdatum := tab_ab_bw.Wunschdatum;
          AE_mtl.Status := 'AE';
          AE_mtl.Art := 'TAG';
          AE_mtl."EK Gesamt" := tab_ab_bw."EK Gesamt";
          AE_mtl."VK Gesamt" := tab_ab_bw."VK Gesamt";
          AE_mtl.Lager := tab_ab_bw.Lager;
          AE_mtl."DB %" := tab_ab_bw."DB %";
          AE_mtl.Linie := tab_ab_bw.Linie;
          AE_mtl.Endkunde := tab_ab_bw.Endkunde;
          AE_mtl.W„hrungscode := tab_ab_bw.W„hrungscode;
          AE_mtl.w„_faktor := tab_ab_bw.w„_faktor;
          AE_mtl.Auftragsdatum := tab_ab_bw.Auftragsdatum;
          AE_mtl.Betreuer := tab_ab_bw.Betreuer;
          AE_mtl.Vertreter := tab_ab_bw.Vertreter;
          AE_mtl.Teams := tab_ab_bw.Teams;
          AE_mtl.Gebietscode := tab_ab_bw.Gebietscode;
          AE_mtl.PLZ := tab_ab_bw.Plz;
          AE_mtl."AU aus Rahmen" := tab_ab_bw."AU aus Rahmen";
          IF AE_mtl.w„_faktor = 0 THEN BEGIN
            AE_mtl."Betrag in EUR" := AE_mtl."VK Gesamt";
          END ELSE BEGIN
            AE_mtl."Betrag in EUR":= (AE_mtl."VK Gesamt"/AE_mtl.w„_faktor);
          END;
          AE_mtl.INSERT;

        UNTIL tab_ab_bw.NEXT = 0;
      END;
      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,'Auftragsberwachung  ','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Stand:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,FORMAT(WORKDATE),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      RowNo := 2;
      EnterCell(RowNo,1,'Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'AU-Nr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Pos-Nr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Debitor','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Artikel','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Menge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Restmenge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Lager','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'EK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'VK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'Art','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'Status','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'Art Diff','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,'Menge Diff','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'EK Diff','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,'VK Diff','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,'WŽ-Diff','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,'WŽ','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,'W„ Kurs','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,20,'RE Menge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,21,'urspr AU-Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 3;
      var_AU_Nr := 'AU200000';
      tab_ab_bw.RESET;
      tab_ab_bw.SETCURRENTKEY(Belegart,AU_Nr,POS_Nr,Datum);
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1|%2', 'NEU', 'ALT');
      tab_ab_bw.SETFILTER(Status,'%1|%2|%3|%4|%5|%6|%7', 'NP','ŽN','ST','GP','FA','RE','WŽ');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          IF tab_ab_bw.AU_Nr = var_AU_Nr THEN BEGIN
            EnterCell(RowNo,1,FORMAT(tab_ab_bw.Datum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            EnterCell(RowNo,2,tab_ab_bw.AU_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,FORMAT(tab_ab_bw.POS_Nr),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,4,tab_ab_bw.Debitor,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,tab_ab_bw.Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,6,FORMAT(tab_ab_bw.Menge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,7,FORMAT(tab_ab_bw.Restmenge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,8,tab_ab_bw.Lager,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,9,FORMAT(tab_ab_bw.EK),'',FALSE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,10,FORMAT(tab_ab_bw.VK),'',FALSE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,11,tab_ab_bw.Art,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,12,tab_ab_bw.Status,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,13,tab_ab_bw.Stat_Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,14,tab_ab_bw.Stat_Menge,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,15,FORMAT(tab_ab_bw.Stat_EK),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,16,FORMAT(tab_ab_bw.Stat_VK),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            IF tab_ab_bw.Stat_VK='WŽ' THEN EnterCell(RowNo,17,'WŽ-Fehler','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,18,tab_ab_bw.W„hrungscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,19,FORMAT(tab_ab_bw.w„_faktor),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,20,FORMAT(tab_ab_bw.re_menge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,21,FORMAT(tab_ab_bw.Auftragsdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            RowNo := RowNo +1;
          END ELSE BEGIN
            RowNo := RowNo +1;
            EnterCell(RowNo,1,FORMAT(tab_ab_bw.Datum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            EnterCell(RowNo,2,tab_ab_bw.AU_Nr,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,FORMAT(tab_ab_bw.POS_Nr),'',FALSE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,4,tab_ab_bw.Debitor,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,tab_ab_bw.Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,6,FORMAT(tab_ab_bw.Menge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,7,FORMAT(tab_ab_bw.Restmenge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,8,tab_ab_bw.Lager,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,9,FORMAT(tab_ab_bw.EK),'',FALSE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,10,FORMAT(tab_ab_bw.VK),'',FALSE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,11,tab_ab_bw.Art,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,12,tab_ab_bw.Status,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,13,tab_ab_bw.Stat_Artikel,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,14,tab_ab_bw.Stat_Menge,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,15,FORMAT(tab_ab_bw.Stat_EK),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,16,FORMAT(tab_ab_bw.Stat_VK),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            IF tab_ab_bw.Stat_VK='WŽ' THEN EnterCell(RowNo,17,'WŽ-Fehler','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,18,tab_ab_bw.W„hrungscode,'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,19,FORMAT(tab_ab_bw.w„_faktor),'',FALSE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,20,FORMAT(tab_ab_bw.re_menge),'',FALSE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,21,FORMAT(tab_ab_bw.Auftragsdatum),'',FALSE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            RowNo := RowNo +1;
            var_AU_Nr := tab_ab_bw.AU_Nr;
          END;
        UNTIL tab_ab_bw.NEXT = 0;
      END;

      Pfad_tag := FORMAT(DATE2DMY(AE_holen_Datum_1,1));
      Pfad_monat := FORMAT(DATE2DMY(AE_holen_Datum_1,2));
      Pfad_jahr := FORMAT(DATE2DMY(AE_holen_Datum_1,3));

      Pfaddatum:='_' + Pfad_jahr + '_' + Pfad_monat + '_' + Pfad_tag;
      CloseExcel('Diff'+Pfaddatum,'Diff'+Pfaddatum,'F:\Daten Neu\User\Joachim\AB-Differenzen\2017_2018');
    END;

    LOCAL PROCEDURE Nur_Diff_AB_ausgeben@1000000017();
    BEGIN
      // ANFANG Differenzen in Excel ausgeben
      CreateExcel;
      RowNo := 1;
      EnterCell(RowNo,1,'Auftragsberwachung  ','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Stand:','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,FORMAT(WORKDATE),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
      RowNo := 2;
      EnterCell(RowNo,1,'Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,2,'AU-Nr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,3,'Pos-Nr','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,4,'Debitor','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,5,'Artikel','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,6,'Menge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,7,'Restmenge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,8,'Lager','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,9,'EK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,10,'VK','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,11,'Art','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,12,'Status','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,13,'Art Diff','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,14,'Menge Diff','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,15,'EK Diff','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,16,'VK Diff','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,17,'WŽ-Diff','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,18,'WŽ','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,19,'W„ Kurs','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,20,'RE Menge','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(RowNo,21,'urspr AU-Datum','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      RowNo := 3;
      var_AU_Nr := 'AU200000';
      tab_ab_bw.RESET;
      tab_ab_bw.SETCURRENTKEY(Belegart,AU_Nr,POS_Nr,Datum);
      tab_ab_bw.SETFILTER(Belegart,'%1','AUšW');
      tab_ab_bw.SETFILTER(Art,'%1|%2', 'NEU', 'ALT');
      tab_ab_bw.SETFILTER(Status,'%1|%2|%3|%4|%5|%6|%7', 'NP','ŽN','ST','GP','FA','RE','WŽ');
      IF tab_ab_bw.FINDFIRST THEN BEGIN
        REPEAT
          IF tab_ab_bw.AU_Nr = var_AU_Nr THEN BEGIN
            EnterCell(RowNo,1,FORMAT(tab_ab_bw.Datum),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            EnterCell(RowNo,2,tab_ab_bw.AU_Nr,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,FORMAT(tab_ab_bw.POS_Nr),'',TRUE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,4,tab_ab_bw.Debitor,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,tab_ab_bw.Artikel,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,6,FORMAT(tab_ab_bw.Menge),'',TRUE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,7,FORMAT(tab_ab_bw.Restmenge),'',TRUE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,8,tab_ab_bw.Lager,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,9,FORMAT(tab_ab_bw.EK),'',TRUE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,10,FORMAT(tab_ab_bw.VK),'',TRUE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,11,tab_ab_bw.Art,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,12,tab_ab_bw.Status,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,13,tab_ab_bw.Stat_Artikel,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,14,tab_ab_bw.Stat_Menge,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,15,FORMAT(tab_ab_bw.Stat_EK),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,16,FORMAT(tab_ab_bw.Stat_VK),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            IF tab_ab_bw.Stat_VK='WŽ' THEN EnterCell(RowNo,17,'WŽ-Fehler','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,18,tab_ab_bw.W„hrungscode,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,19,FORMAT(tab_ab_bw.w„_faktor),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,20,FORMAT(tab_ab_bw.re_menge),'',TRUE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,21,FORMAT(tab_ab_bw.Auftragsdatum),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            RowNo := RowNo +1;
          END ELSE BEGIN
            RowNo := RowNo +1;
            EnterCell(RowNo,1,FORMAT(tab_ab_bw.Datum),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            EnterCell(RowNo,2,tab_ab_bw.AU_Nr,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,3,FORMAT(tab_ab_bw.POS_Nr),'',TRUE,FALSE,FALSE,'######',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,4,tab_ab_bw.Debitor,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,5,tab_ab_bw.Artikel,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,6,FORMAT(tab_ab_bw.Menge),'',TRUE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,7,FORMAT(tab_ab_bw.Restmenge),'',TRUE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,8,tab_ab_bw.Lager,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,9,FORMAT(tab_ab_bw.EK),'',TRUE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,10,FORMAT(tab_ab_bw.VK),'',TRUE,FALSE,FALSE,'###,##0.00##',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,11,tab_ab_bw.Art,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,12,tab_ab_bw.Status,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,13,tab_ab_bw.Stat_Artikel,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,14,tab_ab_bw.Stat_Menge,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,15,FORMAT(tab_ab_bw.Stat_EK),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,16,FORMAT(tab_ab_bw.Stat_VK),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            IF tab_ab_bw.Stat_VK='WŽ' THEN EnterCell(RowNo,17,'WŽ-Fehler','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,18,tab_ab_bw.W„hrungscode,'',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
            EnterCell(RowNo,19,FORMAT(tab_ab_bw.w„_faktor),'',TRUE,FALSE,FALSE,'###,##0.00',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,20,FORMAT(tab_ab_bw.re_menge),'',TRUE,FALSE,FALSE,'###,##0',TempExcelBuffer."Cell Type"::Number);
            EnterCell(RowNo,21,FORMAT(tab_ab_bw.Auftragsdatum),'',TRUE,FALSE,FALSE,'dd.mm.yyyy',TempExcelBuffer."Cell Type"::Date);
            RowNo := RowNo +1;
            var_AU_Nr := tab_ab_bw.AU_Nr;
          END;
        UNTIL tab_ab_bw.NEXT = 0;
      END;

      Pfad_tag := FORMAT(DATE2DMY(AE_holen_Datum_1,1));
      Pfad_monat := FORMAT(DATE2DMY(AE_holen_Datum_1,2));
      Pfad_jahr := FORMAT(DATE2DMY(AE_holen_Datum_1,3));

      Pfaddatum:='_' + Pfad_jahr + '_' + Pfad_monat + '_' + Pfad_tag;
      CloseExcel('Test_Diff'+Pfaddatum,'Test_Diff'+Pfaddatum,'F:\Daten Neu\User\Joachim\AB-Differenzen\2018_2019');
    END;

    LOCAL PROCEDURE WŽ_Abstimmung@1000000018();
    BEGIN
      CreateExcel;
      RecNo := 0;

      //šberschriften
      EnterCell(1,1,'W„hrungsabstimmung','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,2,'EUR','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,3,'USD','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,4,'JPY','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,5,'GBP','',TRUE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,6,'Stand:','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(1,7,FORMAT(WORKDATE),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Date);

      EnterCell(3,1,'Verbindlichkeiten: ','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(4,1,'offene Kreditoren-Postem: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(5,1,'offene Bestell-Restmengen: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(6,1,'noch nicht fakturierte Zug„nge: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(7,1,'noch nicht bestellte Waren: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(8,1,'sonstige Verbindlichkeiten: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(10,1,'Forderungen: ','',TRUE,FALSE,TRUE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(11,1,'Bankkonten (nur laufende): ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(12,1,'Termindevisen: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(13,1,'offene Debitoren-Posten: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(14,1,'offene Auftrags-Restmengen: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(15,1,'offene Rahmen-Restmengen: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(16,1,'Provisionen: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);
      EnterCell(17,1,'sonstige Forderungen: ','',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Text);

      // offene Kreditorenposten *********************************************************************************************************
      Kredpost.RESET;
      Kredpost.SETFILTER(Kredpost."Remaining Amount",'<>%1',0);
      Kredpost.SETFILTER(Kredpost."Currency Code",'%1','');
      IF Kredpost.FINDFIRST() THEN BEGIN
        REPEAT
          Kredpost.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + Kredpost."Remaining Amount";
        UNTIL Kredpost.NEXT=0;

        EnterCell(4,2,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;

      Kredpost.RESET;
      Kredpost.SETFILTER(Kredpost."Remaining Amount",'<>%1',0);
      Kredpost.SETFILTER(Kredpost."Currency Code",'%1','USD');
      IF Kredpost.FINDFIRST() THEN BEGIN
        REPEAT
          Kredpost.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + Kredpost."Remaining Amount";
        UNTIL Kredpost.NEXT=0;
        EnterCell(4,3,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;

      Kredpost.RESET;
      Kredpost.SETFILTER(Kredpost."Remaining Amount",'<>%1',0);
      Kredpost.SETFILTER(Kredpost."Currency Code",'%1','JPY');
      IF Kredpost.FINDFIRST() THEN BEGIN
        REPEAT
          Kredpost.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + Kredpost."Remaining Amount";
        UNTIL Kredpost.NEXT=0;
        EnterCell(4,4,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;

      Kredpost.RESET;
      Kredpost.SETFILTER(Kredpost."Remaining Amount",'<>%1',0);
      Kredpost.SETFILTER(Kredpost."Currency Code",'%1','GBP');
      IF Kredpost.FINDFIRST() THEN BEGIN
        REPEAT
          Kredpost.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + Kredpost."Remaining Amount";
        UNTIL Kredpost.NEXT=0;
        EnterCell(4,5,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;
      // Ende offene Kreditorenposten ****************************************************************************************************

      // Anfang offene Bestell-Restmengen ************************************************************************************************
      ekz.RESET;
      ekz.SETFILTER(ekz."Outstanding Amount",'<>%1',0);
      ekz.SETFILTER(ekz."Currency Code",'%1','');
      ekz.SETFILTER(ekz."Location Code",'%1|%2|%3','ZENT','KONSI','ERSATZ');
      IF ekz.FINDFIRST() THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + ekz."Outstanding Amount";
        UNTIL ekz.NEXT=0;
        EnterCell(5,2,FORMAT(saldo_sum*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;

      ekz.RESET;
      // **********************************************************
      //ekz.SETFILTER(ekz."Document No.",'%1','BET307185');
      // **********************************************************
      ekz.SETFILTER(ekz."Outstanding Amount",'<>%1',0);
      ekz.SETFILTER(ekz."Currency Code",'%1','USD');
      ekz.SETFILTER(ekz."Location Code",'%1|%2|%3','ZENT','KONSI','ERSATZ');
      IF ekz.FINDFIRST() THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + ekz."Outstanding Amount";
        UNTIL ekz.NEXT=0;
        EnterCell(5,3,FORMAT(saldo_sum*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;

      ekz.RESET;
      ekz.SETFILTER(ekz."Outstanding Amount",'<>%1',0);
      ekz.SETFILTER(ekz."Currency Code",'%1','JPY');
      ekz.SETFILTER(ekz."Location Code",'%1|%2|%3','ZENT','KONSI','ERSATZ');
      IF ekz.FINDFIRST() THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + ekz."Outstanding Amount";
        UNTIL ekz.NEXT=0;
        EnterCell(5,4,FORMAT(saldo_sum*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;

      ekz.RESET;
      ekz.SETFILTER(ekz."Outstanding Amount",'<>%1',0);
      ekz.SETFILTER(ekz."Currency Code",'%1','GBP');
      ekz.SETFILTER(ekz."Location Code",'%1|%2|%3','ZENT','KONSI','ERSATZ');
      IF ekz.FINDFIRST() THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + ekz."Outstanding Amount";
        UNTIL ekz.NEXT=0;
        EnterCell(5,5,FORMAT(saldo_sum*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;
      // Ende offene Bestell-Restmengen **************************************************************************************************

      //  Anfang noch nicht bestellte Waren  *********************************************************************************************
      Artikel.RESET;
      Artikel.SETFILTER(Artikel.Blocked,'%1',FALSE);
      IF Artikel.FINDFIRST THEN BEGIN
        REPEAT
          // Lagermenge holen
          v_druck_art:=0;
          v_FLmenge:=0;
          v_FLwert:=0;
          v_bewert:=0;
          v_ab_bestand:=0;
          v_ab_menge:=0;
          v_bb_bestand:=0;
          v_ek_preis:=0;
          v_au_wert:=0;
          v_aur_wert:=0;
          v_lager_wert:=0;
          v_best_wert:=0;
          Artikelposten.RESET;
          Artikelposten.SETFILTER(Artikelposten."Item No.",'%1',Artikel."No.");
          Artikelposten.SETFILTER(Artikelposten."Remaining Quantity",'>%1',0);
          Artikelposten.SETFILTER(Artikelposten."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF Artikelposten.FINDFIRST THEN BEGIN
            REPEAT
              Artikelposten.CALCFIELDS(Artikelposten."Cost Amount (Actual)");
              v_FLmenge:=(v_FLmenge +Artikelposten."Remaining Quantity");
              v_lager_wert:=v_lager_wert+((Artikelposten."Cost Amount (Actual)"/Artikelposten.Quantity)*(Artikelposten."Remaining Quantity"));
              v_druck_art:=1;
            UNTIL Artikelposten.NEXT=0;
          END;

      //  AB holen
          tab_ab.RESET;
          tab_ab.SETFILTER(tab_ab."No.",'%1',Artikel."No.");
          tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::Order);
          tab_ab.SETFILTER(tab_ab."Outstanding Quantity",'>%1',0);
          tab_ab.SETFILTER(tab_ab.Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF tab_ab.FINDFIRST THEN BEGIN
            REPEAT
              v_ab_bestand:=v_ab_bestand+(tab_ab."Outstanding Quantity");
              v_au_wert:=v_au_wert + ((tab_ab."DC-Preis (EKW)")*(tab_ab."Outstanding Quantity"));
              v_druck_art:=1;
            UNTIL tab_ab.NEXT=0;
          END;

      //  AUR holen
          tab_ab.RESET;
          tab_ab.SETFILTER(tab_ab."No.",'%1',Artikel."No.");
          tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::"Blanket Order");
          tab_ab.SETFILTER(tab_ab.Type,'%1',tab_ab.Type::Item);
          tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF tab_ab.FINDFIRST THEN BEGIN
            REPEAT
              IF((tab_ab."Outstanding Quantity")-(tab_ab."offene Menge aus Rahmen im AU"))>1 THEN BEGIN
                tab_ab.CALCFIELDS(tab_ab."offene Menge aus Rahmen im AU");
                v_ab_menge:=v_ab_menge+((tab_ab."Outstanding Quantity")-(tab_ab."offene Menge aus Rahmen im AU"));
                v_aur_wert:=v_aur_wert+(((tab_ab."Outstanding Quantity")-(tab_ab."offene Menge aus Rahmen im AU"))*(tab_ab."DC-Preis (EKW)"));
              END;
              v_druck_art:=1;
            UNTIL tab_ab.NEXT=0;
          END;

      //  Bestellbestand holen
          ekz.RESET;
          ekz.SETFILTER(ekz."No.",'%1',Artikel."No.");
          ekz.SETFILTER(ekz."Outstanding Quantity",'>%1',0);
          ekz.SETFILTER(ekz."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
          IF ekz.FINDFIRST THEN BEGIN
            REPEAT
              v_bb_bestand:=v_bb_bestand+(ekz."Outstanding Quantity");
              v_best_wert:=v_best_wert+((ekz."Direct Unit Cost")*(ekz."Outstanding Quantity"));
              v_druck_art:=1;
            UNTIL ekz.NEXT=0;
          END;

      //  DC-Preise holen
          ek_preis.RESET;
          ek_preis.SETFILTER(ek_preis."Item No.",'%1',Artikel."No.");
          IF ek_preis.FINDFIRST THEN BEGIN
            v_ek_preis:=ek_preis."Direct Unit Cost";
            v_ek_w„:=ek_preis."Currency Code";
          END;

          IF v_druck_art=1 THEN BEGIN
            IF v_ek_preis=9999 THEN BEGIN
              IF v_FLwert>0 THEN BEGIN
                v_ek_preis:=v_FLwert;
              END ELSE BEGIN
                IF v_bewert>0 THEN BEGIN
                  v_ek_preis:=v_bewert;
                END;
              END;
            END;

            IF v_ek_w„='USD' THEN BEGIN
              IF v_ab_bestand+v_ab_menge-v_FLmenge-v_bb_bestand>0 THEN BEGIN
                v_usd_gesamt:=v_usd_gesamt+(v_au_wert+v_aur_wert-v_lager_wert-v_best_wert);
              END;
            END;
            IF v_ek_w„='JPY' THEN BEGIN
              IF v_ab_bestand+v_ab_menge-v_FLmenge-v_bb_bestand>0 THEN BEGIN
                v_jpy_gesamt:=v_jpy_gesamt+(v_au_wert+v_aur_wert-v_lager_wert-v_best_wert);
              END;
            END;
            IF v_ek_w„='GBP' THEN BEGIN
              IF v_ab_bestand+v_ab_menge-v_FLmenge-v_bb_bestand>0 THEN BEGIN
                v_gbp_gesamt:=v_gbp_gesamt+(v_au_wert+v_aur_wert-v_lager_wert-v_best_wert);
              END;
            END;
            IF v_ek_w„='' THEN BEGIN
              IF v_ab_bestand+v_ab_menge-v_FLmenge-v_bb_bestand>0 THEN BEGIN
                v_eur_gesamt:=v_eur_gesamt+(v_au_wert+v_aur_wert-v_lager_wert-v_best_wert);
              END;
            END;
          END;
        UNTIL Artikel.NEXT=0;
      END;
      EnterCell(7,2,FORMAT(v_eur_gesamt*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      EnterCell(7,3,FORMAT(v_usd_gesamt*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      EnterCell(7,4,FORMAT(v_jpy_gesamt*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      EnterCell(7,5,FORMAT(v_gbp_gesamt*(-1)),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      //  Ende noch nicht bestellte Waren ************************************************************************************************


      // Anfang Bankkonten ***************************************************************************************************************
      //  EUR-Konten
      bankpos.RESET;
      bankpos.SETFILTER(bankpos."Bank Account No.",'%1|%2|%3|%4','1700','1810','1840','1860');
      IF bankpos.FINDFIRST() THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + bankpos.Amount;
        UNTIL bankpos.NEXT=0;
        EnterCell(11,2,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;
      //  USD-Konten
      bankpos.RESET;
      bankpos.SETFILTER(bankpos."Bank Account No.",'%1|%2','1820','1855');
      IF bankpos.FINDFIRST() THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + bankpos.Amount;
        UNTIL bankpos.NEXT=0;
        EnterCell(11,3,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;
      //  JPY-Konten
      bankpos.RESET;
      bankpos.SETFILTER(bankpos."Bank Account No.",'%1','1830');
      IF bankpos.FINDFIRST() THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + bankpos.Amount;
        UNTIL bankpos.NEXT=0;
        EnterCell(11,4,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;
      // Ende Bankkonten *****************************************************************************************************************

      // Anfang offene Debitoren-Posten **************************************************************************************************
      debpos.RESET;
      debpos.SETFILTER(debpos."Remaining Amount",'<>%1',0);
      debpos.SETFILTER(debpos."Currency Code",'%1','');
      IF debpos.FINDFIRST() THEN BEGIN
        REPEAT
          debpos.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + debpos."Remaining Amount";
        UNTIL debpos.NEXT=0;
        EnterCell(13,2,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;

      debpos.RESET;
      debpos.SETFILTER(debpos."Remaining Amount",'<>%1',0);
      debpos.SETFILTER(debpos."Currency Code",'%1','USD');
      IF debpos.FINDFIRST() THEN BEGIN
        REPEAT
          debpos.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + debpos."Remaining Amount";
        UNTIL debpos.NEXT=0;
        EnterCell(13,3,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;

      debpos.RESET;
      debpos.SETFILTER(debpos."Remaining Amount",'<>%1',0);
      debpos.SETFILTER(debpos."Currency Code",'%1','JPY');
      IF debpos.FINDFIRST() THEN BEGIN
        REPEAT
          debpos.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + debpos."Remaining Amount";
        UNTIL debpos.NEXT=0;
        EnterCell(13,4,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;

      debpos.RESET;
      debpos.SETFILTER(debpos."Remaining Amount",'<>%1',0);
      debpos.SETFILTER(debpos."Currency Code",'%1','GBP');
      IF debpos.FINDFIRST() THEN BEGIN
        REPEAT
          debpos.CALCFIELDS("Remaining Amount");
          saldo_sum:=saldo_sum + debpos."Remaining Amount";
        UNTIL debpos.NEXT=0;
        EnterCell(13,5,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;
      // Ende offene Debitoren-Posten ****************************************************************************************************

      // Anfang offene Auftrags-Positionen  **********************************************************************************************
      tab_ab.RESET;
      // **************************************************************
      //tab_ab.SETFILTER(tab_ab."Document No.",'%1','AU226690');
      // **************************************************************
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::Order);
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FINDFIRST() THEN BEGIN
        REPEAT
         saldo_sum:=saldo_sum + tab_ab."Outstanding Amount";
        UNTIL tab_ab.NEXT=0;
        EnterCell(14,2,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;
      tab_ab.RESET;
      // ***************************************************************
      //tab_ab.SETFILTER(tab_ab."Document No.",'%1','AU226374');
      // ***************************************************************
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','USD');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::Order);
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FINDFIRST() THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + tab_ab."Outstanding Amount";
        UNTIL tab_ab.NEXT=0;
        EnterCell(14,3,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;
      tab_ab.RESET;
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','JPY');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::Order);
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FINDFIRST() THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + tab_ab."Outstanding Amount";
        UNTIL tab_ab.NEXT=0;
        EnterCell(14,4,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;
      tab_ab.RESET;
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','GBP');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::Order);
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FINDFIRST() THEN BEGIN
        REPEAT
          saldo_sum:=saldo_sum + tab_ab."Outstanding Amount";
        UNTIL tab_ab.NEXT=0;
        EnterCell(14,5,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;
      // Ende   offene Auftrags-Positionen ***********************************************************************************************

      // Anfang offene Rahmen-Restpositionen *********************************************************************************************
      tab_ab.RESET;
      // **************************************************************
      //tab_ab.SETFILTER(tab_ab."Document No.",'%1','AUR200461');
      // **************************************************************
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::"Blanket Order");
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FINDFIRST() THEN BEGIN
        REPEAT
          IF tab_ab."VAT %"=19 THEN BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price"*1.19);
          END ELSE BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price");
          END;
        UNTIL tab_ab.NEXT=0;
        EnterCell(15,2,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;

      tab_ab.RESET;
      // ***********************************************************
      //tab_ab.SETFILTER(tab_ab."Document No.",'%1','AUR200510');
      // ***********************************************************
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','USD');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::"Blanket Order");
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FINDFIRST() THEN BEGIN
        REPEAT
          IF tab_ab."VAT %"=19 THEN BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price"*1.19);
          END ELSE BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price");
          END;
        UNTIL tab_ab.NEXT=0;
        EnterCell(15,3,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;

      tab_ab.RESET;
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','JPY');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::"Blanket Order");
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FINDFIRST() THEN BEGIN
        REPEAT
          IF tab_ab."VAT %"=19 THEN BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price"*1.19);
          END ELSE BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price");
          END;
        UNTIL tab_ab.NEXT=0;
        EnterCell(15,4,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
      END;
      saldo_sum:=0;

      tab_ab.RESET;
      tab_ab.SETFILTER(tab_ab."Outstanding Amount",'<>%1',0);
      tab_ab.SETFILTER(tab_ab."Currency Code",'%1','GBP');
      tab_ab.SETFILTER(tab_ab."Document Type",'%1',tab_ab."Document Type"::"Blanket Order");
      tab_ab.SETFILTER(tab_ab."Location Code",'%1|%2|%3|%4','ZENT','KONSI','ERSATZ','IDT');
      IF tab_ab.FINDFIRST() THEN BEGIN
        REPEAT
          IF tab_ab."VAT %"=19 THEN BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price"*1.19);
          END ELSE BEGIN
            tab_ab.CALCFIELDS("offene Menge aus Rahmen im AU");
            saldo_sum:=saldo_sum +((tab_ab."Outstanding Quantity"-tab_ab."offene Menge aus Rahmen im AU")*tab_ab."Unit Price");
          END;
        UNTIL tab_ab.NEXT=0;
        EnterCell(15,5,FORMAT(saldo_sum),'',FALSE,FALSE,FALSE,'',TempExcelBuffer."Cell Type"::Number);
        Sheet.Range('E16').Value := FORMAT(saldo_sum);
      END;

      saldo_sum:=0;
      // Ende   offene Rahmen-Restpositionen *********************************************************************************************

      CloseExcel('W„hrungsabstimmung','','');

      MESSAGE('Programm beendet');
    END;

    LOCAL PROCEDURE uwe@1000000019();
    BEGIN
    END;

    EVENT Sheet@1140161::SelectionChange@1543(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet@1140161::BeforeDoubleClick@1537(Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1140161::BeforeRightClick@1534(Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1140161::Activate@304();
    BEGIN
    END;

    EVENT Sheet@1140161::Deactivate@1530();
    BEGIN
    END;

    EVENT Sheet@1140161::Calculate@279();
    BEGIN
    END;

    EVENT Sheet@1140161::Change@1545(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet@1140161::FollowHyperlink@1470(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT Sheet@1140161::PivotTableUpdate@2156(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Sheet@1140161::PivotTableAfterValueChange@2886(TargetPivotTable@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Sheet@1140161::PivotTableBeforeAllocateChanges@2889(TargetPivotTable@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1140002 : Integer;ValueChangeEnd@1140001 : Integer;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1140161::PivotTableBeforeCommitChanges@2892(TargetPivotTable@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1140002 : Integer;ValueChangeEnd@1140001 : Integer;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Sheet@1140161::PivotTableBeforeDiscardChanges@2893(TargetPivotTable@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1140001 : Integer;ValueChangeEnd@1140000 : Integer);
    BEGIN
    END;

    EVENT Sheet@1140161::PivotTableChangeSync@2894(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1140163::Open@1923();
    BEGIN
    END;

    EVENT Book@1140163::Activate@304();
    BEGIN
    END;

    EVENT Book@1140163::Deactivate@1530();
    BEGIN
    END;

    EVENT Book@1140163::BeforeClose@1546(VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140163::BeforeSave@1547(SaveAsUI@1140001 : Boolean;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140163::BeforePrint@1549(VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140163::NewSheet@1550(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1140163::AddinInstall@1552();
    BEGIN
    END;

    EVENT Book@1140163::AddinUninstall@1553();
    BEGIN
    END;

    EVENT Book@1140163::WindowResize@1554(Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book@1140163::WindowActivate@1556(Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book@1140163::WindowDeactivate@1557(Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Book@1140163::SheetSelectionChange@1558(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book@1140163::SheetBeforeDoubleClick@1559(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140163::SheetBeforeRightClick@1560(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140163::SheetActivate@1561(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1140163::SheetDeactivate@1562(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1140163::SheetCalculate@1563(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Book@1140163::SheetChange@1564(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book@1140163::SheetFollowHyperlink@1854(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT Book@1140163::SheetPivotTableUpdate@2157(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1140163::PivotTableCloseConnection@2158(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1140163::PivotTableOpenConnection@2159(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1140163::Sync@2266(SyncEventType@1140000 : Integer);
    BEGIN
    END;

    EVENT Book@1140163::BeforeXmlImport@2283(Map@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1140002 : Text[1024];IsRefresh@1140001 : Boolean;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140163::AfterXmlImport@2285(Map@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1140001 : Boolean;Result@1140000 : Integer);
    BEGIN
    END;

    EVENT Book@1140163::BeforeXmlExport@2287(Map@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1140001 : Text[1024];VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140163::AfterXmlExport@2288(Map@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1140001 : Text[1024];Result@1140000 : Integer);
    BEGIN
    END;

    EVENT Book@1140163::RowsetComplete@2610(Description@1140002 : Text[1024];Sheet@1140001 : Text[1024];Success@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140163::SheetPivotTableAfterValueChange@2895(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Book@1140163::SheetPivotTableBeforeAllocateChanges@2896(Sh@1140004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1140002 : Integer;ValueChangeEnd@1140001 : Integer;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140163::SheetPivotTableBeforeCommitChanges@2897(Sh@1140004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1140002 : Integer;ValueChangeEnd@1140001 : Integer;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140163::SheetPivotTableBeforeDiscardChanges@2898(Sh@1140003 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1140001 : Integer;ValueChangeEnd@1140000 : Integer);
    BEGIN
    END;

    EVENT Book@1140163::SheetPivotTableChangeSync@2899(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Book@1140163::AfterSave@2900(Success@1140000 : Boolean);
    BEGIN
    END;

    EVENT Book@1140163::NewChart@2901(Ch@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    EVENT Excel@1140164::NewWorkbook@1565(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1140164::SheetSelectionChange@1558(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Excel@1140164::SheetBeforeDoubleClick@1559(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140164::SheetBeforeRightClick@1560(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140164::SheetActivate@1561(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1140164::SheetDeactivate@1562(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1140164::SheetCalculate@1563(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1140164::SheetChange@1564(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookOpen@1567(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookActivate@1568(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookDeactivate@1569(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookBeforeClose@1570(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookBeforeSave@1571(Wb@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SaveAsUI@1140001 : Boolean;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookBeforePrint@1572(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookNewSheet@1573(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookAddinInstall@1574(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookAddinUninstall@1575(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT Excel@1140164::WindowResize@1554(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Excel@1140164::WindowActivate@1556(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Excel@1140164::WindowDeactivate@1557(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT Excel@1140164::SheetFollowHyperlink@1854(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT Excel@1140164::SheetPivotTableUpdate@2157(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookPivotTableCloseConnection@2160(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookPivotTableOpenConnection@2161(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable");
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookSync@2289(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SyncEventType@1140000 : Integer);
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookBeforeXmlImport@2290(Wb@1140004 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1140002 : Text[1024];IsRefresh@1140001 : Boolean;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookAfterXmlImport@2291(Wb@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";IsRefresh@1140001 : Boolean;Result@1140000 : Integer);
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookBeforeXmlExport@2292(Wb@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1140001 : Text[1024];VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookAfterXmlExport@2293(Wb@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Map@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:Unknown Automation Server.XmlMap";Url@1140001 : Text[1024];Result@1140000 : Integer);
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookRowsetComplete@2611(Wb@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Description@1140002 : Text[1024];Sheet@1140001 : Text[1024];Success@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140164::AfterCalculate@2612();
    BEGIN
    END;

    EVENT Excel@1140164::SheetPivotTableAfterValueChange@2895(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";TargetRange@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT Excel@1140164::SheetPivotTableBeforeCommitChanges@2897(Sh@1140004 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";TargetPivotTable@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";ValueChangeStart@1140002 : Integer;ValueChangeEnd@1140001 : Integer;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140164::ProtectedViewWindowOpen@2903(Pvw@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1140164::ProtectedViewWindowResize@2908(Pvw@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1140164::ProtectedViewWindowActivate@2909(Pvw@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1140164::ProtectedViewWindowDeactivate@2910(Pvw@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:Unknown Automation Server.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookAfterSave@2911(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Success@1140000 : Boolean);
    BEGIN
    END;

    EVENT Excel@1140164::WorkbookNewChart@2912(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Ch@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:Unknown Automation Server.Chart");
    BEGIN
    END;

    BEGIN
    {
      Lfd.Nr.  Version  Datum          User Beschreibung
      =================================================================
      1        TOP1.00  23.04.2018     UB   Umstellung auf neue Excel-Version. Wenn Programm ohne Fehler l„uft, k”nnen Bemerkungszeilen gel”scht werden!!!
    }
    END.
  }
}

