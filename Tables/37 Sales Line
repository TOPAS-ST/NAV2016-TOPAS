OBJECT Table 37 Sales Line
{
  OBJECT-PROPERTIES
  {
    Date=27.03.20;
    Time=12:00:00;
    Modified=Yes;
    Version List=NAVW19.00.00.50458,TOP1.03;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatusOpen;
               IF Quantity <> 0 THEN
                 ReserveSalesLine.VerifyQuantity(Rec,xRec);
               LOCKTABLE;
               SalesHeader."No." := '';
               IF Type = Type::Item THEN
                 IF SalesHeader.InventoryPickConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
                   ERROR(Text056,SalesHeader."Shipping Advice");
               IF ("Deferral Code" <> '') AND (GetDeferralAmount <> 0) THEN
                 UpdateDeferralAmounts;
             END;

    OnModify=BEGIN
               IF ("Document Type" = "Document Type"::"Blanket Order") AND
                  ((Type <> xRec.Type) OR ("No." <> xRec."No."))
               THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 SalesLine2.SETRANGE("Blanket Order No.","Document No.");
                 SalesLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF SalesLine2.FINDSET THEN
                   REPEAT
                     SalesLine2.TESTFIELD(Type,Type);
                     SalesLine2.TESTFIELD("No.","No.");
                   UNTIL SalesLine2.NEXT = 0;
               END;

               IF ((Quantity <> 0) OR (xRec.Quantity <> 0)) AND ItemExists(xRec."No.") AND NOT FullReservedQtyIsForAsmToOrder THEN
                 ReserveSalesLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=VAR
               CapableToPromise@1000 : Codeunit 99000886;
               JobCreateInvoice@1002 : Codeunit 1002;
               SalesCommentLine@1003 : Record 44;
             BEGIN
               TestStatusOpen;
               IF NOT StatusCheckSuspended AND (SalesHeader.Status = SalesHeader.Status::Released) AND
                  (Type IN [Type::"G/L Account",Type::"Charge (Item)",Type::Resource])
               THEN
                 VALIDATE(Quantity,0);

               IF (Quantity <> 0) AND ItemExists("No.") THEN BEGIN
                 ReserveSalesLine.DeleteLine(Rec);
                 CALCFIELDS("Reserved Qty. (Base)");
                 TESTFIELD("Reserved Qty. (Base)",0);
                 IF "Shipment No." = '' THEN
                   TESTFIELD("Qty. Shipped Not Invoiced",0);
                 IF "Return Receipt No." = '' THEN
                   TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                 WhseValidateSourceLine.SalesLineDelete(Rec);
               END;

               IF ("Document Type" = "Document Type"::Order) AND (Quantity <> "Quantity Invoiced") THEN
                 TESTFIELD("Prepmt. Amt. Inv.","Prepmt Amt Deducted");

               CleanDropShipmentFields;
               CleanSpecialOrderFieldsAndCheckAssocPurchOrder;
               NonstockItemMgt.DelNonStockSales(Rec);

               IF "Document Type" = "Document Type"::"Blanket Order" THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
                 SalesLine2.SETRANGE("Blanket Order No.","Document No.");
                 SalesLine2.SETRANGE("Blanket Order Line No.","Line No.");
                 IF SalesLine2.FINDFIRST THEN
                   SalesLine2.TESTFIELD("Blanket Order Line No.",0);
               END;

               IF Type = Type::Item THEN BEGIN
                 ATOLink.DeleteAsmFromSalesLine(Rec);
                 DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
               END;

               IF Type = Type::"Charge (Item)" THEN
                 DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");

               CapableToPromise.RemoveReqLines("Document No.","Line No.",0,FALSE);

               IF "Line No." <> 0 THEN BEGIN
                 SalesLine2.RESET;
                 SalesLine2.SETRANGE("Document Type","Document Type");
                 SalesLine2.SETRANGE("Document No.","Document No.");
                 SalesLine2.SETRANGE("Attached to Line No.","Line No.");
                 SalesLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                 SalesLine2.DELETEALL(TRUE);
               END;

               IF "Job Contract Entry No." <> 0 THEN
                 JobCreateInvoice.DeleteSalesLine(Rec);

               SalesCommentLine.SETRANGE("Document Type","Document Type");
               SalesCommentLine.SETRANGE("No.","Document No.");
               SalesCommentLine.SETRANGE("Document Line No.","Line No.");
               IF NOT SalesCommentLine.ISEMPTY THEN
                 SalesCommentLine.DELETEALL;

               IF ("Line No." <> 0) AND ("Attached to Line No." = 0) THEN BEGIN
                 SalesLine2.COPY(Rec);
                 IF SalesLine2.FIND('<>') THEN BEGIN
                   SalesLine2.VALIDATE("Recalculate Invoice Disc.",TRUE);
                   SalesLine2.MODIFY;
                 END;
               END;

               IF "Deferral Code" <> '' THEN
                 DeferralUtilities.DeferralCodeOnDelete(
                   DeferralUtilities.GetSalesDeferralDocType,'','',
                   "Document Type","Document No.","Line No.");

               //TOPAS 28.05.14 ST +
               Vkz_archiv.RESET;
               Vkz_archiv.SETRANGE("Document No.","Document No.");
               Vkz_archiv.SETRANGE("Line No.","Line No.");
               IF NOT Vkz_archiv.FINDFIRST THEN BEGIN

                 //berprft verbundene Kalkulationen und l”scht diese ggf.

                 Kalkulation.RESET;
                 Kalkulation.SETRANGE("Nr.","Document No.");
                 Kalkulation.SETRANGE("Zeilennr.","Line No.");
                 IF Kalkulation.FINDFIRST THEN BEGIN
                   IF ("Quantity Shipped" = 0) THEN BEGIN
                       Kalkulation.DELETEALL(TRUE);
                       MESSAGE(Text50011);
                     END;
                 END;

                 //Position wird auf Vorhandensein in einer Kalkulation hin berprft
                 Kalkulation.RESET;
                 Kalkulation.SETRANGE("Belegnr.","Document No.");
                 Kalkulation.SETRANGE("Belegzeilennr.","Line No.");
                 IF (Kalkulation.FINDFIRST) AND (Type = Type::Item) THEN
                   MESSAGE(Text50012,Kalkulation."Zeilennr.");
               END;
               //TOPAS -
             END;

    OnRename=BEGIN
               ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=[DEU=Verkaufszeile;
               ENU=Sales Line];
    LookupPageID=Page516;
    DrillDownPageID=Page516;
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;CaptionML=[DEU=Belegart;
                                                              ENU=Document Type];
                                                   OptionCaptionML=[DEU=Angebot,Auftrag,Rechnung,Gutschrift,Rahmenauftrag,Reklamation;
                                                                    ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order];
                                                   OptionString=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order }
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[DEU=Verk. an Deb.-Nr.;
                                                              ENU=Sell-to Customer No.];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=FIELD(Document Type));
                                                   CaptionML=[DEU=Belegnr.;
                                                              ENU=Document No.] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[DEU=Zeilennr.;
                                                              ENU=Line No.] }
    { 5   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                GetSalesHeader;

                                                                TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Shipment No.",'');

                                                                TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Receipt No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                CheckAssocPurchOrder(FIELDCAPTION(Type));

                                                                IF Type <> xRec.Type THEN BEGIN
                                                                  CASE xRec.Type OF
                                                                    Type::Item:
                                                                      BEGIN
                                                                        ATOLink.DeleteAsmFromSalesLine(Rec);
                                                                        IF Quantity <> 0 THEN BEGIN
                                                                          SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
                                                                          CALCFIELDS("Reserved Qty. (Base)");
                                                                          TESTFIELD("Reserved Qty. (Base)",0);
                                                                          ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                          WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                        END;
                                                                      END;
                                                                    Type::"Fixed Asset":
                                                                      IF Quantity <> 0 THEN
                                                                        SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
                                                                    Type::"Charge (Item)":
                                                                      DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  END;
                                                                  IF xRec."Deferral Code" <> '' THEN
                                                                    DeferralUtilities.RemoveOrSetDeferralSchedule('',
                                                                      DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                      xRec."Document Type",xRec."Document No.",xRec."Line No.",
                                                                      xRec.GetDeferralAmount,xRec."Posting Date",'',xRec."Currency Code",TRUE);
                                                                END;
                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                TempSalesLine := Rec;
                                                                INIT;
                                                                IF xRec."Line Amount" <> 0 THEN
                                                                  "Recalculate Invoice Disc." := TRUE;

                                                                Type := TempSalesLine.Type;
                                                                "System-Created Entry" := TempSalesLine."System-Created Entry";

                                                                IF Type = Type::Item THEN
                                                                  "Allow Item Charge Assignment" := TRUE
                                                                ELSE
                                                                  "Allow Item Charge Assignment" := FALSE;
                                                                IF Type = Type::Item THEN BEGIN
                                                                  IF SalesHeader.InventoryPickConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
                                                                    ERROR(Text056,SalesHeader."Shipping Advice");
                                                                  IF SalesHeader.WhseShpmntConflict("Document Type","Document No.",SalesHeader."Shipping Advice") THEN
                                                                    ERROR(Text052,SalesHeader."Shipping Advice");
                                                                END;
                                                              END;

                                                   CaptionML=[DEU=Art;
                                                              ENU=Type];
                                                   OptionCaptionML=[DEU=" ,Sachkonto,Artikel,Ressource,WG/Anlage,Zu-/Abschlag (Artikel)";
                                                                    ENU=" ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)"];
                                                   OptionString=[ ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(G/L Account),
                                                                          System-Created Entry=CONST(No)) "G/L Account" WHERE (Direct Posting=CONST(Yes),
                                                                                                                               Account Type=CONST(Posting),
                                                                                                                               Blocked=CONST(No))
                                                                                                                               ELSE IF (Type=CONST(G/L Account),
                                                                                                                                        System-Created Entry=CONST(Yes)) "G/L Account"
                                                                                                                                        ELSE IF (Type=CONST(Item)) Item
                                                                                                                                        ELSE IF (Type=CONST(Resource)) Resource
                                                                                                                                        ELSE IF (Type=CONST(Fixed Asset)) "Fixed Asset"
                                                                                                                                        ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   OnValidate=VAR
                                                                PrepaymentMgt@1002 : Codeunit 441;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                CheckItemAvailable(FIELDNO("No."));

                                                                IF (xRec."No." <> "No.") AND (Quantity <> 0) THEN BEGIN
                                                                  TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                  CALCFIELDS("Reserved Qty. (Base)");
                                                                  TESTFIELD("Reserved Qty. (Base)",0);
                                                                  IF Type = Type::Item THEN
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;

                                                                TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Shipment No.",'');

                                                                TESTFIELD("Prepmt. Amt. Inv.",0);

                                                                TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Receipt No.",'');

                                                                IF "No." = '' THEN
                                                                  ATOLink.DeleteAsmFromSalesLine(Rec);
                                                                CheckAssocPurchOrder(FIELDCAPTION("No."));
                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                TempSalesLine := Rec;
                                                                INIT;
                                                                IF xRec."Line Amount" <> 0 THEN
                                                                  "Recalculate Invoice Disc." := TRUE;
                                                                Type := TempSalesLine.Type;
                                                                "No." := TempSalesLine."No.";
                                                                IF "No." = '' THEN
                                                                  EXIT;
                                                                IF Type <> Type::" " THEN
                                                                  Quantity := TempSalesLine.Quantity;

                                                                "System-Created Entry" := TempSalesLine."System-Created Entry";
                                                                GetSalesHeader;
                                                                InitHeaderDefaults(SalesHeader);
                                                                CALCFIELDS("Substitution Available");

                                                                "Promised Delivery Date" := SalesHeader."Promised Delivery Date";
                                                                "Requested Delivery Date" := SalesHeader."Requested Delivery Date";
                                                                "Shipment Date" :=
                                                                  CalendarMgmt.CalcDateBOC(
                                                                    '',
                                                                    SalesHeader."Shipment Date",
                                                                    CalChange."Source Type"::Location,
                                                                    "Location Code",
                                                                    '',
                                                                    CalChange."Source Type"::"Shipping Agent",
                                                                    "Shipping Agent Code",
                                                                    "Shipping Agent Service Code",
                                                                    FALSE);
                                                                UpdateDates;

                                                                CASE Type OF
                                                                  Type::" ":
                                                                    BEGIN
                                                                      StdTxt.GET("No.");
                                                                      Description := StdTxt.Description;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::"G/L Account":
                                                                    BEGIN
                                                                      GLAcc.GET("No.");
                                                                      GLAcc.CheckGLAcc;
                                                                      IF NOT "System-Created Entry" THEN
                                                                        GLAcc.TESTFIELD("Direct Posting",TRUE);
                                                                      Description := GLAcc.Name;
                                                                      "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := GLAcc."Tax Group Code";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      InitDeferralCode;
                                                                    END;
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem;
                                                                      Item.TESTFIELD(Blocked,FALSE);
                                                                      Item.TESTFIELD("Gen. Prod. Posting Group");
                                                                      IF Item.Type = Item.Type::Inventory THEN BEGIN
                                                                        Item.TESTFIELD("Inventory Posting Group");
                                                                        "Posting Group" := Item."Inventory Posting Group";
                                                                      END;

                                                                      //TOPAS 15.04.08 ST +
                                                                      "Artikelnr. 2" := Item."No. 2";
                                                                      "Manufacturer Code" := Item."Manufacturer Code";
                                                                      "Kampagnennr." := SalesHeader."Campaign No.";
                                                                      "Handlingskosten %" := Item."Handlingskosten %";
                                                                      IF Vendor.GET(Item."Vendor No.") THEN
                                                                        VALIDATE(Einkaufsw„hrungscode,Vendor."Currency Code")
                                                                      ELSE
                                                                        VALIDATE(Einkaufsw„hrungscode,'');

                                                                      //TOPAS 11.05.09 ST
                                                                      IF Item."ECCN-Nr." = '3A001' THEN
                                                                        MESSAGE(Text50000);

                                                                      //TOPAS 23.09.10 ST - šbernahme des AC_Solutionpartners aus dem Debitor bei Auftr„gen und Angeboten
                                                                      IF (("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::Quote)) AND (Item."Manufacturer Code" = '59')
                                                                      AND (Customer.GET(SalesHeader."Sell-to Customer No.")) THEN
                                                                        AC_Solutionpartner := Customer.AC_Solutionpartner;

                                                                      IF Item."Item Tracking Code" = '' THEN
                                                                        ERROR(Text50015,Item."No.");

                                                                      //TOPAS 07.09.11 ST - Vorhandene Service Kalkulation + Auswahl Seriennummern werden gel”scht
                                                                      IF (xRec."No." <> "No.") THEN BEGIN
                                                                        //Position wird als Service Artikel betrachet
                                                                        Kalkulation.RESET;
                                                                        Kalkulation.SETRANGE("Nr.","Document No.");
                                                                        Kalkulation.SETRANGE("Zeilennr.","Line No.");
                                                                        IF Kalkulation.FINDFIRST THEN BEGIN
                                                                          Kalkulation.DELETEALL(TRUE);
                                                                          MESSAGE(Text50011);
                                                                        END;
                                                                      END;

                                                                      //TOPAS 26.10.11 ST - Prft OmniVision Artikel und NDA Vorhandensein beim Kunden
                                                                      IF "Document Type" = "Document Type"::Order THEN
                                                                        SalesHeader.CheckOVTNDA("Document No.","Document Type","No.");

                                                                      //TOPAS -

                                                                      Description := Item.Description;
                                                                      "Description 2" := Item."Description 2";
                                                                      GetUnitCost;
                                                                      "Allow Invoice Disc." := Item."Allow Invoice Disc.";
                                                                      "Units per Parcel" := Item."Units per Parcel";
                                                                      "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Item."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := Item."Tax Group Code";
                                                                      "Item Category Code" := Item."Item Category Code";
                                                                      "Product Group Code" := Item."Product Group Code";
                                                                      Nonstock := Item."Created From Nonstock Item";
                                                                      "Profit %" := Item."Profit %";
                                                                      "Allow Item Charge Assignment" := TRUE;
                                                                      PrepaymentMgt.SetSalesPrepaymentPct(Rec,SalesHeader."Posting Date");

                                                                      IF SalesHeader."Language Code" <> '' THEN
                                                                        GetItemTranslation;

                                                                      IF Item.Reserve = Item.Reserve::Optional THEN
                                                                        Reserve := SalesHeader.Reserve
                                                                      ELSE
                                                                        Reserve := Item.Reserve;

                                                                      "Unit of Measure Code" := Item."Sales Unit of Measure";
                                                                      InitDeferralCode;
                                                                    END;
                                                                  Type::Resource:
                                                                    BEGIN
                                                                      Res.GET("No.");
                                                                      Res.TESTFIELD(Blocked,FALSE);
                                                                      Res.TESTFIELD("Gen. Prod. Posting Group");
                                                                      Description := Res.Name;
                                                                      "Description 2" := Res."Name 2";
                                                                      "Unit of Measure Code" := Res."Base Unit of Measure";
                                                                      "Unit Cost (LCY)" := Res."Unit Cost";
                                                                      "Gen. Prod. Posting Group" := Res."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := Res."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := Res."Tax Group Code";
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                      FindResUnitCost;
                                                                      InitDeferralCode;
                                                                    END;
                                                                  Type::"Fixed Asset":
                                                                    BEGIN
                                                                      FA.GET("No.");
                                                                      FA.TESTFIELD(Inactive,FALSE);
                                                                      FA.TESTFIELD(Blocked,FALSE);
                                                                      GetFAPostingGroup;
                                                                      Description := FA.Description;
                                                                      "Description 2" := FA."Description 2";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                  Type::"Charge (Item)":
                                                                    BEGIN
                                                                      ItemCharge.GET("No.");
                                                                      Description := ItemCharge.Description;
                                                                      "Gen. Prod. Posting Group" := ItemCharge."Gen. Prod. Posting Group";
                                                                      "VAT Prod. Posting Group" := ItemCharge."VAT Prod. Posting Group";
                                                                      "Tax Group Code" := ItemCharge."Tax Group Code";
                                                                      "Allow Invoice Disc." := FALSE;
                                                                      "Allow Item Charge Assignment" := FALSE;
                                                                    END;
                                                                END;

                                                                IF NOT (Type IN [Type::" ",Type::"Fixed Asset"]) THEN
                                                                  VALIDATE("VAT Prod. Posting Group");

                                                                UpdatePrepmtSetupFields;

                                                                IF Type <> Type::" " THEN BEGIN
                                                                  VALIDATE("Unit of Measure Code");
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    InitOutstanding;
                                                                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                      InitQtyToReceive
                                                                    ELSE
                                                                      InitQtyToShip;
                                                                    InitQtyToAsm;
                                                                    UpdateWithWarehouseShip;
                                                                  END;
                                                                  UpdateUnitPrice(FIELDNO("No."));
                                                                END;

                                                                IF NOT ISTEMPORARY THEN
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID3(Type),"No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Responsibility Center","Responsibility Center");

                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  IF Type = Type::Item THEN
                                                                    IF (Quantity <> 0) AND ItemExists(xRec."No.") THEN BEGIN
                                                                      ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                      WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                    END;
                                                                  GetDefaultBin;
                                                                  AutoAsmToOrder;
                                                                  DeleteItemChargeAssgnt("Document Type","Document No.","Line No.");
                                                                  IF Type = Type::"Charge (Item)" THEN
                                                                    DeleteChargeChargeAssgnt("Document Type","Document No.","Line No.");
                                                                END;

                                                                UpdateItemCrossRef;
                                                              END;

                                                   CaptionML=[DEU=Nr.;
                                                              ENU=No.] }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                CheckAssocPurchOrder(FIELDCAPTION("Location Code"));
                                                                IF "Location Code" <> '' THEN
                                                                  IF IsServiceItem THEN
                                                                    Item.TESTFIELD(Type,Item.Type::Inventory);
                                                                IF xRec."Location Code" <> "Location Code" THEN BEGIN
                                                                  IF NOT FullQtyIsForAsmToOrder THEN BEGIN
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)","Qty. to Asm. to Order (Base)");
                                                                  END;
                                                                  TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                  TESTFIELD("Shipment No.",'');
                                                                  TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                END;

                                                                GetSalesHeader;
                                                                "Shipment Date" :=
                                                                  CalendarMgmt.CalcDateBOC(
                                                                    '',
                                                                    SalesHeader."Shipment Date",
                                                                    CalChange."Source Type"::Location,
                                                                    "Location Code",
                                                                    '',
                                                                    CalChange."Source Type"::"Shipping Agent",
                                                                    "Shipping Agent Code",
                                                                    "Shipping Agent Service Code",
                                                                    FALSE);

                                                                CheckItemAvailable(FIELDNO("Location Code"));

                                                                IF NOT "Drop Shipment" THEN BEGIN
                                                                  IF "Location Code" = '' THEN BEGIN
                                                                    IF InvtSetup.GET THEN
                                                                      "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                  END ELSE
                                                                    IF Location.GET("Location Code") THEN
                                                                      "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                END ELSE
                                                                  EVALUATE("Outbound Whse. Handling Time",'<0D>');

                                                                IF "Location Code" <> xRec."Location Code" THEN BEGIN
                                                                  InitItemAppl(TRUE);
                                                                  GetDefaultBin;
                                                                  InitQtyToAsm;
                                                                  AutoAsmToOrder;
                                                                  IF Quantity <> 0 THEN BEGIN
                                                                    IF NOT "Drop Shipment" THEN
                                                                      UpdateWithWarehouseShip;
                                                                    IF NOT FullReservedQtyIsForAsmToOrder THEN
                                                                      ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                  END;
                                                                END;

                                                                UpdateDates;

                                                                IF (Type = Type::Item) AND ("No." <> '') THEN
                                                                  GetUnitCost;

                                                                CheckWMS;

                                                                IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                  ValidateReturnReasonCode(FIELDNO("Location Code"));
                                                              END;

                                                   CaptionML=[DEU=Lagerortcode;
                                                              ENU=Location Code] }
    { 8   ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST(Fixed Asset)) "FA Posting Group";
                                                   CaptionML=[DEU=Buchungsgruppe;
                                                              ENU=Posting Group];
                                                   Editable=No }
    { 10  ;   ;Shipment Date       ;Date          ;OnValidate=VAR
                                                                CheckDateConflict@1000 : Codeunit 99000815;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                IF CurrFieldNo <> 0 THEN
                                                                  AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                IF "Shipment Date" <> 0D THEN BEGIN
                                                                  IF CurrFieldNo IN [
                                                                                     FIELDNO("Planned Shipment Date"),
                                                                                     FIELDNO("Planned Delivery Date"),
                                                                                     FIELDNO("Shipment Date"),
                                                                                     FIELDNO("Shipping Time"),
                                                                                     FIELDNO("Outbound Whse. Handling Time"),
                                                                                     FIELDNO("Requested Delivery Date")]
                                                                  THEN
                                                                    CheckItemAvailable(FIELDNO("Shipment Date"));

                                                                  //TOPAS 15.06.17 ST - das Hinweisfenster zum Unterschreiten des Arbeitsdatums deaktiviert +
                                                                  {
                                                                  IF ("Shipment Date" < WORKDATE) AND (Type <> Type::" ") THEN
                                                                    IF NOT (HideValidationDialog OR HasBeenShown) AND GUIALLOWED THEN BEGIN
                                                                      MESSAGE(
                                                                        Text014,
                                                                        FIELDCAPTION("Shipment Date"),"Shipment Date",WORKDATE);
                                                                      HasBeenShown := TRUE;
                                                                    END;
                                                                  }
                                                                  //TOPAS -
                                                                END;

                                                                AutoAsmToOrder;
                                                                IF (xRec."Shipment Date" <> "Shipment Date") AND
                                                                   (Quantity <> 0) AND
                                                                   NOT StatusCheckSuspended
                                                                THEN
                                                                  CheckDateConflict.SalesLineCheck(Rec,CurrFieldNo <> 0);

                                                                IF NOT PlannedShipmentDateCalculated THEN
                                                                  "Planned Shipment Date" := CalcPlannedShptDate(FIELDNO("Shipment Date"));
                                                                IF NOT PlannedDeliveryDateCalculated THEN
                                                                  "Planned Delivery Date" := CalcPlannedDeliveryDate(FIELDNO("Shipment Date"));
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[DEU=Warenausg.-Datum;
                                                              ENU=Shipment Date] }
    { 11  ;   ;Description         ;Text50        ;CaptionML=[DEU=Beschreibung;
                                                              ENU=Description] }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[DEU=Beschreibung 2;
                                                              ENU=Description 2] }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=[DEU=Einheit;
                                                              ENU=Unit of Measure] }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;

                                                                //TOPAS 09.06.08 ST - Menge auf volle VPE prfen +
                                                                IF Rec.Type = Rec.Type::Item THEN BEGIN
                                                                  GetItem;
                                                                  IF Item.Verpackungsmenge <> 0 THEN BEGIN
                                                                    IF (Quantity MOD Item.Verpackungsmenge) <> 0 THEN BEGIN
                                                                      IF CONFIRM(Text50030, FALSE,
                                                                                 Item."No.", Item.Verpackungsmenge, Quantity, (((Quantity DIV Item.Verpackungsmenge) + 1) * Item.Verpackungsmenge)) THEN
                                                                        Quantity := (((Quantity DIV Item.Verpackungsmenge) + 1) * Item.Verpackungsmenge);
                                                                      END;
                                                                  END;
                                                                  IF "Manufacturer Code" = '44' THEN MESSAGE(Text50031);
                                                                END;

                                                                TOPASBelegPruefungen.CheckBlanketOrderQtyAlloc(Rec);

                                                                //Quote Prfung
                                                                IF "Quotenr." <> '' THEN BEGIN
                                                                  IF Quotes2.GET("Quotenr.") THEN
                                                                    IF Quotes2.Quotesystem = 'SHIP&DEBIT' THEN BEGIN
                                                                      IF Quotes2."Quotenr. Hersteller" = '' THEN
                                                                        Quotes2.TESTFIELD(Genehmigungstext);
                                                                      Quotes2.CALCFIELDS("Restmenge in Auftrag","Menge in VK-Rechnung");
                                                                      IF xRec."Document No." = '' THEN BEGIN
                                                                        RestMengeAuftrag := 0;
                                                                        Vkz.RESET;
                                                                        Vkz.SETRANGE("Document Type",Vkz."Document Type"::Order);
                                                                        Vkz.SETRANGE(Type,Vkz.Type::Item);
                                                                        Vkz.SETRANGE("No.","No.");
                                                                        Vkz.SETRANGE("Quotenr.","Quotenr.");
                                                                        IF Vkz.FINDFIRST THEN BEGIN
                                                                          REPEAT
                                                                            IF (Vkz."Document No." <> "Document No.") OR (Vkz."Line No." <> "Line No.") THEN
                                                                              RestMengeAuftrag := RestMengeAuftrag + Vkz."Outstanding Quantity";
                                                                          UNTIL Vkz.NEXT = 0;
                                                                        END;
                                                                        IF (Quotes2.Quotemenge - (Quotes2."Menge in VK-Rechnung" + RestMengeAuftrag)) < Quantity THEN
                                                                          ERROR (Text50040,Quotes2."Quotenr.",Quotes2.Quotemenge,"Line No.","DC-Preis (MW)");
                                                                      END ELSE
                                                                        IF (Quotes2.Quotemenge - (Quotes2."Menge in VK-Rechnung" + Quotes2."Restmenge in Auftrag") + xRec.Quantity) < Quantity THEN
                                                                          ERROR(Text50040,Quotes2."Quotenr.",Quotes2.Quotemenge,"Line No.","DC-Preis (MW)");
                                                                  END;
                                                                END;
                                                                // TOPAS -

                                                                CheckAssocPurchOrder(FIELDCAPTION(Quantity));

                                                                IF "Shipment No." <> '' THEN
                                                                  CheckShipmentRelation
                                                                ELSE
                                                                  IF "Return Receipt No." <> '' THEN
                                                                    CheckRetRcptRelation;

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);

                                                                // TOPAS-CTM TR +
                                                                SalesHeader.GET("Document Type","Document No.");
                                                                IF ((Type = Type::Item) AND ("DC-Preis (EKW)" = 0)) THEN BEGIN
                                                                  //TOPAS 19.03.19 ST - neue Berechnung bzgl. alte Preislisten Version
                                                                  IF SalesHeader."Preislisten Kalkulation" = SalesHeader."Preislisten Kalkulation"::alt THEN BEGIN
                                                                    CLEAR(EKStaffel);
                                                                    EKStaffel.SETRANGE("Item No.","No.");
                                                                    EKStaffel.SETRANGE("Currency Code",Einkaufsw„hrungscode);
                                                                    EKStaffel.SETFILTER("Minimum Quantity",'<=%1',"Quantity (Base)");
                                                                    EKStaffel.SETFILTER("Ending Date",'>=%1|%2',WORKDATE,0D);
                                                                    IF EKStaffel.FINDFIRST THEN BEGIN
                                                                      VALIDATE("DC-Preis (EKW)",EKStaffel."Direct Unit Cost");
                                                                      GetItem;
                                                                      VALIDATE("Unit Cost (LCY)",ROUND(EKStaffel."Direct Unit Cost" / Einkaufsw„hrungsfaktor) * (1 + (Item."Indirect Cost %" / 100)));
                                                                      "Unit Cost (LCY)" := ROUND("Unit Cost (LCY)",0.00001);
                                                                    END;
                                                                  END ELSE BEGIN
                                                                    //alte Berechnung
                                                                    CLEAR(EKStaffel);
                                                                    EKStaffel.SETRANGE("Item No.","No.");
                                                                    EKStaffel.SETRANGE("Currency Code",Einkaufsw„hrungscode);
                                                                    EKStaffel.SETFILTER("Minimum Quantity",'<=%1',"Quantity (Base)");
                                                                    IF EKStaffel.FINDLAST THEN BEGIN
                                                                      VALIDATE("DC-Preis (EKW)",EKStaffel."Direct Unit Cost");
                                                                      GetItem;
                                                                      VALIDATE("Unit Cost (LCY)",ROUND(EKStaffel."Direct Unit Cost" / Einkaufsw„hrungsfaktor) * (1 + (Item."Indirect Cost %" / 100)));
                                                                      "Unit Cost (LCY)" := ROUND("Unit Cost (LCY)",0.00001);
                                                                    END;
                                                                  END;
                                                                END;

                                                                {
                                                                  VKStaffel.SETRANGE("Artikelnr.","Nr.");
                                                                  VKStaffel.SETFILTER("Menge ab", '<=%1',"Menge (Basis)");
                                                                  IF "VK-Preis (EKW)" = 0 THEN BEGIN
                                                                    IF NOT VKStaffel.FIND('+') THEN
                                                                      VALIDATE ("VK-Preis (EKW)", 0)
                                                                    ELSE
                                                                      VALIDATE ("VK-Preis (EKW)",VKStaffel."VK-Preis (EKW)");
                                                                  END;
                                                                END;
                                                                }
                                                                // TOPAS -

                                                                IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                                                                  IF (Quantity * "Return Qty. Received" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Return Qty. Received")) AND ("Return Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Return Qty. Received")));
                                                                  IF ("Quantity (Base)" * "Return Qty. Received (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Return Qty. Received (Base)")) AND ("Return Receipt No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text003,FIELDCAPTION("Return Qty. Received (Base)")));
                                                                END ELSE BEGIN
                                                                  IF (Quantity * "Quantity Shipped" < 0) OR
                                                                     ((ABS(Quantity) < ABS("Quantity Shipped")) AND ("Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Quantity Shipped")));
                                                                  IF ("Quantity (Base)" * "Qty. Shipped (Base)" < 0) OR
                                                                     ((ABS("Quantity (Base)") < ABS("Qty. Shipped (Base)")) AND ("Shipment No." = ''))
                                                                  THEN
                                                                    FIELDERROR("Quantity (Base)",STRSUBSTNO(Text003,FIELDCAPTION("Qty. Shipped (Base)")));
                                                                END;

                                                                IF (Type = Type::"Charge (Item)") AND (CurrFieldNo <> 0) THEN BEGIN
                                                                  IF (Quantity = 0) AND ("Qty. to Assign" <> 0) THEN
                                                                    FIELDERROR("Qty. to Assign",STRSUBSTNO(Text009,FIELDCAPTION(Quantity),Quantity));
                                                                  IF (Quantity * "Qty. Assigned" < 0) OR (ABS(Quantity) < ABS("Qty. Assigned")) THEN
                                                                    FIELDERROR(Quantity,STRSUBSTNO(Text003,FIELDCAPTION("Qty. Assigned")));
                                                                END;

                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                  InitOutstanding;
                                                                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                    InitQtyToReceive
                                                                  ELSE
                                                                    InitQtyToShip;
                                                                  InitQtyToAsm;
                                                                  SetDefaultQuantity;
                                                                END;

                                                                CheckItemAvailable(FIELDNO(Quantity));

                                                                IF (Quantity * xRec.Quantity < 0) OR (Quantity = 0) THEN
                                                                  InitItemAppl(FALSE);

                                                                IF Type = Type::Item THEN BEGIN
                                                                  UpdateUnitPrice(FIELDNO(Quantity));
                                                                  IF (xRec.Quantity <> Quantity) OR (xRec."Quantity (Base)" <> "Quantity (Base)") THEN BEGIN
                                                                    ReserveSalesLine.VerifyQuantity(Rec,xRec);
                                                                    IF NOT "Drop Shipment" THEN
                                                                      UpdateWithWarehouseShip;
                                                                    WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                    IF ("Quantity (Base)" * xRec."Quantity (Base)" <= 0) AND ("No." <> '') THEN BEGIN
                                                                      GetItem;
                                                                      IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT IsShipment THEN
                                                                        GetUnitCost;
                                                                    END;
                                                                  END;
                                                                  VALIDATE("Qty. to Assemble to Order");
                                                                  IF (Quantity = "Quantity Invoiced") AND (CurrFieldNo <> 0) THEN
                                                                    CheckItemChargeAssgnt;
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                                END ELSE
                                                                  VALIDATE("Line Discount %");

                                                                IF (xRec.Quantity <> Quantity) AND (Quantity = 0) AND
                                                                   ((Amount <> 0) OR ("Amount Including VAT" <> 0) OR ("VAT Base Amount" <> 0))
                                                                THEN BEGIN
                                                                  Amount := 0;
                                                                  "Amount Including VAT" := 0;
                                                                  "VAT Base Amount" := 0;
                                                                END;

                                                                UpdatePrePaymentAmounts;

                                                                CheckWMS;

                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                VALIDATE("Reserved Qty. (Base)");
                                                              END;

                                                   CaptionML=[DEU=Menge;
                                                              ENU=Quantity];
                                                   DecimalPlaces=0:5 }
    { 16  ;   ;Outstanding Quantity;Decimal       ;CaptionML=[DEU=Restauftragsmenge;
                                                              ENU=Outstanding Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 17  ;   ;Qty. to Invoice     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Qty. to Invoice" = MaxQtyToInvoice THEN
                                                                  InitQtyToInvoice
                                                                ELSE
                                                                  "Qty. to Invoice (Base)" := CalcBaseQty("Qty. to Invoice");
                                                                IF ("Qty. to Invoice" * Quantity < 0) OR
                                                                   (ABS("Qty. to Invoice") > ABS(MaxQtyToInvoice))
                                                                THEN
                                                                  ERROR(
                                                                    Text005,
                                                                    MaxQtyToInvoice);
                                                                IF ("Qty. to Invoice (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Qty. to Invoice (Base)") > ABS(MaxQtyToInvoiceBase))
                                                                THEN
                                                                  ERROR(
                                                                    Text006,
                                                                    MaxQtyToInvoiceBase);
                                                                "VAT Difference" := 0;
                                                                CalcInvDiscToInvoice;
                                                                CalcPrepaymentToDeduct;
                                                              END;

                                                   CaptionML=[DEU=Zu fakturieren;
                                                              ENU=Qty. to Invoice];
                                                   DecimalPlaces=0:5 }
    { 18  ;   ;Qty. to Ship        ;Decimal       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                GetLocation("Location Code");
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN BEGIN
                                                                  IF Location."Require Shipment" AND
                                                                     ("Qty. to Ship" <> 0)
                                                                  THEN
                                                                    CheckWarehouse;
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;

                                                                IF "Qty. to Ship" = "Outstanding Quantity" THEN
                                                                  InitQtyToShip
                                                                ELSE BEGIN
                                                                  "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");
                                                                  CheckServItemCreation;
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF ((("Qty. to Ship" < 0) XOR (Quantity < 0)) AND (Quantity <> 0) AND ("Qty. to Ship" <> 0)) OR
                                                                   (ABS("Qty. to Ship") > ABS("Outstanding Quantity")) OR
                                                                   (((Quantity < 0) XOR ("Outstanding Quantity" < 0)) AND (Quantity <> 0) AND ("Outstanding Quantity" <> 0))
                                                                THEN
                                                                  ERROR(
                                                                    Text007,
                                                                    "Outstanding Quantity");
                                                                IF ((("Qty. to Ship (Base)" < 0) XOR ("Quantity (Base)" < 0)) AND ("Qty. to Ship (Base)" <> 0) AND ("Quantity (Base)" <> 0)) OR
                                                                   (ABS("Qty. to Ship (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ((("Quantity (Base)" < 0) XOR ("Outstanding Qty. (Base)" < 0)) AND ("Quantity (Base)" <> 0) AND ("Outstanding Qty. (Base)" <> 0))
                                                                THEN
                                                                  ERROR(
                                                                    Text008,
                                                                    "Outstanding Qty. (Base)");

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Qty. to Ship" < 0) THEN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);

                                                                ATOLink.UpdateQtyToAsmFromSalesLine(Rec);
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[DEU=Zu liefern;
                                                              ENU=Qty. to Ship];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                VALIDATE("Line Discount %");

                                                                //TOPAS 07.05.08 ST +
                                                                GetSalesHeader;
                                                                IF SalesHeader."Currency Code" = '' THEN
                                                                  "VK-Preis (MW)" := "Unit Price"
                                                                ELSE
                                                                  "VK-Preis (MW)" := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(WORKDATE,SalesHeader."Currency Code",
                                                                    "Unit Price",SalesHeader."Currency Factor"),Currency."Unit-Amount Rounding Precision");

                                                                IF SalesHeader."Currency Code" = Einkaufsw„hrungscode THEN
                                                                  "VK-Preis (EKW)" := "Unit Price"
                                                                ELSE BEGIN
                                                                  IF Einkaufsw„hrungscode = '' THEN
                                                                    "VK-Preis (EKW)" := "VK-Preis (MW)"
                                                                  ELSE BEGIN
                                                                    Currency3.GET(Einkaufsw„hrungscode);
                                                                    Currency3.TESTFIELD("Unit-Amount Rounding Precision");
                                                                    "VK-Preis (EKW)" := ROUND (CurrExchRate.ExchangeAmtLCYToFCY(WORKDATE,Einkaufsw„hrungscode,
                                                                      "VK-Preis (MW)",Einkaufsw„hrungsfaktor), Currency3."Unit-Amount Rounding Precision");
                                                                  END;
                                                                END;
                                                                IF (Type = Type::Item) AND ("Unit Price" <> xRec."Unit Price") THEN
                                                                  AktualisiereKalkulation;
                                                                //TOPAS -
                                                              END;

                                                   CaptionML=[DEU=VK-Preis;
                                                              ENU=Unit Price];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Unit Price")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=BEGIN
                                                                IF (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) AND
                                                                   ("Unit Cost (LCY)" <> xRec."Unit Cost (LCY)")
                                                                THEN
                                                                  CheckAssocPurchOrder(FIELDCAPTION("Unit Cost (LCY)"));

                                                                IF (CurrFieldNo = FIELDNO("Unit Cost (LCY)")) AND
                                                                   (Type = Type::Item) AND ("No." <> '') AND ("Quantity (Base)" <> 0)
                                                                THEN BEGIN
                                                                  TestJobPlanningLine;
                                                                  GetItem;
                                                                  IF (Item."Costing Method" = Item."Costing Method"::Standard) AND NOT IsShipment THEN BEGIN
                                                                    IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
                                                                      ERROR(
                                                                        Text037,
                                                                        FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),
                                                                        Item."Costing Method",FIELDCAPTION(Quantity));
                                                                    ERROR(
                                                                      Text038,
                                                                      FIELDCAPTION("Unit Cost (LCY)"),Item.FIELDCAPTION("Costing Method"),
                                                                      Item."Costing Method",FIELDCAPTION(Quantity));
                                                                  END;
                                                                END;

                                                                GetSalesHeader;
                                                                IF SalesHeader."Currency Code" <> '' THEN BEGIN
                                                                  Currency.TESTFIELD("Unit-Amount Rounding Precision");
                                                                  "Unit Cost" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtLCYToFCY(
                                                                        GetDate,SalesHeader."Currency Code",
                                                                        "Unit Cost (LCY)",SalesHeader."Currency Factor"),
                                                                      Currency."Unit-Amount Rounding Precision")
                                                                END ELSE
                                                                  "Unit Cost" := "Unit Cost (LCY)";
                                                              END;

                                                   CaptionML=[DEU=Einstandspreis (MW);
                                                              ENU=Unit Cost (LCY)];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[DEU=MwSt. %;
                                                              ENU=VAT %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                "Line Discount Amount" :=
                                                                  ROUND(
                                                                    ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") *
                                                                    "Line Discount %" / 100,Currency."Amount Rounding Precision");
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[DEU=Zeilenrabatt %;
                                                              ENU=Line Discount %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 28  ;   ;Line Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                GetSalesHeader;
                                                                "Line Discount Amount" := ROUND("Line Discount Amount",Currency."Amount Rounding Precision");
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                TESTFIELD(Quantity);
                                                                IF xRec."Line Discount Amount" <> "Line Discount Amount" THEN
                                                                  UpdateLineDiscPct;
                                                                "Inv. Discount Amount" := 0;
                                                                "Inv. Disc. Amount to Invoice" := 0;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[DEU=Zeilenrabattbetrag;
                                                              ENU=Line Discount Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 29  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        ROUND(Amount + "VAT Base Amount" * "VAT %" / 100,Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    IF Amount <> 0 THEN
                                                                      FIELDERROR(Amount,
                                                                        STRSUBSTNO(
                                                                          Text009,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      SalesHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      "VAT Base Amount" := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                      "Amount Including VAT" :=
                                                                        Amount +
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                                                                          "VAT Base Amount","Quantity (Base)",SalesHeader."Currency Factor");
                                                                      IF "VAT Base Amount" <> 0 THEN
                                                                        "VAT %" :=
                                                                          ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                    END;
                                                                END;

                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=[DEU=Betrag;
                                                              ENU=Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 30  ;   ;Amount Including VAT;Decimal       ;OnValidate=BEGIN
                                                                "Amount Including VAT" := ROUND("Amount Including VAT",Currency."Amount Rounding Precision");
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    BEGIN
                                                                      Amount :=
                                                                        ROUND(
                                                                          "Amount Including VAT" /
                                                                          (1 + (1 - SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                                                                          Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                                                                    END;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      Amount := 0;
                                                                      "VAT Base Amount" := 0;
                                                                    END;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    BEGIN
                                                                      SalesHeader.TESTFIELD("VAT Base Discount %",0);
                                                                      Amount :=
                                                                        SalesTaxCalculate.ReverseCalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                                                                          "Amount Including VAT","Quantity (Base)",SalesHeader."Currency Factor");
                                                                      IF Amount <> 0 THEN
                                                                        "VAT %" :=
                                                                          ROUND(100 * ("Amount Including VAT" - Amount) / Amount,0.00001)
                                                                      ELSE
                                                                        "VAT %" := 0;
                                                                      Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                      "VAT Base Amount" := Amount;
                                                                    END;
                                                                END;

                                                                InitOutstandingAmount;
                                                              END;

                                                   CaptionML=[DEU=Betrag inkl. MwSt.;
                                                              ENU=Amount Including VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF ("Allow Invoice Disc." <> xRec."Allow Invoice Disc.") AND
                                                                   (NOT "Allow Invoice Disc.")
                                                                THEN BEGIN
                                                                  "Inv. Discount Amount" := 0;
                                                                  "Inv. Disc. Amount to Invoice" := 0;
                                                                  UpdateAmounts;
                                                                END;
                                                              END;

                                                   CaptionML=[DEU=Rech.-Rabatt zulassen;
                                                              ENU=Allow Invoice Disc.] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[DEU=Bruttogewicht;
                                                              ENU=Gross Weight];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[DEU=Nettogewicht;
                                                              ENU=Net Weight];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[DEU=Anzahl pro Paket;
                                                              ENU=Units per Parcel];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[DEU=Volumen;
                                                              ENU=Unit Volume];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                                ItemTrackingLines@1001 : Page 6510;
                                                              BEGIN
                                                                IF "Appl.-to Item Entry" <> 0 THEN BEGIN
                                                                  AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);

                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD(Quantity);
                                                                  IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
                                                                    IF Quantity > 0 THEN
                                                                      FIELDERROR(Quantity,Text030);
                                                                  END ELSE BEGIN
                                                                    IF Quantity < 0 THEN
                                                                      FIELDERROR(Quantity,Text029);
                                                                  END;
                                                                  ItemLedgEntry.GET("Appl.-to Item Entry");
                                                                  ItemLedgEntry.TESTFIELD(Positive,TRUE);
                                                                  IF ItemLedgEntry.TrackingExists THEN
                                                                    ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-to Item Entry"));
                                                                  IF ABS("Qty. to Ship (Base)") > ItemLedgEntry.Quantity THEN
                                                                    ERROR(ShippingMoreUnitsThanReceivedErr,ItemLedgEntry.Quantity,ItemLedgEntry."Document No.");

                                                                  VALIDATE("Unit Cost (LCY)",CalcUnitCost(ItemLedgEntry));

                                                                  "Location Code" := ItemLedgEntry."Location Code";
                                                                  IF NOT ItemLedgEntry.Open THEN
                                                                    MESSAGE(Text042,"Appl.-to Item Entry");
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-to Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[DEU=Ausgleich mit Artikelposten;
                                                              ENU=Appl.-to Item Entry] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                                ATOLink.UpdateAsmDimFromSalesLine(Rec);
                                                              END;

                                                   CaptionML=[DEU=Shortcutdimensionscode 1;
                                                              ENU=Shortcut Dimension 1 Code];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2),
                                                                                               Blocked=CONST(No));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                                ATOLink.UpdateAsmDimFromSalesLine(Rec);
                                                              END;

                                                   CaptionML=[DEU=Shortcutdimensionscode 2;
                                                              ENU=Shortcut Dimension 2 Code];
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Item THEN
                                                                  UpdateUnitPrice(FIELDNO("Customer Price Group"));
                                                              END;

                                                   CaptionML=[DEU=Debitorenpreisgruppe;
                                                              ENU=Customer Price Group];
                                                   Editable=No }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=[DEU=Projektnr.;
                                                              ENU=Job No.];
                                                   Editable=No }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Resource THEN BEGIN
                                                                  TestStatusOpen;
                                                                  IF WorkType.GET("Work Type Code") THEN
                                                                    VALIDATE("Unit of Measure Code",WorkType."Unit of Measure Code");
                                                                  UpdateUnitPrice(FIELDNO("Work Type Code"));
                                                                  VALIDATE("Unit Price");
                                                                  FindResUnitCost;
                                                                END;
                                                              END;

                                                   CaptionML=[DEU=Arbeitstypencode;
                                                              ENU=Work Type Code] }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;CaptionML=[DEU=Rechnungsrabatt neu berechnen;
                                                              ENU=Recalculate Invoice Disc.];
                                                   Editable=No }
    { 57  ;   ;Outstanding Amount  ;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Outstanding Amount",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Outstanding Amount (LCY)" :=
                                                                    ROUND("Outstanding Amount",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[DEU=Restauftragsbetrag;
                                                              ENU=Outstanding Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 58  ;   ;Qty. Shipped Not Invoiced;Decimal  ;CaptionML=[DEU=Lief. nicht fakt. Menge;
                                                              ENU=Qty. Shipped Not Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 59  ;   ;Shipped Not Invoiced;Decimal       ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Shipped Not Invoiced (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Shipped Not Invoiced",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Shipped Not Invoiced (LCY)" :=
                                                                    ROUND("Shipped Not Invoiced",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[DEU=Lief. nicht fakt. Betrag;
                                                              ENU=Shipped Not Invoiced];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 60  ;   ;Quantity Shipped    ;Decimal       ;AccessByPermission=TableData 110=R;
                                                   CaptionML=[DEU=Menge geliefert;
                                                              ENU=Quantity Shipped];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[DEU=Menge fakturiert;
                                                              ENU=Quantity Invoiced];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 63  ;   ;Shipment No.        ;Code20        ;CaptionML=[DEU=Lieferungsnr.;
                                                              ENU=Shipment No.];
                                                   Editable=No }
    { 64  ;   ;Shipment Line No.   ;Integer       ;CaptionML=[DEU=Lieferzeilennr.;
                                                              ENU=Shipment Line No.];
                                                   Editable=No }
    { 67  ;   ;Profit %            ;Decimal       ;CaptionML=[DEU=DB %;
                                                              ENU=Profit %];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[DEU=Rech. an Deb.-Nr.;
                                                              ENU=Bill-to Customer No.];
                                                   Editable=No }
    { 69  ;   ;Inv. Discount Amount;Decimal       ;OnValidate=BEGIN
                                                                CalcInvDiscToInvoice;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[DEU=Rechnungsrabattbetrag;
                                                              ENU=Inv. Discount Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 71  ;   ;Purchase Order No.  ;Code20        ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Purchase Order No." <> "Purchase Order No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[DEU=Bestellungsnr.;
                                                              ENU=Purchase Order No.];
                                                   Editable=No }
    { 72  ;   ;Purch. Order Line No.;Integer      ;TableRelation=IF (Drop Shipment=CONST(Yes)) "Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                                 Document No.=FIELD(Purchase Order No.));
                                                   OnValidate=BEGIN
                                                                IF (xRec."Purch. Order Line No." <> "Purch. Order Line No.") AND (Quantity <> 0) THEN BEGIN
                                                                  ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[DEU=Bestellungszeilennr.;
                                                              ENU=Purch. Order Line No.];
                                                   Editable=No }
    { 73  ;   ;Drop Shipment       ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD("Document Type","Document Type"::Order);
                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Job No.",'');
                                                                TESTFIELD("Qty. to Asm. to Order (Base)",0);

                                                                IF "Drop Shipment" THEN
                                                                  TESTFIELD("Special Order",FALSE);

                                                                CheckAssocPurchOrder(FIELDCAPTION("Drop Shipment"));

                                                                IF "Special Order" THEN
                                                                  Reserve := Reserve::Never
                                                                ELSE
                                                                  IF "Drop Shipment" THEN BEGIN
                                                                    Reserve := Reserve::Never;
                                                                    VALIDATE(Quantity,Quantity);
                                                                    IF "Drop Shipment" THEN BEGIN
                                                                      EVALUATE("Outbound Whse. Handling Time",'<0D>');
                                                                      EVALUATE("Shipping Time",'<0D>');
                                                                      UpdateDates;
                                                                      "Bin Code" := '';
                                                                    END;
                                                                  END ELSE
                                                                    SetReserveWithoutPurchasingCode;

                                                                CheckItemAvailable(FIELDNO("Drop Shipment"));

                                                                AddOnIntegrMgt.CheckReceiptOrderStatus(Rec);
                                                                IF (xRec."Drop Shipment" <> "Drop Shipment") AND (Quantity <> 0) THEN BEGIN
                                                                  IF NOT "Drop Shipment" THEN BEGIN
                                                                    InitQtyToAsm;
                                                                    AutoAsmToOrder;
                                                                    UpdateWithWarehouseShip
                                                                  END ELSE
                                                                    InitQtyToShip;
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                  IF NOT FullReservedQtyIsForAsmToOrder THEN
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[DEU=Direktlieferung;
                                                              ENU=Drop Shipment];
                                                   Editable=Yes }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                IF xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" THEN
                                                                  IF GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") THEN
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=[DEU=Gesch„ftsbuchungsgruppe;
                                                              ENU=Gen. Bus. Posting Group] }
    { 75  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                IF xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" THEN
                                                                  IF GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") THEN
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[DEU=Produktbuchungsgruppe;
                                                              ENU=Gen. Prod. Posting Group] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[DEU=MwSt.-Berechnungsart;
                                                              ENU=VAT Calculation Type];
                                                   OptionCaptionML=[DEU=Normale MwSt.,Erwerbsbesteuerung,Nur MwSt.,Verkaufssteuer;
                                                                    ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[DEU=Art des Gesch„ftes;
                                                              ENU=Transaction Type] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[DEU=Verkehrszweig;
                                                              ENU=Transport Method] }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Sales Line"."Line No." WHERE (Document Type=FIELD(Document Type),
                                                                                                Document No.=FIELD(Document No.));
                                                   CaptionML=[DEU=Geh”rt zu Zeilennr.;
                                                              ENU=Attached to Line No.];
                                                   Editable=No }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[DEU=Einladehafen;
                                                              ENU=Exit Point] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[DEU=Ursprungsregion;
                                                              ENU=Area] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[DEU=Verfahren;
                                                              ENU=Transaction Specification] }
    { 84  ;   ;Tax Category        ;Code10        ;CaptionML=[DEU=Steuerkategorie;
                                                              ENU=Tax Category] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[DEU=Steuergebietscode;
                                                              ENU=Tax Area Code] }
    { 86  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[DEU=Steuerpflichtig;
                                                              ENU=Tax Liable] }
    { 87  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[DEU=Steuergruppencode;
                                                              ENU=Tax Group Code] }
    { 88  ;   ;VAT Clause Code     ;Code10        ;TableRelation="VAT Clause";
                                                   CaptionML=[DEU=MwSt.-Klauselcode;
                                                              ENU=VAT Clause Code] }
    { 89  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=[DEU=MwSt.-Gesch„ftsbuchungsgruppe;
                                                              ENU=VAT Bus. Posting Group] }
    { 90  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group");
                                                                "VAT Difference" := 0;
                                                                "VAT %" := VATPostingSetup."VAT %";
                                                                "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                "VAT Identifier" := VATPostingSetup."VAT Identifier";
                                                                "VAT Clause Code" := VATPostingSetup."VAT Clause Code";
                                                                CASE "VAT Calculation Type" OF
                                                                  "VAT Calculation Type"::"Reverse Charge VAT",
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    "VAT %" := 0;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    BEGIN
                                                                      TESTFIELD(Type,Type::"G/L Account");
                                                                      VATPostingSetup.TESTFIELD("Sales VAT Account");
                                                                      TESTFIELD("No.",VATPostingSetup."Sales VAT Account");
                                                                    END;
                                                                END;
                                                                IF SalesHeader."Prices Including VAT" AND (Type IN [Type::Item,Type::Resource]) THEN
                                                                  "Unit Price" :=
                                                                    ROUND(
                                                                      "Unit Price" * (100 + "VAT %") / (100 + xRec."VAT %"),
                                                                      Currency."Unit-Amount Rounding Precision");
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[DEU=MwSt.-Produktbuchungsgruppe;
                                                              ENU=VAT Prod. Posting Group] }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[DEU=W„hrungscode;
                                                              ENU=Currency Code];
                                                   Editable=No }
    { 92  ;   ;Outstanding Amount (LCY);Decimal   ;CaptionML=[DEU=Restauftragsbetrag (MW);
                                                              ENU=Outstanding Amount (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 93  ;   ;Shipped Not Invoiced (LCY);Decimal ;CaptionML=[DEU=Lief. nicht fakt. Betrag (MW);
                                                              ENU=Shipped Not Invoiced (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 95  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE (Source ID=FIELD(Document No.),
                                                                                                        Source Ref. No.=FIELD(Line No.),
                                                                                                        Source Type=CONST(37),
                                                                                                        Source Subtype=FIELD(Document Type),
                                                                                                        Reservation Status=CONST(Reservation)));
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[DEU=Reservierte Menge;
                                                              ENU=Reserved Quantity];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 96  ;   ;Reserve             ;Option        ;OnValidate=BEGIN
                                                                IF Reserve <> Reserve::Never THEN BEGIN
                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD("No.");
                                                                END;
                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                IF (Reserve = Reserve::Never) AND ("Reserved Qty. (Base)" > 0) THEN
                                                                  TESTFIELD("Reserved Qty. (Base)",0);

                                                                IF "Drop Shipment" OR "Special Order" THEN
                                                                  TESTFIELD(Reserve,Reserve::Never);
                                                                IF xRec.Reserve = Reserve::Always THEN BEGIN
                                                                  GetItem;
                                                                  IF Item.Reserve = Item.Reserve::Always THEN
                                                                    TESTFIELD(Reserve,Reserve::Always);
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[DEU=Reservieren;
                                                              ENU=Reserve];
                                                   OptionCaptionML=[DEU=Nie,Optional,Immer;
                                                                    ENU=Never,Optional,Always];
                                                   OptionString=Never,Optional,Always }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Sales Header".No. WHERE (Document Type=CONST(Blanket Order));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF "Blanket Order No." = '' THEN
                                                                  "Blanket Order Line No." := 0
                                                                ELSE
                                                                  VALIDATE("Blanket Order Line No.");

                                                                //TOPAS 06.07.09 ST +
                                                                TOPASBelegPruefungen.CheckBlanketOrderQtyAlloc(Rec);
                                                                //TOPAS -
                                                              END;

                                                   OnLookup=BEGIN
                                                              TESTFIELD("Quantity Shipped",0);
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[DEU=Rahmenauftragsnr.;
                                                              ENU=Blanket Order No.] }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Sales Line"."Line No." WHERE (Document Type=CONST(Blanket Order),
                                                                                                Document No.=FIELD(Blanket Order No.));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Quantity Shipped",0);
                                                                IF "Blanket Order Line No." <> 0 THEN BEGIN
                                                                  SalesLine2.GET("Document Type"::"Blanket Order","Blanket Order No.","Blanket Order Line No.");
                                                                  SalesLine2.TESTFIELD(Type,Type);
                                                                  SalesLine2.TESTFIELD("No.","No.");
                                                                  SalesLine2.TESTFIELD("Bill-to Customer No.","Bill-to Customer No.");
                                                                  SalesLine2.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
                                                                  VALIDATE("Variant Code",SalesLine2."Variant Code");
                                                                  VALIDATE("Location Code",SalesLine2."Location Code");
                                                                  VALIDATE("Unit of Measure Code",SalesLine2."Unit of Measure Code");
                                                                  VALIDATE("Unit Price",SalesLine2."Unit Price");
                                                                  VALIDATE("Line Discount %",SalesLine2."Line Discount %");
                                                                END;

                                                                //TOPAS 06.07.09 ST +
                                                                TOPASBelegPruefungen.CheckBlanketOrderQtyAlloc(Rec);
                                                                //TOPAS -
                                                              END;

                                                   OnLookup=BEGIN
                                                              BlanketOrderLookup;
                                                            END;

                                                   TestTableRelation=No;
                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[DEU=Rahmenauftragszeilennr.;
                                                              ENU=Blanket Order Line No.] }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[DEU=MwSt.-Bemessungsgrundlage;
                                                              ENU=VAT Base Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[DEU=Einstandspreis;
                                                              ENU=Unit Cost];
                                                   Editable=No;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 101 ;   ;System-Created Entry;Boolean       ;CaptionML=[DEU=Systembuchung;
                                                              ENU=System-Created Entry];
                                                   Editable=No }
    { 103 ;   ;Line Amount         ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                TESTFIELD(Quantity);
                                                                TESTFIELD("Unit Price");
                                                                GetSalesHeader;
                                                                "Line Amount" := ROUND("Line Amount",Currency."Amount Rounding Precision");
                                                                VALIDATE(
                                                                  "Line Discount Amount",ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Amount");
                                                              END;

                                                   CaptionML=[DEU=Zeilenbetrag;
                                                              ENU=Line Amount];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Line Amount")) }
    { 104 ;   ;VAT Difference      ;Decimal       ;CaptionML=[DEU=MwSt.-Differenz;
                                                              ENU=VAT Difference];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 105 ;   ;Inv. Disc. Amount to Invoice;Decimal;
                                                   CaptionML=[DEU=Rechnungsrabattbetrag zu fakt.;
                                                              ENU=Inv. Disc. Amount to Invoice];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 106 ;   ;VAT Identifier      ;Code10        ;CaptionML=[DEU=MwSt.-Kennzeichen;
                                                              ENU=VAT Identifier];
                                                   Editable=No }
    { 107 ;   ;IC Partner Ref. Type;Option        ;OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN
                                                                  "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
                                                                IF "IC Partner Ref. Type" <> xRec."IC Partner Ref. Type" THEN
                                                                  "IC Partner Reference" := '';
                                                                IF "IC Partner Ref. Type" = "IC Partner Ref. Type"::"Common Item No." THEN BEGIN
                                                                  IF Item."No." <> "No." THEN
                                                                    Item.GET("No.");
                                                                  Item.TESTFIELD("Common Item No.");
                                                                  "IC Partner Reference" := Item."Common Item No.";
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=[DEU=IC-Partnerref.-Art;
                                                              ENU=IC Partner Ref. Type];
                                                   OptionCaptionML=[DEU=" ,Sachkonto,Artikel,,,Zu-/Abschlag (Artikel),Referenz,Gemeinsame Artikelnr.";
                                                                    ENU=" ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No."];
                                                   OptionString=[ ,G/L Account,Item,,,Charge (Item),Cross Reference,Common Item No.] }
    { 108 ;   ;IC Partner Reference;Code20        ;OnLookup=VAR
                                                              ICGLAccount@1000 : Record 410;
                                                              ItemCrossReference@1001 : Record 5717;
                                                            BEGIN
                                                              IF "No." <> '' THEN
                                                                CASE "IC Partner Ref. Type" OF
                                                                  "IC Partner Ref. Type"::"G/L Account":
                                                                    BEGIN
                                                                      IF ICGLAccount.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"IC G/L Account List",ICGLAccount) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ICGLAccount."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::Item:
                                                                    BEGIN
                                                                      IF Item.GET("IC Partner Reference") THEN;
                                                                      IF PAGE.RUNMODAL(PAGE::"Item List",Item) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",Item."No.");
                                                                    END;
                                                                  "IC Partner Ref. Type"::"Cross Reference":
                                                                    BEGIN
                                                                      ItemCrossReference.RESET;
                                                                      ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
                                                                      ItemCrossReference.SETFILTER(
                                                                        "Cross-Reference Type",'%1|%2',
                                                                        ItemCrossReference."Cross-Reference Type"::Customer,
                                                                        ItemCrossReference."Cross-Reference Type"::" ");
                                                                      ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',"Sell-to Customer No.",'');
                                                                      IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN
                                                                        VALIDATE("IC Partner Reference",ItemCrossReference."Cross-Reference No.");
                                                                    END;
                                                                END;
                                                            END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=[DEU=IC-Partnerreferenz;
                                                              ENU=IC Partner Reference] }
    { 109 ;   ;Prepayment %        ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdatePrepmtSetupFields;

                                                                IF Type <> Type::" " THEN
                                                                  UpdateAmounts;
                                                              END;

                                                   CaptionML=[DEU=Vorauszahlung %;
                                                              ENU=Prepayment %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 110 ;   ;Prepmt. Line Amount ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                PrePaymentLineAmountEntered := TRUE;
                                                                TESTFIELD("Line Amount");
                                                                IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text044,"Prepmt. Amt. Inv."));
                                                                IF "Prepmt. Line Amount" > "Line Amount" THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,"Line Amount"));
                                                                IF "System-Created Entry" THEN
                                                                  FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,0));
                                                                VALIDATE("Prepayment %",ROUND("Prepmt. Line Amount" * 100 / "Line Amount",0.00001));
                                                              END;

                                                   CaptionML=[DEU=Vorauszahlungszeilenbetrag;
                                                              ENU=Prepmt. Line Amount];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Line Amount")) }
    { 111 ;   ;Prepmt. Amt. Inv.   ;Decimal       ;CaptionML=[DEU=Fakt. Vorauszahlungsbetrag;
                                                              ENU=Prepmt. Amt. Inv.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt. Amt. Inv.")) }
    { 112 ;   ;Prepmt. Amt. Incl. VAT;Decimal     ;CaptionML=[DEU=Vorauszahlungsbetrag einschl. MwSt;
                                                              ENU=Prepmt. Amt. Incl. VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;Prepayment Amount   ;Decimal       ;CaptionML=[DEU=Vorauszahlungsbetrag;
                                                              ENU=Prepayment Amount];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 114 ;   ;Prepmt. VAT Base Amt.;Decimal      ;CaptionML=[DEU=MwSt.-Bemessungsgrundlage Vorauszahlung;
                                                              ENU=Prepmt. VAT Base Amt.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 115 ;   ;Prepayment VAT %    ;Decimal       ;CaptionML=[DEU=MwSt % Vorauszahlung;
                                                              ENU=Prepayment VAT %];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=No }
    { 116 ;   ;Prepmt. VAT Calc. Type;Option      ;CaptionML=[DEU=MwSt.-Berechnungsart Vorauszahlung;
                                                              ENU=Prepmt. VAT Calc. Type];
                                                   OptionCaptionML=[DEU=Normale MwSt.,Erwerbsbesteuerung,Nur MwSt.,Verkaufssteuer;
                                                                    ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 117 ;   ;Prepayment VAT Identifier;Code10   ;CaptionML=[DEU=MwSt-Kennzeichen Vorauszahlung;
                                                              ENU=Prepayment VAT Identifier];
                                                   Editable=No }
    { 118 ;   ;Prepayment Tax Area Code;Code20    ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[DEU=Steuergebietscode Vorauszahlung;
                                                              ENU=Prepayment Tax Area Code] }
    { 119 ;   ;Prepayment Tax Liable;Boolean      ;OnValidate=BEGIN
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[DEU=Steuerpflichtige Vorauszahlung;
                                                              ENU=Prepayment Tax Liable] }
    { 120 ;   ;Prepayment Tax Group Code;Code10   ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                UpdateAmounts;
                                                              END;

                                                   CaptionML=[DEU=Steuergruppencode Vorauszahlung;
                                                              ENU=Prepayment Tax Group Code] }
    { 121 ;   ;Prepmt Amt to Deduct;Decimal       ;OnValidate=BEGIN
                                                                IF "Prepmt Amt to Deduct" > "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text045,"Prepmt. Amt. Inv." - "Prepmt Amt Deducted"));

                                                                IF "Prepmt Amt to Deduct" > "Qty. to Invoice" * "Unit Price" THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text045,"Qty. to Invoice" * "Unit Price"));

                                                                IF ("Prepmt. Amt. Inv." - "Prepmt Amt to Deduct" - "Prepmt Amt Deducted") >
                                                                   (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Unit Price"
                                                                THEN
                                                                  FIELDERROR(
                                                                    "Prepmt Amt to Deduct",
                                                                    STRSUBSTNO(Text044,
                                                                      "Prepmt. Amt. Inv." - "Prepmt Amt Deducted" - (Quantity - "Qty. to Invoice" - "Quantity Invoiced") * "Unit Price"));
                                                              END;

                                                   CaptionML=[DEU=Abzuziehender Vorauszahlungsbetrag;
                                                              ENU=Prepmt Amt to Deduct];
                                                   MinValue=0;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt to Deduct")) }
    { 122 ;   ;Prepmt Amt Deducted ;Decimal       ;CaptionML=[DEU=Abgezogener Vorauszahlungsbetrag;
                                                              ENU=Prepmt Amt Deducted];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Prepmt Amt Deducted")) }
    { 123 ;   ;Prepayment Line     ;Boolean       ;CaptionML=[DEU=Vorauszahlungszeile;
                                                              ENU=Prepayment Line];
                                                   Editable=No }
    { 124 ;   ;Prepmt. Amount Inv. Incl. VAT;Decimal;
                                                   CaptionML=[DEU=Fakt. Vorauszahlungsbetrag einschl. MwSt.;
                                                              ENU=Prepmt. Amount Inv. Incl. VAT];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 129 ;   ;Prepmt. Amount Inv. (LCY);Decimal  ;CaptionML=[DEU=Fakt. Vorauszahlungsbetrag (MW);
                                                              ENU=Prepmt. Amount Inv. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 130 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   OnValidate=BEGIN
                                                                IF "IC Partner Code" <> '' THEN BEGIN
                                                                  TESTFIELD(Type,Type::"G/L Account");
                                                                  GetSalesHeader;
                                                                  SalesHeader.TESTFIELD("Sell-to IC Partner Code",'');
                                                                  SalesHeader.TESTFIELD("Bill-to IC Partner Code",'');
                                                                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"G/L Account");
                                                                END;
                                                              END;

                                                   CaptionML=[DEU=IC-Partnercode;
                                                              ENU=IC Partner Code] }
    { 132 ;   ;Prepmt. VAT Amount Inv. (LCY);Decimal;
                                                   CaptionML=[DEU=Fakt. MwSt.-Vorauszahlungsbetrag (MW);
                                                              ENU=Prepmt. VAT Amount Inv. (LCY)];
                                                   Editable=No }
    { 135 ;   ;Prepayment VAT Difference;Decimal  ;CaptionML=[DEU=MwSt.-Differenz Vorauszahlung;
                                                              ENU=Prepayment VAT Difference];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 136 ;   ;Prepmt VAT Diff. to Deduct;Decimal ;CaptionML=[DEU=Abzuziehende MwSt.-Differenz Vorauszahlung;
                                                              ENU=Prepmt VAT Diff. to Deduct];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 137 ;   ;Prepmt VAT Diff. Deducted;Decimal  ;CaptionML=[DEU=Abgezogene MwSt.-Differenz Vorauszahlung;
                                                              ENU=Prepmt VAT Diff. Deducted];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[DEU=Dimensionssatz-ID;
                                                              ENU=Dimension Set ID];
                                                   Editable=No }
    { 900 ;   ;Qty. to Assemble to Order;Decimal  ;OnValidate=VAR
                                                                SalesLineReserve@1000 : Codeunit 99000832;
                                                              BEGIN
                                                                WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);

                                                                "Qty. to Asm. to Order (Base)" := CalcBaseQty("Qty. to Assemble to Order");

                                                                IF "Qty. to Asm. to Order (Base)" <> 0 THEN BEGIN
                                                                  TESTFIELD("Drop Shipment",FALSE);
                                                                  TESTFIELD("Special Order",FALSE);
                                                                  IF "Qty. to Asm. to Order (Base)" < 0 THEN
                                                                    FIELDERROR("Qty. to Assemble to Order",STRSUBSTNO(Text009,FIELDCAPTION("Quantity (Base)"),"Quantity (Base)"));
                                                                  TESTFIELD("Appl.-to Item Entry",0);

                                                                  CASE "Document Type" OF
                                                                    "Document Type"::"Blanket Order",
                                                                    "Document Type"::Quote:
                                                                      IF ("Quantity (Base)" = 0) OR ("Qty. to Asm. to Order (Base)" <= 0) OR SalesLineReserve.ReservEntryExist(Rec) THEN
                                                                        TESTFIELD("Qty. to Asm. to Order (Base)",0)
                                                                      ELSE
                                                                        IF "Quantity (Base)" <> "Qty. to Asm. to Order (Base)" THEN
                                                                          FIELDERROR("Qty. to Assemble to Order",STRSUBSTNO(Text031,0,"Quantity (Base)"));
                                                                    "Document Type"::Order:
                                                                      ;
                                                                    ELSE
                                                                      TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                  END;
                                                                END;

                                                                CheckItemAvailable(FIELDNO("Qty. to Assemble to Order"));
                                                                IF NOT (CurrFieldNo IN [FIELDNO(Quantity),FIELDNO("Qty. to Assemble to Order")]) THEN
                                                                  GetDefaultBin;
                                                                AutoAsmToOrder;
                                                              END;

                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=[DEU=Menge fr Auftragsmontage;
                                                              ENU=Qty. to Assemble to Order];
                                                   DecimalPlaces=0:5 }
    { 901 ;   ;Qty. to Asm. to Order (Base);Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Assemble to Order","Qty. to Asm. to Order (Base)");
                                                              END;

                                                   CaptionML=[DEU=Menge fr Auftragsmontage (Basis);
                                                              ENU=Qty. to Asm. to Order (Base)];
                                                   DecimalPlaces=0:5 }
    { 902 ;   ;ATO Whse. Outstanding Qty.;Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding" WHERE (Source Type=CONST(37),
                                                                                                                       Source Subtype=FIELD(Document Type),
                                                                                                                       Source No.=FIELD(Document No.),
                                                                                                                       Source Line No.=FIELD(Line No.),
                                                                                                                       Assemble to Order=FILTER(Yes)));
                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=[DEU=Auftragsmontage - Lagerrestbestellmenge;
                                                              ENU=ATO Whse. Outstanding Qty.];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 903 ;   ;ATO Whse. Outstd. Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(37),
                                                                                                                              Source Subtype=FIELD(Document Type),
                                                                                                                              Source No.=FIELD(Document No.),
                                                                                                                              Source Line No.=FIELD(Line No.),
                                                                                                                              Assemble to Order=FILTER(Yes)));
                                                   AccessByPermission=TableData 90=R;
                                                   CaptionML=[DEU=Auftragsmontage - Lagerrestbestellmenge (Basis);
                                                              ENU=ATO Whse. Outstd. Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE (Job No.=FIELD(Job No.));
                                                   CaptionML=[DEU=Projektaufgabennr.;
                                                              ENU=Job Task No.];
                                                   Editable=No }
    { 1002;   ;Job Contract Entry No.;Integer     ;OnValidate=VAR
                                                                JobPlanningLine@1001 : Record 1003;
                                                              BEGIN
                                                                JobPlanningLine.SETCURRENTKEY("Job Contract Entry No.");
                                                                JobPlanningLine.SETRANGE("Job Contract Entry No.","Job Contract Entry No.");
                                                                JobPlanningLine.FINDFIRST;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,JobPlanningLine."Job No.",
                                                                  DATABASE::"Responsibility Center","Responsibility Center");
                                                              END;

                                                   AccessByPermission=TableData 167=R;
                                                   CaptionML=[DEU=Projektvertragspostennr.;
                                                              ENU=Job Contract Entry No.];
                                                   Editable=No }
    { 1300;   ;Posting Date        ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Sales Header"."Posting Date" WHERE (Document Type=FIELD(Document Type),
                                                                                                           No.=FIELD(Document No.)));
                                                   CaptionML=[DEU=Buchungsdatum;
                                                              ENU=Posting Date] }
    { 1700;   ;Deferral Code       ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   OnValidate=BEGIN
                                                                GetSalesHeader;
                                                                DeferralPostDate := SalesHeader."Posting Date";

                                                                DeferralUtilities.DeferralCodeOnValidate(
                                                                  "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                  "Document Type","Document No.","Line No.",
                                                                  GetDeferralAmount,DeferralPostDate,
                                                                  Description,SalesHeader."Currency Code");

                                                                IF "Document Type" = "Document Type"::"Return Order" THEN
                                                                  "Returns Deferral Start Date" :=
                                                                    DeferralUtilities.GetDeferralStartDate(DeferralUtilities.GetSalesDeferralDocType,
                                                                      "Document Type","Document No.","Line No.","Deferral Code",SalesHeader."Posting Date");
                                                              END;

                                                   CaptionML=[DEU=Abgrenzungscode;
                                                              ENU=Deferral Code] }
    { 1702;   ;Returns Deferral Start Date;Date   ;OnValidate=VAR
                                                                DeferralHeader@1000 : Record 1701;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                IF DeferralHeader.GET(DeferralUtilities.GetSalesDeferralDocType,'','',"Document Type","Document No.","Line No.") THEN
                                                                  DeferralUtilities.CreateDeferralSchedule("Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
                                                                    "Document Type","Document No.","Line No.",GetDeferralAmount,
                                                                    DeferralHeader."Calc. Method","Returns Deferral Start Date",
                                                                    DeferralHeader."No. of Periods",TRUE,
                                                                    DeferralHeader."Schedule Description",FALSE,
                                                                    SalesHeader."Currency Code");
                                                              END;

                                                   CaptionML=[DEU=Gibt Verz”gerungsstartdatum zurck;
                                                              ENU=Returns Deferral Start Date] }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                IF "Variant Code" <> '' THEN
                                                                  TESTFIELD(Type,Type::Item);
                                                                TestStatusOpen;
                                                                CheckAssocPurchOrder(FIELDCAPTION("Variant Code"));

                                                                IF xRec."Variant Code" <> "Variant Code" THEN BEGIN
                                                                  TESTFIELD("Qty. Shipped Not Invoiced",0);
                                                                  TESTFIELD("Shipment No.",'');

                                                                  TESTFIELD("Return Qty. Rcd. Not Invd.",0);
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                  InitItemAppl(FALSE);
                                                                END;

                                                                CheckItemAvailable(FIELDNO("Variant Code"));

                                                                IF Type = Type::Item THEN BEGIN
                                                                  GetUnitCost;
                                                                  UpdateUnitPrice(FIELDNO("Variant Code"));
                                                                END;

                                                                GetDefaultBin;
                                                                InitQtyToAsm;
                                                                AutoAsmToOrder;
                                                                IF (xRec."Variant Code" <> "Variant Code") AND (Quantity <> 0) THEN BEGIN
                                                                  IF NOT FullReservedQtyIsForAsmToOrder THEN
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);
                                                                  WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                END;

                                                                UpdateItemCrossRef;
                                                              END;

                                                   CaptionML=[DEU=Variantencode;
                                                              ENU=Variant Code] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=IF (Document Type=FILTER(Order|Invoice),
                                                                     Quantity=FILTER(>=0),
                                                                     Qty. to Asm. to Order (Base)=CONST(0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                            Item No.=FIELD(No.),
                                                                                                                                            Variant Code=FIELD(Variant Code))
                                                                                                                                            ELSE IF (Document Type=FILTER(Return Order|Credit Memo),
                                                                                                                                                     Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE (Location Code=FIELD(Location Code),
                                                                                                                                                                                                          Item No.=FIELD(No.),
                                                                                                                                                                                                          Variant Code=FIELD(Variant Code))
                                                                                                                                                                                                          ELSE Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                WMSManagement@1001 : Codeunit 7302;
                                                              BEGIN
                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  IF NOT IsInbound AND ("Quantity (Base)" <> 0) AND ("Qty. to Asm. to Order (Base)" = 0) THEN
                                                                    WMSManagement.FindBinContent("Location Code","Bin Code","No.","Variant Code",'')
                                                                  ELSE
                                                                    WMSManagement.FindBin("Location Code","Bin Code",'');
                                                                END;

                                                                IF "Drop Shipment" THEN
                                                                  CheckAssocPurchOrder(FIELDCAPTION("Bin Code"));

                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Location Code");

                                                                IF (Type = Type::Item) AND ("Bin Code" <> '') THEN BEGIN
                                                                  TESTFIELD("Drop Shipment",FALSE);
                                                                  GetLocation("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory");
                                                                  CheckWarehouse;
                                                                END;
                                                                ATOLink.UpdateAsmBinCodeFromSalesLine(Rec);
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1002 : Codeunit 7302;
                                                              BinCode@1000 : Code[20];
                                                            BEGIN
                                                              IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","No.","Variant Code",'',"Bin Code")
                                                              ELSE
                                                                BinCode := WMSManagement.BinLookUp("Location Code","No.","Variant Code",'');

                                                              IF BinCode <> '' THEN
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=[DEU=Lagerplatzcode;
                                                              ENU=Bin Code] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[DEU=Menge pro Einheit;
                                                              ENU=Qty. per Unit of Measure];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5405;   ;Planned             ;Boolean       ;CaptionML=[DEU=Geplant;
                                                              ENU=Planned];
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item),
                                                                     No.=FILTER(<>'')) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                     ELSE IF (Type=CONST(Resource),
                                                                              No.=FILTER(<>'')) "Resource Unit of Measure".Code WHERE (Resource No.=FIELD(No.))
                                                                              ELSE "Unit of Measure";
                                                   OnValidate=VAR
                                                                UnitOfMeasureTranslation@1000 : Record 5402;
                                                                ResUnitofMeasure@1001 : Record 205;
                                                              BEGIN
                                                                TestJobPlanningLine;
                                                                TestStatusOpen;
                                                                TESTFIELD("Quantity Shipped",0);
                                                                TESTFIELD("Qty. Shipped (Base)",0);
                                                                TESTFIELD("Return Qty. Received",0);
                                                                TESTFIELD("Return Qty. Received (Base)",0);
                                                                IF "Unit of Measure Code" <> xRec."Unit of Measure Code" THEN BEGIN
                                                                  TESTFIELD("Shipment No.",'');
                                                                  TESTFIELD("Return Receipt No.",'');
                                                                END;

                                                                CheckAssocPurchOrder(FIELDCAPTION("Unit of Measure Code"));

                                                                IF "Unit of Measure Code" = '' THEN
                                                                  "Unit of Measure" := ''
                                                                ELSE BEGIN
                                                                  IF NOT UnitOfMeasure.GET("Unit of Measure Code") THEN
                                                                    UnitOfMeasure.INIT;
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                  GetSalesHeader;
                                                                  IF SalesHeader."Language Code" <> '' THEN BEGIN
                                                                    UnitOfMeasureTranslation.SETRANGE(Code,"Unit of Measure Code");
                                                                    UnitOfMeasureTranslation.SETRANGE("Language Code",SalesHeader."Language Code");
                                                                    IF UnitOfMeasureTranslation.FINDFIRST THEN
                                                                      "Unit of Measure" := UnitOfMeasureTranslation.Description;
                                                                  END;
                                                                END;
                                                                DistIntegration.EnterSalesItemCrossRef(Rec);
                                                                CASE Type OF
                                                                  Type::Item:
                                                                    BEGIN
                                                                      GetItem;
                                                                      GetUnitCost;
                                                                      UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
                                                                      CheckItemAvailable(FIELDNO("Unit of Measure Code"));
                                                                      "Gross Weight" := Item."Gross Weight" * "Qty. per Unit of Measure";
                                                                      "Net Weight" := Item."Net Weight" * "Qty. per Unit of Measure";
                                                                      "Unit Volume" := Item."Unit Volume" * "Qty. per Unit of Measure";
                                                                      "Units per Parcel" := ROUND(Item."Units per Parcel" / "Qty. per Unit of Measure",0.00001);
                                                                      IF (xRec."Unit of Measure Code" <> "Unit of Measure Code") AND (Quantity <> 0) THEN
                                                                        WhseValidateSourceLine.SalesLineVerifyChange(Rec,xRec);
                                                                      IF "Qty. per Unit of Measure" > xRec."Qty. per Unit of Measure" THEN
                                                                        InitItemAppl(FALSE);
                                                                    END;
                                                                  Type::Resource:
                                                                    BEGIN
                                                                      IF "Unit of Measure Code" = '' THEN BEGIN
                                                                        GetResource;
                                                                        "Unit of Measure Code" := Resource."Base Unit of Measure";
                                                                      END;
                                                                      ResUnitofMeasure.GET("No.","Unit of Measure Code");
                                                                      "Qty. per Unit of Measure" := ResUnitofMeasure."Qty. per Unit of Measure";
                                                                      UpdateUnitPrice(FIELDNO("Unit of Measure Code"));
                                                                      FindResUnitCost;
                                                                    END;
                                                                  Type::"G/L Account",Type::"Fixed Asset",Type::"Charge (Item)",Type::" ":
                                                                    "Qty. per Unit of Measure" := 1;
                                                                END;
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=[DEU=Einheitencode;
                                                              ENU=Unit of Measure Code] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TestJobPlanningLine;
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                                UpdateUnitPrice(FIELDNO("Quantity (Base)"));
                                                              END;

                                                   CaptionML=[DEU=Menge (Basis);
                                                              ENU=Quantity (Base)];
                                                   DecimalPlaces=0:5 }
    { 5416;   ;Outstanding Qty. (Base);Decimal    ;CaptionML=[DEU=Restauftragsmenge (Basis);
                                                              ENU=Outstanding Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5417;   ;Qty. to Invoice (Base);Decimal     ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Invoice","Qty. to Invoice (Base)");
                                                              END;

                                                   CaptionML=[DEU=Zu fakturieren (Basis);
                                                              ENU=Qty. to Invoice (Base)];
                                                   DecimalPlaces=0:5 }
    { 5418;   ;Qty. to Ship (Base) ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Qty. to Ship","Qty. to Ship (Base)");
                                                              END;

                                                   CaptionML=[DEU=Zu liefern (Basis);
                                                              ENU=Qty. to Ship (Base)];
                                                   DecimalPlaces=0:5 }
    { 5458;   ;Qty. Shipped Not Invd. (Base);Decimal;
                                                   CaptionML=[DEU=Lief. nicht fakt. Menge(Basis);
                                                              ENU=Qty. Shipped Not Invd. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5460;   ;Qty. Shipped (Base) ;Decimal       ;CaptionML=[DEU=Menge geliefert (Basis);
                                                              ENU=Qty. Shipped (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[DEU=Menge fakturiert (Basis);
                                                              ENU=Qty. Invoiced (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5495;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE (Source ID=FIELD(Document No.),
                                                                                                                 Source Ref. No.=FIELD(Line No.),
                                                                                                                 Source Type=CONST(37),
                                                                                                                 Source Subtype=FIELD(Document Type),
                                                                                                                 Reservation Status=CONST(Reservation)));
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure");
                                                                CALCFIELDS("Reserved Quantity");
                                                                Planned := "Reserved Quantity" = "Outstanding Quantity";
                                                              END;

                                                   AccessByPermission=TableData 110=R;
                                                   CaptionML=[DEU=Reservierte Menge (Basis);
                                                              ENU=Reserved Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5600;   ;FA Posting Date     ;Date          ;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[DEU=Anlagedatum;
                                                              ENU=FA Posting Date] }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                GetFAPostingGroup;
                                                              END;

                                                   CaptionML=[DEU=AfA Buchcode;
                                                              ENU=Depreciation Book Code] }
    { 5605;   ;Depr. until FA Posting Date;Boolean;AccessByPermission=TableData 5600=R;
                                                   CaptionML=[DEU=AfA bis Anlagedatum;
                                                              ENU=Depr. until FA Posting Date] }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := FALSE;
                                                              END;

                                                   CaptionML=[DEU=In AfA-Buch kopieren;
                                                              ENU=Duplicate in Depreciation Book] }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   AccessByPermission=TableData 5600=R;
                                                   CaptionML=[DEU=Kopiervorgang aktivieren;
                                                              ENU=Use Duplication List] }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Responsibility Center","Responsibility Center",
                                                                  DimMgt.TypeToTableID3(Type),"No.",
                                                                  DATABASE::Job,"Job No.");
                                                              END;

                                                   CaptionML=[DEU=Zust„ndigkeitseinheitencode;
                                                              ENU=Responsibility Center];
                                                   Editable=No }
    { 5701;   ;Out-of-Stock Substitution;Boolean  ;CaptionML=[DEU=Ersatz da nicht am Lager;
                                                              ENU=Out-of-Stock Substitution];
                                                   Editable=No }
    { 5702;   ;Substitution Available;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Item Substitution" WHERE (Type=CONST(Item),
                                                                                                No.=FIELD(No.),
                                                                                                Substitute Type=CONST(Item)));
                                                   CaptionML=[DEU=Ersatzartikel verfgbar;
                                                              ENU=Substitution Available];
                                                   Editable=No }
    { 5703;   ;Originally Ordered No.;Code20      ;TableRelation=IF (Type=CONST(Item)) Item;
                                                   AccessByPermission=TableData 5715=R;
                                                   CaptionML=[DEU=Urspr. Nr. (Auftrag);
                                                              ENU=Originally Ordered No.] }
    { 5704;   ;Originally Ordered Var. Code;Code10;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(Originally Ordered No.));
                                                   AccessByPermission=TableData 5715=R;
                                                   CaptionML=[DEU=Urspr. Variantencode (Auftrag);
                                                              ENU=Originally Ordered Var. Code] }
    { 5705;   ;Cross-Reference No. ;Code40        ;OnValidate=VAR
                                                                ReturnedCrossRef@1000 : Record 5717;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                "Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
                                                                ReturnedCrossRef.INIT;
                                                                IF "Cross-Reference No." <> '' THEN BEGIN
                                                                  DistIntegration.ICRLookupSalesItem(Rec,ReturnedCrossRef,CurrFieldNo <> 0);
                                                                  IF "No." <> ReturnedCrossRef."Item No." THEN
                                                                    VALIDATE("No.",ReturnedCrossRef."Item No.");
                                                                  IF ReturnedCrossRef."Variant Code" <> '' THEN
                                                                    VALIDATE("Variant Code",ReturnedCrossRef."Variant Code");

                                                                  IF ReturnedCrossRef."Unit of Measure" <> '' THEN
                                                                    VALIDATE("Unit of Measure Code",ReturnedCrossRef."Unit of Measure");
                                                                END;

                                                                "Unit of Measure (Cross Ref.)" := ReturnedCrossRef."Unit of Measure";
                                                                "Cross-Reference Type" := ReturnedCrossRef."Cross-Reference Type";
                                                                "Cross-Reference Type No." := ReturnedCrossRef."Cross-Reference Type No.";
                                                                "Cross-Reference No." := ReturnedCrossRef."Cross-Reference No.";

                                                                IF ReturnedCrossRef.Description <> '' THEN
                                                                  Description := ReturnedCrossRef.Description;

                                                                UpdateUnitPrice(FIELDNO("Cross-Reference No."));
                                                                UpdateICPartner;
                                                              END;

                                                   OnLookup=BEGIN
                                                              CrossReferenceNoLookUp;
                                                            END;

                                                   AccessByPermission=TableData 5717=R;
                                                   CaptionML=[DEU=Referenznr.;
                                                              ENU=Cross-Reference No.];
                                                   Description=TOPAS 11.05.17 ST - Zeichenl„nge von 20 --> 40 erh”ht }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.));
                                                   AccessByPermission=TableData 5717=R;
                                                   CaptionML=[DEU=Einheit (Referenz);
                                                              ENU=Unit of Measure (Cross Ref.)] }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=[DEU=Referenzart;
                                                              ENU=Cross-Reference Type];
                                                   OptionCaptionML=[DEU=" ,Debitor,Kreditor,Barcode";
                                                                    ENU=" ,Customer,Vendor,Bar Code"];
                                                   OptionString=[ ,Customer,Vendor,Bar Code] }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=[DEU=Referenzartennr.;
                                                              ENU=Cross-Reference Type No.] }
    { 5709;   ;Item Category Code  ;Code10        ;TableRelation="Item Category";
                                                   CaptionML=[DEU=Artikelkategoriencode;
                                                              ENU=Item Category Code] }
    { 5710;   ;Nonstock            ;Boolean       ;AccessByPermission=TableData 5718=R;
                                                   CaptionML=[DEU=Katalogartikel;
                                                              ENU=Nonstock];
                                                   Editable=No }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD(Type,Type::Item);
                                                                CheckAssocPurchOrder(FIELDCAPTION(Type));

                                                                IF PurchasingCode.GET("Purchasing Code") THEN BEGIN
                                                                  "Drop Shipment" := PurchasingCode."Drop Shipment";
                                                                  "Special Order" := PurchasingCode."Special Order";
                                                                  IF "Drop Shipment" OR "Special Order" THEN BEGIN
                                                                    TESTFIELD("Qty. to Asm. to Order (Base)",0);
                                                                    CALCFIELDS("Reserved Qty. (Base)");
                                                                    TESTFIELD("Reserved Qty. (Base)",0);
                                                                    ReserveSalesLine.VerifyChange(Rec,xRec);

                                                                    IF (Quantity <> 0) AND (Quantity = "Quantity Shipped") THEN
                                                                      ERROR(SalesLineCompletelyShippedErr);
                                                                    Reserve := Reserve::Never;
                                                                    VALIDATE(Quantity,Quantity);
                                                                    IF "Drop Shipment" THEN BEGIN
                                                                      EVALUATE("Outbound Whse. Handling Time",'<0D>');
                                                                      EVALUATE("Shipping Time",'<0D>');
                                                                      UpdateDates;
                                                                      "Bin Code" := '';
                                                                    END;
                                                                  END ELSE
                                                                    SetReserveWithoutPurchasingCode;
                                                                END ELSE BEGIN
                                                                  "Drop Shipment" := FALSE;
                                                                  "Special Order" := FALSE;
                                                                  SetReserveWithoutPurchasingCode;
                                                                END;

                                                                IF ("Purchasing Code" <> xRec."Purchasing Code") AND
                                                                   (NOT "Drop Shipment") AND
                                                                   ("Drop Shipment" <> xRec."Drop Shipment")
                                                                THEN BEGIN
                                                                  IF "Location Code" = '' THEN BEGIN
                                                                    IF InvtSetup.GET THEN
                                                                      "Outbound Whse. Handling Time" := InvtSetup."Outbound Whse. Handling Time";
                                                                  END ELSE
                                                                    IF Location.GET("Location Code") THEN
                                                                      "Outbound Whse. Handling Time" := Location."Outbound Whse. Handling Time";
                                                                  IF ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                    "Shipping Time" := ShippingAgentServices."Shipping Time"
                                                                  ELSE BEGIN
                                                                    GetSalesHeader;
                                                                    "Shipping Time" := SalesHeader."Shipping Time";
                                                                  END;
                                                                  UpdateDates;
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[DEU=Einkaufscode;
                                                              ENU=Purchasing Code] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[DEU=Produktgruppencode;
                                                              ENU=Product Group Code] }
    { 5713;   ;Special Order       ;Boolean       ;AccessByPermission=TableData 223=R;
                                                   CaptionML=[DEU=Spezialauftrag;
                                                              ENU=Special Order];
                                                   Editable=No }
    { 5714;   ;Special Order Purchase No.;Code20  ;TableRelation=IF (Special Order=CONST(Yes)) "Purchase Header".No. WHERE (Document Type=CONST(Order));
                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[DEU=Spezialauftrag-Bestellnr.;
                                                              ENU=Special Order Purchase No.] }
    { 5715;   ;Special Order Purch. Line No.;Integer;
                                                   TableRelation=IF (Special Order=CONST(Yes)) "Purchase Line"."Line No." WHERE (Document Type=CONST(Order),
                                                                                                                                 Document No.=FIELD(Special Order Purchase No.));
                                                   AccessByPermission=TableData 223=R;
                                                   CaptionML=[DEU=Spezialauftrag-Eink.-Zeilennr.;
                                                              ENU=Special Order Purch. Line No.] }
    { 5749;   ;Whse. Outstanding Qty.;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding" WHERE (Source Type=CONST(37),
                                                                                                                       Source Subtype=FIELD(Document Type),
                                                                                                                       Source No.=FIELD(Document No.),
                                                                                                                       Source Line No.=FIELD(Line No.)));
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[DEU=Lagerrestbestellmenge;
                                                              ENU=Whse. Outstanding Qty.];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5750;   ;Whse. Outstanding Qty. (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Shipment Line"."Qty. Outstanding (Base)" WHERE (Source Type=CONST(37),
                                                                                                                              Source Subtype=FIELD(Document Type),
                                                                                                                              Source No.=FIELD(Document No.),
                                                                                                                              Source Line No.=FIELD(Line No.)));
                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[DEU=Lagerrestbestellmenge (Basis);
                                                              ENU=Whse. Outstanding Qty. (Base)];
                                                   DecimalPlaces=0:5;
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 5752;   ;Completely Shipped  ;Boolean       ;CaptionML=[DEU=Komplettlieferung (Ausgang);
                                                              ENU=Completely Shipped];
                                                   Editable=No }
    { 5790;   ;Requested Delivery Date;Date       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                //TOPAS 07.06.17 ST - Deaktiviert, da der Kunde teilweise vorzieht und diese Meldung dann eher behindert +
                                                                {
                                                                IF ("Requested Delivery Date" <> xRec."Requested Delivery Date") AND
                                                                   ("Promised Delivery Date" <> 0D)
                                                                THEN
                                                                  ERROR(
                                                                    Text028,
                                                                    FIELDCAPTION("Requested Delivery Date"),
                                                                    FIELDCAPTION("Promised Delivery Date"));
                                                                }
                                                                //TOPAS -

                                                                IF "Requested Delivery Date" <> 0D THEN
                                                                  VALIDATE("Planned Delivery Date","Requested Delivery Date")
                                                                ELSE BEGIN
                                                                  GetSalesHeader;
                                                                  VALIDATE("Shipment Date",SalesHeader."Shipment Date");
                                                                END;

                                                                //TOPAS 12.02.09 ST - Warenausgangsdatum wird mit dem Gewnschten Lieferdatum gleichgesetzt +
                                                                IF "Promised Delivery Date" <> 0D THEN
                                                                  VALIDATE("Shipment Date","Promised Delivery Date");
                                                                //TOPAS -
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[DEU=Gewnschtes Lieferdatum;
                                                              ENU=Requested Delivery Date] }
    { 5791;   ;Promised Delivery Date;Date        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Promised Delivery Date" <> 0D THEN
                                                                  VALIDATE("Planned Delivery Date","Promised Delivery Date")
                                                                ELSE
                                                                  VALIDATE("Requested Delivery Date");
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[DEU=Zugesagtes Lieferdatum;
                                                              ENU=Promised Delivery Date] }
    { 5792;   ;Shipping Time       ;DateFormula   ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Drop Shipment" THEN
                                                                  DateFormularZero("Shipping Time",FIELDNO("Shipping Time"),FIELDCAPTION("Shipping Time"));
                                                                UpdateDates;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[DEU=Transportzeit;
                                                              ENU=Shipping Time] }
    { 5793;   ;Outbound Whse. Handling Time;DateFormula;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Drop Shipment" THEN
                                                                  DateFormularZero("Outbound Whse. Handling Time",
                                                                    FIELDNO("Outbound Whse. Handling Time"),FIELDCAPTION("Outbound Whse. Handling Time"));
                                                                UpdateDates;
                                                              END;

                                                   AccessByPermission=TableData 14=R;
                                                   CaptionML=[DEU=Ausgeh. Lagerdurchlaufzeit;
                                                              ENU=Outbound Whse. Handling Time] }
    { 5794;   ;Planned Delivery Date;Date         ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Planned Delivery Date" <> 0D THEN BEGIN
                                                                  PlannedDeliveryDateCalculated := TRUE;

                                                                  IF FORMAT("Shipping Time") <> '' THEN
                                                                    VALIDATE("Planned Shipment Date",CalcPlannedDeliveryDate(FIELDNO("Planned Delivery Date")))
                                                                  ELSE
                                                                    VALIDATE("Planned Shipment Date",CalcPlannedShptDate(FIELDNO("Planned Delivery Date")));

                                                                  IF "Planned Shipment Date" > "Planned Delivery Date" THEN
                                                                    "Planned Delivery Date" := "Planned Shipment Date";
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[DEU=Geplantes Lieferdatum;
                                                              ENU=Planned Delivery Date] }
    { 5795;   ;Planned Shipment Date;Date         ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Planned Shipment Date" <> 0D THEN BEGIN
                                                                  PlannedShipmentDateCalculated := TRUE;

                                                                  IF FORMAT("Outbound Whse. Handling Time") <> '' THEN
                                                                    VALIDATE(
                                                                      "Shipment Date",
                                                                      CalendarMgmt.CalcDateBOC2(
                                                                        FORMAT("Outbound Whse. Handling Time"),
                                                                        "Planned Shipment Date",
                                                                        CalChange."Source Type"::Location,
                                                                        "Location Code",
                                                                        '',
                                                                        CalChange."Source Type"::"Shipping Agent",
                                                                        "Shipping Agent Code",
                                                                        "Shipping Agent Service Code",
                                                                        FALSE))
                                                                  ELSE
                                                                    VALIDATE(
                                                                      "Shipment Date",
                                                                      CalendarMgmt.CalcDateBOC(
                                                                        FORMAT(FORMAT('')),
                                                                        "Planned Shipment Date",
                                                                        CalChange."Source Type"::"Shipping Agent",
                                                                        "Shipping Agent Code",
                                                                        "Shipping Agent Service Code",
                                                                        CalChange."Source Type"::Location,
                                                                        "Location Code",
                                                                        '',
                                                                        FALSE));
                                                                END;
                                                              END;

                                                   AccessByPermission=TableData 99000880=R;
                                                   CaptionML=[DEU=Geplantes Warenausgangsdatum;
                                                              ENU=Planned Shipment Date] }
    { 5796;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Shipping Agent Code" <> xRec."Shipping Agent Code" THEN
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[DEU=Zustellercode;
                                                              ENU=Shipping Agent Code] }
    { 5797;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE (Shipping Agent Code=FIELD(Shipping Agent Code));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                IF "Shipping Agent Service Code" <> xRec."Shipping Agent Service Code" THEN
                                                                  EVALUATE("Shipping Time",'<>');

                                                                IF "Drop Shipment" THEN BEGIN
                                                                  EVALUATE("Shipping Time",'<0D>');
                                                                  UpdateDates;
                                                                END ELSE
                                                                  IF ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code") THEN
                                                                    "Shipping Time" := ShippingAgentServices."Shipping Time"
                                                                  ELSE BEGIN
                                                                    GetSalesHeader;
                                                                    "Shipping Time" := SalesHeader."Shipping Time";
                                                                  END;

                                                                IF ShippingAgentServices."Shipping Time" <> xRec."Shipping Time" THEN
                                                                  VALIDATE("Shipping Time","Shipping Time");
                                                              END;

                                                   AccessByPermission=TableData 5790=R;
                                                   CaptionML=[DEU=Zustellertransportartencode;
                                                              ENU=Shipping Agent Service Code] }
    { 5800;   ;Allow Item Charge Assignment;Boolean;
                                                   InitValue=Yes;
                                                   OnValidate=BEGIN
                                                                CheckItemChargeAssgnt;
                                                              END;

                                                   AccessByPermission=TableData 5800=R;
                                                   CaptionML=[DEU=Artikel Zu-/Abschlagszuw. zul.;
                                                              ENU=Allow Item Charge Assignment] }
    { 5801;   ;Qty. to Assign      ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Sales)"."Qty. to Assign" WHERE (Document Type=FIELD(Document Type),
                                                                                                                            Document No.=FIELD(Document No.),
                                                                                                                            Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[DEU=Menge fr Zuweisung;
                                                              ENU=Qty. to Assign];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5802;   ;Qty. Assigned       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Item Charge Assignment (Sales)"."Qty. Assigned" WHERE (Document Type=FIELD(Document Type),
                                                                                                                           Document No.=FIELD(Document No.),
                                                                                                                           Document Line No.=FIELD(Line No.)));
                                                   CaptionML=[DEU=Zugewiesene Menge;
                                                              ENU=Qty. Assigned];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5803;   ;Return Qty. to Receive;Decimal     ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF (CurrFieldNo <> 0) AND
                                                                   (Type = Type::Item) AND
                                                                   ("Return Qty. to Receive" <> 0) AND
                                                                   (NOT "Drop Shipment")
                                                                THEN
                                                                  CheckWarehouse;

                                                                IF "Return Qty. to Receive" = Quantity - "Return Qty. Received" THEN
                                                                  InitQtyToReceive
                                                                ELSE BEGIN
                                                                  "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");
                                                                  InitQtyToInvoice;
                                                                END;
                                                                IF ("Return Qty. to Receive" * Quantity < 0) OR
                                                                   (ABS("Return Qty. to Receive") > ABS("Outstanding Quantity")) OR
                                                                   (Quantity * "Outstanding Quantity" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text020,
                                                                    "Outstanding Quantity");
                                                                IF ("Return Qty. to Receive (Base)" * "Quantity (Base)" < 0) OR
                                                                   (ABS("Return Qty. to Receive (Base)") > ABS("Outstanding Qty. (Base)")) OR
                                                                   ("Quantity (Base)" * "Outstanding Qty. (Base)" < 0)
                                                                THEN
                                                                  ERROR(
                                                                    Text021,
                                                                    "Outstanding Qty. (Base)");

                                                                IF (CurrFieldNo <> 0) AND (Type = Type::Item) AND ("Return Qty. to Receive" > 0) THEN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                              END;

                                                   AccessByPermission=TableData 6660=R;
                                                   CaptionML=[DEU=Menge akt. Rcksendung;
                                                              ENU=Return Qty. to Receive];
                                                   DecimalPlaces=0:5 }
    { 5804;   ;Return Qty. to Receive (Base);Decimal;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE("Return Qty. to Receive","Return Qty. to Receive (Base)");
                                                              END;

                                                   CaptionML=[DEU=Menge akt. Rcksendung (Basis);
                                                              ENU=Return Qty. to Receive (Base)];
                                                   DecimalPlaces=0:5 }
    { 5805;   ;Return Qty. Rcd. Not Invd.;Decimal ;CaptionML=[DEU=Lief. n. fakt. Rcks.-Menge;
                                                              ENU=Return Qty. Rcd. Not Invd.];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5806;   ;Ret. Qty. Rcd. Not Invd.(Base);Decimal;
                                                   CaptionML=[DEU=Lief.n.fak. Rcks.-Mge.(Basis);
                                                              ENU=Ret. Qty. Rcd. Not Invd.(Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5807;   ;Return Rcd. Not Invd.;Decimal      ;OnValidate=VAR
                                                                Currency2@1000 : Record 4;
                                                              BEGIN
                                                                GetSalesHeader;
                                                                Currency2.InitRoundingPrecision;
                                                                IF SalesHeader."Currency Code" <> '' THEN
                                                                  "Return Rcd. Not Invd. (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        GetDate,"Currency Code",
                                                                        "Return Rcd. Not Invd.",SalesHeader."Currency Factor"),
                                                                      Currency2."Amount Rounding Precision")
                                                                ELSE
                                                                  "Return Rcd. Not Invd. (LCY)" :=
                                                                    ROUND("Return Rcd. Not Invd.",Currency2."Amount Rounding Precision");
                                                              END;

                                                   CaptionML=[DEU=Lief. n. fakt. Rcks.-Betr.;
                                                              ENU=Return Rcd. Not Invd.];
                                                   Editable=No;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 5808;   ;Return Rcd. Not Invd. (LCY);Decimal;CaptionML=[DEU=Lief. n. fak. Rcks.-Betr.(MW);
                                                              ENU=Return Rcd. Not Invd. (LCY)];
                                                   Editable=No;
                                                   AutoFormatType=1 }
    { 5809;   ;Return Qty. Received;Decimal       ;AccessByPermission=TableData 6660=R;
                                                   CaptionML=[DEU=Bereits gelief. Rcks.-Menge;
                                                              ENU=Return Qty. Received];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5810;   ;Return Qty. Received (Base);Decimal;CaptionML=[DEU=Ber. gel. Rcks.-Menge (Basis);
                                                              ENU=Return Qty. Received (Base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5811;   ;Appl.-from Item Entry;Integer      ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record 32;
                                                              BEGIN
                                                                IF "Appl.-from Item Entry" <> 0 THEN BEGIN
                                                                  CheckApplFromItemLedgEntry(ItemLedgEntry);
                                                                  VALIDATE("Unit Cost (LCY)",CalcUnitCost(ItemLedgEntry));
                                                                END;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-from Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=[DEU=Ausgegl. von Artikelposten;
                                                              ENU=Appl.-from Item Entry];
                                                   MinValue=0 }
    { 5909;   ;BOM Item No.        ;Code20        ;TableRelation=Item;
                                                   CaptionML=[DEU=Fert.-Stckliste Artikelnr.;
                                                              ENU=BOM Item No.] }
    { 6600;   ;Return Receipt No.  ;Code20        ;CaptionML=[DEU=Rcksendungsnr.;
                                                              ENU=Return Receipt No.];
                                                   Editable=No }
    { 6601;   ;Return Receipt Line No.;Integer    ;CaptionML=[DEU=Rcksendungszeilennr.;
                                                              ENU=Return Receipt Line No.];
                                                   Editable=No }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   OnValidate=BEGIN
                                                                ValidateReturnReasonCode(FIELDNO("Return Reason Code"));
                                                              END;

                                                   CaptionML=[DEU=Reklamationsgrundcode;
                                                              ENU=Return Reason Code] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[DEU=Zeilenrabatt zulassen;
                                                              ENU=Allow Line Disc.] }
    { 7002;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   OnValidate=BEGIN
                                                                IF Type = Type::Item THEN
                                                                  UpdateUnitPrice(FIELDNO("Customer Disc. Group"))
                                                              END;

                                                   CaptionML=[DEU=Debitorenrabattgruppe;
                                                              ENU=Customer Disc. Group] }
    { 50000;  ;Artikelnr. 2        ;Code40        ;Description=TOPAS,ST 15.04.08 }
    { 50001;  ;Endkunde            ;Text50        ;OnValidate=VAR
                                                                Endkunden@1140000 : Record 50007;
                                                              BEGIN
                                                                //TOPAS 30.05.08 ST +
                                                                IF Endkunde = '' THEN
                                                                  "Endkundennr." := ''
                                                                ELSE BEGIN
                                                                  IF Endkunde <> '' THEN BEGIN
                                                                    Endkunden.RESET;
                                                                    Endkunden.SETFILTER(Art,'%1',Endkunden.Art::Endkunde);
                                                                    Endkunden.SETFILTER("Debitornr.","Sell-to Customer No.");
                                                                    IF Endkunden.FINDFIRST THEN BEGIN
                                                                      REPEAT
                                                                        IF Endkunde = Endkunden.Endkundenname THEN BEGIN
                                                                          VALIDATE("Endkundennr.",Endkunden."Endkundennr.");
                                                                          EXIT;
                                                                        END;
                                                                      UNTIL Endkunden.NEXT = 0;
                                                                    END;
                                                                  END;
                                                                END;
                                                                //TOPAS -
                                                              END;

                                                   OnLookup=VAR
                                                              Debitor@1140000 : Record 18;
                                                              Endkunden@1140001 : Record 50007;
                                                            BEGIN
                                                              //TOPAS 19.05.08 ST +
                                                              IF "Sell-to Customer No." = '' THEN
                                                                ERROR(Text50002);
                                                              IF (Customer.GET("Sell-to Customer No.")) AND (Customer."Endkunde w/Bestcker") = FALSE THEN
                                                                ERROR(Text50003)
                                                              ELSE BEGIN
                                                                Endkunden.SETFILTER(Art,'%1',Endkunden.Art::Endkunde);
                                                                Endkunden.SETFILTER("Debitornr.","Sell-to Customer No.");
                                                                PosFilter:= ('Debitornr.=CONST(' + "Sell-to Customer No." + '),'+
                                                                             'Art=CONST(Endkunde),' +
                                                                             'Endkundennr.=CONST(' + "Endkundennr." + ')');
                                                                Endkunden.SETPOSITION(PosFilter);
                                                                IF PAGE.RUNMODAL(50003,Endkunden) = ACTION::LookupOK THEN BEGIN
                                                                  Endkunde := Endkunden.Endkundenname;
                                                                  VALIDATE("Endkundennr.",Endkunden."Endkundennr.");
                                                                END;
                                                              END;
                                                              //TOPAS -
                                                            END;

                                                   Description=TOPAS,ST 17.04.08 }
    { 50007;  ;Manufacturer Code   ;Code10        ;TableRelation=Manufacturer;
                                                   CaptionML=[DEU=Herstellercode;
                                                              ENU=Manufacturer Code];
                                                   Description=TOPAS }
    { 50009;  ;DC-Preis (MW)       ;Decimal       ;Description=TOPAS }
    { 50010;  ;DC-Preis (W„hrung)  ;Decimal       ;Description=TOPAS }
    { 50011;  ;Handlingskosten %   ;Decimal       ;Description=007 }
    { 50012;  ;VK-Preis (EKW)      ;Decimal       ;Description=007 }
    { 50013;  ;DC-Preis (EKW)      ;Decimal       ;OnValidate=VAR
                                                                Quotes@1000000000 : Record 50014;
                                                              BEGIN
                                                                //TOPAS 24.10.16 ST +
                                                                IF Type = Type::Item THEN BEGIN
                                                                  GetSalesHeader;
                                                                  GetItem;
                                                                  {
                                                                  IF (Einkaufsw„hrungscode='') THEN BEGIN
                                                                    VALIDATE(Einkaufsw„hrungscode,Item.Einkaufsw„hrung);
                                                                    MODIFY(TRUE);
                                                                  END;
                                                                  }
                                                                  IF SalesHeader."Currency Code" = '' THEN BEGIN
                                                                    IF Einkaufsw„hrungscode = '' THEN
                                                                      "DC-Preis (W„hrung)" := "DC-Preis (EKW)"
                                                                    ELSE BEGIN
                                                                      Currency3.GET(Einkaufsw„hrungscode);
                                                                      Currency3.TESTFIELD("Unit-Amount Rounding Precision");
                                                                      "DC-Preis (W„hrung)" := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(WORKDATE,Einkaufsw„hrungscode,
                                                                                                  "DC-Preis (EKW)",Einkaufsw„hrungsfaktor),Currency3."Unit-Amount Rounding Precision");
                                                                    END;
                                                                    "DC-Preis (MW)" := "DC-Preis (W„hrung)";
                                                                  END ELSE BEGIN
                                                                    IF Einkaufsw„hrungscode = '' THEN
                                                                      "DC-Preis (MW)" := "DC-Preis (EKW)"
                                                                    ELSE BEGIN
                                                                      Currency3.GET(Einkaufsw„hrungscode);
                                                                      Currency3.TESTFIELD("Unit-Amount Rounding Precision");
                                                                      "DC-Preis (MW)" := ROUND(CurrExchRate.ExchangeAmtFCYToLCY(WORKDATE,Einkaufsw„hrungscode,
                                                                                             "DC-Preis (EKW)",Einkaufsw„hrungsfaktor),Currency3."Unit-Amount Rounding Precision");
                                                                    END;
                                                                    "DC-Preis (W„hrung)" := ROUND(CurrExchRate.ExchangeAmtLCYToFCY(WORKDATE,SalesHeader."Currency Code",
                                                                                                "DC-Preis (MW)",SalesHeader."Currency Factor"),Currency."Unit-Amount Rounding Precision");
                                                                  END;

                                                                  //VALIDATE("Unit Cost (LCY)","DC-Preis (MW)" * ("Handlingskosten %" / 100+1)*(Item."Zollsatz %" / 100+1));
                                                                  VALIDATE("Unit Cost (LCY)",("DC-Preis (EKW)" / Einkaufsw„hrungsfaktor) * ("Handlingskosten %" / 100+1) * (Item."Zollsatz %" / 100+1));
                                                                  "Unit Cost (LCY)" := ROUND("Unit Cost (LCY)",0.00001);

                                                                  //TOPAS 19.03.19 ST - neue Berechnung bzgl. alte System Preislisten Version
                                                                  IF SalesHeader."Preislisten Kalkulation" = SalesHeader."Preislisten Kalkulation"::alt THEN BEGIN
                                                                    CLEAR(EKStaffel);
                                                                    EKStaffel.SETRANGE("Item No.","No.");
                                                                    EKStaffel.SETRANGE("Currency Code",Einkaufsw„hrungscode);
                                                                    EKStaffel.SETFILTER("Minimum Quantity",'<=%1',"Quantity (Base)");
                                                                    EKStaffel.SETFILTER("Ending Date",'>=%1',WORKDATE);
                                                                    IF EKStaffel.FINDFIRST THEN ;
                                                                  END ELSE BEGIN
                                                                  //alte Berechnung
                                                                    CLEAR(EKStaffel);
                                                                    EKStaffel.SETRANGE("Item No.", "No.");
                                                                    EKStaffel.SETRANGE("Currency Code",Einkaufsw„hrungscode);
                                                                    EKStaffel.SETFILTER("Minimum Quantity",'<=%1', "Quantity (Base)");
                                                                    IF EKStaffel.FINDLAST THEN ;
                                                                  END;

                                                                  IF ("DC-Preis (EKW)" < EKStaffel."Direct Unit Cost") AND ("DC-Preis (EKW)" <> xRec."DC-Preis (EKW)") AND ("DC-Preis (EKW)" <> 0) THEN BEGIN
                                                                    IF "Quotenr." = '' THEN BEGIN
                                                                      Quotes.INIT;
                                                                      Quotes.INSERT(TRUE);
                                                                      Quotes.VALIDATE(Herstellercode,Item."Manufacturer Code");
                                                                      Quotes.VALIDATE("Debitorennr.","Sell-to Customer No.");
                                                                      Quotes.VALIDATE("Artikelnr.","No.");
                                                                      Quotes.Quotepreis := "DC-Preis (EKW)";
                                                                      Quotes.Quotemenge := Quantity;
                                                                      Quotes.W„hrungscode := Einkaufsw„hrungscode;
                                                                      Quotes.MODIFY;
                                                                      COMMIT;
                                                                      PAGE.RUNMODAL(50010, Quotes);
                                                                      Quotes.GET(Quotes."Quotenr.");
                                                                    END ELSE
                                                                      Quotes.GET("Quotenr.");

                                                                    IF "DC-Preis (EKW)" <> Quotes.Quotepreis THEN
                                                                      MESSAGE(Text50041,"DC-Preis (EKW)",Quotes.Quotepreis);
                                                                    IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                      //IF Quotes.Quotesystem = Quotes.Quotesystem::"1" THEN
                                                                      IF Quotes.Quotesystem = 'SHIP&DEBIT' THEN BEGIN   //TB 01.04.2008
                                                                        IF Quotes."Quotenr. Hersteller" = '' THEN
                                                                          Quotes.TESTFIELD(Quotes.Genehmigungstext);
                                                                        Quotes.CALCFIELDS("Restmenge in Auftrag", "Menge in VK-Rechnung");
                                                                        IF (Quotes."Menge in VK-Rechnung" + Quotes."Restmenge in Auftrag"+Quantity) > Quotes.Quotemenge THEN
                                                                          ERROR(Text50040,Quotes."Quotenr.",Quotes.Quotemenge,"Document No.","Line No.");
                                                                      END;
                                                                    END;
                                                                    "Quotenr." := Quotes."Quotenr.";
                                                                    "Quote Bonus" := Quotes."Quote Bonusabrechnung";
                                                                  END;
                                                                END;

                                                                IF "Unit Price" <> 0 THEN
                                                                  AktualisiereKalkulation;
                                                                //TOPAS -
                                                              END;

                                                   DecimalPlaces=0:5;
                                                   Description=TOPAS }
    { 50014;  ;VK-Preis (MW)       ;Decimal       ;Description=007 }
    { 50050;  ;Quotenr.            ;Code10        ;TableRelation=Quotedaten.Quotenr. WHERE (Herstellercode=FIELD(Manufacturer Code),
                                                                                            Artikelnr.=FIELD(No.));
                                                   OnValidate=BEGIN
                                                                //TOPAS 25.06.10 ST +
                                                                TESTFIELD(Quantity);

                                                                IF "Quantity Invoiced" = Quantity THEN
                                                                  ERROR(Text50042);

                                                                IF (Quotes2.GET("Quotenr.")) AND (Quotes2.Erledigtstatus = Quotes2.Erledigtstatus::"Erledigt ") THEN
                                                                  ERROR(Text50043,Quotes2."Quotenr.");

                                                                IF (Rec."Quotenr." = '') AND (xRec."Quotenr." <> '') THEN BEGIN
                                                                  "DC-Preis (EKW)" := 0;
                                                                  VALIDATE(Quantity);
                                                                  MESSAGE(Text50044,"DC-Preis (EKW)");
                                                                END;

                                                                IF Quotes2.GET("Quotenr.") THEN
                                                                  VALIDATE("DC-Preis (EKW)",Quotes2.Quotepreis)
                                                                ELSE
                                                                  Quotes2.INIT;

                                                                //IF Quotes2.Quotesystem = Quotes2.Quotesystem::"1" THEN
                                                                IF Quotes2.Quotesystem = 'SHIP&DEBIT' THEN BEGIN   //TB 01.04.2008
                                                                  IF Quotes2."Quotenr. Hersteller" = '' THEN
                                                                    Quotes2.TESTFIELD(Genehmigungstext);
                                                                  Quotes2.CALCFIELDS("Restmenge in Auftrag","Menge in VK-Rechnung");
                                                                  IF (Quotes2.Quotemenge - (Quotes2."Menge in VK-Rechnung" + Quotes2."Restmenge in Auftrag")) < Quantity THEN
                                                                    ERROR(Text50040,Quotes2."Quotenr.",Quotes2.Quotemenge,"Document No.","DC-Preis (MW)");
                                                                END;
                                                                //TOPAS -
                                                              END;

                                                   OnLookup=BEGIN
                                                              //TOPAS 25.06.10 ST +
                                                              IF Type <> Type::Item THEN
                                                                EXIT;

                                                              Quotes2.SETRANGE("Artikelnr.", "No.");
                                                              Quotes2.SETRANGE(Herstellercode,"Manufacturer Code");
                                                              Quotes2.SETRANGE(W„hrungscode,Einkaufsw„hrungscode);
                                                              //TOPAS 27.05.10 ST - Setzt nun bei vorhandener Quotenr. den Cursor an die richtige Stelle auf der Quotebersicht +
                                                              IF "Quotenr." <> '' THEN BEGIN
                                                                  Quotes2.GET("Quotenr.");
                                                                END;
                                                              IF PAGE.RUNMODAL(PAGE::"Quotedaten šbersicht",Quotes2) = ACTION::LookupOK THEN BEGIN
                                                                IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                  //IF Quotes2.Quotesystem=Quotes2.Quotesystem::"1" THEN
                                                                  IF Quotes2.Quotesystem = 'SHIP&DEBIT' THEN BEGIN //TB 01.04.2008
                                                                    IF Quotes2."Quotenr. Hersteller" = '' THEN
                                                                      Quotes2.TESTFIELD(Genehmigungstext);
                                                                    Quotes2.CALCFIELDS("Restmenge in Auftrag","Menge in VK-Rechnung");
                                                                    IF (Quotes2.Quotemenge - (Quotes2."Menge in VK-Rechnung" + Quotes2."Restmenge in Auftrag")) < Quantity THEN
                                                                      ERROR(Text50040,Quotes2."Quotenr.",Quotes2.Quotemenge,"Document No.","DC-Preis (MW)");
                                                                  END;
                                                                END;

                                                                //TOPAS 27.05.10 ST
                                                                IF (Quotes2.Erledigtstatus = Quotes2.Erledigtstatus::"Erledigt ") THEN
                                                                  ERROR(Text50043,Quotes2."Quotenr.");
                                                                VALIDATE("Quotenr.",Quotes2."Quotenr.");
                                                                "Quote Bonus" := Quotes2."Quote Bonusabrechnung";
                                                                VALIDATE("DC-Preis (EKW)",Quotes2.Quotepreis)
                                                              END;
                                                              //TOPAS -
                                                            END;

                                                   Description=TOPAS }
    { 50062;  ;Endkundennr.        ;Code20        ;OnValidate=VAR
                                                                Endkunden@1140000 : Record 50007;
                                                              BEGIN
                                                                //TOPAS 30.05.08 ST - Zusatz 29.11.10 ST - Vergleich Betreuer- und Verk„ufercode +
                                                                IF "Endkundennr." = '' THEN
                                                                  Endkunde := ''
                                                                ELSE BEGIN
                                                                  Endkunden.RESET;
                                                                  Endkunden.SETRANGE(Art,Endkunden.Art::Endkunde);
                                                                  Endkunden.SETRANGE("Debitornr.","Sell-to Customer No.");
                                                                  Endkunden.SETRANGE("Endkundennr.","Endkundennr.");
                                                                  IF Endkunden.FINDFIRST THEN BEGIN
                                                                    IF "Endkundennr." = Endkunden."Endkundennr." THEN BEGIN
                                                                      Endkunde := Endkunden.Endkundenname;
                                                                      //Bei Bestckern wird der Auftragskopf entsprechend des Endkunden im Verk„ufer- und Betreuercode angepasst
                                                                      Verkaufskopf.RESET;
                                                                      Verkaufskopf.SETRANGE("No.","Document No.");
                                                                      IF Verkaufskopf.FINDFIRST THEN BEGIN
                                                                        IF (Contact.GET("Endkundennr.")) AND ((Contact."Salesperson Code" <> Verkaufskopf."Salesperson Code")
                                                                        OR (Contact."Betreuer Innendienst" <> Verkaufskopf."Betreuer Innendienst")
                                                                        OR (Contact.Teams <> Verkaufskopf.Teams ) OR (Contact."Territory Code" <> Verkaufskopf."Territory Code"))
                                                                        AND ((Contact."Betreuer Innendienst" <> 'MULTI') OR (Contact."Salesperson Code" <> 'MULTI')) THEN BEGIN
                                                                          Verkaufskopf.VALIDATE("Salesperson Code",Contact."Salesperson Code");
                                                                          Verkaufskopf.VALIDATE("Betreuer Innendienst",Contact."Betreuer Innendienst");
                                                                          Verkaufskopf.VALIDATE(Teams,Contact.Teams);
                                                                          Verkaufskopf.VALIDATE("Territory Code",Contact."Territory Code");
                                                                          Verkaufskopf.MODIFY(TRUE);
                                                                          Verkaufskopf.TESTFIELD("Salesperson Code");
                                                                          Verkaufskopf.TESTFIELD("Betreuer Innendienst");
                                                                          MESSAGE(Text50005,Endkunde,Contact."Betreuer Innendienst",Contact."Salesperson Code",Contact.Teams,Contact."Territory Code");
                                                                        END;
                                                                      END;
                                                                    END;
                                                                  END ELSE
                                                                    ERROR(Text50006);
                                                                END;
                                                              END;

                                                   OnLookup=VAR
                                                              Endkunden@1140001 : Record 50007;
                                                            BEGIN
                                                              //TOPAS 30.05.08 ST
                                                              IF "Sell-to Customer No." = '' THEN
                                                                ERROR(Text50002);
                                                              IF Customer.GET("Sell-to Customer No.") AND (Customer."Endkunde w/Bestcker" = FALSE) THEN
                                                                ERROR(Text50003)
                                                              ELSE BEGIN
                                                                Endkunden.RESET;
                                                                Endkunden.SETFILTER(Art,'%1',Endkunden.Art::Endkunde);
                                                                Endkunden.SETFILTER("Debitornr.","Sell-to Customer No.");
                                                                PosFilter:= ('Debitornr.=CONST(' + "Sell-to Customer No." + '),' +
                                                                             'Art=CONST(Endkunde),' +
                                                                             'Endkundennr.=CONST(' + "Endkundennr." + ')');
                                                                Endkunden.SETPOSITION(PosFilter);
                                                                IF PAGE.RUNMODAL(50003,Endkunden) = ACTION::LookupOK THEN BEGIN
                                                                  Endkunde:=Endkunden.Endkundenname;
                                                                  VALIDATE("Endkundennr.",Endkunden."Endkundennr.");
                                                                END;
                                                              END;
                                                            END;

                                                   Description=TOPAS,ST 30.05.08 }
    { 50100;  ;Einkaufsw„hrungscode;Code10        ;TableRelation=Currency;
                                                   OnValidate=VAR
                                                                CurrencyDate@1000000001 : Date;
                                                              BEGIN
                                                                //TOPAS CTM, 11.11.16 ST +
                                                                GetSalesHeader;
                                                                IF Einkaufsw„hrungscode <> '' THEN BEGIN
                                                                  IF ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order"]) AND (SalesHeader."Posting Date" = 0D) THEN
                                                                    CurrencyDate := WORKDATE
                                                                  ELSE
                                                                    CurrencyDate := SalesHeader."Posting Date";
                                                                  Einkaufsw„hrungsfaktor := CurrExchRate.ExchangeRate(CurrencyDate,Einkaufsw„hrungscode);
                                                                END ELSE
                                                                  Einkaufsw„hrungsfaktor := 1;

                                                                //TOPAS 06.11.09 ST - Fr VK=USD (Kopf) und EK=JPY (Zeile) Abfrage starten, ob Haken im Feld "Nicht rechnen" gesetzt werden soll
                                                                IF "Document Type" = "Document Type"::Order THEN BEGIN
                                                                  IF (Type = Type::Item) AND (Einkaufsw„hrungscode = 'JPY') THEN BEGIN
                                                                    Verkaufskopf.RESET;
                                                                    Verkaufskopf.SETRANGE("No.","Document No.");
                                                                    IF Verkaufskopf.FINDFIRST THEN BEGIN
                                                                      IF (Verkaufskopf."Currency Code" = 'USD') AND (Verkaufskopf."Nicht rechnen" = FALSE) THEN
                                                                        IF CONFIRM(Text50004,TRUE,Verkaufskopf."No.") THEN BEGIN
                                                                          Verkaufskopf."Nicht rechnen" := TRUE;
                                                                          Verkaufskopf.MODIFY;
                                                                        END;
                                                                    END;
                                                                  END;
                                                                END;
                                                                //TOPAS -
                                                              END;

                                                   Description=TOPAS;
                                                   Editable=No }
    { 50101;  ;Einkaufsw„hrungsfaktor;Decimal     ;OnValidate=BEGIN
                                                                //TOPAS 12.06.08 ST +
                                                                IF Einkaufsw„hrungsfaktor <> xRec.Einkaufsw„hrungsfaktor THEN BEGIN
                                                                  //Žnderung auf Werte in der Optionstabelle
                                                                  OptTab.RESET;
                                                                  OptTab.SETFILTER("Tabellen ID",'%1',37);
                                                                  OptTab.SETFILTER("Feld ID",'%1',50101);
                                                                  OptTab.SETFILTER(Code,'%1|%2','JPY','USD');
                                                                  IF OptTab.FINDFIRST THEN REPEAT
                                                                    IF (Einkaufsw„hrungscode = 'JPY') AND (Einkaufsw„hrungsfaktor < OptTab.Werte) THEN
                                                                      MESSAGE(Text50061,Einkaufsw„hrungscode);
                                                                    IF (Einkaufsw„hrungscode = 'USD') AND (Einkaufsw„hrungsfaktor > OptTab.Werte) THEN
                                                                      MESSAGE(Text50061,Einkaufsw„hrungscode);
                                                                  UNTIL OptTab.NEXT = 0;

                                                                  IF Type <> Type::" " THEN BEGIN
                                                                    VALIDATE("Unit Price");
                                                                    VALIDATE("DC-Preis (EKW)");
                                                                  END;
                                                                END;
                                                                //TOPAS -
                                                              END;

                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Description=TOPAS;
                                                   Editable=Yes }
    { 50105;  ;AC_Solutionpartner  ;Code15        ;TableRelation=Optionstabelle.Code WHERE (Tabellen ID=CONST(37),
                                                                                            Feld ID=CONST(50105));
                                                   Description=TOPAS Audiocodes f. Artikel }
    { 50106;  ;System Projektinfos ;Text50        ;Description=TOPAS,ST 24.08.11 - Fr CHAMPS Zuordnung genutzt, hier Endkunde oder ACS Projekt eintragen, u.a. fr Andruck auf dem WV verwendet }
    { 50107;  ;Service bereits bestellt;Boolean   ;Description=TOPAS,ST 27.06.16 - Vermeidet evtl. Doppelbuchungen im Service Prozess (ACTS) }
    { 50110;  ;Verpackungstyp      ;Option        ;OptionString=[ ,,,Stange,,,Rolle,,,DP];
                                                   Description=TOPAS,ST 10.10.12 - Fr MAT Label Verfahren ben”tigt }
    { 50111;  ;Umverpackungsmenge  ;Decimal       ;OnValidate=BEGIN
                                                                IF Umverpackungsmenge <> "Qty. to Ship" THEN
                                                                  ERROR(Text50060,FIELDCAPTION(Umverpackungsmenge),FIELDCAPTION("Qty. to Ship"));
                                                              END;

                                                   Description=TOPAS,ST 10.10.12 - Fr MAT Label Verfahren ben”tigt }
    { 50220;  ;Kampagnennr.        ;Code20        ;OnValidate=BEGIN
                                                                //TOPAS 22.02.11 ST +
                                                                IF "Kampagnennr." <> '' THEN BEGIN
                                                                  Verkaufskopf.RESET;
                                                                  Verkaufskopf.SETRANGE("No.","Document No.");
                                                                  IF Verkaufskopf.FINDFIRST THEN BEGIN
                                                                    ProjAnsprech.RESET;
                                                                    ProjAnsprech.SETFILTER("Kontaktnr.",'%1',Verkaufskopf."Sell-to Contact No.");
                                                                    ProjAnsprech.SETFILTER("Kampagnennr.",'%1',"Kampagnennr.");
                                                                    ProjAnsprech.SETFILTER(Projektstatus,'<>%1','BEENDET');
                                                                    IF NOT ProjAnsprech.FINDFIRST THEN
                                                                      ERROR(Text50007,ProjAnsprech.TABLECAPTION,ProjAnsprech.Projektstatus,Verkaufskopf."Sell-to Contact No.","Kampagnennr.");
                                                                  END;
                                                                END;

                                                                Belege.RESET;
                                                                Belege.SETRANGE(Belegart,Belege.Belegart::Invoice);
                                                                Belege.SETRANGE("Auftragsnr.","Document No.");
                                                                Belege.SETRANGE("Auftragszeilennr.","Line No.");
                                                                IF Belege.FINDFIRST THEN
                                                                  Belege.MODIFYALL(Kampagne,"Kampagnennr.");

                                                                //22.05.12 ST - Dazugeh”rige Aufgaben werden aktualisiert
                                                                Aufgaben.RESET;
                                                                Aufgaben.SETRANGE("Belegnr.","Document No.");
                                                                Aufgaben.SETRANGE("System To-do Type",Aufgaben."System To-do Type"::Organizer);
                                                                //Aufgaben.SETFILTER(Closed,'%1',FALSE);
                                                                IF Aufgaben.FINDFIRST THEN REPEAT
                                                                  IF Aufgaben."Campaign No." = '' THEN BEGIN
                                                                    Aufgaben."Campaign No." := "Kampagnennr.";
                                                                    Aufgaben.MODIFY(TRUE);
                                                                  END ELSE BEGIN
                                                                    IF Aufgaben."Campaign No." <> "Kampagnennr." THEN BEGIN
                                                                      IF CONFIRM(Text50050,TRUE,Aufgaben."No.",Aufgaben.Description,Aufgaben."Campaign No.") THEN BEGIN
                                                                        Aufgaben."Campaign No." := "Kampagnennr.";
                                                                        Aufgaben.MODIFY(TRUE);
                                                                      END;
                                                                    END;
                                                                  END;
                                                                UNTIL Aufgaben.NEXT = 0;

                                                                //TOPAS -
                                                              END;

                                                   OnLookup=BEGIN
                                                              //TOPAS 15.10.08 ST, 22.02.11 ST - Žnderung +
                                                              Verkaufskopf.RESET;
                                                              Verkaufskopf.SETRANGE("No.","Document No.");
                                                              IF Verkaufskopf.FINDFIRST THEN BEGIN
                                                                ProjAnsprech.RESET;
                                                                ProjAnsprech.SETFILTER("Kontaktnr.",'%1',Verkaufskopf."Sell-to Contact No.");
                                                                ProjAnsprech.SETFILTER("Kampagnennr.",'<>%1','');
                                                                ProjAnsprech.SETFILTER(Projektstatus,'<>%1','BEENDET');
                                                                IF ProjAnsprech.FINDFIRST THEN BEGIN
                                                                  PosFilter:= ('Kontakt Mandantennr.=CONST(' + ProjAnsprech."Kontakt Mandantennr." + '),' +
                                                                                'Kontaktnr.=CONST(' + ProjAnsprech."Kontaktnr." + '),'+
                                                                                'Kampagnennr.=CONST(' + "Kampagnennr." + '),'+
                                                                                'Memonr.=CONST()');
                                                                  ProjAnsprech.SETPOSITION(PosFilter);
                                                                  IF PAGE.RUNMODAL(50062,ProjAnsprech) = ACTION::LookupOK THEN
                                                                      VALIDATE("Kampagnennr.",ProjAnsprech."Kampagnennr.");
                                                                END ELSE ERROR(Text50008);
                                                              END;
                                                              //TOPAS -
                                                            END;

                                                   Description=TOPAS }
    { 50255;  ;Quote Bonus         ;Boolean       ;Description=TOPAS }
    { 50257;  ;LZ_Text             ;Text30        ;Description=TOPAS,Lieferzeit als Text z.B. ca. 3-4 Wochen }
    { 50258;  ;Quote gltig bis    ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Quotedaten.Gltigkeitsdatum WHERE (Quotenr.=FIELD(Quotenr.)));
                                                   Description=TOPAS }
    { 50360;  ;Menge aus Rahmen im Auftrag;Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Quantity (Base)" WHERE (Document Type=CONST(Order),
                                                                                                         No.=FIELD(No.),
                                                                                                         Blanket Order No.=FIELD(Document No.),
                                                                                                         Blanket Order Line No.=FIELD(Line No.)));
                                                   Description=TOPAS }
    { 50361;  ;offene Menge aus Rahmen im AU;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Sales Line"."Outstanding Qty. (Base)" WHERE (Document Type=CONST(Order),
                                                                                                                 No.=FIELD(No.),
                                                                                                                 Blanket Order No.=FIELD(Document No.),
                                                                                                                 Blanket Order Line No.=FIELD(Line No.)));
                                                   Description=TOPAS }
  }
  KEYS
  {
    {    ;Document Type,Document No.,Line No.     ;SumIndexFields=Amount,Amount Including VAT,Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY);
                                                   Clustered=Yes }
    {    ;Document No.,Line No.,Document Type      }
    {    ;Document Type,Type,No.,Variant Code,Drop Shipment,Location Code,Shipment Date;
                                                   SumIndexFields=Outstanding Qty. (Base) }
    {    ;Document Type,Bill-to Customer No.,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY),Return Rcd. Not Invd. (LCY) }
    { No ;Document Type,Type,No.,Variant Code,Drop Shipment,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Location Code,Shipment Date;
                                                   SumIndexFields=Outstanding Qty. (Base) }
    { No ;Document Type,Bill-to Customer No.,Shortcut Dimension 1 Code,Shortcut Dimension 2 Code,Currency Code;
                                                   SumIndexFields=Outstanding Amount,Shipped Not Invoiced,Outstanding Amount (LCY),Shipped Not Invoiced (LCY) }
    {    ;Document Type,Blanket Order No.,Blanket Order Line No. }
    {    ;Document Type,Document No.,Location Code }
    {    ;Document Type,Shipment No.,Shipment Line No. }
    {    ;Type,No.,Variant Code,Drop Shipment,Location Code,Document Type,Shipment Date;
                                                   MaintainSQLIndex=No }
    {    ;Document Type,Sell-to Customer No.,Shipment No.;
                                                   SumIndexFields=Outstanding Amount (LCY) }
    {    ;Job Contract Entry No.                   }
    {    ;Document Type,Document No.,Qty. Shipped Not Invoiced }
    {    ;Document Type,Document No.,Type,No.      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'DEU=Sie k”nnen die Auftragszeile nicht l”schen, da sie zur Bestellung %1, Zeile %2 geh”rt.;ENU=You cannot delete the order line because it is associated with purchase order %1 line %2.';
      Text001@1001 : TextConst 'DEU=Sie k”nnen eine %1 nicht umbenennen.;ENU=You cannot rename a %1.';
      Text002@1002 : TextConst 'DEU=Sie k”nnen %1 nicht „ndern, da die Auftragszeile zur Bestellung %2, Zeile %3 geh”rt.;ENU=You cannot change %1 because the order line is associated with purchase order %2 line %3.';
      Text003@1003 : TextConst 'DEU=darf nicht weniger als %1 sein;ENU=must not be less than %1';
      Text005@1004 : TextConst 'DEU=Sie k”nnen nicht mehr als %1 Einheiten fakturieren.;ENU=You cannot invoice more than %1 units.';
      Text006@1005 : TextConst 'DEU=Sie k”nnen nicht mehr als %1 Basiseinheiten fakturieren.;ENU=You cannot invoice more than %1 base units.';
      Text007@1006 : TextConst 'DEU=Sie k”nnen nicht mehr als %1 Einheiten liefern.;ENU=You cannot ship more than %1 units.';
      Text008@1007 : TextConst 'DEU=Sie k”nnen nicht mehr als %1 Basiseinheiten liefern.;ENU=You cannot ship more than %1 base units.';
      Text009@1008 : TextConst 'DEU=" muss 0 sein, wenn %1 %2 ist.";ENU=" must be 0 when %1 is %2"';
      Text011@1010 : TextConst 'DEU=Automatische Reservierung nicht m”glich.\M”chten Sie die Artikel manuell reservieren?;ENU=Automatic reservation is not possible.\Do you want to reserve items manually?';
      Text014@1013 : TextConst 'DEU=Das %1 %2 liegt vor dem Arbeitsdatum %3;ENU=%1 %2 is before work date %3';
      Text016@1040 : TextConst 'DEU="%1 ist notwendig fr %2 = %3.";ENU="%1 is required for %2 = %3."';
      Text017@1044 : TextConst 'DEU=\Die eingegebenen Informationen werden in Logistikaktivit„ten m”glicherweise nicht bercksichtigt.;ENU=\The entered information may be disregarded by warehouse operations.';
      Text020@1019 : TextConst 'DEU=Sie k”nnen nicht mehr als %1 Einheiten zurckgeben.;ENU=You cannot return more than %1 units.';
      Text021@1020 : TextConst 'DEU=Sie k”nnen nicht mehr als %1 Basiseinheiten zurckgeben.;ENU=You cannot return more than %1 base units.';
      Text026@1025 : TextConst 'DEU=Sie k”nnen die %1 nicht „ndern, wenn der Artikel Zu-/Abschlag bereits gebucht wurde.;ENU=You cannot change %1 if the item charge has already been posted.';
      CurrExchRate@1030 : Record 330;
      SalesHeader@1031 : Record 36;
      SalesLine2@1032 : Record 37;
      TempSalesLine@1033 : Record 37;
      GLAcc@1035 : Record 15;
      Item@1036 : Record 27;
      Resource@1400 : Record 156;
      Currency@1037 : Record 4;
      ItemTranslation@1038 : Record 30;
      Res@1043 : Record 156;
      ResCost@1045 : Record 202;
      WorkType@1046 : Record 200;
      VATPostingSetup@1048 : Record 325;
      StdTxt@1049 : Record 7;
      GenBusPostingGrp@1050 : Record 250;
      GenProdPostingGrp@1051 : Record 251;
      ReservEntry@1052 : Record 337;
      UnitOfMeasure@1054 : Record 204;
      FA@1056 : Record 5600;
      ShippingAgentServices@1057 : Record 5790;
      NonstockItem@1058 : Record 5718;
      PurchasingCode@1059 : Record 5721;
      SKU@1060 : Record 5700;
      ItemCharge@1061 : Record 5800;
      ItemChargeAssgntSales@1062 : Record 5809;
      InvtSetup@1063 : Record 313;
      Location@1064 : Record 14;
      ReturnReason@1089 : Record 6635;
      ATOLink@1016 : Record 904;
      SalesSetup@1065 : Record 311;
      Reservation@1066 : Page 498;
      PriceCalcMgt@1071 : Codeunit 7000;
      ResFindUnitCost@1073 : Codeunit 220;
      CustCheckCreditLimit@1074 : Codeunit 312;
      ItemCheckAvail@1075 : Codeunit 311;
      SalesTaxCalculate@1076 : Codeunit 398;
      ReservMgt@1077 : Codeunit 99000845;
      ReservEngineMgt@1078 : Codeunit 99000831;
      ReserveSalesLine@1079 : Codeunit 99000832;
      UOMMgt@1080 : Codeunit 5402;
      AddOnIntegrMgt@1081 : Codeunit 5403;
      DimMgt@1082 : Codeunit 408;
      ItemSubstitutionMgt@1085 : Codeunit 5701;
      DistIntegration@1086 : Codeunit 5702;
      NonstockItemMgt@1087 : Codeunit 5703;
      WhseValidateSourceLine@1088 : Codeunit 5777;
      TransferExtendedText@1100 : Codeunit 378;
      JobPostLine@1097 : Codeunit 1001;
      DeferralUtilities@1026 : Codeunit 1720;
      FullAutoReservation@1092 : Boolean;
      StatusCheckSuspended@1094 : Boolean;
      HasBeenShown@1018 : Boolean;
      PlannedShipmentDateCalculated@1012 : Boolean;
      PlannedDeliveryDateCalculated@1070 : Boolean;
      Text028@1098 : TextConst 'DEU=Sie k”nnen das %1 nicht „ndern, wenn das %2 ausgefllt wurde.;ENU=You cannot change the %1 when the %2 has been filled in.';
      ItemCategory@1099 : Record 5722;
      Text029@1021 : TextConst 'DEU=muss positiv sein;ENU=must be positive';
      Text030@1042 : TextConst 'DEU=muss negativ sein;ENU=must be negative';
      Text031@1093 : TextConst 'DEU=Sie mssen entweder %1 oder %2 angeben.;ENU=You must either specify %1 or %2.';
      CalendarMgmt@1101 : Codeunit 7600;
      CalChange@1102 : Record 7602;
      Text034@1084 : TextConst 'DEU=Der Wert von Feld %1 muss fr den Artikel in der Serviceartikelgruppe eine ganze Zahl sein, falls Feld %2 im Fenster "Serviceartikelgruppen" ein H„kchen enth„lt.;ENU=The value of %1 field must be a whole number for the item included in the service item group if the %2 field in the Service Item Groups window contains a check mark.';
      Text035@1083 : TextConst 'DEU="Lager ";ENU="Warehouse "';
      Text036@1090 : TextConst 'DEU="Lagerbestand ";ENU="Inventory "';
      HideValidationDialog@1109 : Boolean;
      Text037@1009 : TextConst 'DEU=%1 kann nicht ge„ndert werden, wenn %2 gleich %3 und %4 positiv ist.;ENU=You cannot change %1 when %2 is %3 and %4 is positive.';
      Text038@1014 : TextConst 'DEU=%1 kann nicht ge„ndert werden, wenn %2 gleich %3 und %4 negativ ist.;ENU=You cannot change %1 when %2 is %3 and %4 is negative.';
      Text039@1034 : TextConst 'DEU=%1 Einheiten fr %2 %3 wurden bereits zurckgegeben. Daher k”nnen nur %4 Einheiten zurckgegeben werden.;ENU=%1 units for %2 %3 have already been returned. Therefore, only %4 units can be returned.';
      Text040@1039 : TextConst 'DEU=Zum Eingeben von %2 muss Formular %1 verwendet werden, wenn die Artikelverfolgung verwendet wird.;ENU=You must use form %1 to enter %2, if item tracking is used.';
      Text042@1055 : TextConst 'DEU=Beim Buchen wird der ausgeglichene Posten %1 zuerst ge”ffnet.;ENU=When posting the Applied to Ledger Entry %1 will be opened first';
      ShippingMoreUnitsThanReceivedErr@1047 : TextConst 'DEU=Sie k”nnen nicht mehr als die %1 Einheiten liefern, die Sie fr Belegnr. %2 erhalten haben.;ENU=You cannot ship more than the %1 units that you have received for document no. %2.';
      Text044@1103 : TextConst 'DEU=kann nicht weniger als %1 sein.;ENU=cannot be less than %1';
      Text045@1104 : TextConst 'DEU=kann nicht mehr als %1 sein.;ENU=cannot be more than %1';
      Text046@1105 : TextConst 'DEU=Sie k”nnen nicht mehr als die %1 Einheiten zurckliefern, die Sie fr %2 %3 geliefert haben.;ENU=You cannot return more than the %1 units that you have shipped for %2 %3.';
      Text047@1106 : TextConst 'DEU=muss positiv sein, wenn %1 nicht 0 ist.;ENU=must be positive when %1 is not 0.';
      TrackingBlocked@1107 : Boolean;
      Text048@1108 : TextConst 'DEU=Wenn %1 aus %2 erstellt wurde, k”nnen Sie dafr keine Artikelverfolgung verwenden.;ENU=You cannot use item tracking on a %1 created from a %2.';
      Text049@1139 : TextConst 'DEU=kann nicht %1 sein.;ENU=cannot be %1.';
      Text051@1141 : TextConst 'DEU=''%1'' kann nicht in einem Element vom Typ ''%2'' verwendet werden.;ENU=You cannot use %1 in a %2.';
      PrePaymentLineAmountEntered@1015 : Boolean;
      Text052@1022 : TextConst 'DEU=Sie k”nnen keine Artikelzeile hinzufgen, da fr den Verkaufskopf ein offener Warenausgang vorhanden und die Versandanweisung auf ''%1'' festgelegt ist.\\Fgen Sie die Artikel dem vorhandenen Warenausgang als neue Zeilen hinzu, oder legen Sie die Versandanweisung auf ''Teillieferung'' fest.;ENU=You cannot add an item line because an open warehouse shipment exists for the sales header and Shipping Advice is %1.\\You must add items as new lines to the existing warehouse shipment or change Shipping Advice to Partial.';
      Text053@1017 : TextConst 'DEU=Fr %1 (bereits versendet) wurde mindestens eine Dimension ge„ndert. Wenn die Zeile mit der ge„nderten Dimension auf Sachkonten gebucht wird, stimmt der Saldo der Betr„ge im Lagerinterimskonto nicht, wenn die Betr„ge pro Dimension angegeben werden.\\M”chten Sie die ge„nderte Dimension beibehalten?;ENU=You have changed one or more dimensions on the %1, which is already shipped. When you post the line with the changed dimension to General Ledger, amounts on the Inventory Interim account will be out of balance when reported per dimension.\\Do you want to keep the changed dimension?';
      Text054@1023 : TextConst 'DEU=Abgebrochen;ENU=Cancelled.';
      Text055@1024 : TextConst '@@@=Quantity Invoiced must not be greater than the sum of Qty. Assigned and Qty. to Assign.;DEU=''%1'' darf nicht gr”áer sein als die Summe aus %2 und %3.;ENU=%1 must not be greater than the sum of %2 and %3.';
      Text056@1011 : TextConst 'DEU=Sie k”nnen keine Artikelzeile hinzufgen, da fr den Verkaufskopf eine offene Lagerkommissionierung vorhanden und die Versandanweisung auf ''%1'' festgelegt ist.\\Buchen oder l”schen Sie zun„chst die Lagerkommissionierung, oder legen Sie die Versandanweisung auf ''Teillieferung'' fest.;ENU=You cannot add an item line because an open inventory pick exists for the Sales Header and because Shipping Advice is %1.\\You must first post or delete the inventory pick or change Shipping Advice to Partial.';
      Text057@1027 : TextConst 'DEU=muss dasselbe Vorzeichen haben wie die Lieferung;ENU=must have the same sign as the shipment';
      Text058@1028 : TextConst 'DEU=Die Menge, die Sie fakturieren m”chten, ist gr”áer als die Menge der Lieferung %1.;ENU=The quantity that you are trying to invoice is greater than the quantity in shipment %1.';
      Text059@1029 : TextConst 'DEU=muss dasselbe Vorzeichen haben wie die Rcksendung;ENU=must have the same sign as the return receipt';
      Text060@1041 : TextConst 'DEU=Die Menge, die Sie fakturieren m”chten, ist gr”áer als die Menge der Rcksendung %1.;ENU=The quantity that you are trying to invoice is greater than the quantity in return receipt %1.';
      SalesLineCompletelyShippedErr@1053 : TextConst 'DEU=Sie k”nnen den Einkaufscode fr eine vollst„ndig ausgelieferte Verkaufszeile nicht „ndern.;ENU=You cannot change the purchasing code for a sales line that has been completely shipped.';
      SalesSetupRead@1067 : Boolean;
      DeferralPostDate@1069 : Date;
      FreightLineDescriptionTxt@1068 : TextConst 'DEU=Frachtmenge;ENU=Freight Amount';
      LineDiscountPctErr@1200 : TextConst 'DEU=Der Wert im "Zeilenrabatt %" muss zwischen 0 und 100 liegen.;ENU=The value in the Line Discount % field must be between 0 and 100.';
      "***TOPAS***"@1000000000 : Integer;
      Artikel@1000000011 : Record 27;
      Quotes2@1000000001 : Record 50014;
      Text50000@1000000039 : TextConst 'DEU=Dies ist ein Military Part. Der Kunde muss ein End User Statement abgeben.\Das Formular "IDT Certificate of Enduse.docx" liegt hier:\\F:/Daten NEU/Gemeinsame Ordner/Formulare (Muster, RMA. Split usw.)/IDT';
      Text50002@1000000002 : TextConst 'DEU=Sie mssen zuerst einen Artikel anlegen, bevor Sie diese Funktion ausfhren k”nnen.';
      Text50003@1000000003 : TextConst 'DEU=Sie k”nnen diese Funktion nur bei einem Bestcker ausfhren.';
      Currency3@1000000005 : Record 4;
      EKStaffel@1000000006 : Record 7012;
      Vendor@1000000041 : Record 23;
      Rahmenrestmenge@1000000007 : Decimal;
      Vkz@1000000008 : Record 37;
      Vkz_archiv@1000000030 : Record 5108;
      Rahmenauftrag@1000000009 : Record 37;
      Text50004@1000000029 : TextConst 'DEU=Der Haken "Nicht rechnen" im Auftragskopf %1  wurde noch nicht gesetzt.\M”chten Sie diesen jetzt setzen?';
      Text50005@1000000028 : TextConst 'DEU=Die Felder Betreuer Innendienst, Verk„ufercode, Teams und Gebietscode wurden gem„á Endkunde angepasst:\\%1: %2/%3/%4/%5';
      Text50006@1000000015 : TextConst 'DEU=''Dies ist keine gltige Endkundennr. Im Feld Endkunde k”nnen Sie Freitext hinterlegen.''';
      Text50007@1000000016 : TextConst 'DEU=Kein %1 innerhalb des Filters gefunden.\\Filter: Projektstatus <> %2,Kontaktnr.: %3, Kampagnennr.:';
      Text50008@1000000017 : TextConst 'DEU=Es existieren keine aktiven Projekte.';
      Text50011@1000000026 : TextConst 'DEU=Es konnte eine Kalkulation zu diesem Artikel gefunden werden und wurde gel”scht.';
      Text50012@1000000025 : TextConst 'DEU=Diese Position wird in der Service Kalkulation in Zeile %1 verwendet. Bitte korrigieren Sie die Kalkulation manuell.';
      Text50015@1000000042 : TextConst 'DEU=Bei Artikel %1 wurde kein Artikelverfolgungscode ausgew„hlt.';
      Text50022@1000000019 : TextConst 'DEU=Diese Funktion ist nur bei Service- (SUP) oder Splicecom System Artikeln erlaubt.';
      Text50030@1000000020 : TextConst 'DEU=Da die Verpackungsmenge des Artikels %1 %2 betr„gt, wird die Menge von %3 auf %4 erh”ht. Wollen Sie den Vorgang fortsetzen ?';
      Text50031@1000000021 : TextConst 'DEU="Achtung !!  Wichtig !!    Omnivision Modul Artikel wurde ausgew„hlt => Liegt ""OK"" von OMNIVISION vor?"';
      Text50040@1000000018 : TextConst 'DEU=Fr Quote %1 wird die Quotemenge %2 in der Auftragszeile %3, DC-Preis (MW) %4 berschritten!';
      Text50041@1000000010 : TextConst 'DEU=Der DC-Preis (EKW) in H”he von %1\weicht vom Quotepreis %2 ab.';
      Text50042@1000000024 : TextConst 'DEU=Sie k”nnen die Quotenr. nicht mehr „ndern, da die Pos. bereits komplett gebucht wurde.';
      Text50043@1000000027 : TextConst 'DEU=Der Quote %1 ist bereits erledigt.';
      Text50044@1000000034 : TextConst 'DEU=Der DC-Preis (EKW) wurde auf %1 zurckgesetzt.';
      Text50050@1000000013 : TextConst 'DEU=In der Aufgabe %1 %2 wurde bereits die Projektnr. %3 eingetragen, m”chten Sie diese berschreiben?';
      Text50060@1000000012 : TextConst 'DEU=Die %1 muss exakt der Menge %2 entsprechen.';
      Kalkulation@1000000031 : Record 50027;
      Verkaufskopf@1000000033 : Record 36;
      Contact@1000000032 : Record 5050;
      OptTab@1000000014 : Record 50001;
      ProjAnsprech@1000000035 : Record 50005;
      Belege@1000000036 : Record 50010;
      Aufgaben@1000000037 : Record 5080;
      Customer@1000000022 : Record 18;
      TOPASBelegPruefungen@1000000023 : Codeunit 50007;
      PosFilter@1000000004 : Text[250];
      RestMengeAuftrag@1000000038 : Decimal;
      Text50061@1000000043 : TextConst 'DEU=Der Einkaufsw„hrungskurs liegt auáerhalb der W„hrungstoleranz fr %1.';

    PROCEDURE InitOutstanding@16();
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        "Outstanding Quantity" := Quantity - "Return Qty. Received";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Return Qty. Received (Base)";
        "Return Qty. Rcd. Not Invd." := "Return Qty. Received" - "Quantity Invoiced";
        "Ret. Qty. Rcd. Not Invd.(Base)" := "Return Qty. Received (Base)" - "Qty. Invoiced (Base)";
      END ELSE BEGIN
        "Outstanding Quantity" := Quantity - "Quantity Shipped";
        "Outstanding Qty. (Base)" := "Quantity (Base)" - "Qty. Shipped (Base)";
        "Qty. Shipped Not Invoiced" := "Quantity Shipped" - "Quantity Invoiced";
        "Qty. Shipped Not Invd. (Base)" := "Qty. Shipped (Base)" - "Qty. Invoiced (Base)";
      END;
      CALCFIELDS("Reserved Quantity");
      Planned := "Reserved Quantity" = "Outstanding Quantity";
      "Completely Shipped" := (Quantity <> 0) AND ("Outstanding Quantity" = 0);
      InitOutstandingAmount;
    END;

    PROCEDURE InitOutstandingAmount@17();
    VAR
      AmountInclVAT@1000 : Decimal;
    BEGIN
      IF Quantity = 0 THEN BEGIN
        "Outstanding Amount" := 0;
        "Outstanding Amount (LCY)" := 0;
        "Shipped Not Invoiced" := 0;
        "Shipped Not Invoiced (LCY)" := 0;
        "Return Rcd. Not Invd." := 0;
        "Return Rcd. Not Invd. (LCY)" := 0;
      END ELSE BEGIN
        GetSalesHeader;
        AmountInclVAT := "Amount Including VAT";
        VALIDATE(
          "Outstanding Amount",
          ROUND(
            AmountInclVAT * "Outstanding Quantity" / Quantity,
            Currency."Amount Rounding Precision"));
        IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
          VALIDATE(
            "Return Rcd. Not Invd.",
            ROUND(
              AmountInclVAT * "Return Qty. Rcd. Not Invd." / Quantity,
              Currency."Amount Rounding Precision"))
        ELSE
          VALIDATE(
            "Shipped Not Invoiced",
            ROUND(
              AmountInclVAT * "Qty. Shipped Not Invoiced" / Quantity,
              Currency."Amount Rounding Precision"));
      END;
    END;

    PROCEDURE InitQtyToShip@15();
    BEGIN
      GetSalesSetup;
      IF (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Remainder) OR
         ("Document Type" = "Document Type"::Invoice)
      THEN BEGIN
        "Qty. to Ship" := "Outstanding Quantity";
        "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";
      END ELSE
        IF "Qty. to Ship" <> 0 THEN
          "Qty. to Ship (Base)" := CalcBaseQty("Qty. to Ship");

      CheckServItemCreation;

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToReceive@5803();
    BEGIN
      GetSalesSetup;
      IF (SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Remainder) OR
         ("Document Type" = "Document Type"::"Credit Memo")
      THEN BEGIN
        "Return Qty. to Receive" := "Outstanding Quantity";
        "Return Qty. to Receive (Base)" := "Outstanding Qty. (Base)";
      END ELSE
        IF "Return Qty. to Receive" <> 0 THEN
          "Return Qty. to Receive (Base)" := CalcBaseQty("Return Qty. to Receive");

      InitQtyToInvoice;
    END;

    PROCEDURE InitQtyToInvoice@13();
    BEGIN
      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;
      CalcInvDiscToInvoice;
      IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN
        CalcPrepaymentToDeduct;
    END;

    LOCAL PROCEDURE InitItemAppl@40(OnlyApplTo@1000 : Boolean);
    BEGIN
      "Appl.-to Item Entry" := 0;
      IF NOT OnlyApplTo THEN
        "Appl.-from Item Entry" := 0;
    END;

    PROCEDURE MaxQtyToInvoice@18() : Decimal;
    BEGIN
      IF "Prepayment Line" THEN
        EXIT(1);
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Received" + "Return Qty. to Receive" - "Quantity Invoiced");

      EXIT("Quantity Shipped" + "Qty. to Ship" - "Quantity Invoiced");
    END;

    PROCEDURE MaxQtyToInvoiceBase@19() : Decimal;
    BEGIN
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        EXIT("Return Qty. Received (Base)" + "Return Qty. to Receive (Base)" - "Qty. Invoiced (Base)");

      EXIT("Qty. Shipped (Base)" + "Qty. to Ship (Base)" - "Qty. Invoiced (Base)");
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE SelectItemEntry@8(CurrentFieldNo@1000 : Integer);
    VAR
      ItemLedgEntry@1001 : Record 32;
      SalesLine3@1002 : Record 37;
    BEGIN
      ItemLedgEntry.SETRANGE("Item No.","No.");
      IF "Location Code" <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code","Location Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      IF CurrentFieldNo = FIELDNO("Appl.-to Item Entry") THEN BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
        ItemLedgEntry.SETRANGE(Positive,TRUE);
        ItemLedgEntry.SETRANGE(Open,TRUE);
      END ELSE BEGIN
        ItemLedgEntry.SETCURRENTKEY("Item No.",Positive);
        ItemLedgEntry.SETRANGE(Positive,FALSE);
        ItemLedgEntry.SETFILTER("Shipped Qty. Not Returned",'<0');
      END;
      IF PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK THEN BEGIN
        SalesLine3 := Rec;
        IF CurrentFieldNo = FIELDNO("Appl.-to Item Entry") THEN
          SalesLine3.VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.")
        ELSE
          SalesLine3.VALIDATE("Appl.-from Item Entry",ItemLedgEntry."Entry No.");
        CheckItemAvailable(CurrentFieldNo);
        Rec := SalesLine3;
      END;
    END;

    PROCEDURE SetSalesHeader@24(NewSalesHeader@1000 : Record 36);
    BEGIN
      SalesHeader := NewSalesHeader;

      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE BEGIN
        SalesHeader.TESTFIELD("Currency Factor");
        Currency.GET(SalesHeader."Currency Code");
        Currency.TESTFIELD("Amount Rounding Precision");
      END;
    END;

    LOCAL PROCEDURE GetSalesHeader@1();
    BEGIN
      TESTFIELD("Document No.");
      IF ("Document Type" <> SalesHeader."Document Type") OR ("Document No." <> SalesHeader."No.") THEN BEGIN
        SalesHeader.GET("Document Type","Document No.");
        IF SalesHeader."Currency Code" = '' THEN
          Currency.InitRoundingPrecision
        ELSE BEGIN
          SalesHeader.TESTFIELD("Currency Factor");
          Currency.GET(SalesHeader."Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        END;
      END;
    END;

    LOCAL PROCEDURE GetItem@9();
    BEGIN
      TESTFIELD("No.");
      IF "No." <> Item."No." THEN
        Item.GET("No.");
    END;

    LOCAL PROCEDURE GetResource@49();
    BEGIN
      TESTFIELD("No.");
      IF "No." <> Resource."No." THEN
        Resource.GET("No.");
    END;

    LOCAL PROCEDURE UpdateUnitPrice@2(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF (CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0) THEN
        EXIT;

      GetSalesHeader;
      TESTFIELD("Qty. per Unit of Measure");

      CASE Type OF
        Type::Item,Type::Resource:
          BEGIN
            //TOPAS 19.09.11 ST - Deaktivierung šbernahme VK-Preis aus Tabelle VK-Preise +
            {
            PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);
            PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,CalledByFieldNo);
            }
            //TOPAS -
          END;
      END;
      VALIDATE("Unit Price");
    END;

    LOCAL PROCEDURE FindResUnitCost@5();
    BEGIN
      ResCost.INIT;
      ResCost.Code := "No.";
      ResCost."Work Type Code" := "Work Type Code";
      ResFindUnitCost.RUN(ResCost);
      VALIDATE("Unit Cost (LCY)",ResCost."Unit Cost" * "Qty. per Unit of Measure");
    END;

    PROCEDURE UpdatePrepmtSetupFields@102();
    VAR
      GenPostingSetup@1001 : Record 252;
      GLAcc@1000 : Record 15;
    BEGIN
      IF ("Prepayment %" <> 0) AND (Type <> Type::" ") THEN BEGIN
        TESTFIELD("Document Type","Document Type"::Order);
        TESTFIELD("No.");
        IF CurrFieldNo = FIELDNO("Prepayment %") THEN
          IF "System-Created Entry" THEN
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,0));
        IF "System-Created Entry" THEN
          "Prepayment %" := 0;
        GenPostingSetup.GET("Gen. Bus. Posting Group","Gen. Prod. Posting Group");
        IF GenPostingSetup."Sales Prepayments Account" <> '' THEN BEGIN
          GLAcc.GET(GenPostingSetup."Sales Prepayments Account");
          VATPostingSetup.GET("VAT Bus. Posting Group",GLAcc."VAT Prod. Posting Group");
          VATPostingSetup.TESTFIELD("VAT Calculation Type","VAT Calculation Type");
        END ELSE
          CLEAR(VATPostingSetup);
        "Prepayment VAT %" := VATPostingSetup."VAT %";
        "Prepmt. VAT Calc. Type" := VATPostingSetup."VAT Calculation Type";
        "Prepayment VAT Identifier" := VATPostingSetup."VAT Identifier";
        IF "Prepmt. VAT Calc. Type" IN
           ["Prepmt. VAT Calc. Type"::"Reverse Charge VAT","Prepmt. VAT Calc. Type"::"Sales Tax"]
        THEN
          "Prepayment VAT %" := 0;
        "Prepayment Tax Group Code" := GLAcc."Tax Group Code";
      END;
    END;

    PROCEDURE UpdateAmounts@3();
    VAR
      RemLineAmountToInvoice@1000 : Decimal;
      VATBaseAmount@1003 : Decimal;
      LineAmountChanged@1002 : Boolean;
    BEGIN
      IF Type = Type::" " THEN
        EXIT;
      GetSalesHeader;
      VATBaseAmount := "VAT Base Amount";
      "Recalculate Invoice Disc." := TRUE;

      IF "Line Amount" <> xRec."Line Amount" THEN BEGIN
        "VAT Difference" := 0;
        LineAmountChanged := TRUE;
      END;
      IF "Line Amount" <> ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Discount Amount" THEN BEGIN
        "Line Amount" := ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") - "Line Discount Amount";
        "VAT Difference" := 0;
        LineAmountChanged := TRUE;
      END;
      UpdateVATAmounts;
      IF NOT "Prepayment Line" THEN BEGIN
        IF "Prepayment %" <> 0 THEN BEGIN
          IF Quantity < 0 THEN
            FIELDERROR(Quantity,STRSUBSTNO(Text047,FIELDCAPTION("Prepayment %")));
          IF "Unit Price" < 0 THEN
            FIELDERROR("Unit Price",STRSUBSTNO(Text047,FIELDCAPTION("Prepayment %")));
        END;
        IF SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice THEN BEGIN
          "Prepayment VAT Difference" := 0;
          IF NOT PrePaymentLineAmountEntered THEN
            "Prepmt. Line Amount" := ROUND("Line Amount" * "Prepayment %" / 100,Currency."Amount Rounding Precision");
          IF "Prepmt. Line Amount" < "Prepmt. Amt. Inv." THEN
            FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text049,"Prepmt. Amt. Inv."));
          PrePaymentLineAmountEntered := FALSE;
          IF "Prepmt. Line Amount" <> 0 THEN BEGIN
            RemLineAmountToInvoice :=
              ROUND("Line Amount" * (Quantity - "Quantity Invoiced") / Quantity,Currency."Amount Rounding Precision");
            IF RemLineAmountToInvoice < ("Prepmt. Line Amount" - "Prepmt Amt Deducted") THEN
              FIELDERROR("Prepmt. Line Amount",STRSUBSTNO(Text045,RemLineAmountToInvoice + "Prepmt Amt Deducted"));
          END;
        END ELSE
          IF (CurrFieldNo <> 0) AND ("Line Amount" <> xRec."Line Amount") AND
             ("Prepmt. Amt. Inv." <> 0) AND ("Prepayment %" = 100)
          THEN BEGIN
            IF "Line Amount" < xRec."Line Amount" THEN
              FIELDERROR("Line Amount",STRSUBSTNO(Text044,xRec."Line Amount"));
            FIELDERROR("Line Amount",STRSUBSTNO(Text045,xRec."Line Amount"));
          END;
      END;
      InitOutstandingAmount;
      IF (CurrFieldNo <> 0) AND
         NOT ((Type = Type::Item) AND (CurrFieldNo = FIELDNO("No.")) AND (Quantity <> 0) AND
              // a write transaction may have been started
              ("Qty. per Unit of Measure" <> xRec."Qty. per Unit of Measure")) AND // ...continued condition
         ("Document Type" <= "Document Type"::Invoice) AND
         (("Outstanding Amount" + "Shipped Not Invoiced") > 0) AND
         (CurrFieldNo <> FIELDNO("Blanket Order No.")) AND
         (CurrFieldNo <> FIELDNO("Blanket Order Line No."))
      THEN
        CustCheckCreditLimit.SalesLineCheck(Rec);

      IF Type = Type::"Charge (Item)" THEN
        UpdateItemChargeAssgnt;

      CalcPrepaymentToDeduct;
      IF VATBaseAmount <> "VAT Base Amount" THEN
        LineAmountChanged := TRUE;

      IF LineAmountChanged THEN BEGIN
        UpdateDeferralAmounts;
        LineAmountChanged := FALSE;
      END;
    END;

    LOCAL PROCEDURE UpdateVATAmounts@38();
    VAR
      SalesLine2@1000 : Record 37;
      TotalLineAmount@1005 : Decimal;
      TotalInvDiscAmount@1004 : Decimal;
      TotalAmount@1001 : Decimal;
      TotalAmountInclVAT@1002 : Decimal;
      TotalQuantityBase@1003 : Decimal;
    BEGIN
      GetSalesHeader;
      SalesLine2.SETRANGE("Document Type","Document Type");
      SalesLine2.SETRANGE("Document No.","Document No.");
      SalesLine2.SETFILTER("Line No.",'<>%1',"Line No.");
      IF "Line Amount" = 0 THEN
        IF xRec."Line Amount" >= 0 THEN
          SalesLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          SalesLine2.SETFILTER(Amount,'<%1',0)
      ELSE
        IF "Line Amount" > 0 THEN
          SalesLine2.SETFILTER(Amount,'>%1',0)
        ELSE
          SalesLine2.SETFILTER(Amount,'<%1',0);
      SalesLine2.SETRANGE("VAT Identifier","VAT Identifier");
      SalesLine2.SETRANGE("Tax Group Code","Tax Group Code");

      IF "Line Amount" = "Inv. Discount Amount" THEN BEGIN
        Amount := 0;
        "VAT Base Amount" := 0;
        "Amount Including VAT" := 0;
      END ELSE BEGIN
        TotalLineAmount := 0;
        TotalInvDiscAmount := 0;
        TotalAmount := 0;
        TotalAmountInclVAT := 0;
        TotalQuantityBase := 0;
        IF ("VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax") OR
           (("VAT Calculation Type" IN
             ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"]) AND ("VAT %" <> 0))
        THEN
          IF NOT SalesLine2.ISEMPTY THEN BEGIN
            SalesLine2.CALCSUMS("Line Amount","Inv. Discount Amount",Amount,"Amount Including VAT","Quantity (Base)");
            TotalLineAmount := SalesLine2."Line Amount";
            TotalInvDiscAmount := SalesLine2."Inv. Discount Amount";
            TotalAmount := SalesLine2.Amount;
            TotalAmountInclVAT := SalesLine2."Amount Including VAT";
            TotalQuantityBase := SalesLine2."Quantity (Base)";
          END;

        IF SalesHeader."Prices Including VAT" THEN
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount :=
                  ROUND(
                    (TotalLineAmount - TotalInvDiscAmount + "Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
                    Currency."Amount Rounding Precision") -
                  TotalAmount;
                "VAT Base Amount" :=
                  ROUND(
                    Amount * (1 - SalesHeader."VAT Base Discount %" / 100),
                    Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalLineAmount + "Line Amount" -
                  ROUND(
                    (TotalAmount + Amount) * (SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT - TotalInvDiscAmount - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                SalesHeader.TESTFIELD("VAT Base Discount %",0);
                Amount :=
                  SalesTaxCalculate.ReverseCalculateTax(
                    "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                    TotalAmountInclVAT + "Amount Including VAT",TotalQuantityBase + "Quantity (Base)",
                    SalesHeader."Currency Factor") -
                  TotalAmount;
                IF Amount <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - Amount) / Amount,0.00001)
                ELSE
                  "VAT %" := 0;
                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
              END;
          END
        ELSE
          CASE "VAT Calculation Type" OF
            "VAT Calculation Type"::"Normal VAT",
            "VAT Calculation Type"::"Reverse Charge VAT":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" :=
                  ROUND(Amount * (1 - SalesHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    (TotalAmount + Amount) * (1 - SalesHeader."VAT Base Discount %" / 100) * "VAT %" / 100,
                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection) -
                  TotalAmountInclVAT;
              END;
            "VAT Calculation Type"::"Full VAT":
              BEGIN
                Amount := 0;
                "VAT Base Amount" := 0;
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount";
              END;
            "VAT Calculation Type"::"Sales Tax":
              BEGIN
                Amount := ROUND("Line Amount" - "Inv. Discount Amount",Currency."Amount Rounding Precision");
                "VAT Base Amount" := Amount;
                "Amount Including VAT" :=
                  TotalAmount + Amount +
                  ROUND(
                    SalesTaxCalculate.CalculateTax(
                      "Tax Area Code","Tax Group Code","Tax Liable",SalesHeader."Posting Date",
                      TotalAmount + Amount,TotalQuantityBase + "Quantity (Base)",
                      SalesHeader."Currency Factor"),Currency."Amount Rounding Precision") -
                  TotalAmountInclVAT;
                IF "VAT Base Amount" <> 0 THEN
                  "VAT %" :=
                    ROUND(100 * ("Amount Including VAT" - "VAT Base Amount") / "VAT Base Amount",0.00001)
                ELSE
                  "VAT %" := 0;
              END;
          END;
      END;
    END;

    LOCAL PROCEDURE CheckItemAvailable@4(CalledByFieldNo@1000 : Integer);
    BEGIN
      IF Reserve = Reserve::Always THEN
        EXIT;

      IF "Shipment Date" = 0D THEN BEGIN
        GetSalesHeader;
        IF SalesHeader."Shipment Date" <> 0D THEN
          VALIDATE("Shipment Date",SalesHeader."Shipment Date")
        ELSE
          VALIDATE("Shipment Date",WORKDATE);
      END;

      IF ((CalledByFieldNo = CurrFieldNo) OR (CalledByFieldNo = FIELDNO("Shipment Date"))) AND GUIALLOWED AND
         ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
         (Type = Type::Item) AND ("No." <> '') AND
         ("Outstanding Quantity" > 0) AND
         ("Job Contract Entry No." = 0) AND
         NOT (Nonstock OR "Special Order")
      THEN BEGIN
        IF ItemCheckAvail.SalesLineCheck(Rec) THEN
          ItemCheckAvail.RaiseUpdateInterruptedError;
      END;
    END;

    PROCEDURE ShowReservation@10();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD(Reserve);
      CLEAR(Reservation);
      Reservation.SetSalesLine(Rec);
      Reservation.RUNMODAL;
    END;

    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,TRUE);
      ReserveSalesLine.FilterReservFor(ReservEntry,Rec);
      IF Modal THEN
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      ELSE
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    PROCEDURE AutoReserve@11();
    VAR
      QtyToReserve@1000 : Decimal;
      QtyToReserveBase@1001 : Decimal;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");

      ReserveSalesLine.ReservQuantity(Rec,QtyToReserve,QtyToReserveBase);
      IF QtyToReserveBase <> 0 THEN BEGIN
        ReservMgt.SetSalesLine(Rec);
        TESTFIELD("Shipment Date");
        ReservMgt.AutoReserve(FullAutoReservation,'',"Shipment Date",QtyToReserve,QtyToReserveBase);
        FIND;
        IF NOT FullAutoReservation THEN BEGIN
          COMMIT;
          IF CONFIRM(Text011,TRUE) THEN BEGIN
            ShowReservation;
            FIND;
          END;
        END;
      END;
    END;

    PROCEDURE AutoAsmToOrder@82();
    BEGIN
      ATOLink.UpdateAsmFromSalesLine(Rec);
    END;

    LOCAL PROCEDURE GetDate@22() : Date;
    BEGIN
      IF SalesHeader."Posting Date" <> 0D THEN
        EXIT(SalesHeader."Posting Date");
      EXIT(WORKDATE);
    END;

    PROCEDURE CalcPlannedDeliveryDate@92(CurrFieldNo@1000 : Integer) : Date;
    BEGIN
      IF "Shipment Date" = 0D THEN
        EXIT("Planned Delivery Date");

      CASE CurrFieldNo OF
        FIELDNO("Shipment Date"):
          EXIT(CalendarMgmt.CalcDateBOC(
              FORMAT("Shipping Time"),
              "Planned Shipment Date",
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              CalChange."Source Type"::Customer,
              "Sell-to Customer No.",
              '',
              TRUE));
        FIELDNO("Planned Delivery Date"):
          EXIT(CalendarMgmt.CalcDateBOC2(
              FORMAT("Shipping Time"),
              "Planned Delivery Date",
              CalChange."Source Type"::Customer,
              "Sell-to Customer No.",
              '',
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              TRUE))
      END;
    END;

    PROCEDURE CalcPlannedShptDate@93(CurrFieldNo@1000 : Integer) : Date;
    BEGIN
      IF "Shipment Date" = 0D THEN
        EXIT("Planned Shipment Date");

      CASE CurrFieldNo OF
        FIELDNO("Shipment Date"):
          EXIT(CalendarMgmt.CalcDateBOC(
              FORMAT("Outbound Whse. Handling Time"),
              "Shipment Date",
              CalChange."Source Type"::Location,
              "Location Code",
              '',
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              TRUE));
        FIELDNO("Planned Delivery Date"):
          EXIT(CalendarMgmt.CalcDateBOC(
              FORMAT(''),
              "Planned Delivery Date",
              CalChange."Source Type"::Customer,
              "Sell-to Customer No.",
              '',
              CalChange."Source Type"::"Shipping Agent",
              "Shipping Agent Code",
              "Shipping Agent Service Code",
              TRUE));
      END;
    END;

    PROCEDURE CalcShipmentDate@111() : Date;
    BEGIN
      IF "Planned Shipment Date" = 0D THEN
        EXIT("Shipment Date");

      IF FORMAT("Outbound Whse. Handling Time") <> '' THEN
        EXIT(
          CalendarMgmt.CalcDateBOC2(
            FORMAT("Outbound Whse. Handling Time"),
            "Planned Shipment Date",
            CalChange."Source Type"::Location,
            "Location Code",
            '',
            CalChange."Source Type"::"Shipping Agent",
            "Shipping Agent Code",
            "Shipping Agent Service Code",
            FALSE));

      EXIT(
        CalendarMgmt.CalcDateBOC(
          FORMAT(FORMAT('')),
          "Planned Shipment Date",
          CalChange."Source Type"::"Shipping Agent",
          "Shipping Agent Code",
          "Shipping Agent Service Code",
          CalChange."Source Type"::Location,
          "Location Code",
          '',
          FALSE));
    END;

    PROCEDURE SignedXX@20(Value@1000 : Decimal) : Decimal;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Quote,
        "Document Type"::Order,
        "Document Type"::Invoice,
        "Document Type"::"Blanket Order":
          EXIT(-Value);
        "Document Type"::"Return Order",
        "Document Type"::"Credit Memo":
          EXIT(Value);
      END;
    END;

    LOCAL PROCEDURE BlanketOrderLookup@23();
    BEGIN
      SalesLine2.RESET;
      SalesLine2.SETCURRENTKEY("Document Type",Type,"No.");
      SalesLine2.SETRANGE("Document Type","Document Type"::"Blanket Order");
      SalesLine2.SETRANGE(Type,Type);
      SalesLine2.SETRANGE("No.","No.");
      SalesLine2.SETRANGE("Bill-to Customer No.","Bill-to Customer No.");
      SalesLine2.SETRANGE("Sell-to Customer No.","Sell-to Customer No.");
      IF PAGE.RUNMODAL(PAGE::"Sales Lines",SalesLine2) = ACTION::LookupOK THEN BEGIN
        SalesLine2.TESTFIELD("Document Type","Document Type"::"Blanket Order");
        "Blanket Order No." := SalesLine2."Document No.";
        VALIDATE("Blanket Order Line No.",SalesLine2."Line No.");
      END;
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."));
      VerifyItemLineDim;
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      ATOLink.UpdateAsmDimFromSalesLine(Rec);
    END;

    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      Job@1000 : Record 167;
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD("Quantity (Base)");
      IF "Job Contract Entry No." <> 0 THEN
        ERROR(Text048,TABLECAPTION,Job.TABLECAPTION);
      ReserveSalesLine.CallItemTracking(Rec);
    END;

    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20]);
    VAR
      SourceCodeSetup@1006 : Record 242;
      TableID@1007 : ARRAY [10] OF Integer;
      No@1008 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      GetSalesHeader;
      "Dimension Set ID" :=
        DimMgt.GetDefaultDimID(
          TableID,No,SourceCodeSetup.Sales,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
          SalesHeader."Dimension Set ID",DATABASE::Customer);
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      ATOLink.UpdateAsmDimFromSalesLine(Rec);
    END;

    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      VerifyItemLineDim;
    END;

    PROCEDURE LookupShortcutDimCode@28(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      ValidateShortcutDimCode(FieldNumber,ShortcutDimCode);
    END;

    PROCEDURE ShowShortcutDimCode@27(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    PROCEDURE ShowItemSub@30();
    BEGIN
      CLEAR(SalesHeader);
      TestStatusOpen;
      ItemSubstitutionMgt.ItemSubstGet(Rec);
      IF TransferExtendedText.SalesCheckIfAnyExtText(Rec,TRUE) THEN
        TransferExtendedText.InsertSalesExtText(Rec);
    END;

    PROCEDURE ShowNonstock@32();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.",'');
      IF PAGE.RUNMODAL(PAGE::"Nonstock Item List",NonstockItem) = ACTION::LookupOK THEN BEGIN
        NonstockItem.TESTFIELD("Item Category Code");
        ItemCategory.GET(NonstockItem."Item Category Code");
        ItemCategory.TESTFIELD("Def. Gen. Prod. Posting Group");
        ItemCategory.TESTFIELD("Def. Inventory Posting Group");

        "No." := NonstockItem."Entry No.";
        NonstockItemMgt.NonStockSales(Rec);
        VALIDATE("No.","No.");
        VALIDATE("Unit Price",NonstockItem."Unit Price");
      END;
    END;

    LOCAL PROCEDURE GetSalesSetup@100();
    BEGIN
      IF NOT SalesSetupRead THEN
        SalesSetup.GET;
      SalesSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetFAPostingGroup@6();
    VAR
      LocalGLAcc@1000 : Record 15;
      FASetup@1001 : Record 5603;
      FAPostingGr@1002 : Record 5606;
      FADeprBook@1003 : Record 5612;
    BEGIN
      IF (Type <> Type::"Fixed Asset") OR ("No." = '') THEN
        EXIT;
      IF "Depreciation Book Code" = '' THEN BEGIN
        FASetup.GET;
        "Depreciation Book Code" := FASetup."Default Depr. Book";
        IF NOT FADeprBook.GET("No.","Depreciation Book Code") THEN
          "Depreciation Book Code" := '';
        IF "Depreciation Book Code" = '' THEN
          EXIT;
      END;
      FADeprBook.GET("No.","Depreciation Book Code");
      FADeprBook.TESTFIELD("FA Posting Group");
      FAPostingGr.GET(FADeprBook."FA Posting Group");
      FAPostingGr.TESTFIELD("Acq. Cost Acc. on Disposal");
      LocalGLAcc.GET(FAPostingGr."Acq. Cost Acc. on Disposal");
      LocalGLAcc.CheckGLAcc;
      LocalGLAcc.TESTFIELD("Gen. Prod. Posting Group");
      "Posting Group" := FADeprBook."FA Posting Group";
      "Gen. Prod. Posting Group" := LocalGLAcc."Gen. Prod. Posting Group";
      "Tax Group Code" := LocalGLAcc."Tax Group Code";
      VALIDATE("VAT Prod. Posting Group",LocalGLAcc."VAT Prod. Posting Group");
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Sales Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    VAR
      SalesHeader2@1102601000 : Record 36;
    BEGIN
      IF SalesHeader2.GET("Document Type","Document No.") THEN;
      IF SalesHeader2."Prices Including VAT" THEN
        EXIT('2,1,' + GetFieldCaption(FieldNumber))
      ELSE
        EXIT('2,0,' + GetFieldCaption(FieldNumber));
    END;

    LOCAL PROCEDURE GetSKU@5806() : Boolean;
    BEGIN
      IF (SKU."Location Code" = "Location Code") AND
         (SKU."Item No." = "No.") AND
         (SKU."Variant Code" = "Variant Code")
      THEN
        EXIT(TRUE);
      IF SKU.GET("Location Code","No.","Variant Code") THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE GetUnitCost@5808();
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      GetItem;
      "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      //TOPAS 28.06.08 ST - Deaktiviert, sonst wird bei Žnderung der Referenznr. das Feld "Unit Cost (LCY)" auf 0 gesetzt,
      //vermutlich bedingt durch unsere Anpassung an der Fkt. UpdateUnitPrice +
      {
      IF GetSKU THEN
        VALIDATE("Unit Cost (LCY)",SKU."Unit Cost" * "Qty. per Unit of Measure")
      ELSE
        VALIDATE("Unit Cost (LCY)",Item."Unit Cost" * "Qty. per Unit of Measure");
      }
      //TOPAS -
    END;

    LOCAL PROCEDURE CalcUnitCost@5809(ItemLedgEntry@1000 : Record 32) : Decimal;
    VAR
      ValueEntry@1001 : Record 5802;
      UnitCost@1004 : Decimal;
    BEGIN
      WITH ValueEntry DO BEGIN
        SETCURRENTKEY("Item Ledger Entry No.");
        SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
        IF IsServiceItem THEN BEGIN
          CALCSUMS("Cost Amount (Non-Invtbl.)");
          UnitCost := "Cost Amount (Non-Invtbl.)" / ItemLedgEntry.Quantity;
        END ELSE BEGIN
          CALCSUMS("Cost Amount (Actual)","Cost Amount (Expected)");
          UnitCost :=
            ("Cost Amount (Expected)" + "Cost Amount (Actual)") / ItemLedgEntry.Quantity;
        END;
      END;

      EXIT(ABS(UnitCost * "Qty. per Unit of Measure"));
    END;

    PROCEDURE ShowItemChargeAssgnt@5801();
    VAR
      ItemChargeAssgnts@1000 : Page 5814;
      AssignItemChargeSales@1001 : Codeunit 5807;
      ItemChargeAssgntLineAmt@1002 : Decimal;
    BEGIN
      GET("Document Type","Document No.","Line No.");
      TESTFIELD(Type,Type::"Charge (Item)");
      TESTFIELD("No.");
      TESTFIELD(Quantity);

      GetSalesHeader;
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");
      IF ("Inv. Discount Amount" = 0) AND
         ("Line Discount Amount" = 0) AND
         (NOT SalesHeader."Prices Including VAT")
      THEN
        ItemChargeAssgntLineAmt := "Line Amount"
      ELSE
        IF SalesHeader."Prices Including VAT" THEN
          ItemChargeAssgntLineAmt :=
            ROUND(("Line Amount" - "Inv. Discount Amount") / (1 + "VAT %" / 100),
              Currency."Amount Rounding Precision")
        ELSE
          ItemChargeAssgntLineAmt := "Line Amount" - "Inv. Discount Amount";
      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntSales.SETRANGE("Item Charge No.","No.");
      IF NOT ItemChargeAssgntSales.FINDLAST THEN BEGIN
        ItemChargeAssgntSales."Document Type" := "Document Type";
        ItemChargeAssgntSales."Document No." := "Document No.";
        ItemChargeAssgntSales."Document Line No." := "Line No.";
        ItemChargeAssgntSales."Item Charge No." := "No.";
        ItemChargeAssgntSales."Unit Cost" :=
          ROUND(ItemChargeAssgntLineAmt / Quantity,
            Currency."Unit-Amount Rounding Precision");
      END;

      ItemChargeAssgntLineAmt :=
        ROUND(
          ItemChargeAssgntLineAmt * ("Qty. to Invoice" / Quantity),
          Currency."Amount Rounding Precision");

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        AssignItemChargeSales.CreateDocChargeAssgn(ItemChargeAssgntSales,"Return Receipt No.")
      ELSE
        AssignItemChargeSales.CreateDocChargeAssgn(ItemChargeAssgntSales,"Shipment No.");
      CLEAR(AssignItemChargeSales);
      COMMIT;

      ItemChargeAssgnts.Initialize(Rec,ItemChargeAssgntLineAmt);
      ItemChargeAssgnts.RUNMODAL;
      CALCFIELDS("Qty. to Assign");
    END;

    PROCEDURE UpdateItemChargeAssgnt@5807();
    VAR
      ShareOfVAT@1000 : Decimal;
      TotalQtyToAssign@1001 : Decimal;
      TotalAmtToAssign@1002 : Decimal;
    BEGIN
      IF "Document Type" = "Document Type"::"Blanket Order" THEN
        EXIT;

      CALCFIELDS("Qty. Assigned","Qty. to Assign");
      IF ABS("Quantity Invoiced") > ABS(("Qty. Assigned" + "Qty. to Assign")) THEN
        ERROR(Text055,FIELDCAPTION("Quantity Invoiced"),FIELDCAPTION("Qty. Assigned"),FIELDCAPTION("Qty. to Assign"));

      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Document Line No.","Line No.");
      ItemChargeAssgntSales.CALCSUMS("Qty. to Assign");
      TotalQtyToAssign := ItemChargeAssgntSales."Qty. to Assign";
      IF (CurrFieldNo <> 0) AND (Amount <> xRec.Amount) AND
         NOT ((Quantity <> xRec.Quantity) AND (TotalQtyToAssign = 0))
      THEN BEGIN
        ItemChargeAssgntSales.SETFILTER("Qty. Assigned",'<>0');
        IF NOT ItemChargeAssgntSales.ISEMPTY THEN
          ERROR(Text026,
            FIELDCAPTION(Amount));
        ItemChargeAssgntSales.SETRANGE("Qty. Assigned");
      END;

      IF ItemChargeAssgntSales.FINDSET THEN BEGIN
        GetSalesHeader;
        TotalAmtToAssign := CalcTotalAmtToAssign(TotalQtyToAssign);
        REPEAT
          ShareOfVAT := 1;
          IF SalesHeader."Prices Including VAT" THEN
            ShareOfVAT := 1 + "VAT %" / 100;
          IF Quantity <> 0 THEN
            IF ItemChargeAssgntSales."Unit Cost" <> ROUND(
                 ("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                 Currency."Unit-Amount Rounding Precision")
            THEN
              ItemChargeAssgntSales."Unit Cost" :=
                ROUND(("Line Amount" - "Inv. Discount Amount") / Quantity / ShareOfVAT,
                  Currency."Unit-Amount Rounding Precision");
          IF TotalQtyToAssign <> 0 THEN BEGIN
            ItemChargeAssgntSales."Amount to Assign" :=
              ROUND(ItemChargeAssgntSales."Qty. to Assign" / TotalQtyToAssign * TotalAmtToAssign,
                Currency."Amount Rounding Precision");
            TotalQtyToAssign -= ItemChargeAssgntSales."Qty. to Assign";
            TotalAmtToAssign -= ItemChargeAssgntSales."Amount to Assign";
          END;
          ItemChargeAssgntSales.MODIFY;
        UNTIL ItemChargeAssgntSales.NEXT = 0;
        CALCFIELDS("Qty. to Assign");
      END;
    END;

    LOCAL PROCEDURE DeleteItemChargeAssgnt@5802(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      ItemChargeAssgntSales.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type",DocType);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.",DocNo);
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.",DocLineNo);
      IF NOT ItemChargeAssgntSales.ISEMPTY THEN
        ItemChargeAssgntSales.DELETEALL(TRUE);
    END;

    LOCAL PROCEDURE DeleteChargeChargeAssgnt@5804(DocType@1000 : Option;DocNo@1001 : Code[20];DocLineNo@1002 : Integer);
    BEGIN
      IF DocType <> "Document Type"::"Blanket Order" THEN
        IF "Quantity Invoiced" <> 0 THEN BEGIN
          CALCFIELDS("Qty. Assigned");
          TESTFIELD("Qty. Assigned","Quantity Invoiced");
        END;
      ItemChargeAssgntSales.RESET;
      ItemChargeAssgntSales.SETRANGE("Document Type",DocType);
      ItemChargeAssgntSales.SETRANGE("Document No.",DocNo);
      ItemChargeAssgntSales.SETRANGE("Document Line No.",DocLineNo);
      IF NOT ItemChargeAssgntSales.ISEMPTY THEN
        ItemChargeAssgntSales.DELETEALL;
    END;

    LOCAL PROCEDURE CheckItemChargeAssgnt@5800();
    VAR
      ItemChargeAssgntSales@1000 : Record 5809;
    BEGIN
      ItemChargeAssgntSales.SETCURRENTKEY(
        "Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. No.","Document No.");
      ItemChargeAssgntSales.SETRANGE("Applies-to Doc. Line No.","Line No.");
      ItemChargeAssgntSales.SETRANGE("Document Type","Document Type");
      ItemChargeAssgntSales.SETRANGE("Document No.","Document No.");
      IF ItemChargeAssgntSales.FINDSET THEN BEGIN
        TESTFIELD("Allow Item Charge Assignment");
        REPEAT
          ItemChargeAssgntSales.TESTFIELD("Qty. to Assign",0);
        UNTIL ItemChargeAssgntSales.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE TestStatusOpen@33();
    BEGIN
      IF StatusCheckSuspended THEN
        EXIT;
      GetSalesHeader;
      IF NOT "System-Created Entry" THEN
        IF Type <> Type::" " THEN
          SalesHeader.TESTFIELD(Status,SalesHeader.Status::Open);
    END;

    PROCEDURE SuspendStatusCheck@39(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    PROCEDURE UpdateVATOnLines@36(QtyType@1000 : 'General,Invoicing,Shipping';VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37;VAR VATAmountLine@1003 : Record 290);
    VAR
      TempVATAmountLineRemainder@1004 : TEMPORARY Record 290;
      Currency@1005 : Record 4;
      NewAmount@1006 : Decimal;
      NewAmountIncludingVAT@1007 : Decimal;
      NewVATBaseAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      VATDifference@1010 : Decimal;
      InvDiscAmount@1011 : Decimal;
      LineAmountToInvoice@1012 : Decimal;
      LineAmountToInvoiceDiscounted@1013 : Decimal;
      DeferralAmount@1014 : Decimal;
    BEGIN
      IF QtyType = QtyType::Shipping THEN
        EXIT;
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");

      TempVATAmountLineRemainder.DELETEALL;

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        LOCKTABLE;
        IF FINDSET THEN
          REPEAT
            IF NOT ZeroAmountLine(QtyType) THEN BEGIN
              DeferralAmount := GetDeferralAmount;
              VATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0);
              IF VATAmountLine.Modified THEN BEGIN
                IF NOT TempVATAmountLineRemainder.GET(
                     "VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0)
                THEN BEGIN
                  TempVATAmountLineRemainder := VATAmountLine;
                  TempVATAmountLineRemainder.INIT;
                  TempVATAmountLineRemainder.INSERT;
                END;

                IF QtyType = QtyType::General THEN
                  LineAmountToInvoice := "Line Amount"
                ELSE
                  LineAmountToInvoice :=
                    ROUND("Line Amount" * "Qty. to Invoice" / Quantity,Currency."Amount Rounding Precision");

                IF "Allow Invoice Disc." THEN BEGIN
                  IF (VATAmountLine."Inv. Disc. Base Amount" = 0) OR (LineAmountToInvoice = 0) THEN
                    InvDiscAmount := 0
                  ELSE BEGIN
                    LineAmountToInvoiceDiscounted :=
                      VATAmountLine."Invoice Discount Amount" * LineAmountToInvoice /
                      VATAmountLine."Inv. Disc. Base Amount";
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" + LineAmountToInvoiceDiscounted;
                    InvDiscAmount :=
                      ROUND(
                        TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
                    TempVATAmountLineRemainder."Invoice Discount Amount" :=
                      TempVATAmountLineRemainder."Invoice Discount Amount" - InvDiscAmount;
                  END;
                  IF QtyType = QtyType::General THEN BEGIN
                    "Inv. Discount Amount" := InvDiscAmount;
                    CalcInvDiscToInvoice;
                  END ELSE
                    "Inv. Disc. Amount to Invoice" := InvDiscAmount;
                END ELSE
                  InvDiscAmount := 0;

                IF QtyType = QtyType::General THEN
                  IF SalesHeader."Prices Including VAT" THEN BEGIN
                    IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount" = 0) OR
                       ("Line Amount" = 0)
                    THEN BEGIN
                      VATAmount := 0;
                      NewAmountIncludingVAT := 0;
                    END ELSE BEGIN
                      VATAmount :=
                        TempVATAmountLineRemainder."VAT Amount" +
                        VATAmountLine."VAT Amount" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                      NewAmountIncludingVAT :=
                        TempVATAmountLineRemainder."Amount Including VAT" +
                        VATAmountLine."Amount Including VAT" *
                        ("Line Amount" - "Inv. Discount Amount") /
                        (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                    END;
                    NewAmount :=
                      ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision") -
                      ROUND(VATAmount,Currency."Amount Rounding Precision");
                    NewVATBaseAmount :=
                      ROUND(
                        NewAmount * (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision");
                  END ELSE BEGIN
                    IF "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" THEN BEGIN
                      VATAmount := "Line Amount" - "Inv. Discount Amount";
                      NewAmount := 0;
                      NewVATBaseAmount := 0;
                    END ELSE BEGIN
                      NewAmount := "Line Amount" - "Inv. Discount Amount";
                      NewVATBaseAmount :=
                        ROUND(
                          NewAmount * (1 - SalesHeader."VAT Base Discount %" / 100),
                          Currency."Amount Rounding Precision");
                      IF VATAmountLine."VAT Base" = 0 THEN
                        VATAmount := 0
                      ELSE
                        VATAmount :=
                          TempVATAmountLineRemainder."VAT Amount" +
                          VATAmountLine."VAT Amount" * NewAmount / VATAmountLine."VAT Base";
                    END;
                    NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision");
                  END
                ELSE BEGIN
                  IF (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount") = 0 THEN
                    VATDifference := 0
                  ELSE
                    VATDifference :=
                      TempVATAmountLineRemainder."VAT Difference" +
                      VATAmountLine."VAT Difference" * (LineAmountToInvoice - InvDiscAmount) /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount");
                  IF LineAmountToInvoice = 0 THEN
                    "VAT Difference" := 0
                  ELSE
                    "VAT Difference" := ROUND(VATDifference,Currency."Amount Rounding Precision");
                END;
                IF QtyType = QtyType::General THEN
                  UpdateBaseAmounts(NewAmount,ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision"),NewVATBaseAmount);
                InitOutstanding;
                IF Type = Type::"Charge (Item)" THEN
                  UpdateItemChargeAssgnt;
                MODIFY;
                IF ("Deferral Code" <> '') AND (DeferralAmount <> GetDeferralAmount) THEN
                  UpdateDeferralAmounts;

                TempVATAmountLineRemainder."Amount Including VAT" :=
                  NewAmountIncludingVAT - ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT + NewAmount;
                TempVATAmountLineRemainder."VAT Difference" := VATDifference - "VAT Difference";
                TempVATAmountLineRemainder.MODIFY;
              END;
            END;
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE CalcVATAmountLines@35(QtyType@1000 : 'General,Invoicing,Shipping';VAR SalesHeader@1001 : Record 36;VAR SalesLine@1002 : Record 37;VAR VATAmountLine@1003 : Record 290);
    VAR
      PrevVatAmountLine@1007 : Record 290;
      Currency@1004 : Record 4;
      SalesTaxCalculate@1005 : Codeunit 398;
      TotalVATAmount@1011 : Decimal;
      QtyToHandle@1006 : Decimal;
      RoundingLineInserted@1010 : Boolean;
    BEGIN
      IF SalesHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(SalesHeader."Currency Code");

      VATAmountLine.DELETEALL;

      WITH SalesLine DO BEGIN
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        IF FINDSET THEN
          REPEAT
            IF NOT ZeroAmountLine(QtyType) THEN BEGIN
              IF (Type = Type::"G/L Account") AND NOT "Prepayment Line" THEN
                RoundingLineInserted := ("No." = GetCPGInvRoundAcc(SalesHeader)) OR RoundingLineInserted;
              IF "VAT Calculation Type" IN
                 ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
              THEN
                "VAT %" := 0;
              IF NOT VATAmountLine.GET(
                   "VAT Identifier","VAT Calculation Type","Tax Group Code",FALSE,"Line Amount" >= 0)
              THEN BEGIN
                VATAmountLine.INIT;
                VATAmountLine."VAT Identifier" := "VAT Identifier";
                VATAmountLine."VAT Calculation Type" := "VAT Calculation Type";
                VATAmountLine."Tax Group Code" := "Tax Group Code";
                VATAmountLine."VAT %" := "VAT %";
                VATAmountLine.Modified := TRUE;
                VATAmountLine.Positive := "Line Amount" >= 0;
                VATAmountLine.INSERT;
              END;
              CASE QtyType OF
                QtyType::General:
                  BEGIN
                    VATAmountLine.Quantity := VATAmountLine.Quantity + "Quantity (Base)";
                    VATAmountLine."Line Amount" := VATAmountLine."Line Amount" + "Line Amount";
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + "Line Amount";
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" + "Inv. Discount Amount";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Invoicing:
                  BEGIN
                    CASE TRUE OF
                      ("Document Type" IN ["Document Type"::Order,"Document Type"::Invoice]) AND
                      (NOT SalesHeader.Ship) AND SalesHeader.Invoice AND (NOT "Prepayment Line"):
                        BEGIN
                          IF "Shipment No." = '' THEN BEGIN
                            QtyToHandle := GetAbsMin("Qty. to Invoice","Qty. Shipped Not Invoiced");
                            VATAmountLine.Quantity :=
                              VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Qty. Shipped Not Invd. (Base)");
                          END ELSE BEGIN
                            QtyToHandle := "Qty. to Invoice";
                            VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                          END;
                        END;
                      ("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]) AND
                      (NOT SalesHeader.Receive) AND SalesHeader.Invoice:
                        BEGIN
                          IF "Return Receipt No." = '' THEN BEGIN
                            QtyToHandle := GetAbsMin("Qty. to Invoice","Return Qty. Rcd. Not Invd.");
                            VATAmountLine.Quantity :=
                              VATAmountLine.Quantity + GetAbsMin("Qty. to Invoice (Base)","Ret. Qty. Rcd. Not Invd.(Base)");
                          END ELSE BEGIN
                            QtyToHandle := "Qty. to Invoice";
                            VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                          END;
                        END;
                      ELSE
                        BEGIN
                        QtyToHandle := "Qty. to Invoice";
                        VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Invoice (Base)";
                      END;
                    END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF SalesHeader."Invoice Discount Calculation" <> SalesHeader."Invoice Discount Calculation"::Amount THEN
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" +
                        ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision")
                    ELSE
                      VATAmountLine."Invoice Discount Amount" :=
                        VATAmountLine."Invoice Discount Amount" + "Inv. Disc. Amount to Invoice";
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
                QtyType::Shipping:
                  BEGIN
                    IF "Document Type" IN
                       ["Document Type"::"Return Order","Document Type"::"Credit Memo"]
                    THEN BEGIN
                      QtyToHandle := "Return Qty. to Receive";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Return Qty. to Receive (Base)";
                    END ELSE BEGIN
                      QtyToHandle := "Qty. to Ship";
                      VATAmountLine.Quantity := VATAmountLine.Quantity + "Qty. to Ship (Base)";
                    END;
                    VATAmountLine."Line Amount" :=
                      VATAmountLine."Line Amount" + GetLineAmountToHandle(QtyToHandle);
                    IF "Allow Invoice Disc." THEN
                      VATAmountLine."Inv. Disc. Base Amount" :=
                        VATAmountLine."Inv. Disc. Base Amount" + GetLineAmountToHandle(QtyToHandle);
                    VATAmountLine."Invoice Discount Amount" :=
                      VATAmountLine."Invoice Discount Amount" +
                      ROUND("Inv. Discount Amount" * QtyToHandle / Quantity,Currency."Amount Rounding Precision");
                    VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + "VAT Difference";
                    IF "Prepayment Line" THEN
                      VATAmountLine."Includes Prepayment" := TRUE;
                    VATAmountLine.MODIFY;
                  END;
              END;
              TotalVATAmount := TotalVATAmount + "Amount Including VAT" - Amount;
            END;
          UNTIL NEXT = 0;
      END;

      WITH VATAmountLine DO
        IF FINDSET THEN
          REPEAT
            IF (PrevVatAmountLine."VAT Identifier" <> "VAT Identifier") OR
               (PrevVatAmountLine."VAT Calculation Type" <> "VAT Calculation Type") OR
               (PrevVatAmountLine."Tax Group Code" <> "Tax Group Code") OR
               (PrevVatAmountLine."Use Tax" <> "Use Tax")
            THEN
              PrevVatAmountLine.INIT;
            IF SalesHeader."Prices Including VAT" THEN BEGIN
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT Base" :=
                      ROUND(
                        ("Line Amount" - "Invoice Discount Amount") / (1 + "VAT %" / 100),
                        Currency."Amount Rounding Precision") - "VAT Difference";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE BEGIN
                      PrevVatAmountLine := VATAmountLine;
                      PrevVatAmountLine."VAT Amount" :=
                        ("Line Amount" - "Invoice Discount Amount" - "VAT Base" - "VAT Difference") *
                        (1 - SalesHeader."VAT Base Discount %" / 100);
                      PrevVatAmountLine."VAT Amount" :=
                        PrevVatAmountLine."VAT Amount" -
                        ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Base" :=
                      ROUND(
                        SalesTaxCalculate.ReverseCalculateTax(
                          SalesHeader."Tax Area Code","Tax Group Code",SalesHeader."Tax Liable",
                          SalesHeader."Posting Date","Amount Including VAT",Quantity,SalesHeader."Currency Factor"),
                        Currency."Amount Rounding Precision");
                    "VAT Amount" := "VAT Difference" + "Amount Including VAT" - "VAT Base";
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                  END;
              END;
            END ELSE
              CASE "VAT Calculation Type" OF
                "VAT Calculation Type"::"Normal VAT",
                "VAT Calculation Type"::"Reverse Charge VAT":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND(
                        PrevVatAmountLine."VAT Amount" +
                        "VAT Base" * "VAT %" / 100 * (1 - SalesHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "Line Amount" - "Invoice Discount Amount" + "VAT Amount";
                    IF Positive THEN
                      PrevVatAmountLine.INIT
                    ELSE
                      IF NOT "Includes Prepayment" THEN BEGIN
                        PrevVatAmountLine := VATAmountLine;
                        PrevVatAmountLine."VAT Amount" :=
                          "VAT Base" * "VAT %" / 100 * (1 - SalesHeader."VAT Base Discount %" / 100);
                        PrevVatAmountLine."VAT Amount" :=
                          PrevVatAmountLine."VAT Amount" -
                          ROUND(PrevVatAmountLine."VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                      END;
                  END;
                "VAT Calculation Type"::"Full VAT":
                  BEGIN
                    "VAT Base" := 0;
                    "VAT Amount" := "VAT Difference" + "Line Amount" - "Invoice Discount Amount";
                    "Amount Including VAT" := "VAT Amount";
                  END;
                "VAT Calculation Type"::"Sales Tax":
                  BEGIN
                    "VAT Base" := "Line Amount" - "Invoice Discount Amount";
                    "VAT Amount" :=
                      SalesTaxCalculate.CalculateTax(
                        SalesHeader."Tax Area Code","Tax Group Code",SalesHeader."Tax Liable",
                        SalesHeader."Posting Date","VAT Base",Quantity,SalesHeader."Currency Factor");
                    IF "VAT Base" = 0 THEN
                      "VAT %" := 0
                    ELSE
                      "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base",0.00001);
                    "VAT Amount" :=
                      "VAT Difference" +
                      ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                    "Amount Including VAT" := "VAT Base" + "VAT Amount";
                  END;
              END;

            IF RoundingLineInserted THEN
              TotalVATAmount := TotalVATAmount - "VAT Amount";
            "Calculated VAT Amount" := "VAT Amount" - "VAT Difference";
            MODIFY;
          UNTIL NEXT = 0;

      IF RoundingLineInserted AND (TotalVATAmount <> 0) THEN
        IF VATAmountLine.GET(SalesLine."VAT Identifier",SalesLine."VAT Calculation Type",
             SalesLine."Tax Group Code",FALSE,SalesLine."Line Amount" >= 0)
        THEN BEGIN
          VATAmountLine."VAT Amount" := VATAmountLine."VAT Amount" + TotalVATAmount;
          VATAmountLine."Amount Including VAT" := VATAmountLine."Amount Including VAT" + TotalVATAmount;
          VATAmountLine."Calculated VAT Amount" := VATAmountLine."Calculated VAT Amount" + TotalVATAmount;
          VATAmountLine.MODIFY;
        END;
    END;

    PROCEDURE GetCPGInvRoundAcc@71(VAR SalesHeader@1000 : Record 36) : Code[20];
    VAR
      Cust@1002 : Record 18;
      CustTemplate@1003 : Record 5105;
      CustPostingGroup@1004 : Record 92;
    BEGIN
      GetSalesSetup;
      IF SalesSetup."Invoice Rounding" THEN
        IF Cust.GET(SalesHeader."Bill-to Customer No.") THEN
          CustPostingGroup.GET(Cust."Customer Posting Group")
        ELSE
          IF CustTemplate.GET(SalesHeader."Sell-to Customer Template Code") THEN
            CustPostingGroup.GET(CustTemplate."Customer Posting Group");

      EXIT(CustPostingGroup."Invoice Rounding Account");
    END;

    LOCAL PROCEDURE CalcInvDiscToInvoice@37();
    VAR
      OldInvDiscAmtToInv@1000 : Decimal;
    BEGIN
      GetSalesHeader;
      OldInvDiscAmtToInv := "Inv. Disc. Amount to Invoice";
      IF Quantity = 0 THEN
        VALIDATE("Inv. Disc. Amount to Invoice",0)
      ELSE
        VALIDATE(
          "Inv. Disc. Amount to Invoice",
          ROUND(
            "Inv. Discount Amount" * "Qty. to Invoice" / Quantity,
            Currency."Amount Rounding Precision"));

      IF OldInvDiscAmtToInv <> "Inv. Disc. Amount to Invoice" THEN BEGIN
        "Amount Including VAT" := "Amount Including VAT" - "VAT Difference";
        "VAT Difference" := 0;
      END;
    END;

    PROCEDURE UpdateWithWarehouseShip@41();
    BEGIN
      IF Type = Type::Item THEN
        CASE TRUE OF
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity >= 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Qty. to Ship",0)
            ELSE
              VALIDATE("Qty. to Ship","Outstanding Quantity");
          ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) AND (Quantity < 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Qty. to Ship",0)
            ELSE
              VALIDATE("Qty. to Ship","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0):
            IF Location.RequireReceive("Location Code") THEN
              VALIDATE("Return Qty. to Receive",0)
            ELSE
              VALIDATE("Return Qty. to Receive","Outstanding Quantity");
          ("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0):
            IF Location.RequireShipment("Location Code") THEN
              VALIDATE("Return Qty. to Receive",0)
            ELSE
              VALIDATE("Return Qty. to Receive","Outstanding Quantity");
        END;
      SetDefaultQuantity;
    END;

    LOCAL PROCEDURE CheckWarehouse@46();
    VAR
      Location2@1002 : Record 14;
      WhseSetup@1000 : Record 5769;
      ShowDialog@1001 : ' ,Message,Error';
      DialogText@1003 : Text[50];
    BEGIN
      GetLocation("Location Code");
      IF "Location Code" = '' THEN BEGIN
        WhseSetup.GET;
        Location2."Require Shipment" := WhseSetup."Require Shipment";
        Location2."Require Pick" := WhseSetup."Require Pick";
        Location2."Require Receive" := WhseSetup."Require Receive";
        Location2."Require Put-away" := WhseSetup."Require Put-away";
      END ELSE
        Location2 := Location;

      DialogText := Text035;
      IF ("Document Type" IN ["Document Type"::Order,"Document Type"::"Return Order"]) AND
         Location2."Directed Put-away and Pick"
      THEN BEGIN
        ShowDialog := ShowDialog::Error;
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0)) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0))
        THEN
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
        ELSE
          DialogText :=
            DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"));
      END ELSE BEGIN
        IF (("Document Type" = "Document Type"::Order) AND (Quantity >= 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity < 0) AND
            (Location2."Require Shipment" OR Location2."Require Pick"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Sales Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Shipment" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Shipment" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Shipment"))
          ELSE BEGIN
            DialogText := Text036;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Pick"));
          END;
        END;

        IF (("Document Type" = "Document Type"::Order) AND (Quantity < 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away")) OR
           (("Document Type" = "Document Type"::"Return Order") AND (Quantity >= 0) AND
            (Location2."Require Receive" OR Location2."Require Put-away"))
        THEN BEGIN
          IF WhseValidateSourceLine.WhseLinesExist(
               DATABASE::"Sales Line",
               "Document Type",
               "Document No.",
               "Line No.",
               0,
               Quantity)
          THEN
            ShowDialog := ShowDialog::Error
          ELSE
            IF Location2."Require Receive" THEN
              ShowDialog := ShowDialog::Message;
          IF Location2."Require Receive" THEN
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Receive"))
          ELSE BEGIN
            DialogText := Text036;
            DialogText :=
              DialogText + Location2.GetRequirementText(Location2.FIELDNO("Require Put-away"));
          END;
        END;
      END;

      CASE ShowDialog OF
        ShowDialog::Message:
          MESSAGE(Text016 + Text017,DialogText,FIELDCAPTION("Line No."),"Line No.");
        ShowDialog::Error:
          ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
      END;

      HandleDedicatedBin(TRUE);
    END;

    LOCAL PROCEDURE UpdateDates@43();
    BEGIN
      IF CurrFieldNo = 0 THEN BEGIN
        PlannedShipmentDateCalculated := FALSE;
        PlannedDeliveryDateCalculated := FALSE;
      END;
      IF "Promised Delivery Date" <> 0D THEN
        VALIDATE("Promised Delivery Date")
      ELSE
        IF "Requested Delivery Date" <> 0D THEN
          VALIDATE("Requested Delivery Date")
        ELSE
          VALIDATE("Shipment Date");
    END;

    PROCEDURE GetItemTranslation@42();
    BEGIN
      GetSalesHeader;
      IF ItemTranslation.GET("No.","Variant Code",SalesHeader."Language Code") THEN BEGIN
        Description := ItemTranslation.Description;
        "Description 2" := ItemTranslation."Description 2";
      END;
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      IF LocationCode = '' THEN
        CLEAR(Location)
      ELSE
        IF Location.Code <> LocationCode THEN
          Location.GET(LocationCode);
    END;

    PROCEDURE PriceExists@44() : Boolean;
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        GetSalesHeader;
        EXIT(PriceCalcMgt.SalesLinePriceExists(SalesHeader,Rec,TRUE));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE LineDiscExists@45() : Boolean;
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        GetSalesHeader;
        EXIT(PriceCalcMgt.SalesLineLineDiscExists(SalesHeader,Rec,TRUE));
      END;
      EXIT(FALSE);
    END;

    PROCEDURE RowID1@47() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit 6500;
    BEGIN
      EXIT(ItemTrackingMgt.ComposeRowID(DATABASE::"Sales Line","Document Type",
          "Document No.",'',0,"Line No."));
    END;

    LOCAL PROCEDURE UpdateItemCrossRef@48();
    BEGIN
      DistIntegration.EnterSalesItemCrossRef(Rec);
      UpdateICPartner;
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit 7302;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT;

      "Bin Code" := '';
      IF "Drop Shipment" THEN
        EXIT;

      IF ("Location Code" <> '') AND ("No." <> '') THEN BEGIN
        GetLocation("Location Code");
        IF Location."Bin Mandatory" AND NOT Location."Directed Put-away and Pick" THEN BEGIN
          IF ("Qty. to Assemble to Order" > 0) OR IsAsmToOrderRequired THEN
            IF GetATOBin(Location,"Bin Code") THEN
              EXIT;

          WMSManagement.GetDefaultBin("No.","Variant Code","Location Code","Bin Code");
          HandleDedicatedBin(FALSE);
        END;
      END;
    END;

    PROCEDURE GetATOBin@89(Location@1001 : Record 14;VAR BinCode@1002 : Code[20]) : Boolean;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF NOT Location."Require Shipment" THEN
        BinCode := Location."Asm.-to-Order Shpt. Bin Code";
      IF BinCode <> '' THEN
        EXIT(TRUE);

      IF AsmHeader.GetFromAssemblyBin(Location,BinCode) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE IsInbound@97() : Boolean;
    BEGIN
      CASE "Document Type" OF
        "Document Type"::Order,"Document Type"::Invoice,"Document Type"::Quote,"Document Type"::"Blanket Order":
          EXIT("Quantity (Base)" < 0);
        "Document Type"::"Return Order","Document Type"::"Credit Memo":
          EXIT("Quantity (Base)" > 0);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE HandleDedicatedBin@70(IssueWarning@1001 : Boolean);
    VAR
      WhseIntegrationMgt@1002 : Codeunit 7317;
    BEGIN
      IF NOT IsInbound AND ("Quantity (Base)" <> 0) THEN
        WhseIntegrationMgt.CheckIfBinDedicatedOnSrcDoc("Location Code","Bin Code",IssueWarning);
    END;

    LOCAL PROCEDURE CheckAssocPurchOrder@51(TheFieldCaption@1000 : Text[250]);
    BEGIN
      IF TheFieldCaption = '' THEN BEGIN // If sales line is being deleted
        IF "Purch. Order Line No." <> 0 THEN
          ERROR(
            Text000,
            "Purchase Order No.",
            "Purch. Order Line No.");
        IF "Special Order Purch. Line No." <> 0 THEN
          ERROR(
            Text000,
            "Special Order Purchase No.",
            "Special Order Purch. Line No.");
      END;
      IF "Purch. Order Line No." <> 0 THEN
        ERROR(
          Text002,
          TheFieldCaption,
          "Purchase Order No.",
          "Purch. Order Line No.");
      IF "Special Order Purch. Line No." <> 0 THEN
        ERROR(
          Text002,
          TheFieldCaption,
          "Special Order Purchase No.",
          "Special Order Purch. Line No.");
    END;

    PROCEDURE CrossReferenceNoLookUp@53();
    VAR
      ItemCrossReference@1000 : Record 5717;
      ICGLAcc@1001 : Record 410;
    BEGIN
      CASE Type OF
        Type::Item:
          BEGIN
            GetSalesHeader;
            ItemCrossReference.RESET;
            ItemCrossReference.SETCURRENTKEY("Cross-Reference Type","Cross-Reference Type No.");
            ItemCrossReference.SETFILTER(
              "Cross-Reference Type",'%1|%2',
              ItemCrossReference."Cross-Reference Type"::Customer,
              ItemCrossReference."Cross-Reference Type"::" ");
            ItemCrossReference.SETFILTER("Cross-Reference Type No.",'%1|%2',SalesHeader."Sell-to Customer No.",'');
            //TOPAS 19.06.08 ST - Filterung der Referenzen auf die Artikelnr. +
            ItemCrossReference.SETFILTER(ItemCrossReference."Item No.","No.");
            //TOPAS -
            IF PAGE.RUNMODAL(PAGE::"Cross Reference List",ItemCrossReference) = ACTION::LookupOK THEN BEGIN
              VALIDATE("Cross-Reference No.",ItemCrossReference."Cross-Reference No.");
              //TOPAS 19.09.11 ST - Deaktivierung šbernahme VK-Preis aus Tabelle VK-Preise +
              {
              PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);
              PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,FIELDNO("Cross-Reference No."));
              VALIDATE("Unit Price");
              }
              //TOPAS -
            END;
          END;
        Type::"G/L Account",Type::Resource:
          BEGIN
            GetSalesHeader;
            SalesHeader.TESTFIELD("Sell-to IC Partner Code");
            IF PAGE.RUNMODAL(PAGE::"IC G/L Account List") = ACTION::LookupOK THEN
              "Cross-Reference No." := ICGLAcc."No.";
          END;
      END;
    END;

    LOCAL PROCEDURE CheckServItemCreation@52();
    VAR
      ServItemGroup@1000 : Record 5904;
    BEGIN
      IF CurrFieldNo = 0 THEN
        EXIT;
      IF Type <> Type::Item THEN
        EXIT;
      Item.GET("No.");
      IF Item."Service Item Group" = '' THEN
        EXIT;
      IF ServItemGroup.GET(Item."Service Item Group") THEN
        IF ServItemGroup."Create Service Item" THEN
          IF "Qty. to Ship (Base)" <> ROUND("Qty. to Ship (Base)",1) THEN
            ERROR(
              Text034,
              FIELDCAPTION("Qty. to Ship (Base)"),
              ServItemGroup.FIELDCAPTION("Create Service Item"));
    END;

    PROCEDURE ItemExists@54(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record 27;
    BEGIN
      IF Type = Type::Item THEN
        IF NOT Item2.GET(ItemNo) THEN
          EXIT(FALSE);
      EXIT(TRUE);
    END;

    PROCEDURE IsShipment@55() : Boolean;
    BEGIN
      EXIT(SignedXX("Quantity (Base)") < 0);
    END;

    LOCAL PROCEDURE GetAbsMin@56(QtyToHandle@1000 : Decimal;QtyHandled@1001 : Decimal) : Decimal;
    BEGIN
      IF ABS(QtyHandled) < ABS(QtyToHandle) THEN
        EXIT(QtyHandled);

      EXIT(QtyToHandle);
    END;

    PROCEDURE SetHideValidationDialog@57(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE CheckApplFromItemLedgEntry@157(VAR ItemLedgEntry@1000 : Record 32);
    VAR
      ItemTrackingLines@1003 : Page 6510;
      QtyNotReturned@1002 : Decimal;
      QtyReturned@1004 : Decimal;
    BEGIN
      IF "Appl.-from Item Entry" = 0 THEN
        EXIT;

      IF "Shipment No." <> '' THEN
        EXIT;

      TESTFIELD(Type,Type::Item);
      TESTFIELD(Quantity);
      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN BEGIN
        IF Quantity < 0 THEN
          FIELDERROR(Quantity,Text029);
      END ELSE BEGIN
        IF Quantity > 0 THEN
          FIELDERROR(Quantity,Text030);
      END;

      ItemLedgEntry.GET("Appl.-from Item Entry");
      ItemLedgEntry.TESTFIELD(Positive,FALSE);
      ItemLedgEntry.TESTFIELD("Item No.","No.");
      ItemLedgEntry.TESTFIELD("Variant Code","Variant Code");
      IF ItemLedgEntry.TrackingExists THEN
        ERROR(Text040,ItemTrackingLines.CAPTION,FIELDCAPTION("Appl.-from Item Entry"));

      IF ABS("Quantity (Base)") > -ItemLedgEntry.Quantity THEN
        ERROR(
          Text046,
          -ItemLedgEntry.Quantity,ItemLedgEntry.FIELDCAPTION("Document No."),
          ItemLedgEntry."Document No.");

      IF "Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"] THEN
        IF ABS("Outstanding Qty. (Base)") > -ItemLedgEntry."Shipped Qty. Not Returned" THEN BEGIN
          QtyNotReturned := ItemLedgEntry."Shipped Qty. Not Returned";
          QtyReturned := ItemLedgEntry.Quantity - ItemLedgEntry."Shipped Qty. Not Returned";
          IF "Qty. per Unit of Measure" <> 0 THEN BEGIN
            QtyNotReturned :=
              ROUND(ItemLedgEntry."Shipped Qty. Not Returned" / "Qty. per Unit of Measure",0.00001);
            QtyReturned :=
              ROUND(
                (ItemLedgEntry.Quantity - ItemLedgEntry."Shipped Qty. Not Returned") /
                "Qty. per Unit of Measure",0.00001);
          END;
          ERROR(
            Text039,
            -QtyReturned,ItemLedgEntry.FIELDCAPTION("Document No."),
            ItemLedgEntry."Document No.",-QtyNotReturned);
        END;
    END;

    PROCEDURE CalcPrepaymentToDeduct@63();
    BEGIN
      IF ("Qty. to Invoice" <> 0) AND ("Prepmt. Amt. Inv." <> 0) THEN BEGIN
        GetSalesHeader;
        IF ("Prepayment %" = 100) AND NOT IsFinalInvoice THEN
          "Prepmt Amt to Deduct" := GetLineAmountToHandle("Qty. to Invoice")
        ELSE
          "Prepmt Amt to Deduct" :=
            ROUND(
              ("Prepmt. Amt. Inv." - "Prepmt Amt Deducted") *
              "Qty. to Invoice" / (Quantity - "Quantity Invoiced"),Currency."Amount Rounding Precision")
      END ELSE
        "Prepmt Amt to Deduct" := 0
    END;

    PROCEDURE IsFinalInvoice@116() : Boolean;
    BEGIN
      EXIT("Qty. to Invoice" = Quantity - "Quantity Invoiced");
    END;

    PROCEDURE GetLineAmountToHandle@117(QtyToHandle@1002 : Decimal) : Decimal;
    VAR
      LineAmount@1001 : Decimal;
      LineDiscAmount@1000 : Decimal;
    BEGIN
      IF "Line Discount %" = 100 THEN
        EXIT(0);

      GetSalesHeader;

      IF "Prepmt Amt to Deduct" = 0 THEN
        LineAmount := ROUND(QtyToHandle * "Unit Price",Currency."Amount Rounding Precision")
      ELSE BEGIN
        LineAmount := ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision");
        LineAmount := ROUND(QtyToHandle * LineAmount / Quantity,Currency."Amount Rounding Precision");
      END;

      IF QtyToHandle <> Quantity THEN
        LineDiscAmount := ROUND(LineAmount * "Line Discount %" / 100,Currency."Amount Rounding Precision")
      ELSE
        LineDiscAmount := "Line Discount Amount";

      EXIT(LineAmount - LineDiscAmount);
    END;

    PROCEDURE SetHasBeenShown@59();
    BEGIN
      HasBeenShown := TRUE;
    END;

    LOCAL PROCEDURE TestJobPlanningLine@60();
    BEGIN
      IF "Job Contract Entry No." = 0 THEN
        EXIT;
      JobPostLine.TestSalesLine(Rec);
    END;

    PROCEDURE BlockDynamicTracking@58(SetBlock@1000 : Boolean);
    BEGIN
      TrackingBlocked := SetBlock;
      ReserveSalesLine.Block(SetBlock);
    END;

    PROCEDURE InitQtyToShip2@7();
    BEGIN
      "Qty. to Ship" := "Outstanding Quantity";
      "Qty. to Ship (Base)" := "Outstanding Qty. (Base)";

      ATOLink.UpdateQtyToAsmFromSalesLine(Rec);

      CheckServItemCreation;

      "Qty. to Invoice" := MaxQtyToInvoice;
      "Qty. to Invoice (Base)" := MaxQtyToInvoiceBase;
      "VAT Difference" := 0;

      CalcInvDiscToInvoice;

      CalcPrepaymentToDeduct;
    END;

    PROCEDURE ShowLineComments@61();
    VAR
      SalesCommentLine@1000 : Record 44;
      SalesCommentSheet@1001 : Page 67;
    BEGIN
      TESTFIELD("Document No.");
      TESTFIELD("Line No.");
      SalesCommentLine.SETRANGE("Document Type","Document Type");
      SalesCommentLine.SETRANGE("No.","Document No.");
      SalesCommentLine.SETRANGE("Document Line No.","Line No.");
      SalesCommentSheet.SETTABLEVIEW(SalesCommentLine);
      SalesCommentSheet.RUNMODAL;
    END;

    PROCEDURE SetDefaultQuantity@62();
    BEGIN
      GetSalesSetup;
      IF SalesSetup."Default Quantity to Ship" = SalesSetup."Default Quantity to Ship"::Blank THEN BEGIN
        IF ("Document Type" = "Document Type"::Order) OR ("Document Type" = "Document Type"::Quote) THEN BEGIN
          "Qty. to Ship" := 0;
          "Qty. to Ship (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
        IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
          "Return Qty. to Receive" := 0;
          "Return Qty. to Receive (Base)" := 0;
          "Qty. to Invoice" := 0;
          "Qty. to Invoice (Base)" := 0;
        END;
      END;
    END;

    LOCAL PROCEDURE SetReserveWithoutPurchasingCode@118();
    BEGIN
      GetItem;
      IF Item.Reserve = Item.Reserve::Optional THEN BEGIN
        GetSalesHeader;
        Reserve := SalesHeader.Reserve;
      END ELSE
        Reserve := Item.Reserve;
    END;

    PROCEDURE UpdatePrePaymentAmounts@64();
    VAR
      ShipmentLine@1000 : Record 111;
      SalesOrderLine@1001 : Record 37;
      SalesOrderHeader@1002 : Record 36;
    BEGIN
      IF ("Document Type" <> "Document Type"::Invoice) OR ("Prepayment %" = 0) THEN
        EXIT;

      IF NOT ShipmentLine.GET("Shipment No.","Shipment Line No.") THEN BEGIN
        "Prepmt Amt to Deduct" := 0;
        "Prepmt VAT Diff. to Deduct" := 0;
      END ELSE BEGIN
        IF SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,ShipmentLine."Order No.",ShipmentLine."Order Line No.") THEN BEGIN
          IF ("Prepayment %" = 100) AND (Quantity <> SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced") THEN
            "Prepmt Amt to Deduct" := "Line Amount"
          ELSE
            "Prepmt Amt to Deduct" :=
              ROUND((SalesOrderLine."Prepmt. Amt. Inv." - SalesOrderLine."Prepmt Amt Deducted") *
                Quantity / (SalesOrderLine.Quantity - SalesOrderLine."Quantity Invoiced"),Currency."Amount Rounding Precision");
          "Prepmt VAT Diff. to Deduct" := "Prepayment VAT Difference" - "Prepmt VAT Diff. Deducted";
          SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order,SalesOrderLine."Document No.");
        END ELSE BEGIN
          "Prepmt Amt to Deduct" := 0;
          "Prepmt VAT Diff. to Deduct" := 0;
        END;
      END;

      GetSalesHeader;
      SalesHeader.TESTFIELD("Prices Including VAT",SalesOrderHeader."Prices Including VAT");
      IF SalesHeader."Prices Including VAT" THEN BEGIN
        "Prepmt. Amt. Incl. VAT" := "Prepmt Amt to Deduct";
        "Prepayment Amount" :=
          ROUND(
            "Prepmt Amt to Deduct" / (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
      END ELSE BEGIN
        "Prepmt. Amt. Incl. VAT" :=
          ROUND(
            "Prepmt Amt to Deduct" * (1 + ("Prepayment VAT %" / 100)),
            Currency."Amount Rounding Precision");
        "Prepayment Amount" := "Prepmt Amt to Deduct";
      END;
      "Prepmt. Line Amount" := "Prepmt Amt to Deduct";
      "Prepmt. Amt. Inv." := "Prepmt. Line Amount";
      "Prepmt. VAT Base Amt." := "Prepayment Amount";
      "Prepmt. Amount Inv. Incl. VAT" := "Prepmt. Amt. Incl. VAT";
      "Prepmt Amt Deducted" := 0;
    END;

    PROCEDURE ZeroAmountLine@65(QtyType@1000 : 'General,Invoicing,Shipping') : Boolean;
    BEGIN
      IF Type = Type::" " THEN
        EXIT(TRUE);
      IF Quantity = 0 THEN
        EXIT(TRUE);
      IF "Unit Price" = 0 THEN
        EXIT(TRUE);
      IF QtyType = QtyType::Invoicing THEN
        IF "Qty. to Invoice" = 0 THEN
          EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE FilterLinesWithItemToPlan@69(VAR Item@1000 : Record 27;DocumentType@1001 : Option);
    BEGIN
      RESET;
      SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Drop Shipment","Location Code","Shipment Date");
      SETRANGE("Document Type",DocumentType);
      SETRANGE(Type,Type::Item);
      SETRANGE("No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Drop Shipment",Item.GETFILTER("Drop Shipment Filter"));
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Outstanding Qty. (Base)",'<>0');
    END;

    PROCEDURE FindLinesWithItemToPlan@66(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      EXIT(FIND('-'));
    END;

    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record 27;DocumentType@1001 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      EXIT(NOT ISEMPTY);
    END;

    LOCAL PROCEDURE DateFormularZero@73(VAR DateFormularValue@1001 : DateFormula;CalledByFieldNo@1002 : Integer;CalledByFieldCaption@1003 : Text[250]);
    VAR
      DateFormularZero@1000 : DateFormula;
    BEGIN
      EVALUATE(DateFormularZero,'<0D>');
      IF (DateFormularValue <> DateFormularZero) AND (CalledByFieldNo = CurrFieldNo) THEN
        ERROR(Text051,CalledByFieldCaption,FIELDCAPTION("Drop Shipment"));
      EVALUATE(DateFormularValue,'<0D>');
    END;

    LOCAL PROCEDURE InitQtyToAsm@76();
    BEGIN
      IF NOT IsAsmToOrderAllowed THEN BEGIN
        "Qty. to Assemble to Order" := 0;
        "Qty. to Asm. to Order (Base)" := 0;
        EXIT;
      END;

      IF ((xRec."Qty. to Asm. to Order (Base)" = 0) AND IsAsmToOrderRequired AND ("Qty. Shipped (Base)" = 0)) OR
         ((xRec."Qty. to Asm. to Order (Base)" <> 0) AND
          (xRec."Qty. to Asm. to Order (Base)" = xRec."Quantity (Base)")) OR
         ("Qty. to Asm. to Order (Base)" > "Quantity (Base)")
      THEN BEGIN
        "Qty. to Assemble to Order" := Quantity;
        "Qty. to Asm. to Order (Base)" := "Quantity (Base)";
      END;
    END;

    PROCEDURE AsmToOrderExists@72(VAR AsmHeader@1000 : Record 900) : Boolean;
    VAR
      ATOLink@1001 : Record 904;
    BEGIN
      IF NOT ATOLink.AsmExistsForSalesLine(Rec) THEN
        EXIT(FALSE);
      EXIT(AsmHeader.GET(ATOLink."Assembly Document Type",ATOLink."Assembly Document No."));
    END;

    PROCEDURE FullQtyIsForAsmToOrder@74() : Boolean;
    BEGIN
      IF "Qty. to Asm. to Order (Base)" = 0 THEN
        EXIT(FALSE);
      EXIT("Quantity (Base)" = "Qty. to Asm. to Order (Base)");
    END;

    LOCAL PROCEDURE FullReservedQtyIsForAsmToOrder@75() : Boolean;
    BEGIN
      IF "Qty. to Asm. to Order (Base)" = 0 THEN
        EXIT(FALSE);
      CALCFIELDS("Reserved Qty. (Base)");
      EXIT("Reserved Qty. (Base)" = "Qty. to Asm. to Order (Base)");
    END;

    PROCEDURE QtyBaseOnATO@86() : Decimal;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF AsmToOrderExists(AsmHeader) THEN
        EXIT(AsmHeader."Quantity (Base)");
      EXIT(0);
    END;

    PROCEDURE QtyAsmRemainingBaseOnATO@90() : Decimal;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF AsmToOrderExists(AsmHeader) THEN
        EXIT(AsmHeader."Remaining Quantity (Base)");
      EXIT(0);
    END;

    PROCEDURE QtyToAsmBaseOnATO@88() : Decimal;
    VAR
      AsmHeader@1000 : Record 900;
    BEGIN
      IF AsmToOrderExists(AsmHeader) THEN
        EXIT(AsmHeader."Quantity to Assemble (Base)");
      EXIT(0);
    END;

    PROCEDURE IsAsmToOrderAllowed@77() : Boolean;
    BEGIN
      IF NOT ("Document Type" IN ["Document Type"::Quote,"Document Type"::"Blanket Order","Document Type"::Order]) THEN
        EXIT(FALSE);
      IF Quantity < 0 THEN
        EXIT(FALSE);
      IF Type <> Type::Item THEN
        EXIT(FALSE);
      IF "No." = '' THEN
        EXIT(FALSE);
      IF "Drop Shipment" OR "Special Order" THEN
        EXIT(FALSE);
      EXIT(TRUE)
    END;

    PROCEDURE IsAsmToOrderRequired@81() : Boolean;
    BEGIN
      IF (Type <> Type::Item) OR ("No." = '') THEN
        EXIT(FALSE);
      GetItem;
      IF GetSKU THEN
        EXIT(SKU."Assembly Policy" = SKU."Assembly Policy"::"Assemble-to-Order");
      EXIT(Item."Assembly Policy" = Item."Assembly Policy"::"Assemble-to-Order");
    END;

    PROCEDURE CheckAsmToOrder@85(AsmHeader@1001 : Record 900);
    BEGIN
      TESTFIELD("Qty. to Assemble to Order",AsmHeader.Quantity);
      TESTFIELD("Document Type",AsmHeader."Document Type");
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.",AsmHeader."Item No.");
      TESTFIELD("Location Code",AsmHeader."Location Code");
      TESTFIELD("Unit of Measure Code",AsmHeader."Unit of Measure Code");
      TESTFIELD("Variant Code",AsmHeader."Variant Code");
      TESTFIELD("Shipment Date",AsmHeader."Due Date");
      IF "Document Type" = "Document Type"::Order THEN BEGIN
        AsmHeader.CALCFIELDS("Reserved Qty. (Base)");
        AsmHeader.TESTFIELD("Reserved Qty. (Base)",AsmHeader."Remaining Quantity (Base)");
      END;
      TESTFIELD("Qty. to Asm. to Order (Base)",AsmHeader."Quantity (Base)");
      IF "Outstanding Qty. (Base)" < AsmHeader."Remaining Quantity (Base)" THEN
        AsmHeader.FIELDERROR("Remaining Quantity (Base)",STRSUBSTNO(Text045,AsmHeader."Remaining Quantity (Base)"));
    END;

    LOCAL PROCEDURE ShowAsmToOrder@79();
    VAR
      ATOLink@1000 : Record 904;
    BEGIN
      ATOLink.ShowAsm(Rec);
    END;

    PROCEDURE ShowAsmToOrderLines@80();
    VAR
      ATOLink@1000 : Record 904;
    BEGIN
      ATOLink.ShowAsmToOrderLines(Rec);
    END;

    PROCEDURE FindOpenATOEntry@96(LotNo@1003 : Code[20];SerialNo@1004 : Code[20]) : Integer;
    VAR
      PostedATOLink@1002 : Record 914;
      ItemLedgEntry@1001 : Record 32;
    BEGIN
      TESTFIELD("Document Type","Document Type"::Order);
      IF PostedATOLink.FindLinksFromSalesLine(Rec) THEN
        REPEAT
          ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Posted Assembly");
          ItemLedgEntry.SETRANGE("Document No.",PostedATOLink."Assembly Document No.");
          ItemLedgEntry.SETRANGE("Document Line No.",0);
          ItemLedgEntry.SETRANGE("Serial No.",SerialNo);
          ItemLedgEntry.SETRANGE("Lot No.",LotNo);
          ItemLedgEntry.SETRANGE(Open,TRUE);
          IF ItemLedgEntry.FINDFIRST THEN
            EXIT(ItemLedgEntry."Entry No.");
        UNTIL PostedATOLink.NEXT = 0;
    END;

    PROCEDURE RollUpAsmCost@83();
    BEGIN
      ATOLink.RollUpCost(Rec);
    END;

    PROCEDURE RollupAsmPrice@84();
    BEGIN
      GetSalesHeader;
      ATOLink.RollUpPrice(SalesHeader,Rec);
    END;

    LOCAL PROCEDURE UpdateICPartner@78();
    VAR
      ICPartner@1000 : Record 413;
      ItemCrossReference@1001 : Record 5717;
    BEGIN
      IF SalesHeader."Send IC Document" AND
         (SalesHeader."IC Direction" = SalesHeader."IC Direction"::Outgoing) AND
         (SalesHeader."Bill-to IC Partner Code" <> '')
      THEN
        CASE Type OF
          Type::" ",Type::"Charge (Item)":
            BEGIN
              "IC Partner Ref. Type" := Type;
              "IC Partner Reference" := "No.";
            END;
          Type::"G/L Account":
            BEGIN
              "IC Partner Ref. Type" := Type;
              "IC Partner Reference" := GLAcc."Default IC Partner G/L Acc. No";
            END;
          Type::Item:
            BEGIN
              IF SalesHeader."Sell-to IC Partner Code" <> '' THEN
                ICPartner.GET(SalesHeader."Sell-to IC Partner Code")
              ELSE
                ICPartner.GET(SalesHeader."Bill-to IC Partner Code");
              CASE ICPartner."Outbound Sales Item No. Type" OF
                ICPartner."Outbound Sales Item No. Type"::"Common Item No.":
                  VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Common Item No.");
                ICPartner."Outbound Sales Item No. Type"::"Internal No.",
                ICPartner."Outbound Sales Item No. Type"::"Cross Reference":
                  BEGIN
                    IF ICPartner."Outbound Sales Item No. Type" = ICPartner."Outbound Sales Item No. Type"::"Internal No." THEN
                      VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::Item)
                    ELSE
                      VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Cross Reference");
                    ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Customer);
                    ItemCrossReference.SETRANGE("Cross-Reference Type No.","Sell-to Customer No.");
                    ItemCrossReference.SETRANGE("Item No.","No.");
                    ItemCrossReference.SETRANGE("Variant Code","Variant Code");
                    ItemCrossReference.SETRANGE("Unit of Measure","Unit of Measure Code");
                    IF ItemCrossReference.FINDFIRST THEN
                      "IC Partner Reference" := ItemCrossReference."Cross-Reference No."
                    ELSE
                      "IC Partner Reference" := "No.";
                  END;
              END;
            END;
          Type::"Fixed Asset":
            BEGIN
              "IC Partner Ref. Type" := "IC Partner Ref. Type"::" ";
              "IC Partner Reference" := '';
            END;
          Type::Resource:
            BEGIN
              Resource.GET("No.");
              "IC Partner Ref. Type" := "IC Partner Ref. Type"::"G/L Account";
              "IC Partner Reference" := Resource."IC Partner Purch. G/L Acc. No.";
            END;
        END;
    END;

    PROCEDURE OutstandingInvoiceAmountFromShipment@12(SellToCustomerNo@1000 : Code[20]) : Decimal;
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      SalesLine.SETCURRENTKEY("Document Type","Sell-to Customer No.","Shipment No.");
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Sell-to Customer No.",SellToCustomerNo);
      SalesLine.SETFILTER("Shipment No.",'<>%1','');
      SalesLine.CALCSUMS("Outstanding Amount (LCY)");
      EXIT(SalesLine."Outstanding Amount (LCY)");
    END;

    LOCAL PROCEDURE CheckShipmentRelation@94();
    VAR
      SalesShptLine@1001 : Record 111;
    BEGIN
      SalesShptLine.GET("Shipment No.","Shipment Line No.");
      IF (Quantity * SalesShptLine."Qty. Shipped Not Invoiced") < 0 THEN
        FIELDERROR("Qty. to Invoice",Text057);
      IF ABS(Quantity) > ABS(SalesShptLine."Qty. Shipped Not Invoiced") THEN
        ERROR(Text058,SalesShptLine."Document No.");
    END;

    LOCAL PROCEDURE CheckRetRcptRelation@95();
    VAR
      ReturnRcptLine@1000 : Record 6661;
    BEGIN
      ReturnRcptLine.GET("Return Receipt No.","Return Receipt Line No.");
      IF (Quantity * (ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced")) < 0 THEN
        FIELDERROR("Qty. to Invoice",Text059);
      IF ABS(Quantity) > ABS(ReturnRcptLine.Quantity - ReturnRcptLine."Quantity Invoiced") THEN
        ERROR(Text060,ReturnRcptLine."Document No.");
    END;

    LOCAL PROCEDURE VerifyItemLineDim@87();
    BEGIN
      IF IsShippedReceivedItemDimChanged THEN
        ConfirmShippedReceivedItemDimChange;
    END;

    PROCEDURE IsShippedReceivedItemDimChanged@113() : Boolean;
    BEGIN
      EXIT(("Dimension Set ID" <> xRec."Dimension Set ID") AND (Type = Type::Item) AND
        (("Qty. Shipped Not Invoiced" <> 0) OR ("Return Rcd. Not Invd." <> 0)));
    END;

    PROCEDURE ConfirmShippedReceivedItemDimChange@114() : Boolean;
    BEGIN
      IF NOT CONFIRM(Text053,TRUE,TABLECAPTION) THEN
        ERROR(Text054);

      EXIT(TRUE);
    END;

    PROCEDURE InitType@91();
    BEGIN
      IF "Document No." <> '' THEN BEGIN
        SalesHeader.GET("Document Type","Document No.");
        IF (SalesHeader.Status = SalesHeader.Status::Released) AND
           (xRec.Type IN [xRec.Type::Item,xRec.Type::"Fixed Asset"])
        THEN
          Type := Type::" "
        ELSE
          Type := xRec.Type;
      END;
    END;

    LOCAL PROCEDURE CheckWMS@98();
    BEGIN
      IF CurrFieldNo <> 0 THEN
        CheckLocationOnWMS;
    END;

    PROCEDURE CheckLocationOnWMS@101();
    VAR
      DialogText@1001 : Text;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        DialogText := Text035;
        IF "Quantity (Base)" <> 0 THEN
          CASE "Document Type" OF
            "Document Type"::Invoice:
              IF "Shipment No." = '' THEN
                IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Shipment"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                END;
            "Document Type"::"Credit Memo":
              IF "Return Receipt No." = '' THEN
                IF Location.GET("Location Code") AND Location."Directed Put-away and Pick" THEN BEGIN
                  DialogText += Location.GetRequirementText(Location.FIELDNO("Require Receive"));
                  ERROR(Text016,DialogText,FIELDCAPTION("Line No."),"Line No.");
                END;
          END;
      END;
    END;

    PROCEDURE IsServiceItem@68() : Boolean;
    BEGIN
      IF Type <> Type::Item THEN
        EXIT(FALSE);
      IF "No." = '' THEN
        EXIT(FALSE);
      GetItem;
      EXIT(Item.Type = Item.Type::Service);
    END;

    LOCAL PROCEDURE ValidateReturnReasonCode@99(CallingFieldNo@1000 : Integer);
    BEGIN
      IF CallingFieldNo = 0 THEN
        EXIT;
      IF "Return Reason Code" = '' THEN
        UpdateUnitPrice(CallingFieldNo);

      IF ReturnReason.GET("Return Reason Code") THEN BEGIN
        IF (CallingFieldNo <> FIELDNO("Location Code")) AND (ReturnReason."Default Location Code" <> '') THEN
          VALIDATE("Location Code",ReturnReason."Default Location Code");
        IF ReturnReason."Inventory Value Zero" THEN
          VALIDATE("Unit Cost (LCY)",0)
        ELSE
          IF "Unit Price" = 0 THEN
            UpdateUnitPrice(CallingFieldNo);
      END;
    END;

    PROCEDURE HasTypeToFillMandatotyFields@103() : Boolean;
    BEGIN
      EXIT(Type <> Type::" ");
    END;

    PROCEDURE GetDeferralAmount@104() DeferralAmount : Decimal;
    BEGIN
      IF "VAT Base Amount" <> 0 THEN
        DeferralAmount := "VAT Base Amount"
      ELSE
        DeferralAmount := "Line Amount" - "Inv. Discount Amount";
    END;

    LOCAL PROCEDURE UpdateDeferralAmounts@105();
    VAR
      AdjustStartDate@1000 : Boolean;
    BEGIN
      GetSalesHeader;
      DeferralPostDate := SalesHeader."Posting Date";
      AdjustStartDate := TRUE;
      IF "Document Type" = "Document Type"::"Return Order" THEN BEGIN
        IF "Returns Deferral Start Date" = 0D THEN
          "Returns Deferral Start Date" := SalesHeader."Posting Date";
        DeferralPostDate := "Returns Deferral Start Date";
        AdjustStartDate := FALSE;
      END;

      DeferralUtilities.RemoveOrSetDeferralSchedule(
        "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
        "Document Type","Document No.","Line No.",
        GetDeferralAmount,DeferralPostDate,Description,SalesHeader."Currency Code",AdjustStartDate);
    END;

    PROCEDURE ShowDeferrals@106(PostingDate@1000 : Date;CurrencyCode@1001 : Code[10]) : Boolean;
    BEGIN
      EXIT(DeferralUtilities.OpenLineScheduleEdit(
          "Deferral Code",DeferralUtilities.GetSalesDeferralDocType,'','',
          "Document Type","Document No.","Line No.",
          GetDeferralAmount,PostingDate,Description,CurrencyCode));
    END;

    LOCAL PROCEDURE InitHeaderDefaults@107(SalesHeader@1000 : Record 36);
    BEGIN
      IF SalesHeader."Document Type" = SalesHeader."Document Type"::Quote THEN BEGIN
        IF (SalesHeader."Sell-to Customer No." = '') AND
           (SalesHeader."Sell-to Customer Template Code" = '')
        THEN
          ERROR(
            Text031,
            SalesHeader.FIELDCAPTION("Sell-to Customer No."),
            SalesHeader.FIELDCAPTION("Sell-to Customer Template Code"));
        IF (SalesHeader."Bill-to Customer No." = '') AND
           (SalesHeader."Bill-to Customer Template Code" = '')
        THEN
          ERROR(
            Text031,
            SalesHeader.FIELDCAPTION("Bill-to Customer No."),
            SalesHeader.FIELDCAPTION("Bill-to Customer Template Code"));
      END ELSE
        SalesHeader.TESTFIELD("Sell-to Customer No.");

      "Sell-to Customer No." := SalesHeader."Sell-to Customer No.";
      "Currency Code" := SalesHeader."Currency Code";
      IF NOT IsServiceItem THEN
        "Location Code" := SalesHeader."Location Code";
      "Customer Price Group" := SalesHeader."Customer Price Group";
      "Customer Disc. Group" := SalesHeader."Customer Disc. Group";
      "Allow Line Disc." := SalesHeader."Allow Line Disc.";
      "Transaction Type" := SalesHeader."Transaction Type";
      "Transport Method" := SalesHeader."Transport Method";
      "Bill-to Customer No." := SalesHeader."Bill-to Customer No.";
      "Gen. Bus. Posting Group" := SalesHeader."Gen. Bus. Posting Group";
      "VAT Bus. Posting Group" := SalesHeader."VAT Bus. Posting Group";
      "Exit Point" := SalesHeader."Exit Point";
      Area := SalesHeader.Area;
      "Transaction Specification" := SalesHeader."Transaction Specification";
      "Tax Area Code" := SalesHeader."Tax Area Code";
      "Tax Liable" := SalesHeader."Tax Liable";
      IF NOT "System-Created Entry" AND ("Document Type" = "Document Type"::Order) AND (Type <> Type::" ") THEN
        "Prepayment %" := SalesHeader."Prepayment %";
      "Prepayment Tax Area Code" := SalesHeader."Tax Area Code";
      "Prepayment Tax Liable" := SalesHeader."Tax Liable";
      "Responsibility Center" := SalesHeader."Responsibility Center";

      "Shipping Agent Code" := SalesHeader."Shipping Agent Code";
      "Shipping Agent Service Code" := SalesHeader."Shipping Agent Service Code";
      "Outbound Whse. Handling Time" := SalesHeader."Outbound Whse. Handling Time";
      "Shipping Time" := SalesHeader."Shipping Time";
    END;

    LOCAL PROCEDURE InitDeferralCode@108();
    BEGIN
      IF "Document Type" IN
         ["Document Type"::Order,"Document Type"::Invoice,"Document Type"::"Credit Memo","Document Type"::"Return Order"]
      THEN
        CASE Type OF
          Type::"G/L Account":
            VALIDATE("Deferral Code",GLAcc."Default Deferral Template Code");
          Type::Item:
            VALIDATE("Deferral Code",Item."Default Deferral Template Code");
          Type::Resource:
            VALIDATE("Deferral Code",Res."Default Deferral Template Code");
        END;
    END;

    PROCEDURE DefaultDeferralCode@109();
    BEGIN
      CASE Type OF
        Type::"G/L Account":
          BEGIN
            GLAcc.GET("No.");
            InitDeferralCode;
          END;
        Type::Item:
          BEGIN
            GetItem;
            InitDeferralCode;
          END;
        Type::Resource:
          BEGIN
            Res.GET("No.");
            InitDeferralCode;
          END;
      END;
    END;

    PROCEDURE IsCreditDocType@110() : Boolean;
    BEGIN
      EXIT("Document Type" IN ["Document Type"::"Return Order","Document Type"::"Credit Memo"]);
    END;

    LOCAL PROCEDURE IsFullyInvoiced@124() : Boolean;
    BEGIN
      EXIT(("Qty. Shipped Not Invd. (Base)" = 0) AND ("Qty. Shipped (Base)" = "Quantity (Base)"))
    END;

    LOCAL PROCEDURE CleanDropShipmentFields@112();
    BEGIN
      IF ("Purch. Order Line No." <> 0) AND IsFullyInvoiced THEN
        IF CleanPurchaseLineDropShipmentFields THEN BEGIN
          "Purchase Order No." := '';
          "Purch. Order Line No." := 0;
        END;
    END;

    LOCAL PROCEDURE CleanSpecialOrderFieldsAndCheckAssocPurchOrder@125();
    BEGIN
      IF ("Special Order Purch. Line No." <> 0) AND IsFullyInvoiced THEN
        IF CleanPurchaseLineSpecialOrderFields THEN BEGIN
          "Special Order Purchase No." := '';
          "Special Order Purch. Line No." := 0;
        END;
      CheckAssocPurchOrder('');
    END;

    LOCAL PROCEDURE CleanPurchaseLineDropShipmentFields@155() : Boolean;
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      IF PurchaseLine.GET(PurchaseLine."Document Type"::Order,"Purchase Order No.","Purch. Order Line No.") THEN BEGIN
        IF PurchaseLine."Qty. Received (Base)" < "Qty. Shipped (Base)" THEN
          EXIT(FALSE);

        PurchaseLine."Sales Order No." := '';
        PurchaseLine."Sales Order Line No." := 0;
        PurchaseLine.MODIFY;
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CleanPurchaseLineSpecialOrderFields@119() : Boolean;
    VAR
      PurchaseLine@1000 : Record 39;
    BEGIN
      IF PurchaseLine.GET(PurchaseLine."Document Type"::Order,"Special Order Purchase No.","Special Order Purch. Line No.") THEN BEGIN
        IF PurchaseLine."Qty. Received (Base)" < "Qty. Shipped (Base)" THEN
          EXIT(FALSE);

        PurchaseLine."Special Order" := FALSE;
        PurchaseLine."Special Order Sales No." := '';
        PurchaseLine."Special Order Sales Line No." := 0;
        PurchaseLine.MODIFY;
      END;

      EXIT(TRUE);
    END;

    PROCEDURE InsertFreightLine@121(VAR FreightAmount@1000 : Decimal);
    VAR
      SalesLine@1001 : Record 37;
    BEGIN
      IF FreightAmount <= 0 THEN BEGIN
        FreightAmount := 0;
        EXIT;
      END;

      SalesSetup.GET;
      SalesSetup.TESTFIELD("Freight G/L Acc. No.");

      TESTFIELD("Document Type");
      TESTFIELD("Document No.");

      SalesLine.SETRANGE("Document Type","Document Type");
      SalesLine.SETRANGE("Document No.","Document No.");

      SalesLine.SETRANGE(Type,SalesLine.Type::"G/L Account");
      SalesLine.SETRANGE("No.",SalesSetup."Freight G/L Acc. No.");
      IF SalesLine.FINDFIRST THEN BEGIN
        SalesLine.VALIDATE(Quantity,1);
        SalesLine.VALIDATE("Unit Price",FreightAmount);
        SalesLine.MODIFY;
      END ELSE BEGIN
        SalesLine.SETRANGE(Type);
        SalesLine.SETRANGE("No.");
        IF SalesLine.FINDLAST THEN;
        SalesLine."Line No." += 10000;

        SalesLine.INIT;
        SalesLine.VALIDATE(Type,SalesLine.Type::"G/L Account");
        SalesLine.VALIDATE("No.",SalesSetup."Freight G/L Acc. No.");
        SalesLine.VALIDATE(Description,FreightLineDescriptionTxt);
        SalesLine.VALIDATE(Quantity,1);
        SalesLine.VALIDATE("Unit Price",FreightAmount);
        SalesLine.INSERT;
      END;
    END;

    LOCAL PROCEDURE CalcTotalAmtToAssign@152(TotalQtyToAssign@1000 : Decimal) TotalAmtToAssign : Decimal;
    BEGIN
      TotalAmtToAssign := ("Line Amount" - "Inv. Discount Amount") * TotalQtyToAssign / Quantity;
      IF SalesHeader."Prices Including VAT" THEN
        TotalAmtToAssign := TotalAmtToAssign / (1 + "VAT %" / 100) - "VAT Difference";

      TotalAmtToAssign := ROUND(TotalAmtToAssign,Currency."Amount Rounding Precision");
    END;

    LOCAL PROCEDURE UpdateLineDiscPct@189();
    VAR
      LineDiscountPct@1000 : Decimal;
    BEGIN
      IF ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") <> 0 THEN BEGIN
        LineDiscountPct := ROUND(
            "Line Discount Amount" / ROUND(Quantity * "Unit Price",Currency."Amount Rounding Precision") * 100,
            0.00001);
        IF NOT (LineDiscountPct IN [0..100]) THEN
          ERROR(LineDiscountPctErr);
        "Line Discount %" := LineDiscountPct;
      END ELSE
        "Line Discount %" := 0;
    END;

    LOCAL PROCEDURE UpdateBaseAmounts@173(NewAmount@1000 : Decimal;NewAmountIncludingVAT@1001 : Decimal;NewVATBaseAmount@1002 : Decimal);
    BEGIN
      Amount := NewAmount;
      "Amount Including VAT" := NewAmountIncludingVAT;
      "VAT Base Amount" := NewVATBaseAmount;
      IF NOT SalesHeader."Prices Including VAT" AND (Amount > 0) AND (Amount < "Prepmt. Line Amount") THEN
        "Prepmt. Line Amount" := Amount;
      IF SalesHeader."Prices Including VAT" AND ("Amount Including VAT" > 0) AND ("Amount Including VAT" < "Prepmt. Line Amount") THEN
        "Prepmt. Line Amount" := "Amount Including VAT";
    END;

    PROCEDURE "***TOPAS_Func***"@1140001();
    BEGIN
    END;

    PROCEDURE AktualisiereKalkulation@1140002();
    VAR
      LandedCostPreis@1000000000 : Decimal;
      DCTemp@1000000001 : Decimal;
    BEGIN
      // -008.4
      IF Type = Type::Item THEN BEGIN
        GetItem;
        LandedCostPreis := "DC-Preis (EKW)" + "DC-Preis (EKW)" * "Handlingskosten %" / 100 + "DC-Preis (EKW)" * Item."Zollsatz %" / 100;
        IF "VK-Preis (EKW)" = 0 THEN
         "Profit %" := 0
        ELSE
          "Profit %" := (1 - LandedCostPreis / "VK-Preis (EKW)") * 100;
        {
        IF "Profit %" < Item."Mindestdeckungsbeitrag %" THEN
          MESSAGE ('Mindestdeckungsbeitrag % %1 bei Artikel %2 ist mit %3 unterschritten.',
            Artikel."Mindestdeckungsbeitrag %", Artikel."Nr.", "DB %");
        }
      END;
      // +008.4
    END;

    BEGIN
    {
      Lfd.Nr. Version   Datum       User  Beschreibung
      ===========================================================================
      1       TOP1.00   20.10.16    UB    TOPAS Felder angelegt
      2       TOP1.00   24.10.16    ST    TOPAS Programmierung bernommen
      3       TOP1.00   11.05.17    ST    Feld "Cross-Reference No." von Code 20 auf 40 erh”ht
      4       TOP1.00   02.06.17    ST    "Requested Delivery Date" OnValidate Zusatz, UpdateUnitPrice Žnderung, GetUnitCost Žnderung
      5       TOP1.00   15.06.17    ST    Hinweisfenster zum Unterschreiten des Arbeitsdatums deaktiviert
      6       TOP1.01   21.11.17    ST    TOPAS Funktionen Gen_Service_DC, Gen_Service_VK und FindMSRP in CU 50008 bertragen, FindSalesPrice in CU 50006,
                                          PrfeRahmenauftrag in CU 50007
      7       TOP1.02   19.03.19    ST    DC-Preis Berechnungs„nderung bzgl. neuer AudioCodes Preislisten Optionen
      8       TOP1.03   15.10.19    ST    Quotedaten werden nun mit W„hrungscode gefhrt
    }
    END.
  }
}

